:g=u
.lQ"
[9<=
aCiQO
2fG	
6+p_
k(,$Z@3?R;
*\&4
U%.&{
{4c4
_x~J
mJ=%
L@N88
%%fy
<1"*gg
DCd\
VYYE
 ;ugM*
''O4c
Fd_60
UKN\
4U;X
ibvlXB
bYjG
tQpx
]XC_e
5,711T
szTM0
B8Md
	Th6
vnr 
L^|;
g["R
M:d<G
NEThDw
Zw18
J,P 
pd$B
=i.%
]3>K
0;z)	
QXNF\}
2OBba
-<gq
]7ma\
xaN<
Vaoa
dHjW_
'p]S
&eWo
oi?m3e
(!l:Ls
):d7
!Teie
wZ,*
vALox
}}%|
=?x~
.UTG5
^d5bhZ:
Iq,;/
lR^Q
cYPe
R"ek
^PF}
I_LM
@y26
Jc>Jn}
5\.W=z
ncMc
OPlG
2^UI@
%u{&'
?8Te}	
l3YR
~`az
!l>e
Jp1p&
"0+X
}RjQ
shOF+j
qKg@hW	|
_"YR:
<+1gj
];2ww
'0D-
X"CIRz;a
$nDfO
x)zC
%!0O
T<VQ
zA,G
7U:mQ
]H 1
^6E"
jp2E
xzvyD
gN{*A
IfUlX
Qi`2f
Q TS
n^p1
.ykou
I#a|
"@>W
-\Li
J) ^9
B,?5gg!?2
[.O48
$?-	
 {^K
.fF-
YT9a
+G7u
m1uwmt
pnG:K
I'Cj
a'bNH
Q:}jL
*vnM
Fa4}
8VCk
aZ%8
M?3?c
ejn#=}
`_v.
M($v
rWe;
 ]//
X+iQ:&cy9
wFvj
20*.
m	zS
Bq{,>
Mf@p
KMC_
1cE.
Z\n&0
sNbU
@1rK
<\d/
wIG`ZIf
	b%cO
5TjU
?9@|)s
RvRf*-
gl]8a
v1vp>>
eXsH,
m;@$
py;9H
SJ411
1QFU
Ts/s
,O9U
oZE^
hw1d
m` z
6a~!
F2E}n
[%/"
qu=g
O]h?
1v1v
.7aeu
L`h8_
|K|'
l7r!
\jR;
3Ogdcz
ff6u
J`)ge4
I,XW+-
:r*S
uC? _
&J,O
wZF]
:(TKn>T
;0b|
7)Ty
`:	b
'r|N
Z)F,qC
h'A}
1T<5||j
S0'oV
4 C\
m57%
X4cu)/Q|
qyBWo
@GoI
wdtM
T+~E
&9cXZSvF
gvZ?
C_=t
XFM9
]ny<
DiD\
:<"cT
4blz
CG+H
"/wi&r3
saue
iAS<
#2RO
#}vJ
!2+mg
Bg;Z$l
HS*/
oK+B
%[|#A
+Dg%
c+Yrx9s
`C2FT
}3hc
Y7X!
oFBl
J<t#
xAuv6
<*c~h
3I<&
@xVi
vhMwhC6
R]QV
im)R
]deqeS
XFO]z
@Z=vN
?W_	
UT7hv
v<s5
7^\;
s>T+
8"E+CEE =
|umx
CQEP
B	G|
wd|-
uop'QA
=qa5x
o{{5.H*&i
S.fu
#g}R 
GEbo(
tNRGk
Q'2a
!}wS
rY6q
Z/*\X
/[)UE
@%WZ
?At{L	
jb* 
SaB_
l}f6]]
>gUpjz
I.[v
J5i<
nM.:J
2	9V
v!;	
.OxM
j=x0Smg
\'`O
V]	i
*\d;
 m{`'
 })>
6";.
#<om
9y49
;]Am2
n$lY
/aQx
snOd
#xU'<u
"hl3
XUTk
6PM0s%+
uoY8
LtSw_#b]
U'd*
q80@
,Yhe
DM@gh
"+CL
[@+hU
>,tCwn
6\?$
!B e
)Aav
PByO
YxId
V4sL8
yK"w
CA~x
V$~30A
Q7=GL
h*!0
^*q~
.669P
?	{V&o;
J"a|0
ma+)
3r*I
vf}4
%X/(c
Q+}o
W	dCq
!$U4
"1oLF
 {bw=
lF4ci
rJL_
b?<9
kjTM
C"p#
zYTy
bSj'
4hG|
6i5@U
mqZ_o!
mPjo
:}=$?0
/zcM
?JgB
M1LhSB
K|q<cs
yYcu<B
w<hG9:
e S&
fQt=
UzS7
LfJb
r5<$
y[?:
XM<k
=)1@7
Q(S8`
:a<h"
E*Y?
sctU
Q[3$m
 `X7CKC
.0!G
Sa=g
i`n& 
<^w,b
6iKW:q[-^
Hq%g3W
Pqw{&{n#
h3Iq
zO|$BBU
)-30q(
DPpQ3{AkJm!
2a;GM
%,#G
8^!P
\QS7
k -tF
k}.MY
66{HT
\[/%j
]&S7
Ae]Qu
{p[x
7]'vhT~
eONW
.:N*
CyWB
GUD*
G6	@
du)!80A
\]zu
3^Z[
w lI
is$D,
)bYT
tG`H
 |=+
lQcG
/<5a
w82>N
IHuX
Fciw
w*M|
?}7@
Uvf=
or;8S
~P2J
Tc.{
/QdS
7F(*EX
UD's
fcN-
Av'2
^Y2R
uItI-
_|He
ONwN;
E#0"]l
"v9X
9XnVN
%#)YxJ
N(+Z
DV(6
9<OD
tffq
F:P_
8I!*
8H	x
M@0~
s1]HF6	
q/(,adZp
+jof
/3dd
u9`K
I<	c''
PuZ^t
@>u~D
}}t>:
n*mE
:(kC
ot94M
mG(fI
yh4_
n`o%&V[
f5fS>
zbwr
Xd\C
Lgnq*
H6["
Y+zt
p3Y^
d=w!
Uf=K
HvId
6t/@~ZU
7-[.Z
qT\#
tK/Z2
]%[orB
JG`X
I>lo
g!^h
 !	*
b8J3
&#BoF
{IAE
KN-q=
Q\n0
jS|7
#][HeO
)w8j
-OV(b
3o:S
=7V9X
2njl
{:K!
/u74
\i+6
dIXC3]!06
d>?]
;&-H
U3bR
{	S.
O$0t5
<.-R
}P@o
e#^B
e6x4
H,o<b
#hA_!S6
xrU*F
^3y|
"gfs
JReyQ
^qS>
tR#\
djZ]
n/p$
>75g
70{X
RNs|Y{
zO"-
W'ojr
|QvhD
>-< ;KS
r<7`
Y:)K
ec,r
rA]C
$<VG
/:'u)
h,F}
V]|3
Z5qg
o96Ln
K%qX
JZ6sm
R1G5
UFju
Fd>{
{UIq
V?)D
~29$
W#V9)
Vhy"
~f2V7
,L@,
r0a[
KX;&_+
_6QT
HYmq
b,9R
+w3Wv}
H?kz
<a1B
//4?
$^B:
_me#
Har+
D:8i
}3X 
39-^
|VqH`'|
-.Wm=
lM4Y
|p=8U8
b{2"m6
v3	z
-SI)
,dpk
-)WO
egVO
(5{1
??	Aj
E}6=m
uDnV"
(UtK$
:ai>
5>	@
	u2&
mpVA
*^FCx>
[,9,P
Ty*N	
^jnm5B9
t`ps
)gq@
w1$>
$+<)
l)eJ
ty; $
	k{H
}04F
QK^5
[_*,
.vf%.N
LI~`Fr*Q
dCoCF
X5`~
A76 
5oZ.`
zpX@
}%G~
I?u&]q
.a,wL
ueq{
c;#y
L1rE!
4Q.A
i}MA
jQ(p
I'<a
$xpG
bN=.
*%CB
2Y`K
a^vrN
>N)^
sZ5$&
DlSWu
k/Wv
Z t]S:
:dEh
'TT;k
8t0;U
mD,Mj
x)uE
{`G?
qW+G
f<2D HC
o{]Og
OF2UV
I0:a
& e11
QSh+
+@=u2
6=> 
h!;Li E
|?8/
Re0u
kGsh
;y;I
G;Xg
!d>@
By7.
Q5*:
pF3v
6'g\VC
]Wahy
}@Q?k
$kGe
=z&	
mOT5
s],)XS
PG+s
rx%U
+B`/D)
`,O?*]
]+Kn
9\gz
4]^w
/m'<
Oz6a;
59$Bp
VMl`
Z!91HC
Q>AgT
@WFoe
V9jh
YXUu
a\xj
SgX6
taFz
F#dIe
]LM?W
y|%RI
j~qc
}B2w
7N9)
]!ky
y7]h
Qb[(X
4$"0}
,}EJ
Xw/+@%z
]q -
QoXt
4ZqI
[QAst1E
ikjR7
Ov9Nz?
k/j7
qp"{(
'BlU0W
IOR{qe
-l,6
yM~$
4}1Z
[~eCF
KW!#
t~gOny
SDA*
W>Xh
iGrzb
lvKnpfg3O
@k8(
m16M%
2hgXu8
Q&^=
g>TS(
a	:eC$8I
X'+.
?Gs?
|lQC
7eUz
(BzC
-E >N
LY\5
z^	Sz
_-r5
o+GEC
nZ@(
8K/d
#g|S
:2i[
VRi{N
tYb-
T=4N-
 h>Bw[*
Ow6*
oZmr
"	VR
(7:o>m
("_2
^'OC
p;U/v
9K^%
BL.ff
E8G|
Az$>
=rbK
qKX]I
>1w^
$3i}v_
tp0f
d(TU
;lO	
;0\#
Q@\4
/)xR
w8v|
zVul
:ru)
*s|c! 
R:gj
yfmk'
uGa+
;BrB
?3~lIM
{1Fn6
pN[nm
1g}Z`
?1/:T
m;u,
7py&|"
`7Zt
JRl[=
z1<D
FwI>
8y.s%
Cs4&
@A#u
:b-q
`xd^i
*v!\~
o{u0
mR@a
>J:a
+4Y!
Y=%V
Mxt@;O{A=a
2/ew
us;8
D^sq%K1
+0|y
@C34
I(GL
`T7\
a]WC&p
kIs=
~\TN7
`b\Km
xtx\
?F/uR
`\E;
f@oC
NXJTCF
|Gl3
Px4`^5c b
)vZB
o"I(
4g9K
KIRs
?/HR
Mqt!
/Fi\^
HIaQ(6
FADg
oGfR<
]1;x
1yD-
Ov&H
1|DOH*
m4)k
_*6I
~6wH\T
M(Jv
<,J'
,\u"
xws*T
WL$!1
sc%Hf
SqTI
W/WM
w@~V:/
Qp$"
Z=l.F
FX=$)
NE"EE
rkcd
Jls&1$
0:2V
6>JPI
LtoO
cre_
V8`T
wj]O
\uY=
SD>@=z
Oi?q
LYFc
2!1T
L$xZ
CWb:
5G}d
"#kH0
v,Wn
Sx=]
u7+%
ecfU
kE#)v
In7;8	
pX@My
`P'{E%&q
HQz<
BsP3
5[(3
`bz5?
`Z8L
PXg=e
iC,t
\\tc^
 zU+
vWH;
HO*`
m'L0U
@ \s
p8ws
31I2Cr
u{LsK
Z'AE
IFG#
6D"3C
\m4FC:
nWYAw
6nX,
7%-u
!2VwC
uXYC
)Hi>
*Co7^xbB
c%F	
 Xh#
$$[w
Yb	! 
;@_(
zRjIBi~6M
B\X;
 }Ri
W5}'
1DzU
GWb;e
y0rX
Kob?
<n[d|y
S@Xx6]J
O;i(x
6}yY
4V)c
	DXf
C%lU
\I&s;
Q<u@
W(?g
xGJqL
sM:	
=EL0
\'A-%
H0%@
iWV)
S\\^
S* *_
O(#M	[
7kt(F
[Kq*
rP;n'
XSwD
d1^H/g
dI7%L
GT[3
E]FW
h*1z
pC/v3lH
.xhT
Busk957
.0)`
}[v+z@[
D!8#
]XDTF
8vFr
;I44C$
zV;M
8AZu
9<Yy
!\P#
?ept'
w{SE
53lN v
_&qIC
6#hl
:jJUW
oi1T
XDMV
*gN,
Ms p
F?7u
I.S=
=H*&
*faf
,.NIV
^wD`
*Q3y
l]ha
iI-EE+/
*a#>
yH~.9
oTvl
	V8	>K.
.8:p+
GIv!
T)0&
: YNR
%5+ 
82`E
3<(f
[W`"
-x34
SKFM
A;t$)
buY<
@</7
y-"y
gadk
!:	"
lVDw
Tt_YH
zg/GD
.eca
Wf^.
exeF
v];{8
foK..
Zir{
;[03}
!M~'
;%zot
a "pz
W!}rsQ`
.I3B@RF[
y`/#aH
u	;6
q=W`]n
a1)4
NuUo"
]"o:_e
N]+0(
uX'L[
wcGIv
}'+5
<c :
7R)Y
A"Et
vuas
>p0N
hD;`
%i*Kk
x4\r
85Zj
G?u]
h(au
PemF
-m|U
j6%: 
K<j|^
u.kI|
Ga^,L
	7w;
_^i>
gj'oZ
)%CXn
*@7K
(g^?8
-|O,
f@eO
337D
no>P
0rp\>
U^;m
yQ6g
D6`b
1O}L
aGS+`w
D-PL
q>*22k
mmQ	@>dek
.*Er
{)M'"
	?h/
4"Nk
=@ U
}Mq"
.`N2Y
8m~D@
=sJf
^]e'
ghTf
km)Fq
,`m(
t9^Hi
bz0kx
r<8E
4Q +m
(\+;$
0"qS
ZIPt3
CFV!
NHyz
5`T:W
u;Re
7*L7
~/%u
{mgt
92r|
%v W'
cK6/
u{oeM
qkgJ
!	5O
XBCl
,7\D
`*`z'_
*G=N
Kb:%
Q1wo
o-N.s&
2Uc#
_2/a
`;k2
(9jDR|
Fapq
o(k#v
^[w7|
9euE~
v(`u
4Tgzb
>u/2
!GC(
FVF{NK
e~A-p
,CD4
+5F6^m
#if_HC
sHux
>j<o	3
aJ:g
Ih=)^
&8-+
O%{N
(!c6
8OVk
4VJ)
F&p8
	8 J
ir5r
`J7F
16b|
EF}r
4QP:
e_I/n
Y04>);Y?
"RH_C
f)xe
b3 (J
YJJe
wC10
.RM3@M9
XH/jw
-=eS
UaKB>
9cNt
RaZj6g
(u[X
<:3`G
^ hK
-W;l
IVL:
eZ*t%
C,[px
Mw3n
xY9-
^M4'
FIzb
N.$3P@
t^{]/
9*=Z
 Yp	
So&6$
k*;^
eh?Y	
\ac<
~^K"qd
U"mJ
+q$XV
\5VU
G=>Fr
 #i<
{)'+
|8-B
Xa5q
IT]Q}
Q]+$+
Xr	d
OnyQ
\p.K
k#x?
7y@r
Ts>9
TTlN
+De>
o!WlO
7o\}
a)tX4
z"-kV
){`Z
QU;rC
-5`Y
WvR,
Xssk
u:QF\|
c}W"
*N2!qg~
^fg6
j,-)
<<2xf
ihkW
vu=*
!}'{
/q9$
WAE5
"	rY`8
o.cr
\{v.
!l#L3
;;MbnFJ
xc_}o
az:x
Z4!$
.u:C
Bn.Q
jU{?
1KfR
%rK*
<(\Ix
b_mq?
C	{y
](&b
A:WPb
P{QG
T;,YN:
{`7xK
sx*Vg
0J:v
s_bA
!>7*3
|,=58
>ILh
Pnl={
LTf(
Y;Jy
G`^_
8'DD
7l7&Mr&
d/~?-
H9vQ
afAa
![`_
A}X}
\v^q
$3LU
c)3Q
*0oe
H4!a
*2j<OA
,*/v
2g_d
}J86
	G'S
ZDi5
`<=d
*ge2
5*6@
E^HI5
dj0-
,}%zD
x)U/~x
!I@T
7vQl
VjGoJ
;"^=
+	>+OV
X(qBHB
~k>'
X%3]F
]31-
4lgJA
;%/:
,>L+
*H<w
9c-M
XgsJ*
}q*c/
/xN[
aowF
FiX	
&=K'
`m!3
R~%!W
YUaY
;>M	
y@*`
g8$s
()kw
kId 
WPSGu
9e>e
r.2/
g9bo
]LDZ"
	j>;
n'"[$
O{&jX
>EU-
%r{A
uy:ieZ
!F~VD
m.so/
V;LR
U$2G
pN&*
l#!Wu=
KN1a}
X3	f
w[L@y% 
k}80
T+e]/
^$>@
l}%d9
8tDy
=tdW
xg6B
XHvE19>(
iGYK
u~$k
<SF>
SaP(
GPc_
Rf#l
GnY=
+ 'pej
	4M'
^[H/
^cF8
acB6
Y\B-n
OKR8
T]~\
Z)'{
 'BE~
8y(/
H<TW
wth&
d^:n
GPmA
_E~Z?
jm.~
o1= p
78q&
={zq
z6?$
bp)1by
oRJn
c{j0
veIw-j
*iz4
GP]p
{$v58
5O'#
m>q7v
7L>%
Z(@M
}c{{
0svy
Y{b*
x"GJ
DR^-
jBu 
qceY
$U??
Ue<x
 oz:
h~?S
n1}6
(C{wj
U,.u
YWmE
6D0:
_O ,
af]-
ri~!)v
VVbl
-f<R[
UcRN
EZt'
#L2v
I;W`
5*@_
tL#W
^ox=Y
8okT
v{T8|
3gt4
VXiD
4}s S][
Hak/z#
U)p.a
xPB|
hP }
N*z:
j^H\
"4P>
{u&U @
`vQs
O|N	
X3[M
7T_k1
E*xA
#C1v
G`HEqoU1V
uL-)
AaGW&
`sW:
@$C`
=\?7D
3Bq 
(2*sW^
^/\c
uUHy
pk-$
!S#%
IiXo
IR;PC
rSY\
E	En
&-<9L
@qK>f/
obf5
o	yI
cM9pW
vVK%
@^zS
m*3#R~f
8 EM 
SH.*;
Rcq+
8ty(
!~xE
d[!.
cxrk
70G*
HIDS`
Zmsc
X:4N
zPdz
ZAk;
LRo_6
JSrc
eKu2
5&Y*f
3Vi'j
%0}M
!>"w
8h~e|
|\SIh
)ea5
jE&yy5
2ms{
.E|7
<W$(
:mbeC
Xhpsb!
Vnp [v
B,UO
^+!>
^9`Nq@C
4eS3
qo;@
 Qep
wpj-
X&hU
75v}
6\g=
j ~'
|G=q
"#nR
l6R\Z
Rv'xM
b(*<d	m.5{
"!c~
81Ti
WrH1
O%Id
+R;b
L6Fa
vBOe<{P2LU
vUKl
vez}
Tzg5,
CbWm
\`j`
QS8x
f&uK
C%L9
YO nm
BPGN
!<zM
i>T$
rlF$dG
>X^;
F\dL
KmP%
hNzv
oXAVp
'0]m
a'`e
)ZX[0l
vN2va
/z@(
QAS_
&]:d
By-J
c>b6)
-@0 
FLWb
q]dU
;H\G
a.'jD
,b9p
I8ujU
tHlH
#x&{
/Ks0
*/rh
v:r9 I
pOMIxv
1V=n2'b/#36
!u)={
A6["%
{FkM
H$C]
u&Jpv
H@?./
Y)"P
dfLe
T}z"
VW-4
RB9@
Y*fTIr
^_kj
)6nMH?
_f+"y
>E>T
RB<q
@c\I
hT}xqq
1$"Nw5%
$g@{
/]m8
gz6&
N|?M
xFQ)m.b:
3U#X
("O?{h
t#;1
nsQ}
3(rA
fQIgaQ
^yI;
}n;/
~?]t4!J
)[HMQtY
2-M 
2?KH
|)n0Y]
Z`t^
')ei+l
, =U
 Ny!2
]Q,qd
Zt>D
YuZj
	24PL
O|Nf
 7mC_
+=k$
,QnpW
aObq*
gCTq
l]_6
TzBQ
0F1#[
ki.aC
UKkb
OR.#
Gr{D
u!9z
.dAy=r
Ef\W:N
Dgxd x
x_Ab
s<8o
~{X1#
{.h#
[n8;
"fk5(
&#O=3ms`
b%Oo
PL!M
%g	e
txa 
2g?A
R,hG9
rx#*u
Q>}h
:3bk
$7Jj
fA_;
	!R.
j]T,
FSg+B
rQ[1
jG<|
_ppa
	EWs
9'$[cG
Ovg5q /
YvvT
	$pc
6bg"z
Jt+F
fQpv
9xXQz
F&5@N
$?jC
 c[mn
QY J9
5/3b
kE!i
!J>^
nkj|)T
"xm$
Qyc3}
FuvsT
zQiu
40E4
vC82\7
bJ"&
ZaC@
ESqw
\9=n
6ZUJc
fLp,
.^c`3
.(<8N
<7)E
xD!QSU
Ws#W7k
>uw\
{)(=(
f+QMl
Kqt0
e0S*v7
3+\[
&_Y_
_f%2B
G6_'
_q6*
w<K1
%`A^
<^r8
C+JUt
PGIvY;
{j}*
2Wih
%W67
+ujE
IEJYk[
'p}`
BQjHO
S=m.
"d[t|l
F(,\3]
ggHK
Vz7cW
C\B|
Y`` 2
Y;dX@)
Gx{W
?]ze
$=ceG
MRF_`j
 8>]
n0bY
y,#W
A143
3Jk5
a`sK
gVGQ
rei^fR
fs4D
k#SQ
LokMp
4^r#<
%v1o
r]=j
 n~D
Fb?{
T\mF
kXsb
kmb#
c?zOd
\v?G
trTju!
.x_s
'V%"
BNN]I
u,`6
<xC)s
IOf<
&th8X-
Q%Ga
HvkN
'Zv#
=&?zx
hmPM
'mc&d
G|s}D
EI7Cl29z
EGy 
sRr8
4usf
lVhS{
${Han
zMp$.
fcTk
by.{
\P5e
0:yA
$=[0
&5qwrQ
w1ZR
mJAA
)5_7
B1Aq
RcwjQ
A%rg
F	<k
Y:"W_j
1' bPYM
LTWC
;Usl
5}nc
FlP	
$+tl&
e>gM
X4q\m
`Nfx
2=jg;
,Q|l
x7g>
+E!E
h-Pw)xM
kZOU`
R#h|&NR
<C[~(
Hb<IUD
[,&z&N
^Iyi8
4yeY2
7X`*$
4_L:Wh
w(m\<
is8evx
2CBq
E?&'s
3Z)/
}{`dK
GwlU
^7~xC
5.)<
EDe|
C10I
%8jW
',0/
4]($
z`U8
eX*ay
(>u2Y
ZL2Q[
5	4Y
^KJ3
Go)r
 p7e
+@/v
X\Qx
"";Lf
f4,9
P:0#
*|&(W0
z_V5
?MP 
3LiG
&R#^Yd
}Xt8j
huVc9
O}=9
T3#b}
Q2DCo3
%n[4
(`N8
 ll9)V{u%UP
DP[t
{R94
	ePV
<Ho;
5!*H#
=+fk
V]|e
U(Jy
wJm=
?t5\`CY
l ,w{
VQ>e
,6zs
Ny  
|:}V
b.W|<
W>wd
aD1v
4s}H
Q411
004_
`Yf;
T4%~8
LJ9U
{zk0
%^WN
\lXUs
wS8<
ef!g
xk0~e
(Xt#`
17w_+
SiB2
-OATy
ZDW_
wN~x0!
o]3k=
FH'fH
,JY_
q<@O
Wel#
aAKe
tB2q
Gl.Oy
?F,u
bIc"
Q)pq
jg,Z
ga.kL
-7R<l
=Py).
=n~I
6}.=
s;<s
#m8?
BDDI
RHzyA
ef/6QG
	n3=n
[TK=]5
.63'
N#bL
U(&H
~s7)
z\N/L
'P^:
8\6Q
4fQPZ6	
WSr"-
iy.#
a]6?
pS\ 
\}0hl
V(GN19
IO)>
RTJv
*Fm	u	-
v?SD
xrO:n
D]i+c4
3%N5
c@4`9
:*54
[A]	
U.M3K
<"[@
G"D:&
7/8^d
QXxq
QcXZE
K2E*IDJH
^yDW
0IZm5
3(GkH
tT6S]AL
,LK,
]]'l
0xxqC
([XR
h8#Uw
k6x:
W]&r$'"[FE
6"t8
Z\ux
hq(p
_Vr%
e8V[
'K+K
NnU_
F@m9
F&`&m=y
0	nFF
&T)C
*Yu	
!~eO
W)>,TY
G6Hf
},d]u
KBjcm$
u;|3h
RHN?
l_yX
55dR~O
i;.i
[/;z'
o;BfKr
FP&$)
v#-	
qrq&
HQc*
287s
))I]
]C}1
?8yo
KcDP
F>8F!
]}!&!
a _P
Vec1
>WcW5
_x8V
jG #
&.Fob
w.CG
/>JH
>u@bc
LO9q&`
'L[[
MN Ub
CL&EL
C_[~7[z
|tLd
l$6-
O'6F
!4,'
uyCGP
|S-){ix
4GGV
?`r%pl
{)FM=
(X>,
Q3<x
$=/FL
3@Yeb
dCCE
u?_x8)3V
#ngt
ZL{a8
aSVhy4
$&	v
_1[ r
KKAS
5)]J
_/{}PI
=Fj6
4M,#
\@V/7
8P24
P., 
D^iq
U@0k
Ecth<#
<R0^1
9oS30r
?=T-
.S c
KbCQ
t)R?4Kd
2%<2r
:yt@
D83$
hQ~{
:bjn
:t;/
k^Lx*
R"{a
>jDb
@JT^
4&7&0
5k#o
Cf4R
qMN.8
\:Cyf:M
^( )
xN<1
	43\/
{A/7zYS
a7S"
g!p1E
(Wc3
@\OR
qUqc;
zlFsLA
4.U1
<TGXk:
I%V"m
JM:.
}aKq
HtLY
Zltz
jd^Q
FZj2}
[ef	
fv#J
|Qf\
KW^Z
!YNf
t{>Y
_8M<
Sw;n
{BV00
5d6G
}!ose
u=UW
Jbu/
QAX!
0:tp
{mc3
l[-	
kE>(v
rn	2
^lY}
\"}3
A"/?
C&L}
sO$o
{l":m%0
U+Fu
4 p@TeC}>
Q67m
Y`a]w
^+a[
A|.?d7
u]i,
$f`1
%!a:R
05\k
]ty!
W{nA
#[`5
qH<]CC
qtdXh
b*<c
ph`)
x\f,q1p
Vgf_
"=y7
C8.p0
Tl;	
hO- 
[I)w
;W /6~
_V%;
ud|"l
-Hn%
	@F-W
o (sfRI
>@{A
w	IB
, > 
*wnw
^EE%
L,i#
\)/\
0}(ZzOb^$
Z2Jh
m2>e
F]!j
u/*F
*Nq)b
6[|9dp
b^2(
-+h(
y?ISh
_7!Z
7BVvk
!_(	y
mqF?
q,bas
@% x
qTmNZ
$$6jG&t1
4(8^
"(#~T
X6ST
R2vz
VWG"
/DFP
:-; ^
:J:uMd9
w.~4
NyrJ
KlpV`\
< V.<
}B1>^
? m=
.18@;Vi3:
fy4*
cE;;
=PDs
e6W'5
u[S;ymu
24k 
KJMHr
qfNv=
0ko.N
)slMq
V1<`$
^aV@;
W?2C
IG.>q
;?ni
:dPm
%	Y+V
:M=n
{/}	
q^KtC
 |o*
5".8
r3Dtx8
fz~	'
[4BG
9[LaA
K9o"t
(f2Z
kl7z`
sI:%
D";;
Fic|
eF4t
SkUe#
}v!X
!;@Tqbo
z&X?1(^
:SMW
rK2)\7D
.?hK
T%fbT
&>./5
H>LQM
	{#Y
3!z-
cT\Fh
gM9=
Ni_]Zp
p9!Vq+
><RIdc
rr[M
wZZ]
BR	n
(`>juF
}i~i
WX$+
#jegn
Cgyz
D,rV$
'iav
&;Di
<wjP\
eo80
|#<^
C3dL9
>bU6<
{^/D
e' g
}NE"
p0*n}
~2a}<
sFOx
n,kv
l-c%
SwE6$s
@	ux
Ud21
&xrS`
x93a
|*j<
U4W^
>;kM
dzw8
=_hB
T1L+
uRJ!tU
0qW";
([mE
X|__a
xZpA
+MB"#
3)WpZ
4O%m{
V2JVj
nQjCDl
2Yv}U
\H-	
[R[=-
{w],
XBr}6
E5%C
%vT!qc
 aR],
X}|Q
4<eh7
T|o/
n	W$X
}V9\
/f#L
O~kLL_B
pLt	
ca.j
dK	yhxL
	F@w`
2gr6
9uQ?
QNYB0
BmRNK
8}z\
Ay1I9r
5Kfq?L
!nuy7
/JsH
G	cx
	QUB4
9]Kvq
1aP"
qC{Y
q4Xi
(@&G
tB+4
>7 V
HiD!
Y&0K
"r6d
F14C
eS~S 
o$.B
Gt5E
8OQ+
W;Fv
5i"6.P
BH.PQ
LFL6
*b8.
]M6<
:,Btp
4@oB
ZzL]
Ky@c2pt;
A-U.
_Yx~5
{0IB
#2gr
W@)q}
dv[%
lK8OnO'n
@#.!
ObwOj
}sIqT
7{[E 
-2Og BjE
6Ra/
#W&^e
mn$g
 ,D[
$	[[7
#*]y
vk,l
H*2t
<P%,
u:2[
!E'Kv
ncRa
$``w
]j0(
J51MD
5\w4!
p9bw
'DVO
:-Q4Q
i%*d
:zUa
#Js7>
C8m-)
.+te
D.	-
qThA12P:
qH%2_'
f&xv0H
vFI{U/s
/IZ5XUe
F+pG
P;KU
~GGk
DCDv,
<7#$
h2y-
kDD;
P[8t
O	%_W
6zw1
Uzq6:
(u[RI
eGVk
J!kM^#
Nr4;
1YlM4
	BmO
aO5:
/\M8
8(`4
kq-hh
7#ucA
@3+C
EZJ<
OP`+N.[W
>o}-F
jy-1~
AF=A
@%uP
dg_v
CR,_
jdIbb
s:a<]t(l;
"~c1~M
yv9.
IUH9
'$2V
w	1V
x-X}
}ikM
g4D6O
fAY\$
Ddid
vs+ko
	`l~
tZ`q
)mdK
R+_w
e;=P?0
k|;U
+_Jj
w97q
Cbh+,
;dUK
su^n
+Y8B
SXk'
Sn_4%
bHn.
%ogMS
R%P{
^7:i
cM|-
m#/.
=Fy2)R
kh^'^
U'Va8
'tN#
70H>
1}/+;
b6u.7:
VLM 
HM:zD:l<4p
`FEgn@.
@"`9?`
N* Y>
bVBg\
F>(4
K:!.
g aXL
*/RJ9{_
;Ie 
f[+`#
Q;R)
RuC$
K&o{P
~>V|J;
+^YD
&Ct^n
wlN3
-I0q
Cm$<4
NSj|
xl6KU
(},BC
6;Ezj;
oc8s
>B<h
AS9m
Zoa@<
gWLY
F2 w3
Mx *0qn
:;UM
Fz'd
vUH*
eS]r
t3s0
	acv6
h,N[
moZX
%6Y1
nZY"L
zZqz
:7}.
6tPe
}(QX
[bx 
YV(`
znNh
`@	j
..g\#k
?#2X
:.5.
@:^A
Es\r
4ZOUO
5t&Ga[Y
sJt"
V|\51
w*xg
q$;S 
(lWY
$	Ev
"BZR
FW*e
;=u`
+:m@E
0||J
%>5,
JWzY
voPqR
ayM7
.TB\ z
,hy y!
zpZ1yXx:s
2mI	o_k`
J)-sP
`B[*
J&D-
')`M
)P+Z
Eqd:
ybt~
jb/t
YkS|E
##SH
jVy*0i
%*%4
J,[7
ckZ"!
v.B6
 ^.4e
?[<i
qTzx
pZfo
9ND(
['db
dL*&
`CeN
s/bv
GP?jN
k@0]|5
LOgR
4c|x
>~Ms
!@*9
Yvd)
_.&Ko
y;,E
U}+V
h/G$
\,:)
EwOU
^#pU>
xz]Ac
*{-+
-j''
f?$t
>"tF
APr//
yiw}r
o4wy
evVl
o}g*7
PYL07
?p(R;
5o8_U
U7pK
$WhJ
ldpEh
.B'D
Cw4N
w2C:A
WM<X
P4P\
}HD!
whH8
`%{v
Z!\ Ua
_tCB^
"B3v
~r@e
[)j"
)&.g
:pH2
D@&K
'. 7+
\^_b
1]4aL
K#\N
0)sT
pvqP
|+8x
N~L7
a{3&
G/x!A
1?qW
.4L9
QF"e
fwIA
Qjb+
bGx7
@dmo
7a8b
'=kt_3
k(J9
XF-:
`$ G
WK&`%_
$	IOs&Sg
^KWI
7b,M
|Fe5
d&3LE
5Au)
xk0@
S`g?
_}k)
s#L>yW
z7{/
?jG6
YMw/
>N@j;
kd=!
1ts,
bOg^-
1L'7
nyAH
.{Ky{
Pg0Fw
\)V{
lINw
T9XRn
 \@6
Kh_r
%SL%
QxiA5
-mf.t
%`w7P
jf3Z
H*Q^
vCR'WP
Zr+E
&$eX
@cOnO
*<):
ro|KR]
AcQp
ZZ],1
2C;.
Y"A5
[aAle
?\|Tt
L"Tb%
;7-1R
\`c9
$?wM
bZT 
={u0
7I?xQ
8W+H
{4";e
O]+A+d
:a2K.]
<IF/Cz
xOXE
h9gU:`
fz{2
KNrn]
oPpo
lWq*!5
R63F
ms[?
O[/8
'29S
IwYv
F+?{E'
j-6[
}Gr]
r]\^
(Y#^
?qxr.#X
SviS
~zNO<dG
SIoE
_ w'
Xj:i
aq_5
`bsW
6#R*#
|ylag
SX0wm3
:E(i
uDg#
Z#Tw
&RbR
OoV3X5M
r)_^
p[-P
/iOc
tm|'c
&.u@2o
UHRc
z{!B
bu'u
aB^(
]Qxe
J_x(0g
Yzfm
&J9(
5Zy-Y0U|'H
I3"e
eCmD
L}qGy
ar%:P 
t=iZm[
Mg!Z
Maw<"
:jdh
)'XZ
)jWth6l
sP+)
:t}J
o,nsgm
od0e
S}Yj
RVN~srqJ
2p.-
fh1N
1A$$[)D
H)n!|
)jze
s:iW
i=:$d
PaA!
&d\1P
PYg4b
w?p2FW
Hsmv
"3);
sVL?v@}F
g(@'
67\<
+:;?^-
|Ri^
Gw\&
nMye
yZj7
T][G
3 s5d
j'(8"_o
\K}su"
@cE45
Ta{b
j&u3
Gw}H
g:<yy
!rNP
T:d 
]8xY
0N|2
Kl]{
jcU1 
qwDo
V\<S
NO?=
HlaL
:KK>z
M!r:
rB2I8
fSO0
Ji|.#
]J<M
927%
oN!4]^0
*(no
dhY=z
h'iSw
+VDu
Z#c4
\6Q`!
3DreN
S/s,
'RtX
Uxx8
dR06
GCuN
Cvyk,
!d:GW#h}y
<\.@?u
bw\q
3@vIk
SF~D
Z_z5>
$J}c:
 /Z!U,
X4#[
ZmTd
M;bup
4	x8C
<*skK
;'.EO
g5>3
	?Lt($
]rQJ
SD.;
Bf/[
&h\v
o0#X_
\^:Q
4vom
ZOFa8S?
h7	j
<wPf
H5{i
	u(8wDw)
y`#:
josx
?,n-
 H-5
)$99
9 Lz
Ik!mm
{Pig
Hq-h
B`@^
Jq8.
1HvB
~pE!
P.)-Y
hL1tS7m
"u<<{
U6Y@.k
XI66
?ff(
	w7v
8WGb(C
'5XT
V	W@
o0GI
4m$A
okPo=
%c#vq
).t?Wn
q9=@
TJ>g!}
BHzq
poiG|
La}T
=X5p
?9Wf-
_a!|
T21'
7ut9
S a%
P`yo
;HFyiv
W=!O
x'vj
<V=kS
FI]i
Qt?9
tXKLy
Trn`
!*9:
OLQ%K
CPYy
rOI?
g.=_
tP+5
gA5j
|)!C
G r`
H(u!
sA5Y
	jb2
oY$g
,o3)
\D+(
UKlrO
0JY&
Q9_I
yf}p
/wa$
[V(o"
9_Bp$
Hd4<
^<j=
[*B{
hn3=
9"dG
(7(1
*$rn
6r@]]_
D2Bp
2BS8
AR0K
v*R?
`M'I
W](L
^H@P
%40G
oA6rP
m !a
QWv+O
V2Lc
~!t[
A$OX
(qH#:
:muT
v63'
5cfE
>16M
zhD#
DE$?^
^,V-
"rFX
vJ(k
V8Ta
\9o*
=6*}
(W@T
h]B&X}x
CNP!
9xZC
)#jTjw
-htZ
9]kSw
<-N/
pi1O
y!q<
6_ek
)j?LK~4
8A6&K?
P4'G
$>95
2U&K
b"6D
>q$Y
9-%]
%pKh
f]SU
Jc1n
GMCD
o}Qnpi
>:f9
l%[e`
[/0F
D;?J
7Av9
pg-K|6
n)j&D/
C@e7
IC_>
).@Gm!0
Xw@fuWV
/wK#
]{6i
_Ay7?
;$^i
dEK{
0+S:q
Y}c*L
kY"b
&HT&N
9L2Q
"r%V
<1'"
N"K+
|<kn
pCs{
mE9Lm3
oja'
vHFN
5ySJtZ!
VM|jGv
{L~<
k@M(8M
V)u#9
q4X*9
9b\u
_n89
bX*,
)iUV
 NDv
@>^h
M\i2
3edcj
"%<i
w6m|
>i@'
2xK<\
(Q@w
.hmAyd
($Od
HTL3
n%7T]cQ
e%mMJV
fMG]Z
gosV
0}h-Hm
JKW4
}oD*
z>Z/
+yO}I
cvhR
|hc 
e$SL
zjIH
}ubtR
U5fz
8SH%fV	
=-M+
9!|A
&L2h
<z5p
aOdE
heS:[~U
rc,C
Ld'b
Y@D	
AtI7_
SC!0
=@|3!
&m!q*
Uu{&e^
ZVU^
`A[\
<Ze8
OWALlK
27a>
_C[`[
m1X\
.,I<.
ap:G
/-(cD
cH{50[?nWk
cnf~
c	){
:EJuu]
#>}z
5Q{8
O6E2'
S5BO s
c?e2
EX=[7;
$tgny
V{~!
!Vyvr
k0{3
pCWE:
ePz>
:wDX
w1Mx|
`4P!
+frO
2k0iv
?1Ym
Wo{=
%qMmD)Y
9H-^y[[
ci5E%
{@rdOL
`FS4
IeFd+o
cqlM
o?+;
{_RY
l9*9
b8;G
n+F9
=-=yw
J9M:
S]6G
9chIJ
M,Xtj
'`;|2
_Qor
mr.7
m.Zi
x1BSj
`p~@
ljH7
ER	b
Em/Cp
8w`?!8
Dur-
_-$vs;
N;XS
Q9x@
"zH8;
B?Qs
S4l&
.er[H
.m[P\d
2	sj
p#}SL6
ZO16
f4zT_
nV	%
Xtk'
t{_3
S/?`
"Wc^(
&}a.
 `oq
KgH%
>JjC
+sr9k
j\xf
iIbmT+^
#\|z<
2c3w,
n:C\3
k]5\
P|A;
iZq?
qJxD&
OY=w
bnZ5
RTy/
,dC.
@U0C
=Ee0
E(cAc
vggS
9f	c#6sL
}Xl%
@mop
`V_R{d
p:hbRr
UF0?
cG_c
)?dx
h"	N-
{yh>p
LEo~!>
\<a%\
l@a\
$;O/
Aj*8
'a+ O
1fJitS
>;Dw.[
}{fdP6
g>a=
NW0Y
u0"*7
oJ{b
PVJn
p}}BN
YE.`
o/O< 
/}8UN
m}1M
u)w'[
4vSu
T$~;+$
5P&T
fC,E;
CZNl
!AJC
p!|m
gPub
%L'#
w;t.
QKAC
X0[V
f([qB4k
'@,w
/BQ$
kK"(
%D'N
etF)x
k	-N
@XwN]<
9%Yx-
Ld5'
N$_/
'HE|
Jz&y
 d#7
Fz:k
z8jS
iTRo
rkln
]:SJ}p0
=F= :
WF L
Dlg_
GKAw
.*/k
QshBH	
AJKT
o1P6QP
89Tiw
r][)
Ctw2-\
vYdD3
E5HV
\wp)
]VcV
1,-3
?l@K
$3[G0
dO,$3
SEh>0
C7+4
owRg;*
utTH
~ELa
NuRk
%{et
-9}}r
$:wdUx
Eqvf
2"<~
M])~
iC0!%
Opov
gr)Mf
]Wpc
L?|"
zV5?
	 @$$
qJ_T
xnf>
_aL8
G"W8
"+jT
x^hs
E*eT
s2Gu$
9\i4
Dl#X7
Hbb66^
3_~S
=9fN
WtM=
BiYe
5y{t
!.=\
;\Jh
Z)P2
Q|Od
;//84
 a,0{
-u	_p
cE7Md
_kk=W
-=?|
kbis
vVu9
;d<:
aV-2
'h2^
fz+H
D?(;`Sw
D^Xr=S
& +"
#>3PBc
9&"=!e
f*Gb[
|B7@
5s0%
,d&b
\%}:0
8e[U
RhHDx
m9e!
b5Wy
6QcG
]@3?
P6[>0
#G~Z
wfOs
5b+X&0
.7-@
r$gm
?J!A
0TMg
{ _6m
@d+;!\l
Vcv)}
|\^\
8w"e?q
k5"B
j/,d
 Q8,
w\p"
4RpD
&K@a
5ulB]N
"<C'
G8:i
dBY	>/
S 0'b
Rbaz	
v_I4
s-:""
.Ra'
uI%y
LS]~
)}*x
ti q
(hU_<
mV@y
%rB;RC
LSH#
< _}
[*MX
[1M@
5kGp&
i@k?
l`+P
M7oE
JD<~@
mWLSx
10b5
Rb^$
g3ve
 [2Rg
!:Q{]S#_hP
wgq98
/#S!
s{/Q
uX11+*I
n*9F
L-yL
dRIz%
SEyj
)GI[
,7~To
|s,o
(.pY
B"Lv%
`}QR
.Tj}0{
Er t&R
X0#.
~JO`
*LbgG
-	wg
/9/B
C^?mDm:
h\>U
G~4j
2|T=P_
^`jz
	tb4
Gl=/}P
_-aS:
Ay/O
*6'?!D#;
sU8V
)Q"Z
)40}
/jvE
_o66
[aMm
Wci>
`qE+J
6ER|^
nBaZ$Nn
^'em
m}SK
.p4R
xo_e
6M 5
g`[L
0b)e
R`.#
]0h'
>z|e9k
@M?l
,,(S
mxQS
S0P#
7EHx
~!	Kx
Z#fg8
ci, 
w*y)B
oRPS
_rv*9
F_Wj
'(N|g
#c$YjW
f>kV
.U"_
%"Se 
ox0`M"
6KPf
0{8mf
U/8t
4cE2
$P_RY
6N[E*
;N-3=
5$&i
;ixr
< E)g
<]=)
X;>-
V~gA4
ni#/
X;NBz
Xa5.M6j
Hwux
=BoV
E=xr_l
8_+@
~"gB
2dd0
2pw4
?!YcM
jlNW
$F1g
.)yT
d9oC
V/ZTb#
~CTB'B
O	X7
:5W\
tuUSV
={!Y
aBhd(
snn>
W2'7VW5
w9n"
qGSONj
=z[F[
+	Ce
PjJ7%wg
r)h5
 r A
%&O(
@(:B
,*_h
s/J_
!y<r_"N
^xuRC
	1i#v
Ql/C
	=7)
Cr.o
L5XCi
c9}.
HMRn
/tTA
8 [8_
o/sh
{OAt
t<`'
c/#	
a,Su
sK~Vs
<Fx-
P]{5K
*_	,
)t;n
mxMH
5Ik2
xK[n
P4@"
j`'8
6A#,
gkF:
^YUI
On0-;
``It
)'gj
N%2_n
W0 >
##^.
O'KS
,6+,
FNa-
"cau
ags8
Q!1b
!=h%!R
fgZYq
Y_iL
^v<)@e
O\80ut
EADZt
bmA(B9
hHub
H}.sD
R&tF
m0=Kt
sP~P%
'e.%G
~*@!
rr+WY)
#:sN
UI#\
i:.m
@0N[S
9fF2
dyQQ
D'?Q
3% _
qUgl
6Cze
-:lN
0R"*
v\_B
RX37#
nweS
I2gn
59(c
>.J,E
39&tF
l52m
xM>{
;4~F=
?#<n
HM<Vz!
gI_"F
u~OA6si
;c7:
o3O2xpb
Vm]I
%|s5
1c`2@
=F>DW
~?%Q
&yj9
U}q:a
pQJZ
JoP*lRY
O%	+
H2pL
p!3^@
\;?h
qAyb
\B='~uW|
II	qI6}
x]82
BYFBK
C|57T
n=;jBc
dTv7L
\5inz
l1|?(
wlF.!
8H:t
s]	g
WVOUN
[':B
/<1OQb
\h;;%
<\CzO
+n*@
f<ya
d%jxT
3_%;
D#EPgL
=iq#3
yO#T?
7$a$k
5qJGj/	8
=p9L
D3Xx
	bxYN
iBPX
>W@P
@=GW
6;;b{
@YKq
I)7OYu)
:H5+
qD8v
EUYb
HrOj
.6ev
n{s(J:
/rQA
|zh_
W0EQ
xWja
Sm\V
-Hy5
g913
H1.n
|$SRo
qSqu
etq{C
-%4^X
@R=y
,7K.
bl79
w/z0
PAJ'
N	*b
rNiy
$KaG
	X~ug
p4q{
S;I)
:h75o
G<Qf
S/)D
sddK
VlBR
p	b'	
O@Cz
x:k%U
}5h)AFi
4qb5x
;p<y8
lV7j
!2[z
862jX
S.V,
ntkq
	;)!L(
<xx?
;Q	o2]HQ
m!W<P
[ f_2
wn2$
YGdwF|
@N(n
xzId
1)MU
{kD0
rB?2+
*(YT~
ePPY
a=<?K
.j,*
uiOQ
Z?NK
$	DLD(
MH"a
?=|s}
f[_e
~_o3
G[co
hk=jfq
L^x/
473d
S)hk
f90W
JvFvP L2B
SOtm
uGF	
NuNoA
ltVV~
0j	3
l^6O
R]!	
RA8w
hnep
	}#n
FpPl5_
MeXq
x;=A
rW^+
5oEZ
i1e'
7?GZn
b<>O
#R/@
}pLh
oKz%
X.}O
`>O/
r_r[
\`6X 
wtxr
U}@I
"#HQ
N}j1
bQke
3a|8yv
wW9L
BDa#R
	Z!:
|"+S
?rA	=!
vH${
xl4O
etR;
bMH*K
z}gEY
T:9h
r+|5'?X
0dqm
n~:w
vkEt
U2/xN
[s8h
?<'7
/5.K
x8lh
<kJFM
U+#@
qE%w
7ZP6
*c~+
DVbmA
CGJQ
Zl4\
0k^P(eX
poiP
Ja:NG
)9(Z<
n4T[@
=W5v9%w
^V>H
,"[E|
_;BFaR&|
B!(O
zYf`
qU;F
T.1\
U.no
"c+ 3
\S<^
TG.b
1iF5t
KH3#
Y,`l
;yjE
HC'v
vvQn<
,K'u/
%e08
]!lJ)
Xj*^L
hy`*
jlx1
Zxc,
b[H.xa
]_+*
b)&I
p\LV
q+WP
A`MfA
ebDg
SoF/
4=lio
lppb
kZd!
PSrJ
}&n/
Jsg_\:
`'v^o
P_5x!
;`+f;*
"o\&S
Mg6&)t
BenZ
"&8?
='Us
;8b|Z
p/,U(
zi{sfWK
U#gL
{}V)
2Se'~	
|QTN
;l@d
0gVZ
&<<n;
-p[^
	/D~M
onGg
`O@^
9ga6
dqoQ
2^fz
TCKY<
''<I
w>iE3'H
/q-&
^l|c
;FsM0TK
[<|~
\5SzN
QzgW
?YhF/
Zb)t
wN_V
eQYm-?
2V|]
~9!W
UZ/P
HC	WG3
~2AB
@q8?
x\L5
K-AJ
c5vJ>
.N|U
|Xr2~
Yb$3
et6u
;T{[/
v6Iu
4}s) M
rsXAe|
#<G/?
{CUt.
B8U~4
?	h8]5
G^5n
~610QS
5W# 
R>o7
n/8i0
@]zQcF
dx "
8 0Q!
Hqz>
UD"Z-mH
.Z5m
`n7-
b-3`
,UNB
n*@j
|$8YI
JI/+
f>Qj=
ZzHu3?
s^Q#
IdahY
|!|N
m=LR
#cv(D
omq ]
91Nv
Kk21
$%WU
{=-8Y
STIY
^*T9
xz$`V}
Pe)[
U>`1VVM
u>VE;
l"uV
V}+T
Qcf<
Cc!X
\yoD%
&;1~
C_(*
Z}6e
,;bp
|umN{
XCS.<
"MM.h
?LVY5
uWY0
+hXm/
I;JW
Dsag
4Sn7
"qGh
70u)
X_ZJ
,-3I
(*[:^
FHV7
@c\l
eApk3el
w{{{^
u=L4
/!jn
m*ip
rO.k
qhK[
UDu:B
!-M0
az@9
\}Rw%	
DKnr
!9s{
kGud
bZ]i,yI
:L=$2
fDha
T-g2b
"{%K)
2y1D
s7('
$]V[L
D VWw'
V{/%4
Vu~~
#Pf5.>
#NU!
+{:R
_|f%
uewB
r+6/X::
\R#a
:%Hx
\~xmf
S8+\
m1\FQ
z!Q!
GYU.
e-Ns
ZD:dR
+~n4
!in(
bevI
Xaq}
BR*]U
wfA\
&N1@*"
5W<4c\:
f@Lt$
BQvL
EO2*
+Az9
bWrN
- /O
.:IFZBD
RNg-
kc3Aj
Yh-y
a,q5
TPwT
W`|E:'&
?\"]
f!L"
wb`{
`}T%H}
tl /
g>(&
,E1M
"SX'
$'5Y
n%WO
-4	:
A.w_
c|[t
9%9U
.9JiwF
jwS]
n+`1
W":c1
$$WV
mH#lt
LY}u
A-B{:
N q=x
?~G3
^|^,
jd{y
YI\#
*ODD
[5mx(
)L|B
"Lnl,
mC	C\
4?)jr
o%`M
.$r;\
[5NX
RbE3
oB!TZ
.J=Q7
 nAqi
vm*u.
2r(I
_hx^
VVv;F
dMWC
6Pau
,gYk
,jp]
gtWS
j;N-
Fz|O
P(jZw
apH-P
:SbK
VYsb#
ai-B
;'e=
c4BDBie-
s7v0
Xm%{
n!Ml
$|i1
KR%N
C=P6m
P4-W%
-/I_
8OQIl>/
?i{~
YQ(%dR
B)WE
HKTU!
QHzi
nSc[5
:{?Dz
>FS&
&4-v
fxxE
wJ*f
iYrC
.1xX
A4qw/8
bQ0[
?[4,$	x
9krs
}uO+$u>
ex*<
Pm!g
4UkS
';fTd
5S$V^
_MAO
0PdV`&
w];D
hn<;
W)Px
t (;
co /
<Vr'
[Bez
,oo(
gttJ
>|aQ
>hgv
"6:nl
dB\X
kHQ1_%
eeex,~{
$CK(
p4c}
!i]E
UH:B
tJdR
j2?HQpDs
sd_cz
K_odi
"vfU
`i&`
JZL&
+=5Bw
<DOv6
RAv?
;[1i
eT}	
%2U 
k# h
[ng)1p
:\wC
FszQ
|,ipxr
9-P~+
c>||
SORm!
r_Rn~
v]ZB
,Wo^
D\_t
[VRu
A)Mq
C*$,
!Tm!
ZFIk
R%v-q
gL"R
63SR
J'%V
5fDA[
\c'l
ryS?
xM`f
3+IFg
.h)+L*
P)@J[
qgYt
siD@
}X&(
vCp6
,gQN)
@3/(
=	+2
)#IM
rUJ9b
nG5*
6Z%[(
0mW]_
yD4W
3VpN
-a_$h
O"$$
| !,]$S0
GmpE,|`t
yFj}
:kS~
t>r_|
**=O
YJ~[5
]`/_a%
l]o 
!x?*!
d9yl
dyKg
rMr'
i(co
<W/@XF
lYaD
Ali!;
@-<G@tM
a6`3
VskC
1oId
Y#>$8y
]GBQ
UU<F
!Bk@iH
ltp8
Mo=:
Y&*ckhc
==ks
n(0	
Ud} _
	HB`Q4
0t$g/5
	h#|@u@
M(P~
0r/k
07gVC
|.dO
;N8'
OD'<
'Q.K)r
v<Ik
p0XObI+t
MVwO
x82[
fe`L+z
$iBq
u`dx
/L@:J
Iq^09}
fi<;
n0SM
Uf&\C
Rd7"{9y
2*[{o
:JY/
0] n+
>`6\
u4Mm
1Y9sf
;{2;;@.rWSA
f?I)
|KQZ=sI&n
FNQvo
#5#u
sSAW
>h'?
V0v1z/
5CR$
-K>]
:_"0E
@b>p
 d[q"
[*%Vp^
%og_
SzF8
TaiQ
Y4wv
t=F'
aA80
q%Gw
s$M?
54}Ch
Gc3v
e1\W
>X;CPT
et @
WlFi7b
YBLl
n+-e
k,'q
X9(zV
Wx T
ZEjH
!/ll
Lwr0A
LO#"
{_~vq^=
sv.go
sNp,
NizD
p>T,G(?
(8ya
y4)z
^'k6
@7/lU2@
B$]6
C*~A
.Qa0K
<,6ln-
kv'w92I
G(ce
#}\:
M(5W
PslI
SfgjP:
Gyfz
NCj^
zVq/L>E
p,?:
|jg@
LgrZ
9SQQ-
ILW_6bd
+Dhk
4S=L
4 (K
cK(UT
n1/a
{MO^
]@\)!+
`jflM
 V.B
&FTq
,68e,&W
@Jn"H%T
qgcQ
gnS=8
ud{T
/=dDi
Y^_"
6<Z7_
KHxh
^y;!x
0vzF
z_4eXz
8r`a/
<`H]
	Qg"
{d'~
L1R.
^s96
3vpP
]ri8t
/V"]
3aa#
Wiv,
AJ5}<
bmHMJV|
*A(K
8d.b
\2l\
{YUf
jiMY
rbcZ
1[(@.
*A>X
cTvm
BFu!
q}U 
cWsM&
uL0t
<y@?ZBB
D	+-
rdMM&
@b^N
Dz;v,1-
D<C/
UIt8
lwFX0
	>nC&
, !G
 N74H
0ZcR9
gfF2
0p!-
E{4c
V1l~
|OSM|
]L4$
 _m'
1*-9
UF8,
HiEtd
?+C3
KT|B:aR@
]@'oX
]}ck
<NGz%8
=B2=R
<ibj
d}/[
iO*a4*]
0/x/
qPChW
(xTs
8WQh
z^4h`
g6 7
nM+8
HY;:
$W7?
YOrf
Cx'@
%`B 
+o8U
ul&#
l:;Y
]2|H
~cn=3
e^:<Y
fbKcx
2"yjr=Jr
^wHG:
vUY^;Qc4*
dfp+
"aE%
t=3@
rc6q
UZ>A
EO1.
L"EV
?G)g
g	H)h
oN4Ae
vt~"
H9|p
t:1#
@2`|
!oY;
3TIJ
C'MW
(F0i
L#Vl}6
%m?U
%72	
c	N`
j\F(_
I7=e
\p;*APX9nz
;6zVt
~+:'d
bf]>
F((e
:%b5>]"
,N;^IY
#g0D
emQa
qZ<2ES
;}#qj
gq&K
Iz0S
H<(C
xrG8
IO>ZM
PId@4=
txwt
04}c
;.}O
#*sb
BJ}Q
2sk:
l^QWJ
?~xZ
j%rjC(
1^{u
TN#|
~=w	Ta
!S'7Q
UiLK
/'	Q
W4fI
BNxV
10ln
Yqy5
Q*D{
`lGmF
<f%v
;LFW
'mUu
33v}[AO
+_C/
E@p>0
.50ZA
$yd*
q1/R%
TX3e
B9*6
Xoh /<.
E5<8
rL%8
?zlc
M}oO
]0D1MP
y[Bx$
X7nPU
=Z?'
/VyT
r<6I
Kev!3
^Ihx'
M97s
owh 1
Hl[A
UxSBV
FD{D
~2c':
afY^,
u[0L
MLY1	
HX=65	
~REd
!Jtc
6%~ 
_:ew
:?:Zj
0|tB`
*D|ZxR
&7di*3Zs
N<I8
Leo)8]|u
c5"L
5jYZ
L3&t
g1RQ
L<Qe
d#)$(
Ctk6lpQ
6f"z
v$Yl
,omi
nGvQ
\abTB,g
UhjRX
19'l
4\gs
m` (
?9Xr
t:_=U=
UADA
<8Y5
 r&1
nmEG
w1(51
*N<zd"
.Wd-
$</WT
xKp=
r-UR
~~b0
[/']
4IzM
=~1}}
m4jT
A	Rh?
j'Yfrn
!ioP
d'R{
yf#{
~bv8
I"#/
aM~}f
\^YN+
zuV_
?;|X7
[;0k
;$7a
lBq'!
V5T,
W"u;
m{S?_
w!U(/$P
Sc0rK
+0O4
xS7h
>FTD?
8:ue
7zb'
`vP5
P)~ff
T"N3`
j+i!
hc3P
4dh'
7aDx
Mt0!$Q
,yZ!%
?F^1i
xXRO
z]li
9HeJ
uXOE
&9EBvwap=' 
CdE)J
4Q6C
|&?Q
Nes{D6
ze%_
_dcK~QCu
H2so
OZVc
?Q8J
WBtc
t\`tSZC
`al0"y
0x@j
o?c/
^w>E
;4d.*
rakrus
_Q 5
-iHrO
_UpF
ft{ 
jW9x+
m&nb-T&Te
k X_F
,^A+[-7
'R#-
ZYMH
wr@U
{^A1
`Wbg6
:A^@[
QO*:BL
KJ5Z
7gW1
}0wn=
)]FN:
!A,)
mMGNl.
g^RI
O1r!
j7xf
^6&6W
fQ;4
Nd=/0
}i[(
'Zon
J(_'
q\1?z
p"fR
 gp%
(@Fw/
5 8dv
K#bb
_(W[
O]]w
9qA]
fs<,NnQ
<#.FVn.
<Lc)
Au*Y
)^49
*pPu
N_F[
g"rd
iv/&3
JUA8
i(Vr
WY>.
by.e
3MY}{
C[_,
H5f,
2;t%~&
4V\M
%6eD
0!	N
J0TlsS3
BP(N
6O _-
a,Sm
\`;=j
loUt
E`]l
&*%H&v
LZEU
@- D
5`MJ
mN}B
}_0k
li	v
H6a3%{
-e2&'%
+*7@
qT}~
Jm#p
VdVr
A^\h
O^`d
+6C7
=X#}
'[Rvu4Z
oacB
rdjQ
`"6:9|*=
`@sq
D2`g
lz[`
]Z7m
}jJQx
AzVv
}I\f
dD~m
{EL=
ttY8
LJDA
wm&qh
NHB+
N}[u`9
1{z3
s?o<;)
Em@d\
ZE,|
Ra^a
dQG(
yXam
@GKmb9
OFGG2BgH
v"sT;(l
1ru"i
Wg5hf
>EQ$A
tb?0
6Rt_\
d@qJ
4%r1
b%||
Mlu{+
Mm'L
c}+.
Q_DQ
uF!"
f$ir:
8x)*
>kdSF
2|=j-
N"jA
T3:+M
6gC|
*E^K{
|f|{#5
f+g&
yh0u
yrO*#
ED[%kz
<i|M
S`_cZ
91\fPy
H3vsyIv
{2 M
8(7{
.s!7K
K2]]D2
67Fo
@(LC-b
\bv#
-B86
hiMtB
e2f	qL
90/s
=$Oq
%ST%\
~9o5
JIwI
SQv'
Tw!;
g~YK
88	H
O)^?
#^i*a
mm5@s
}_#L._
iN59
urU`"
3fnq2
xw,'
BnhAA~?
Ah4c
2<ys
pE0LPz&#
TI*L
$$Ic
G"H3
3.4z+L
mO-=g
p=Y(
Xz|Z
$HOZ
A@P2
0<?1
~kSR}
/@7Rr)
>XZ<
b#jtn9
+`x~
6nf|
tuX]o
71,j
&6m7
["?a
l|Jc
oUJ*
Q7Z\
XSs4
Ko:>D`
|O7_[6
[MaD
GDji
/[bN
{p`D
D\ns
RSS4
&l)&8
g<Bog
N "D
+vH(3
zu,G
hK{E
NQ4>/
ZaYh9
Ul??
SjC'
$Lm=TK
0o2+
)d]h
8t9Q
IJKL
eH\#H-
ZA$O
fWgZ
'x!v
-/7J{
[m~'
0&:9
66ac
4O1t
!M{>
7Adx
^KN|V!
y}IB
p~53;
~75&/
_g!@
w4N3B
n&2vGOB
+SZ2
C0<s
(aM2
m3[5(
68u.
Lb0w=
(nm^
la3v
	+OO
4Y32W
p?>IV
\w}RpPu
|{	qS
qL<0
$;Kl
a}rp
XR&4
shi9
#:-&A
[>ZU
d[~6
)9H&
UUu:
{?]G
%0!P
rh!;
q$N[gV
U\GU
i-/ 
Wd%;
:-8WU
/mo$
{"r\
:`IH
xYTw
,:`-
-j'f
1cOR
j0?u
n$dM?
w#m(
-2lr
Gf}	
I/rF
(*j0
s3qE
Q0wK
q~u8
qUzx
`D+D
^~B'
:fhZX
UX=7C
Bc:~0/8
%GbF+
q;XDn
wK}/
M/j 
Hh\@,
!V+-*
xv-^
?V?i
f lQ
^N}~
6gq;2\
-9*%8
#|pk-
<w%2
)#gs
Dj(4%
)?b|d5
n+f;
oIe#
ZAMe
;e53
IH!E
2~K{
a,cdG24
G7$`7
SH=i
Va`EHN
x*>D
aCpw
PU(Rp
e`<sA
Qpfa{
Q,f+
T/t/C
W5n_e
U^0e
H oMr
j?lpe
uhVe
!*-&
.e\vpN
7~PS
[j.G
O/ys
.=lW\
<!z	q*
.lF,
96H\
p)v;
k;+_j9d
AK7-
$]>V
5mGs
_f6K
%,ty
_/5V
t~6o
!\aE
#7nf(
C!$dW
6" C
_7u=
Jy]N2(
>G2n
3-OL
>%boFS
5]xwL
Ksk+
Je=^x
,-ha
\1n*@
fi<;
hHZ!37
PWP0"
lObl-K'c
'y1%
];v=
	0'f|
hZ;n
]iK}E
tI[0
h.OO
{lRcT
gBjg
HF/<
dQhi>]
_s;B$
~aJb
R7jN
lN/={
~IL@<
&%k(
yK:-zo
Q~7+
?sty
:rZo
OknpW
d0[} B
pg8|H
#09N
p/D	
0. "Z
*Dc9
0]BC6
m.`vh
(Hu^
1(;0
=+	z
BLMf?
vs0]
ywUii
S1yn"lzJ
1(7C
kv}'
,V<QRcK
3P4H)!;_V
K\32[R
%^(/
=p.[
oG'K
RH.J
WAy`
usY0
j+_Bg
jjPD\
jl9^
=ECCM
4t8G
h$eZ
]LcA
wDk"
#'+8
j\DX
&/m'
'zuI!
=:G$
|SQU7
)gL5y
G9s:j
.t 7
.irA
"$:zk
'mTT
P:SP|
b8Q+T
;oje
T.>?l
E{?U
_Vn>L
WP}'
M%//
mf}E
=}*L
7YP]
RNOTbO
m pM~
4SFOd
iF~=[gWW
  -Rc
#>`2
\r}lP
u[i\T
xPw@2D
NCXE
v@Dy8l
?3!'
ro4>
`d A
0C>5
#e\[x
]r"Sy
NK-$
6u`[
-VA);
j[1L
|AR\
{]h8
h6Vs%
IJwgzH
$*lm
M-u?1
t0|U
~jg@
-$x4
_hX[
iy4m
n[s~
BMWg6
M-Ex'
Nd'7:
~QsGo
0(3o
J9ND
>y4<O 5
sn6q
D2IG:2
q^Py;J
b%~^}
@qz,
n4UD
 h$$
*%Sb
h#l'
:c]p-
I<=[
J@V)
/%Utg
#}*m
)ydo
f|Ro
Y jw;0V
;	_@Z2)
J*-z
\Hdx
4S%,0
#=8`5
Px|!
$z#.Y>
8~uPM4
KH=!
,}d/
5S0Ph
-)P3P
;uG0
svw3
@]Un&
<77:2
njZ`
k5."
#9ik3
Jp,d
K++q-RpDp
<q}j{Z>
0 dF
Hv9|(B
!2Ov
x+u?
l9A=
:-HZ
:	0x
EFzlN
PjM?
I+@o
p[O}F
#.9,_
/0y]
8(ewv
tp_6
.`dN
`'iX
jfRd
9>NzS(c8~Mw
n5<t
$y$U
,e`l
H8Qd
%em	
=E&.
VJ=AE
uCBZ
xD%6'
/c)V
-n,v
wJy#{
D?%C
=kVh
 iUO
9FWH
N,/Z
BKf\
=jJZe
\& 4
*zK5
	.vm
|Q6)x
'EB'
x28k
mx;~_x
/l/!
z`K7
dS}^3
:M	n
"3$l
sV4!
fj/j)bE
AcK4
a`G*
;C	D[
y4*L
/8oG
}()(
*u?rc
*aFx:
WgHn
6o})#
a.j(*
{2+>
@_}#
{L*9
+-V*LE
|N(6
'fs0
cA^==)L
Tg2o'
I, ~K
_lN0
g$e\p
Errt
pGq1
{+n-
!S'uJ
%S),
~ENB
62u}
HYQI
5=s7d
1nmt
}N*GQ[
bZyv
!}ZP
4Z\2
ETD,
zztC
#d21Z
2S9SY6L
+p6o-
	YA$
95ax
<Q(U
^*k.}A
*!%iS
:k;}
mW}e
UeJ~d}
^2y|
7z}Rl
%Aix
[ ;]
8U]'
IJ6}
,j3(
Rk/%2
~GDO'
>fs_
AL^$
UML=
ud/B
Ij,5
{A0Y
R@( 
t3(X
X[[(
vUONn
	c	6
.:aX
,N{]
jS't
%$m<0E
<z?3
p(^n
z8fR
rn)~t
c9j!e
!(Iw
)(2Q
(z@@
6{7~l/
'p4[
[hV*[
_=r(
a;j^N
Q$kd
sG'O/>
sI@B
cK[}g
xENK+
'6<Dl
:0P}F&
4XG9
TsFG
DX5A
'0O3 `aI
EIZt&
it-@,.
[9Po
_z\_
9A,G
n]g/
"of.
vy.@
~k\Bkv
W[E H$q
p<'op
{`c5
d;0Ku
UDS?
Ok?."
}"'Pk
&vXO=*
ABUc
h21O
`d|Y
X,\f$
H@#)}?%
W,Xf
Tngb
{C?K
3t.-
,xo*
>IX	
AVH%
&~D.?
:K%*
ufqz5\
KB'?`9
0PF]
5|b[
xD]F
;nq#@ 
RjboH
J;8\
DJJ3
G8q_V
e~f>@
s8FVQ
ogT1
K\?Uu
n&d~
uM\<qe
vpAMF
zqh^
//6e
?Q__
})=K
	wAn
`DqH
$Z\i
"u	4
,Ok<W*
*Jc9
BsIgJ
@Wh\
}A^i
8+'N
E|.I
X6c0kY
;G_[
gnv)F
o,jK
BoWN
&N)5
"f4:
{ 4;
PiEN
-LY8
Q	ed>Lz$
ThJd
E`D.
0o>&
)q^|
v43/
asyHO
1GID
kb=K
G7gV
yh8k
'V39yv
d6$2
/Jkxe
YO]k
na32X
pN	e
E"o@
v{3;
A8Yxe
}a9dGT
''7A
6IyZ
;DLb
OD5Q
P&x}Hs
A@o5
tg|*z
~r6K
`o!@
mG3@
6Q#M
~c0x
c+~d $
{am4u
2Y[o7
tpx2!9MQj
}m5f
#t(h
7-AN
@X%K
%8Id
w@A>
zAlV
?b-e
l#D:o
G#wF
k=_2
OI2a!
K)HU
e=S	@
9!P|
=ZN1wbg
1	L?
892JU
_d:T
^FScW	2H
NgaG
#yn.
#.:|
<bBg
pbUF|
-LoS
g.U1
UBZ1(9
I\R:
dSG5
p3{G
p6cj
w11W.
O^FR<
E%N_9
y'qz;
f)8K
u~z\R
kKhh
$UDn
?Xrq
.as\
_&l|
?%4?
l?50
k'@{
x5|.
f<=?
%n5,<
.](]
TIeVL
j~4;
hBi(Z
FB1;`{
#bML
'bG2
mC\T
5/bI
I )l
}!^E~6
;XPt
<:NBJ
c%3p
u5qsB
]!_	
`:*	
_-gy[
t!eO
:pe>
v;r`
pn| 
k`[6
YW0k
[D8Z/c{
$y+k/
ICIP
tOUt
fh@>
~;Sz
pq5/
s.ru
uh.mN
:{/+w
a9Iq
ko[.F
f &I
e*g0
,Ru'[
B&cL
Y7LCm
3;Xp
%E(#
~[We
B0K;
I$j6
Dkmg
=y(r
<f<U
q"s:p
SA18Z.Ug
!mbE
_+5.%
T<8b
3n/Y
W&4$EGp
DZa 
K#-a
I5bE
smrS
{U[rm
1`Dg
[->H
CccS
[{-x
HPUu
F]B[XRL
'Ehf-
9oa:
@$-*
Zm@OER
y_tdzk6
WFHR 
UWs+
$/;o
xa!G
Ci{]
]L0R
SyI!&
1}n_
}R}8>_
IP&Q0}
sg01
K;y#z
l{n\pa6S
(uMX
.2gq-
 8Gw
/Tpl
3Otj
o`dq
5hE<,
cAto+
#'aL%E#
e9L]L?
Pu9@c
2Gf;q
*M7ei
-3v*
4~)t8
Ut<l
8	zk
	"+=9
_S;c
+ 5p4
T7rEGG
G&kNL
Uu{fh
F|$1
]B|9
1Tn/
0qP9T`
m{_<Yp
T5aR
c)<Y
)E>9^
0OX[
P>i2
GmG-'
:j0RaE
X2 aYZ(
A0Tg
j-hK
G2GH
4hk(Q
A-'=
R|P\
Y'S8
;Akp
iwv?
-P%\TD
"+n]
xA</1
R+nD
5BSL
O8"n]
\-7	X
0*@n
<QY"
`>F<r
gpe4
Z=sf
Wz0~
bgd/
CBhM
W(FF
ItaJ
zwBc
Cmsk
*X)f
7~ +
'y,0W^i
x,l0L
b+F+
GD	:
2	BoM
3SzP
8O0/
t0H#e
R7b9.
3!iX
	q)&
I[lM
ROo{
Ew1x9
l7X^
AbQL
"%5CC
Fv+w06
_^tGe=
al~\rx
/)Z4
j0 P/{/
#EO9
<kp|F
8L?s
d3i'
A$[^/
G"t#k
OA?%
|CeU
J_KkS
W\H1
&fI4
*Zi;
wpWV
#5T*Y
{eDLn<"B
& 3|
]Ie!
{_Ke
@@TaV
o'$F
TQ_(
AR0$A
5':A
4@!y7
e*HWa
9Gbv
I;17#
*5%qC
DtQV
ji6_$\PK
<*;-
_&:'S
Z:W3qN*:
@1#2
c$45
6u~uh
kE[k
Yh0Z
u]YKS]T
  >A
ivV&A
y9.?
`?	#
stCF
XDWgp|
y7aY
33YD&@
 f:YuQ
>DYH
DE`^LY
trtg /
kjFP
LRXn
wh=6
fE+qi;0
^8HM.
CG"i
CmG@
_(Hl'
:%g8
D'yn
V~(/
4XZg
!=Ta*
HrAF^.
R`rt
2=`.6=
K<0A
#)~V
@R#iT
d6%W
	XSXG
nAz2
==a41
E[#O
j8;G
u7%:3
)Rx?J
C9<$-
M;EC`%9
Rw 22
5nd[
0C]b9
nV=T
sP`F'aU
jg4ny
gq!RD	
g"q&
PsN5
@kZH^5=BGlfE
f1%t!
 T*&
~o3g
{I	!0
8aTr
(5dx
z	"Z
hQ)NnV@m
;*5i
x`IQ
[dLw
,'Rw$
"mb. E
'=mR
.I@3e
|~BO
.E<WE
A}%\r6
/a,b^
s	nH}
 ~]J
]|~G
c>6K
]ZgH
8!Pa
qS9G
2f7p
g{zO
>L\b
ZKq|
PJ;"2(
1B1=
TP+[L
s`BR9=
nfg=
VA:UT
E	Xf
fv(Q
b(i&
4\FS
1F@~
eg4n
dCI[+
gPxK
7g\Y
A2-?&
!w"w
Y)!~
"Jr5m
s"r_
(!W;
)kQ#p_1:7
h`nz
1+.b
1("r
_aWK
,hUz
z~b,
pA=:
;5\L
~P4}cN
i.SP
P4=o
E-3O
S>hX5
JxmiF<
(^h4
/Xu(_
X M~
o?fc}$1
m8)p
(bB 
VJ{;
8lg"M
[-|im
[&EH
gSu6
=~CH
j+:--P
SH{k
 !j1O
	]2;
kaRf
OUt	
x9[r
\+$]
nWWe/ K
deP[
ku6v
JQkArL
0}7Ru
$f$D
G]=c
C/Vs}
u3kg
1/Je
CQk(
([@r
5c>O
1	?m
1lD;n
Af8W
y^,)
95k-{
g@%X
bB9f
uVA"(
1=Yt
"458
kb*!
ee^$8
5Z.c
N~7T
U_r9r
8z^`
%bRS
~tgT&>_
{w/]
zLGU
4sC"
\++o
^z<6
X"3h
@4d(
t6hw
Ab}4GDYRo
	)6dc
F>=qS
1*bn
,t?'
42ZE
}	~[i3e
Iu!Z	
Kw,	'
tN|-U
IuzQm
CLt@;PTp
7uNU>3
W8l~
w#7Z#[
qXBK5
Qvnl
N='"
`dU<C
Ap{\
.0$x
Kb$GV
wJU6
0<Y'
-F#alR
n>d:
wJ}!
0xP;
Hu#9|'
8L?b
<	=gN
(]P2d>
Vh6B@B
g+	Q
'dGi}
Gf /
)\nO|yk
q. f
\A]wSyM
.wq5
S'6,
\%*7
F0h)VY
n%<U
	HwF
Pom2
xld{
=b	>
a~0x
_0IP
;0BW
wBAq
>'_X4
\2re
O$P-
VyDm*P3
*C2.gs
054M
>9KJ
kMcXBqI{U
te^3
2@ttO]
8x,t4
]Vm5i
Zvmr
s099
L2,'
[p!/bcw
:/&\
jG\7J$D$
|T{T
q%nv
*1[F
!DJkO
LOPnJ
TTuL
d"tl
BtCk86
6W	F\`
TWN7
EZ`Y2
Bn'M
jzX<
V/Z0M
+\YQe
)rYx
GYmq
[a/S#
8C4RSh
+GM%
<Y[o
v?|<>^
FS),p
0zjaW
[of$
-Ma&
Fv$d
~mtKk
.Wa=
#zX52,
R-_\
yE^s
B.hT
]=y6
 WoQ
o55q<_I:
Zb$,[
L$O9
" QT
,r?c
J7"p
MCIsc
-r<HO	
aaSiCr$
4;%B5
NwD*
)b*yu
L4<M
J,*7
vMkEZ
XXBl
WGUn
]R"&p
y<n+H
{Hvo
'xgm;
e_=0
x-yxF
P'Lu^
P&EA
eZnxK
Z=hf
#I$T
v6qt@
Iw.g
`HbCN
-0d>
-k!E0`
Db0N
^I>h
@Y&ou
2xniM
 ):Nw<
X,o+/H>Q!
HUW!
P8;Qq
*HBfh
-X>f
M^|%
U<!L
Z"4%
%!@`
vy: 
JEYm;
k($(
(EO8M
ik:N
Nrw+~
Le	o
GAqZ
aS[ZE
GB"}
F]DK
Ww@	YU
B-s%
D"fD
<^km
/W>&Y[c
"F+H
LT=jo1
1?A1
 <uR
-*'k
ZGYH
=m}(o
z)9ew
\ih6
G$\*s,p*
&<XE
o.^C	
q%+/
"v*.i
)K5s}
`/~ 
INbc
%Gts
~>[q=
`Ip%^
Ke79H
zr8x^4
xdouv
:,3}
^|q"s
f=31
PttN
oQRB
	va3,
B{|Y
Rw'x
aDrq
[{aH
ENmF
3 J4Xx
`)[*
u%6Y
KaLb
LUOS
|rE;
4OpZ
RQ=6
n8`b
l_%7
`HjOp
^rWS
<?:bY
sxR#
gQV:
eu3.
FL;!
3{&\
J7i+
V@1F=
.c#t
!-vg
H1ma
0B;16
;hmZ
Y'ps
]mn/
YeVA
jZ6=
zgbx
Nqk,r/
>plP
*(0i
1s}9
[Q$b(
`x_K,	
!n)9`
n	|2
-JFcP
6*QMD
sX(9
VW]q
2&;U
LW-/
g~v0]
 czN
NIwO
(F|hk
<d~p
2F!:
)jOj
1Zsn
ZiUKQ
9}&<
?QZ_
JN["
G_q*
cuEY
2S+D
KxJgO
4]cnf
5;t>
>*Xk
"@U3cjC
^F<"
Pvp]
7Jf;
!]1v
-GnT
XLj:
Sm]UD#"
f,S8^T
SXAjw
k!NAm
g@>S
ApKP
6=g1VZ
B2KC
n,%9t
5 2#T
/E! 
8e@o
1vA4
W#sU0
>s.;-
.2?>
(dv8
B-e3
mB_l
ZR^W
WN5%
>H':
sUrW
>HZW
OxrR
a	_@y<
	/<f4
;AL}
EX#_
DEP_
j/**
:0P5
5l]Xq
d{>0
65ORK
e&"9
\q[C(<
j]E<b.
y| )
JW~T$
~t<|v
{8vF
][I%
*6F^
3J5_
Y3K 
@Xg,k
x3OL
@aiu
T_B	k
v@*ym
hku{
[IQQ
91P@
>R!]
$e(p
b3`D7
Ja0tIo
cv~$E;"
^(6m
4[Yi'
#1h3AG#
x#0n1
-}dy
^hO,A
7^35
#/xB
~Mg(M
U('edHH\
CbkM
5PRU
6_9L
yS0x
GHdd
fZ	I
vBH/
 `?g
vSlY
,qi7
'NcI
24\?
BK]?
X$J3
H9'`
vXWD:
\KKGw
Zyqf
JU"HkD
kr*M
6uzd
A#L$
jG^`
Hnw_pi
`zMF[s
R>5Q'
/r*D
'Mf Q
cSHN
Oal("
:3)[
4PYW
N$OJD
TUmb
DKy	
r&M"
5 *w
{,I{v
qQli
\Ag5
P":V
|	J\6
@pX@
dXV{a
IeEW
	dTb
bU;e
]YD-
owZo
~MG>
t:d"
.Oh7
,@ y
kiF+
SM/0)&
3:.[G
[@EN
f#Yv
]tw:
:mxQ5
DrJ_Lg
iYu7
iI-iT
=.8T4e
RB,wAI
f2|+>
2#[	J
rCU/{
OKO~
gc3n
Yi.G$
vvm_
|*9XQ
\y:c
OMze
Gm|^T2
lp^\
@8h)
@@QD
y$F.]
w@[[-
,i"VD
yU-c
a]M`
yC4A/
@}8+u
Blb%
|>X	kU
m4.]
#y[#6W
7FUj
*[M_S^
>b"x
b6,+
lv;Vr8
H<1W
2bjC
GP-nD(]Y
f:VK4R
{6W')ep.
%"bJ
aeS$
P7B$L6
N%\*
"Y9z
y<bdz
#L'!wT
bMqq
05SHk
fKDjG
W*}I
z|*Y
&Zx2~
=ZEQ
PQq(
(b*~
K"m7
PqZ	
,>|+Q!z 7k
8`9e
`!Ug
'(@p
t+A]
Fa@J
.O!~
sJfn
v"^G
&:m:
,"or
uS8#s
'9CN
aQEzOK/
B\N.
cFMJq
.{HF
f)eUz|w
cmlF
aS+8
W\D]R
\u/c<
pBqNAfKy
MYI1
#	f^
oMAd
_/u%
ud<eDZ
Q}m1
/zb?!
qRd+
o^GH
SsGa
MF9#=
FpKA
paY$H
/ebb
s*0[X
rqS!
=~b$
=PN.!@
'J(F\Q
o`	\
p8aU
q>&H
y$((
=J#t
i`Fm
[2&}/
&2\.
2qxo
K%Q9
)9Cl
vNv36)	
Q0Bm
PY:H
\%6U
	F;I
yoLX-u
0@!o
|yc+
.>&	
z7sb$Do
^Fr^
'^u>
zIic:e
z/	0
l}+E
KU4&
D	E'
fU@-m3x
 7aZ:M
)Pub
**v1
Q0PE
->Kk
OUwg:
9yX{
G95DS
,H*]4
I~-f
(O!?
kYld
W`^2
FT3E
5"ohB3
]t0G
j]r!
dTI6K
6 rC
h,|Kl
G>qhb
byO)D
lc,:,z
U<fk
]&X.h
QNgTt
z- )
NU#x
@p$z
o.mt
~xR!
XH!n
+aDs
Y-LF
0ZIY[
jKA`
_$te+
-5d_
s<2B#
gPGM
D5b$[
:PozF
|cF0]
!Kw\
#K-%0
)M>B
II>dm
V:$t
5J$~
Gn@4
0./y
1[u"
8sWG[U78L
7y0N
p8%*
&,LB
O7[a
*NFn
C'8f
&*!&
0NxQ
+tee
vh%s
=[zU
&@a^"@
m:+B
P2~J
jKkO
m{c>
Ft;0S
&<`;
C*?cMb
/rtE
Sv	B
6Q1<
p3oa
CX+*
);rQ
+qG#
/2f/
;0ea
^$G/e
?ZRdN]
fb6v
B"U:W
MC)kEd
0S'\
>qu9
$A](uk
Ik}$
cdR;%
/4;56
ng$m
/6mV
>ZB9
8<B$S
C|OW
wh)+.
F,c:
;VEC4$
6!0j>6
[ .rI
;BaC
?[4R
<{Ww7
q"dp'
|S7<
bE{k!
n9vp
:~4v>X
=_ss!
p-2\0
ktyyy
Bs9j
eg?D
en$0wv
rgJ&el.
2G7H
O_X 
Ai5`
afcK
h8~2
8}E<e
O_|~ik*H]	
UD#=
i`%1
D#g[
J{LpNHE
#8ia
h9\"
zL	H
Y'in
,Lgl
K}cU
)6!#
 hu_
hW2j
LICp
pP#i?w
2U?q
|`kG=
;g;R
+9;X
[;5WaK!
XX)^
3a1B
P#	v
MuU9l%<	
imco
2zG>
!4wg
%>&=
*@,`y
%[Fo>
(~{g
.=de
$b9~K
| |^
zrp*6
A]\q
c@x?7
R7j@
mQ,85
5:&A&
;qI`
f"tR
ktOQ
710.
g.% 
o<dV&
iS1]
yf_-
eAEw
3]lI
"d%B
v"#`
eovD
Om*75F
,'u:6f
clm#
|Y:=M%
r/R7
]Eu2
bl1%
L"Oe
r?B[
ZV9:
OqK3
%g79
r;Q1
5jxz3
#-z&
J4OO
 lI>
(pjv
BU!)
no!Nd
3F` )^`
*2\P
*+M|
wuHg
bd~]
R.*I
ZfVk
`AK&
jnko
VLWh
dc+k
.ZkYJ
M}fUK
11%r
6a.2CS
1G%qo
?B#q
]^cwX
HlzG{
DG[M
Fo7E
B<bu
q*xI
dn"Vt
RMIP
R.4E7
j4YL(
)S-R6H
J\/ 
YCo:
I(u~
[1v,'5
j21Ha
t+{/!
K12=
em7Sp
?3ii
L4FF
xzoI|r
WmdW
_PCiZuE5
tIy/l^(
S5aP
EWR?
	'IYD
] ifd
[oZ(
|&,*	
-zIT<
SMZIU]Q
32w74
um_A
3v?aG
a,0i
iE{_
%aN{
R!t'
HihS
i.!m
H	VN
fd1;
b2ZW
 ^RD
zrteX
R"!$
_'8SG
~w?n
f$8C
jdI\
<N+B
x9O%
K8HO
rk`(
#(Pp*
)/~+
Yz!NK
^*5e
6}jr
#j2x 
c;	ia
'+&oU
Ku`K
zcNM
ndo9
,,%a
w"(X&
UY2"r
aoz`MX
c=_|4
)9Ey\
\C_[
Qw3L[
^l.	8~GE
:7M#
)AwF
?oM%
](dPhZ
T+"F
}7BQ
T7mo
}{1Y
b/Yib6
1\2@
#1Ju
,(@q
h)@<
b6K~!
[KRZ
/lA}
Tg H*2
[v2*:G@
"'pkM0?
`- 4R
q\^;
Vg-9
	Fdm
{$DN
G@{{
	-" V<M
'Q8BNbF
Fj"oU
pb>#
bF@.O*
[f=KeUVz
:K'e
lkcp
pU`d
s;;I)
C5{(
MTFH
'w?U
:bf9
7+|0*b
1!.	
ODCm
+T g
D(LH,G@L\/
H@]C
~~OJ
-VZ(
8yj2
/]_e
ko'Q
$5YE
@]tc
m=)E
5(8k
.385
u(@W
)woJ
I:(G
@p&q
muY'1
'Y+Yz.*
QN?l
9`R?!
|`Kk
*c_*
G[R0
499lC
	AwD
eo(85
K.u]o
^VRf
FL/wz\
X*Tg"G(
,e=K
\tSC7
Y<]R
G|[8
]"e]
Ye#I["
5~xB
&OQQ
W{Z7O
_"44u
r*W9
lAb"
>`5U
AoIYMWW
[:HP
jlY|\]
	DZK
;4:gj2
4+@/
#t7{aY
s{#qI?
j=@n
]aJ(b
rBP%
.>L)u
nlO~
3Ld_
$Ul&
"-CZ
3Xm1<
$K\M#
Lt4H
A~&9
}s*m
WSvKT
!>s+
26So
?#\,L
ESrW
bonu
->1I
Gnrm
D;WPM
f	r^
:UH[1
:P4kjyo2 
-<d6
<MKh
Z?)*
 vK[
pj[oS
;7pF+
7h1l
[SEV
;mV8kc
$[1$
_>3`
E	yz
7#Os
`AnzP6
``.R
</hL
wx_Rl
NTO=@
&{Z<56
x)ax
_b>b
Cs5/
 u'(
40}E
	1:^
c^Vn
=wBk
v"O$
SjnV
0sls
:WA%s
U2oF7
J-Uu
imyc`=
<u}Z
-z!GPe5,
TSGJ
%+snp
'=f_
zTRj
.q~	#
qQXS"
; &AA|g(-
_AS2R
(])';
N>o]
P6|Olz
>VT|
"yna
!&lx
7OK;
`5[z
xM+'
G9Pm
jcuW	
i;T,
>UAnF!J
9!2l
<k'{
	!?f>
~LJd
\`3~I
U`~XU
e">_
Yyk8FN
qrGf
Hg-W
M}z9
`;42~
fn/X
RCl)
>%6MoN
d:sZ
i.`pS
-Ct&'
}2w!
YMyp
#:HS
6U~E
F@~ 
GEF9
:XD?
HO{`Q
at*\
L~2>AoV?P
	ShL
(`)m
&sqjQ
`Q}X
29~u[
~\LiJ
0^HL
0f"X
:w73P
dU~5
1 \%z
x*yt"
Z^h^
twORvr
%b'F
"yqt
B4+W
o#im
mR"_
7OT {
Y3M:t
+	C=
^OKkh
b<Kg1
pcW}
#R?i
Ji1X$
{0c}4
(J'R
%e*7
$^>xd
eQS/
CcNQ
3^+e
3}(Vl
TSlEn
8f;\
)`<;S
yH>O
$&pU
/&=X
B	~d
K1%L_
.},-
t0D=
*q5dA
Gr!B
  F+
91^1Z
=U<:R
+By\p
T:!m
$UFIY7
CPCIF
n79d2t
wRS$
*KF2
NJ$2
EE0-A!
(pgl
p95#4
TW(I2
$"T;`[
	ZF,p
P\zL
dt|F
\rq4#
OuZ( 
d[Zg
`ocF
T\y?^m
2h*E=
{8TUn[
4<7q@<
7j	Qk#AP
7*m[
zhK`
_@cH 
&~al
4 T5
3yBk
#~>%hPCI
~9^.
\vd*p
U%>M3
1ti9
VbL|"
=Y12
rR#+
*70a
K'9\
]v!C
}AUpE
iabi
7E!P@
0Z[YM}
-BEP
C1FR
^7tD
XRuD
S-#m
[B,j
TPOR0I
0~J7
e]L?
g4_[g
T5]ijNZ
|P#k
oa:gS
:=Cq
jD#n
]fhj
/	og
*1k<k
mM`r's
Mr`n
$<?H
na-W
ANVR
A*Z"vD
dcZ^
gx9xS
35wn
+~&n)
8 3|
HcEc
zj|)lwM?`
oyq0`!9
+yC1
nK^<Q
J	}*&tZ
#	_d
zDgSB
I69z
3`m/U
y/u!
,}r.>f
8EQ++Z
5Ts[b
6{mI
M\/vBw{,G-
Bc1f
?f0(`y
,)biG
3smG
4q0f
'C49
(4O8
jlf+Q
7"01
<MGP
m&/lfv
q9D"
X]a4
~1i+
#!)K
k#_R
5J$HZ
=@qd
|Ruyv
x2r6
},5J
o7GK
>2;!
M,r~
cG{F
:cX)
4hG_
A!l(
hN(ld
saaH
WQLs
/Aj*
b!RX
Y`gU
N_M=K$
?$Q?
Begl
]pO0
k*~R
]_eOz
x&"M8
4ScvwA
W#tki
G1er>"
5A	t
J%f1C
71i8
%'/5
YgUF
&5mB
tG7!F
t#L	
j.wSpL
f*c03
_ipP
<@_S
#rMc
q<)0
<[KU8G
=ONXSSH
5Vn+
'YE#
FKV_
TVdu
I4Wr
SMoA
@bL2!kbV
e"7=
Nc@4vK
TX	 
2@MY
()'(
E*TCG
.kI-
+ubl
a2^dX
U>N@
ErE`[
c(~C
RbB(^
O;8`K
#x>eFX
+aj\
v:zG
|$FJ
F^5R
k933
B<{nv
|,=r
#`AD
EfY# -
[S}XH
k0)Y
"3DUfw`
_CONSOLE
wF]7
Z}fhEhx
'U4Hk<
+!N.%
\pO"M
UV;d
=0O(
:;V&
F`v#
sF?>
	<2`
pzK7
j)aH$?
&	Bs
~Ly:
zjG<)
+2MkjST
ur;-
%!2^
!* Qp
2V.e
DdN&
)6,9
[\tW
'AuQD
CIwd
0zNn0
f	|R
W.`E&S8
lBWf
?*cr
l]{d
'$A^
w*b~n
sfTV
{+<-
FP(x
]`9F
WI#n`
,!F*
$z_b
[ywq//4
j3kq
 +Fj
6m!e
(O`4
;PK3"
Z']t
- )o:
'xsZ)
f^Bb
yOXhHJ
'W4Spk
9"83
B"V7R0
#_U@
i/{6W
qR	<q
'53O
)}`,{
rV	nJKZ
YTS 
P-`A9q
MFI{
0xGK
~6)3
6UbC
W8Y]w
`ZkeA^
O2+w=
ufo!
&D=%
W[a5*
>yJq
&%3uR
ly'u%*
>13c
f[%R
h\/5
N0*C7p
'	z8
Wd!0q
[biU
xk\j
\kSy
b1[3
HF{$
^gx%-
$IcI
dI~n
c<(3
P5<&
":*e
T(jJZ
ma.v
Ityz
.v?v
>?W*
,xB?
Z*b5	A
$_V6
}azIs
V?RaW
,o x
K.\o
,3x&
p2YR
MWH*mF}~
Z) iW
*`kE
^Y[*
TC(F0`
jxObD
>W+,6!
mccc
sUjQ
_'Oz
!xnd
A7{\
tOGm
`}_y
a(S(
)jPr4
1W+d
tZ_?x
5L*}qNw
8^3E
%?3r
YR(h
BK!3
XVJHL:_TAH
Yrg+
y(x[{
ht+M
@NQH
`^*	
b^W`
9|?}
At>[
c\kP
{W-4
=~Ar
_+	R]
oyjGO*
]'Yp"(-
P,"{)
eMYu
~XFY
='~a
"Tz1
5H7	a
+XS5
*qnD
->`aS
KB3=
I3Ri!
	0aP#	
R|jQs
	px9
D#&L7
7t^"cT
&~4E
lV	k
XC	X
9nY<
77V'
+Qs{
#(#h1
X;t"
,Jeo
cnQ3
xn(V
ZE\=
haRU
P?z3
dK^OXN
=>kq
bq?y
~;(\
V^jFH#
~nW,a
f4yPU
~xPi
'+ty
veJg
+LaM
BN6:u
cZ5H
S|$.T
USS)
W]f|D
3DWY)
}N4[
W(ED
gZN%
JWm@
WIKwj
mM$["
mBS;2
en[t
!?G^
=6g5
C<$]
o6rC_
+@iAz
u}`$X
8"G 
'~4p
w0D_
+'"j
eBzc
Dv/$
8mfV
?Lni
*C>?
Kh&)
=Mu1
%B~$
qylQD
&pU%
`\Ma
qoq:p
6zY&
@\_]
'bbA
o2RC
Gq&S
nYYE8X
x]Jo
@]		
m~jU
U;B2	
0&By
{)g&
f6Pt*
n">%c
Mh;4
D|Y~
q3Al
r{1F
|*pC
$~yZ
OZfp
3YPT
o;!U
{e=['
}loK
5>JQ
v"DUNX
Pn5G
mtBB
Nn"s
}FTp
) f$
.tk1+A
;<M5
Ke+{
A0Ezr
VE(_
.kO+
_&)+
23Ui
8/=YLO
yJJP
+yNL
0GD2S#
?hAp?
I.Y8
zq)3
TnIT
>AoM@
_|NL
A06->db
$+qq4G
!A~ 
$jO?
Kqi#A
/AE0
%[hJw
v*dK
{Pm@L"/
_/O|
(dg3
U5]l
gA&e"
I.q&
7N8gOa
*Tby
'<	0
Y+hi
AK6?tQ
Ok	E
?jsh
%<=G 
35bw^%7
*&ew
XD<D
`|2"
p?bg
 \E&X
\mdb
\oaE
x[J2
iU]z
b488
6?eF7U
oUUk
YD0S
]m=D
rov=
GO\I
j$3z
'^bu
6J`M
6>e?=*
EM^-zzN
;W0-ZJ
"3DUfw`
_CONSOLE
A?Cx(
aKk<
cd#t
-HX@$	
fVW3Qg
$w/R
YJa1
\grLysv
=5Y]
KIyL
,ygw&e
P:_?2eY
;I	S
"An\
Ei4E4Q
H~e8~2
&NUk
rm&4]
b1iR*R!)
_{"zay
<RqF
?A-g
B1vr7
>dY:V
n,N4
=(gE
!]%iO
`kgH
t	oD
Y*W,
[G5p
yCE:
1KHy
,	"b
n$-U
PoQp
12NW(,C
b5dI9
s~(	Q
M;Ltn4
no^CP
V>5Y7r
62r!
<Gig
N6p	
3<G6_
7PNo,E
y,Fn
p)`K
P-f42
>\8#
~Vk!6N
vIOt
;>fC
wV^V
SsZ}
~(rj
q~R`
3tTh
yXAA
UBD./
ps$5s
DBUI
,n[Me#
%ng#f
Gh-S
t;^,E
4LC9r
#[PM
/!FAE
yu%\
uJ'ds
:GB8y
+ya6R
#QKk
?<5r
,4&m}!
8!cd
H[9!Q
T%#8
:;#{
8t*''
-7@,
%7i[
lslYc
0cC"&G@h+
vg/\
]2H4
}:qG,
**	-r
?O2sL
1	S%W_8
b+kzW
g?p}
a{<e
0x.W
5\$*I
/zPb
v]b;g
\X2"
Z01T
$#4Z
M3?k!/
GE 9
H4gG
406<
>=YA,
U%Cc
_R<T
,~}h
^HbdR
5*{ Ip>
GOTP
4jE$lKO
dSya
@0SLL"
TuM"#(
DV $
S$K7
+J^y
!=3wg
s<aA1
)_Q?
 x?)R
lhk 
LNSsZ
t	Di
b~YM
	*G`
@55@
 \OD
x1HB
x<2n
2PjL#
2CoA
"sen
$O]9
S9XS!
j~k3
wQ2>
%rnC
X*)t{
Rdto3
L%N-
FeXm
/,h,Wp
7GhheoR 
?W6~
:ZMF
k+Ii/Vf#B
a9JI
W;-cn
cLsW
bXf%$
k4RRa
{]nZ
4>V"
j)H#
kockY
)&Y 1
_p0$R
U!rh
bY~3
s))C
h*O<
f3V	
n=i:
VIEU5
FR[t
zi<8
%6-s 
wdJ*
Zw{!9*
B>o2|~
F_Fx
<P,@
4B3'
T,SF
j"{c
$g v
w(0v
@&zU"\F
vCd6
79)=
A0$s
5h/<9Io
^H$j
yT];
EO }{
4qq8
huE;
u!o3
Dsa_7
/xVF
{<?e-
G0,<7
_.gK
CaET
5(|I
gfn=
IPB]
WzGz
dQC*W'JC
fz@)
R,isF
EOKJ
4xdb
ayMq
2EObG
M .EC
 nj;
Ph9,
?'Oe
H#dV
,^Va
?@/[
(P_z
T0PliI`Q
L+]/+
[.`E
/&zk
z8IEh
pHr\
*F&^
2Y9R9j3
0Po 
!5 >.Q
V	Q n
{ruH
NHGq
^n/E
v)omW
,uj1
6I$2
o$ce
Y:VV
VF#B
.':-kV
o3#1Ht
nqD3E
PZ;|
EF!q
fyF!
y9HA
|N$a
H2HE
lBzap
c"))
<9Ct
j3+{-
pc<lX
D-%Z
4`r<
NI$?
DMYB
bk7yC
 }{~
S#NmI
b'kJ
(qLB
7np!nQ
>-F=
&V'P'
EOlM
~(|@
4oZ\
,8jW
KT	B
XaXE
h9E/j
M|.=
NAB7
.pW$
}0((S
o\/w4R>}
S1AP
Jv	Z
z3 B
9Vj1Dp^
81Vp
83"-
~rSF
cpk_k
QaP^
ozXb
AKnt
k>(0Yg+(
)3+O
8,h_.
j/=I
%ozdR
y%pG
aI%"
{?TE
k&))
atq%
Jz(B
lW/F]a
	L?S
"3DUfw`
_CONSOLE
Uy)m
kC_h
CR|C?N
dEr8
@Pk&j
v!k-
nZ\JE
W1cH'
$#	-
!0,2"
Mi;)i
iRGC
0g	m
tnv8
Y<"qa
b=Tt|<W
O)U	
LD.z
q;^%G
6lsg]j)
-F3Xz"
%Ex4
GlB>
<bA%6'
q| ([
Li,A
h,R<p
=Z>0b}&
	(7tv`hS
%cRO
Co/>P
,X6:`
T	-2
i8=Gn
%_Uch5
nzki
hYh}
~L8B
Hf>^
 sHf
y{yo
UD2y
~x-.V
SmW$
qmlrX
^lR@Y
x`o{
w3Om
@Iqt8
4K*H
=[5f-A`
eG#@A5
/V `
GXM_
&,K_
AJC"|
P*.<
ekbC
IrWgZ
=!Q0
#!:+
yfiQ
=ZlW
!n>yt	
#oG$
H6-MyS
U$qa
futZH
?Ybw
'^Mt=_
oN	]%
M\,	
0?;!
@R9C
l*]S
B{h_f
'lWy
Co]k
FITF
[=tw
}Kr*;4
Y1%7
_Dor
s|z)	
w`l~
"-C,H
;$oX
=V}l
HpeR
?`^Rj~
SeYb6_jcV'
_hb#
cw-X
Jn'jV
(LL&v<
E'-,
%T:4
X#Lo
{s6Y/:
2_?gR^I/
zw:<
W	ME
MtctO&v
0VYe
KH+/
@R,US
3an<
S	zLlZ
.aV-
>u@N
)}S6
c}SY
H^}@
V}Qe
C=ID
V:]C!
h}w/(\
D60%
	;Ot_
Q=NH;r%	
&~3{
nKlk=
kHKa[t	+(
$v-'
:;1_A4
Z>7j
5?*\~
\q'm
?8A.2G9
bI+^
bGb-}
I00CX~
ym2,EZ
,4I1V`
'z'Q
noPw
Y7&u1WW
]hd8G
;=GZ
pLBB_
J<yy0
7x	:$
_GXP
'\oBp
Sk]o
h{vq
YG	j*
=so&
=~qv#
Vn-`
xm(E
7l);
pq8 
@vk'e
`[#t)
!_}>
ULt4!
/v/%
JK@2
D^(K
~GE;
1>-2w	
-,U2
|GHBg
/1_4
:n$YTI
d*WU@
_r?zVz
zS7R
Go{-&
M	7A1
wd[i
|-G<E
t{Ew
zf)F
u4{f
!nvrB
tt>T
ELC)x=
	K4 A
wg\x4
uS(D
t;Ei
}7V\x
-4M`0
zrT7
i5H1
		=9
C-qv
K=K#
`@i{
N6@/
?xsG
sx2Nq
j:__u7
%}	D&
5a3^
$Mmm
+oeV
~Ze/@
1_*a-
v$E5
C!~e
/ qC
h@&H
8X0X
6H_)
B8I-
@]Q>
j/R8y
>ec{
RXYLI5W
Ifk_;I
k1=&:Q
TdCfU
 -Pw
p=:/r'
3Y5q
jJ<VFi
W@>4
6=P<W
>2ij
}JdS
c#-SKJ
R6L:
>[F&
=k4P+
$4JF
]@1dt
\hey
/o>&
qc 3
3qqP
}&p(
3~"7.
>*tW
BD>e^
6_Hu
cu&|
c0".	
)	@~D
Th`]
	nW5\
 ?Kr
@zQc`
{\"nr4
G2<f
atQh
5?o'
Lv.2r.
ui,QI
?;)5
.v~hSUm
B+Oi
rvJ{
zs4/
mD3i;
'EeDl
zldW
O$Ug
Evtz
Fh7{
~~$u
wjJg+
6$;?
7}k@
NFI!
_>vCf7J
mYN<
2mTq
lhaH
6TC&
guiz6YN
mxu2T
q"Z(
#ZI@
M-G8F
"3DUfw`
_CONSOLE
WS</%
or(7o
^?:S
vd10
=R?h
0M	1
MF_&}
;`w>
`9j[D}
1r}{C;
8woCO
+HjY
a:Wp
;S)r
LyzcZW
zs[I
4$.M
(kM`
u%dJ~
q:y=_Gf
3B+1
G$%;G
^f6U7}?[
]BRx
;4zR
Gsp&4
6tTY
|8Dr
8%HW
H]n"a
OV<$
~UfNq
k<`C
aTS2r
0/qA^
}|N%%
	>,P
E(nnU
zd*R\w
\uR- i
J:p,
x,Q,
+?q0q
L<7h
&.>{
J'E2
pDx.
}FM{
($Ci
rw/I
2;e`
#^ 8
+A%c
hb71d
1M[X
=igaAk_
vu":
*ld"/D
 $Dp
e}Bu
1)Z`=
7	d|
n!r1
Z/C<BM
Oz`qnm
}V97
_w~K
{',@.
ugQ&
kTB-S
	ht@hd
u{\xuO
iU-sR
 U?gq@
@f]2
!]=I
5im~H%
&dv:
R:wF
KaE<
-kQF&
?Wzu$
SPjE
<0%F
l5'&66k
s#K[
qx}s
FVX6
"Jc\
^,*-	
D}VJ(C}
4	c^ 
N,@2
h>ax
8V`q_1
dGGu
TjD3
TeDB?
f,Mn
pbeT
5~H	
@N[&2E
k.kP
V^31
8g,#
O;O	
O v	
"g0h
*E8=vs
Vh""
P"!&	
i|TNT
%sk9
_QxL
^U	R]
<|p4
MRRR
&\xy
6E(+
mR-W
Qx]*&
R{1`
#]^6
Ziq<m
Ry6!
#GWmO
	@^;
fPdy>
H	':
X)+b
SZ\;3"
.{&d
bh=I
0=d!
eZsS|
o8K.
}+o^
x|M4
7`B'9
T&(vc
Z|Vg
.7V8
=!p,
`Cr:?
"5{X
''W<
xb9u
]6CJ
BJVQ
?xS:s'
4X(q
@mqJ
>{%<-
:},lDa
9}t2
x&j2
f$	O
.|cW
E!}Vq
tXLF"vap
SU~s
o!-xb6
/@/xT
;fZ9
9D.}
L>fc14
 '4Q
wh*zW
|i&c
{[B]
&<v|V#w
T|_ B\
A+)Z=
X"y4
PQ5E
Y)+%
x*fl:n
9.iJ
@R9@
1#>4
dPm#1Ov
R*AFc
dy6Q.xf
R)fv-y
NVu%
 KIr
M/:OV
O\]q
S>I&
C5v:
f`6j
Q-{=
nI8Z
rY:.l_
aLPU
(l3{
nP2o
0D0-
C/RI
(J\>
8V]2\
8Ye0
6:$kk
cQ~b7
E$+RE
n-5{
LLR1
n`q6
WlnX
m.t%
N}-*
]&y=
tm2@
C5i=j
RO+/
}%QJ,
[Ipj
x 0C
j/mw
^G@?
	?<u
Pkmn
*r|<
yD<0
: Ek
/hT)
oQDR
&Zpgc
y&9W@
9HZ{
P&?t:
+^S%
?E_3
>>ZA
n [J
YYj"
4HEm
qSLo
c69-
~1?	sW
d$t1;
F+Id
AfzZ
i?E=
KD4f
1=Q{*
[ib/]
.Y3w
lDFz
.'EA
q/"|Q
|;tm
^(wi
2g`5
~B0y
djs(
/4zT
$5R*S\
IwM^
NgPL
1*p(
$Qv!#
BsaB
k@b[
,	CC
%vJ	~
1mq`"-w
!=Wg@
q@_~
&x	<
4eTND
R=y	-*Do
:(dQ
_xnN
B/mP
}+"s
@X:g?
{8w{
}13f
(5-^
I@Umkn
"3DUfw`
q:pm
_CONSOLE
"3DUfw`n<&
_CONSOLE
]:]Js3
DY's
fp[e
SGmU"	
\YDR
L'kI`
X]&3
UA|p0
Qn$ 
&e4a
&n'{
?iS1
~l2_
F^: GqT
V([]
+V]v\!
`18A
=*)0L
d	WUm
<,ox
k<d/
L1m2
 OZ/
;(wb7
wt'l
]=v{
lP/C
Yv^p
l'}Ci
(1jM2^
:sVG
?KBQs
{	\[`
lMi"y
	M<4A|]
oPLHu
p\`E
a-n=y^
WIg{
(^#n
Z{63
UXIwe
FO&D
"|qW
>anK
DrIO{
tRAr
rH#;
?|kk
Ts-kf[
Ka4<-
Avpz
IDGn)
m6n8
^d#BL
3]d+
^ev[$
n]I.&
Oqhk
)NC0
P+ztF
<Qk	
x5\8j
u-1T
%20{^.
"?`U
`[CtR6
+O^r
MJ 7
tMu]
`7S7
a|>i
Fb39
c&9m
SxyE
}QME
i_h^TqI
(aY\am
ux4f)
v;q,
~PLa
hq5c
/SFZ
k@jq
J;?W
<X7{
W,-a
<H{Q
V[:~
`]a_
o$fgmdD
C.>*
Q}Bk
mN;Q
^GM\
qcGObW
6;R[
ig:d
]Jin
=rn%4
Bq!A
6!Zv
u6%'
1-@Z
nVdXf
fddE
f3Xw
sy}2H
)c6i
'2mu
}TZ`
]FwX
H(0r
lsKH
bV&e
6t*h
U(mP[
d_TT
ngt!
l}g3
~<'c8
T\e6{
	%p1
~{|T:
&zoD-
7g)=K
|=OOJ
r4V>
$?gr
6hFn
O_DK
?OZa
I M-5-
-<<z
=KPL
#"_n*
0K_'^
W7eh
[)K\:
f$9	/
?\%u
[r`_=
}LbN
c?9fi,
:R:y05
!N=n
*Tfk;k
$(.<|
%'O&k
I,#K
agaF
*vXM
(`5G
#1xM
A+z{~G7
| CW
\ae@
:LbXR
8Rnt
*/QmY!?
g0Thb
t~\D
)11x
-R<l
b9;+
3Fi#
{DrE
Ob~E (
PoZ5%
LQ!F"
kX7+pY
pdll
Gq6A
^]4)^I
6VUN
cx'EM
cw18
,nYD
J[$fby
I>r^$
7llg
|>kx!V$<
aTo}
vraF
[X@(
Tc_#
h2!~
cBa.
OV_NM&
uB#"
\zG}
y-=u
7B%Gn
E$y&L
7G3E3
)w@/
]:Ub1
u~#Dy
%~$N
ha:	)h
&6iv
7W4L]
ur$a
+cZq
 Gs;
lpmo
MDyn
j=*}M
{o#-d
,2)~
o?D^A
&)!"
`O^4,
U_:'M
c7)R
E2;!3
>IX3
9qCb
Q'v?
#@P6
:FGQ
f&-I
0D%<
zn!M]?
H1%0k
{_i,
a;`(
HD]1
nei<E
JdZv0~e
n6GT
W"V-
@"9_K[
.!D{
~QG?
WvmU
LD+w'}
*Rf_
u^c .N
;HzI
-[$}
1im4
eO&`
}BBf
)BM2
	\1U
@1M6s
yV%n2q
,GYL
5Wxd
IP]A$
p7LL/G
.o3wz
c3BG
4u9-)a
PC2w
K5Dw
"Jou
`e{Z
IIqx
795y
\C7dD
+!Nb!
ex(-
~6D3
xJ]N/
/YK\
d!&?
kR.[
R+,k
4b#z9
"p_6
NQe2p7
bNQfs
:`z{7
6fod
"pxb
#{mE
l]{'
53z4
5-PV
Ip6E
#`Bv
y,H>
+i4U
PED$
v.nY'	
fn*)
FME"
s'	"$
}WL.
QaKf
|R1p
.NHt
%InB|
uOl9m
#04`
1dN U
@;HS
75!c
(,#z
\Y~B~
tLR/
"3DUfw`
_CONSOLE
ts34
E<\Z
Bm	_
\F;fcwLk
KT-bW!
1D!D
+; S
=8>!
rDN$
Z`)x
{Irv
69fqm
NK~9
V1e{3(
	oY9
:YN"
8/Yq
n;6~
ihSP#U 	
E(2h
j8E.E@
dW+2$
(^DC
f"'B
I:4o+	
&il_
,)T	Av
Z_ad}
H[eN
I;L,L
,m?st
v:a^
e7]e
am;S
wtpv"a3
j,r:
f^;h
|2><
W	((
:IS]
,#]"}3
06TX
uW/K$
^JvV
2_/B
(({D
T2$s
qDa{
t.D!
(SKF
@|i+
6&"|
j4"Q
(md"P
,a(U
q|mQ
t0Mv
k"4h
2e3}
$J_H
\HKN
Ff"~80
/v\]
.Vjs2
~Dqn
H*+_
MWpdx
9#G:n{
8n]4
u\b	
ES3i
qDFf
z;mo
ZYEj
_@OZ
)?dbpTu
L5JE
Nq>E
Kn`6I
NNy~
,~AB
|^-E=
@H`^
5+J_@;Jwa
/Qz$
u{>)
Orjz
Ihq3
kLEs
h"Q@
l~b,
T5S|
Tq.Q
xi#1
 G]V
llHcO
{SwR
H<.2
X|VK
T<x+
EGqC[B
)FTH
YItEo
qAf8
&+v8
94~ig
Ih9J
wN#?
C9F{p_!
d?8;
(}l^
QvH7
0{JM
V|E@
g]>^
OGzb
Kk-!0]
5M<4BB
m9A\
fy`B
u;eH@V
]%%9O
PB!W
	q.,
*(?%
.V+q
vX	7
rdwmH
{\b^
z3C0
c[DS
CP:8
n1 ~=I
^zISm{nE<
Z);"
Wa5Mr
$.km
}X2U
"'Q&
V	w<D
VeT-
ztgV
.rSa
r,w>
@joVq$)r
h@-E
N7b	
7cC\|Kr@
9.[gnv 
q),9C/f<u,0
]H!P
<zW}
:	#[
$.MpC
^.y"D
)~0'
K-0wX
mhy"|J
WmZu>l
#q,/
.!xr
0q,[
 @m<.
l=70
?!K5
Ij^_
DlqB#LW
]xo;z	
qZv/
L<N?6
wwcJS
Rs4*+
,*TY4?a
)#).
T~G&O
	nC,
::p58
(0)s
u%{ '3
gJe`b<"K
?hu2
EE|m
]rp"j
9s%#<eL
r")z
%;Jk
.eyH
[,+|
s5@W
<[81])k
bxm`WQ
>&xmk
uhhh
i7Ep
AX'm[W
\quJ
&sb\G;x6
G.Of
LR*1
1l|}
^3|d'
: _`
xUwk
=G>s
%a4u
S];T&<
k/"Y
\>	\
 .R	
`+>H
"NN'
jGqG
]@w4
(7~~
gr A
Gj|h
]Bht
t<cKI"*
:}g	
hSW|
U,5N
 h+^5A
-\#a
IHoS[
YJ.~
O+9I
 >DrD
_sD?
=<aH"S9;
\U=`
z,#@{
Iph-
7GUO;!s
"t,6
cio:
X'fo
$=K(
_tJt
w_Q(
}}:K/
5'$z
Y}u$
`g@X
AtYo 
%?s}
}O f
5Nm|
THt7
?RnV.}@D
5vMv
t."%
+,zB
I?1k
_M;C
amGy
FyCc
	W(`
iAV|
sI;-
M	ht
Z $j
f[!b
0V@X4
^4wwvn4g
XW|,_
aqLP
%K-fb
{XF 
W'[vW
%>mKZ>V
~k&%r
\lC1
!&B\X;
NJ~a
dax^c
gay3
hZhm
lqg	
9/exv
R?b+
0:f]5$
V&IdS
`H0M
gjwE10g
bNyR
NnFy
g79#
I!0JD
Mb>*
QZXT
"3DUfw`
_CONSOLE
okx{1N
W0kz3Le
8hNL
zPaL(
[a6r
;C1c9
c2.Zf
?<]I
R*M=
\`Rvp
OxMi?
jGpiS
fb`<
nG&p
ZHL0
pv-\5
n4\N
j&v 
f8e`b
b5Q&ZR
rf,T
cOIP
z=@Q
/Q}7s
/rZ}u
ty:z
FMg_
X{Lr
L/6u
$?LGP
LqFo;
iZAZ
u_M^x
r}P@T
tGNvO
6/''
7Dr>
1kBCA
1SN/
Mh_U
[>}2
g6RD
ywEh
aHSdt=
c%3tQ
On t
g!wM
Xy+!$
Xvbp
?(K%
duvd9
26U_v
}`jO
WO2iou
RwBP
7*_Y_
J]W__
	@/Z
6saH
AzN8
nz&#"
vIY{j
LDY[
(|S,
P7f	
Ch"w
`7ND
9i.X
p'gk
2%sF
8"U[
vb{m
3U]'
jF)+[
A+|6
&(_z
.r8K`
6iKF 2
n`s6L
m54}]
-3zV
M@S#T8
|9KlL
:mUF
gTV0
-(<|O
6[4;
B		Q
X^h+
ELQe
-Jv~
!bm&C
C"97
VUmzU
w}w#
\xM	
KL|E=
~&TP
UIp`|
VyX9
PW}w
?@!!{
|0;B
6#=d
C(!`n	D
I~zr
cAE{
1g"~#
i`ue
_"-`R
#R}*
 >&:
k"I	
rUv[m
6?vif
1s$p
Ad<l
s	nW
W?R>U
:O$/H
x\)V}0.Ih
A/.m
:xe9K*
`EdZ9Um
WY~.KEU
u]J9a
'R&U
C@@i
Y f`
BIgD
MVo-X0
]x[~l
M>da){
Lu&j
Z*r4
6rtP
aW~]R
"kH:
x}r7
WH6(4r
-d/:
jh'J+
 oU0
/	:U
&!/~Y2
`yD5
V.p~
g	pc
<Zs8U
lx@j
W5QT!j
`{~G
2h(88
~<8(f
|#5+
loZK|RO
rHGk
|a._
V:duT
ej{ut
`R:w:
6mf_
$xDn
pp#m
/MOZ
X]qy
DJqR
qQN NS
RB?}t-/
sv8f	Y@
gP>\
x}k#
jR0`
>m;S
8_:hl
IP1:
`r@f0
x]7`
_w7Y
{g[Q
WkW3
RN =
UzZXtc
9D)8
5Y*	
f=>^8.
sev`
Vq#>"&
Td+tB
6c ]
sMD,7
]_e7
r>iZ:
^8W@
*&e\N
*p'sK
|E=$
_S9j>\_o
Nn ,9
T_5N
0>Ycq
c,w'
i}/}VA
V.sm
_0/(
 `eq
1|bc
9P?/
B#Rfa'
'luB
yB%=
VIKK
6dqd
<1gE
Q?Pmg
JW2zd
@i=l
7I.I
xu	8
';VR
Q,[>
16!6XA
{)ij
F)!f
DyBc
`.L 
#Z$T
CX_}h
Kv-n
.|d`65A
J_3?
pLVpr
2v.r
_fAE
z2)=
5T	sP%
(oQG
}s[R
e2nM
:qR9
E!e":
P ~3
A5305
k\&,3
]8;6
=N$NK
	y8J*
2P{Z
z@;L
.<Mx\NQ
{96e
Pi8c
LBDN
 [5\*`
wxl<
aUA7
!] %
@u@YY^
?2xd
	A6^
38Ro
R22z=<
.2MHE
_'W$
qn.K
Yago"?
a.Hy
JQ"	G`
L[P|
$z>=
qD6+
7UAS9
KMG,
_%Be
9tKpW
Qy*"'
v,pV
7<# 
W@3)
QH3@
CQZu7
8}/&
gH89
0]!|
9Wun
ar#K(y
)Wqt
t9+^
kMC+1^
.Y:A
e]UNV.
.&Fba1jK
["UE
H&T*
Ip6-?
x_YEH
 "u|
%	N2
W7En
mx<t
$<X,K
MJs5
;5S;0
$P7jq
"3DUfw`
_CONSOLE
jf({||
,.]i
EqUh
zcV&P
N5	7-
	vM.
f*!X
XB7Y
%5NZ
%(92
^u;H
ov_R}k
@`Ky5
Uh|"
Q"D2
l{&]
8rUD
qaC>
"5*b
Z]oU
UD"Sx
^jGE
jnv&Zn
^`lN
}w7'
08,qIN1
sK5>`}1
^4@S
9"2W
WRt^A
{,kR
^,cfkS
E|9v
9v?+
uBEI
I:Us
7y@N^
9_EWm
T7BG>
o$Rj
Yf4+
TG9m
x\T@
=&zM
Sf:E7X<
>cvls
Nw]`
Skat`
dzj:&
"w	&8AK8J
0br}
d+Cf
rX F
.cV}
C2{p
.hHI
*|1w
Dd8^
Nr3	
o__6
/Xlg
5rju6
Yy1;
C /5
eWu0
Vz$e
Q]|r(
ZY7N
e=;	
=^Z("o
AjJx
<Q8j
3Pjs
Z#RH
'CN#
| `A;
)V[w
|w)v
GApw
P;d`
oD5G
2&<IY
/o)Q
~N60
T*2o
Y]`_
^vYvn
Tk/|
di!@
N#zU
Cj'P
-g@{
\cY[
\M;h
s[=x
-'7U
^'4|A
sBkm
*b	m
Y) e
Dj	+
o)isN 
^n~7
@BL%
+dw]
	g2Yt
&d~Vc
TSw3
:I[+
lSoh
8|`Y
PD2k
;Vj1
>Qp=
U3-s
S'ZK
,##m
Hxv#
Twb?
=$No
	dJ.a
Na(i
$vj#
a(-z
n}Mw
S/ZH
eQ>*|
-W}B
Ll9Qq+
h<&5,3X
JK=p
$a#4^
Rp!7
YYx5
7|6QA"j
*uCJ
xFG{
Tcfv!
%^\/
~zaVP,
kK=!zt
N 9%
Qpzc,f
WC';
q9F4>9m4
(?H-
}T{;
	Pl!z
zV p
V>|=
uU&'
0k:2Yy
D|,5
zehp
lesT
J;~p1
+f=DW
t	]Zo
VLP^
<GrH
uP:/
-`$c@
QKU	
?^ro
Pc,#
@iGO4
wL[U
pQ:G
z!WN
~"o9
`F)#
/YhY
g[dT
[F	m^h
f|ZO
3_Ee
B|qdym
*q O 
~'[%Uo
}k/>
Q>g`K
pzwW
qums
$	!u
q2u.*mp
kE-?
 #t`l
t8ML
Wbh\
9=Md
n!s	"
A?R=
XL-l-eq
~c,k
qyhxD4
R	U?
he^}
tR7j
5: }5
W2g\
67UM
I+H{
.|hG
@=gg@
	9*i
Q.	, 
G>I?
nf0-
-&n4
NVu(E
y:"j
~k|h
h_1K
	}HL
17x(T
 wEmFF'
/zQM
Zlni
%,)2u
W&xq
4]k/
9.f:1
XjgC^
;Jt3
Sw$2
JA)n
N*,Ew
S"9a
i?T@Jg
:8Yq
1Y9=
gk*/
PU6n
yi7"
]hQq
wzMo
eh@d
d?sj
,w~sk
LCe/
E,7@A
q&?z
B&"!
mft/
K4~n
`cJ'
*V `
hK,Bkn
A='T	
DfQ^DX
7~y}
:Jk"
Efw^
fEq^-*
NTY%
8j)7#v_#
NU)cg
<iY'
cG1v
>P_0s
hlxap_Z
b"KYK
oXLJ;
5fp}
&r@!U
,Cez]
.Ma\
zstr
S;0l
^ji$
{Wcr
*ip'
J&"i
[ydu
G	Y$
vl?/>
U,L]j
`wl)
#:ng
'c;L
"w#%'
7Um*
x[\=)
z4E]
\H#PZ
G_u!
T[?m
s1Bt
nX@0
?<t~S@iXkH
\\Bc
h*LMz6i
#include <Arduino.h>
#line 1 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
// ESP32_cam_node, upgraded with una additional udp layer 5 control protocol and configurable telegram bot
// PLEASE ALSO INSTALL THE ArduinoJson library by Benoit Blanchon
#include "esp_camera.h"
#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiAP.h>
#include <WiFiUdp.h>
#include "AsyncUDP.h"
#include "lwip/api.h"
// NVS includes, non volatile storage
#include "ArduinoNvs.h"
// WIFI includes and variables section START
#define MY_NAME "e32cam001s01"
#define HEARTBEAT_DATA "e32cam001s01,HEARTBEAT,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ACK_DATA "e32cam001s01,ACK,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ERR_DATA "e32cam001s01,ERR,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ERRNVS_DATA "e32cam001s01,ERR,ERROR saving data to NVS,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#include <WiFiMulti.h> // this should support more different AP's // ToDo
WiFiMulti wifiMulti; // this should support more different AP's // ToDo
// Non volatile storage - incorporated in the project folder
#include "ArduinoNvs.h"
// CAMERA: camera configuration and initialization
camera_config_t config;
uint8_t cameraInitType = 0; // 0 = camera off, not initialized; 1 = default init, the main webserver; 2 = motion detector; 3 = color blob detector
#define ALARMS_ENABLED 1  // by default, the device works as a motion detector in case the contact with the command and control server is lost. 
// WARNING!!! Make sure that you have either selected ESP32 Wrover Module,
//            or another board which has PSRAM enabled
// Select camera model
//#define CAMERA_MODEL_WROVER_KIT
//#define CAMERA_MODEL_ESP_EYE
//#define CAMERA_MODEL_M5STACK_PSRAM
//#define CAMERA_MODEL_M5STACK_WIDE
#define CAMERA_MODEL_AI_THINKER
#include "camera_pins.h"
// of course this is the default and should be modified
void cameraInitConfig() {
  // camera part
  cameraInitType = 1;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// MOTION DETECTION SPECIFIC CAMERA DEFINES and buffers
#define WIDTH 320
#define HEIGHT 240
#define BLOCK_SIZE 10
#define W (WIDTH / BLOCK_SIZE)
#define H (HEIGHT / BLOCK_SIZE)
#define BLOCK_DIFF_THRESHOLD 0.2
#define IMAGE_DIFF_THRESHOLD 0.1
#define DEBUG 1
bool capture_still(); // declare functions
bool motion_detect();
void update_frame();
void print_frame(uint16_t frame[H][W]);
uint16_t prev_frame[H][W] = { 0 };  // these are actually 32*24 * 16bit, more than acceptable, no problem.
uint16_t current_frame[H][W] = { 0 };
uint8_t motionDetectON = 0;  // motion detection is normally kept off. The idea is to activate it in case the command & control servers do not respond, or to activate it on demand / on alarm.
uint8_t alarmEnabled = ALARMS_ENABLED; // motion detection activation is enabled by default to 1, some other kinds of usage may require this is off, for example the color blob detection mode and the webcam / telegram modes. 
// MOTION DETECTION SPECIFIC CAMERA CONFIG INIT FUNCTION (first, remember to do a deinit!!!)
void cameraInitConfigMotionDetect() {
  // camera part
  cameraInitType = 2;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_GRAYSCALE;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// CAMERA MOTION DETECTION SPECIFIC FUNCTIONS
 * Capture image and do down-sampling
bool capture_still() {
    camera_fb_t *frame_buffer = esp_camera_fb_get();
    if (!frame_buffer)
        return false;
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    //sensor_t *sensor = esp_camera_sensor_get();
    //Serial.print("Switch to JPEG: ");
    //Serial.println(sensor->set_pixformat(sensor, PIXFORMAT_RGB565));
    config.pixel_format = PIXFORMAT_RGB565;
    Serial.print("Switch ok? ");
    Serial.println(esp_camera_init(&config) == ESP_OK ? "yes" : "no");
    frame_buffer = esp_camera_fb_get();
    Serial.print("JPEG len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    //sensor->set_pixformat(sensor, PIXFORMAT_GRAYSCALE);
    frame_buffer = esp_camera_fb_get();
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    while (1) delay(50000);
    // set all 0s in current frame
    for (int y = 0; y < H; y++)
        for (int x = 0; x < W; x++)
            current_frame[y][x] = 0;
    // down-sample image in blocks
    for (uint32_t i = 0; i < WIDTH * HEIGHT; i++) {
        const uint16_t x = i % WIDTH;
        const uint16_t y = floor(i / WIDTH);
        const uint8_t block_x = floor(x / BLOCK_SIZE);
        const uint8_t block_y = floor(y / BLOCK_SIZE);
        const uint8_t pixel = frame_buffer->buf[i];
        const uint16_t current = current_frame[block_y][block_x];
        // average pixels in block (accumulate)
        current_frame[block_y][block_x] += pixel;
    }
    // average pixels in block (rescale)
    for (int y = 0; y < H; y++)
        for (int x = 0; x < W; x++)
            current_frame[y][x] /= BLOCK_SIZE * BLOCK_SIZE;
#if DEBUG
    Serial.println("Current frame:");
    print_frame(current_frame);
    Serial.println("---------------");
#endif
    return true;
 * Compute the number of different blocks
 * If there are enough, then motion happened
bool motion_detect() {
    uint16_t changes = 0;
    const uint16_t blocks = (WIDTH * HEIGHT) / (BLOCK_SIZE * BLOCK_SIZE);
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            float current = current_frame[y][x];
            float prev = prev_frame[y][x];
            float delta = abs(current - prev) / prev;
            if (delta >= BLOCK_DIFF_THRESHOLD) {
#if DEBUG
                Serial.print("diff\t");
                Serial.print(y);
                Serial.print('\t');
                Serial.println(x);
#endif
                changes += 1;
            }
        }
    }
    Serial.print("Changed ");
    Serial.print(changes);
    Serial.print(" out of ");
    Serial.println(blocks);
    return (1.0 * changes / blocks) > IMAGE_DIFF_THRESHOLD;
 * Copy current frame to previous
void update_frame() {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            prev_frame[y][x] = current_frame[y][x];
        }
    }
 * For serial debugging
 * @param frame
void print_frame(uint16_t frame[H][W]) {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            Serial.print(frame[y][x]);
            Serial.print('\t');
        }
        Serial.println();
    }
// CAMERA COLOR BLOB DETECTOR, INIT FUNCTION
// color-based blob detection - I plan to use this as part of a larger project, the idea is to help detect certain insects and pests in agricultural settings
// this camera will then become an additional sensor communicating with a robot designed to remove pests from invaded plants. 
void cameraInitConfigColorDetector() {  // specific for color-based target recognition, remember to do a deinit first!!!
  // camera part
  cameraInitType = 3;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_RGB888;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// Telegram section
#include "UniversalTelegramBotRZO.h"
#include <WiFiClientSecure.h>
char* TBotToken = "810218086:AAFPJNDbolU0tzj_Xx6lXOsatDlYnWYaa80";
char* TChatId = "537093554";
WiFiClientSecure client;
UniversalTelegramBot TBotCambot(TBotToken, client);
int Bot_mtbs = 3000; //mean time between scan messages
long Bot_lasttime;   //last time messages' scan has been done
// specific camera variables for the telegram bot
//camera_fb_t * TBotCamfb; // moved intra-function
uint8_t* TBotCamfb_buffer;
size_t TBotCamfb_length;
int TBotCamcurrentByte;
// camera functions specific for the telegram bot
bool isMoreDataAvailable() {
  return (TBotCamfb_length - TBotCamcurrentByte);
uint8_t photoNextByte() {
  TBotCamcurrentByte++;
  return (TBotCamfb_buffer[TBotCamcurrentByte - 1]);
void take_send_photo(String TChatId)
  camera_fb_t * TBotCamfb = NULL;
  TBotCamfb = esp_camera_fb_get();
  TBotCamcurrentByte = 0;
  TBotCamfb_length = TBotCamfb->len;
  TBotCamfb_buffer = TBotCamfb->buf;
  TBotCambot.sendPhotoByBinary(TChatId, "image/jpeg", TBotCamfb->len, isMoreDataAvailable, photoNextByte, nullptr, nullptr);
  esp_camera_fb_return(TBotCamfb);
  TBotCamfb_length = NULL;
  TBotCamfb_buffer = NULL;
// UDP Async client, sends keep heartbeat messages to the server and retrieves commands
AsyncUDP udp; // for server A  // udp layer 5 control protocol
AsyncUDP udpB; // for server B
// command and control IP addresses for server A and server B (redundant server), the exchange is done via udp ( the port is defined by int udpServerPort) and the layer 5 transfers commands and status info as comma separated variables
int IPudpServerAa = 192;
int IPudpServerAb = 168;
int IPudpServerAc = 88;
int IPudpServerAd = 32;
int IPudpServerBa = 192;
int IPudpServerBb = 168;
int IPudpServerBc = 88;
int IPudpServerBd = 3;
int udpServerPort = 8443; // UDP/443 because, well, we can
// udp - layer 5 control protocol processing, the layer 5 control protocol consists of 8 CSV fields. The protocol structure is simple: client_name,requested_operation,field1,field2,field3,field4,field5,field6  all unused fields are set to ascii character 0
#define FIELDUA 8
#define FIELDUB 64
char UdataSplit[FIELDUA][FIELDUB];
int UfieldsLen[FIELDUA];
int UdataLen = 0;
int UserverOK = 0; // contact with the server attempted for 3 times in a row, failing. Say, the idea is: ACK from server received: set to 3, send HEARTBEAT: decrease by 1 until zero is reached, then stop decreasing.
static uint8_t wifiDebugOn = 0;
static uint8_t wifiConnFlag = 0;
static uint8_t wifiWebserverFlag = 0;
static uint8_t wifiBeginFlag = 0;
static uint8_t wifiConnectionAttempts = 0;
// Set the local access point IP address, the netmask is assumed to be /24
IPAddress SetAPIP = {192,168,5,1};  // REMEMBER TO CHANGE THIS FOR EVERY AP YOU PLAN TO INTRODUCE TO THE NETWORK
// Set these to your desired credentials.
const char *ssid = MY_NAME;  // for the local AP  // REMEMBER TO CHANGE THE SSID AS WELL, THE NET PART CONTAINS THE THIRD BYTE OF THE AP IP ADDRESS (the network LSByte)
const char *password = "giampippetto";
WiFiServer serverSTA(8080); // adding a second server on the STA interface? Let's try
// loop() control section
uint32_t loopCounter = 0;
// NETWORK section
// processing variables subsection
uint8_t payloadCurrContent[128] = {0};
uint8_t hashCurrContent[64] = {0};
uint8_t payHeaderCurrContent[32] = {0};
// NAt processing subsection
uint32_t payloadTypeF = 0;
uint32_t srcIPext = 0; // STA side
uint32_t dstIPext = 0;
uint32_t srcIPint = 0; // AP side
uint32_t dstIPint = 0;
uint32_t srcIPpay = 0; // payload side
uint32_t dstIPpay = 0;
// in the NAT table, the folloving are converted to uint32_t 
uint16_t srcPortext = 0; // STA side
uint16_t dstPortext = 0;
uint16_t srcPortint = 0; // AP side
uint16_t dstPortint = 0;
uint16_t srcPortpay = 0; // payload side
uint16_t dstPortpay = 0;
uint16_t expiryCounter = 0;
// NAT table subsection
uint32_t NATline[16] = {0};  // there are 14 fields actually, as per the above list, plus 2 reserved fields
uint32_t NATtable[256][16] = {0};
uint16_t NATlinePointer = 0; // do we allow up to 256 flows only?
// routing table subsection
uint16_t RoutelinePointer = 0; // do we allow up to 16 routes only?
uint32_t routetable[16][8] = {0};  // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
//packet buffer sub-section
uint8_t payloadToProcessFlag = 0; // if the LSB bit0 == 1, there is a payload that needs processing, other values / bits set may mean other operations.
uint8_t * payloadBuffer = NULL;
//structure of the packet buffer:
Size = 224Bytes = 32B header + 128B payload + 64B hash
4B = Type Field( 4 bytes ) = reqtype(1B), protocolNum(1B), Reserved(1B), Reserved(1B)
4B = DST IP
4B = SRC IP 
2B = DST PORT
2B = SRC PORT
2B = PayloadLen
2B = Reserved
4B = Reserved
4B = Reserved
4B = Reserved
128B = actual payload
64B = sha256Hash_reserved(32B raw or 64B hex)
// LED section
#define LED_BUILTIN 2   // Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED
// string section 
// converts character array 
// to string and returns it 
String convertToString(char* a, int size) 
    int i; 
    String s = ""; 
    for (i = 0; i < size; i++) { 
        s = s + a[i]; 
    } 
    return s; 
// deep sleep section
#define uS_TO_S_FACTOR 1000000ULL  /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  60        /* Time ESP32 will go to sleep (in seconds) */
RTC_DATA_ATTR int bootCount = 0;
Method to print the reason by which ESP32
has been awaken from sleep
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch(wakeup_reason)
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
// update the routing table
void routeTableUpdate() {
// RoutelinePointer // do we allow up to 16 routes only?
//uint32_t *routetable[16][8] // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
uint32_t ImyLocalIP = 0;
uint32_t ImyLocalSubnet = 0;
uint32_t ImyAPIP = 0;
uint32_t ImyAPSubnet = 0;
uint32_t ImyLocalSubnetMask = 0;
uint32_t ImyAPSubnetMask = (255 >> 24) + (255 >> 16) + (255 >> 8);
uint32_t ImyLocalGateway = 0;
IPAddress myLocalIP = {0,0,0,0};
IPAddress myLocalSubnet = {0,0,0,0};
IPAddress myLocalSubnetMask = {0,0,0,0};
IPAddress myLocalGateway = {0,0,0,0};
IPAddress myAPIP = WiFi.softAPIP();
ImyAPIP = (uint32_t)((myAPIP[0] << 24) + (myAPIP[1] << 24) + (myAPIP[2] << 24) + myAPIP[3]);
ImyAPSubnet = ImyAPIP & ImyAPSubnetMask;
// the first lines
// line 0 local AP  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
routetable[0][0] = ImyAPSubnet;
routetable[0][1] = ImyAPSubnetMask;
routetable[0][2] = ImyAPIP;
routetable[0][3] = 0; // gateway of course set to 0 for the AP side
routetable[0][4] = 0; // interface ID set to zero, for the moment.
routetable[0][5] = 0;
routetable[0][6] = 0;
routetable[0][7] = 0;
if (wifiConnFlag == 1) {
  myLocalIP = WiFi.localIP();
  myLocalSubnet = WiFi.subnetMask();
  myLocalGateway = WiFi.gatewayIP();
  ImyLocalIP = (myLocalIP[0] << 24) + (myLocalIP[1] << 24) + (myLocalIP[2] << 24) + myLocalIP[3];
  ImyLocalSubnetMask = (myLocalSubnetMask[0] << 24) + (myLocalSubnetMask[1] << 24) + (myLocalSubnetMask[2] << 24) + myLocalSubnetMask[3];
  ImyLocalGateway = (myLocalGateway[0] << 24) + (myLocalGateway[1] << 24) + (myLocalGateway[2] << 24) + myLocalGateway[3];
  ImyLocalSubnet = ImyLocalIP & ImyLocalSubnetMask;
  // line 1 STA  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
  routetable[1][0] = ImyLocalSubnet;
  routetable[1][1] = ImyLocalSubnetMask;
  routetable[1][2] = ImyLocalIP;
  routetable[1][3] = ImyLocalGateway;
  routetable[1][4] = 1; // interface ID set to 1, for the moment.
  routetable[1][5] = 0;
  routetable[1][6] = 0;
  routetable[1][7] = 0; 
} else {
  routetable[1][0] = 0; // nullifying the STA route
  routetable[1][1] = 0; // nullifying the STA route
  routetable[1][2] = 0; // nullifying the STA route
  routetable[1][3] = 0; // nullifying the STA route
  routetable[1][4] = 0; // nullifying the STA route
  routetable[1][5] = 0; // nullifying the STA route
  routetable[1][6] = 0; // nullifying the STA route
  routetable[1][7] = 0; // nullifying the STA route
}  // end void routetableupdate()
// handle client requests
void clientServe() {
  WiFiClient client = serverSTA.available();   // listen for incoming clients
  if (client) {                             // if you get a client,
    Serial.println("New Client.");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to take a picture and send it via telegram (configure via udp layer 5 control protocol).<br>");
            client.print("Click <a href=\"/L\">here</a> to restart the device.<br>");
            client.print("Click <a href=\"/W\">here</a> to initialize the camera hardware for the integrated camera webserver.<br>");
            client.print("Click <a href=\"/S\">here</a> to deinitialize the camera hardware and save power.<br>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          //digitalWrite(LED_BUILTIN, HIGH);               // GET /H takes a picture and sends it via telegram
          if ((cameraInitType ! = 1) || (cameraInitType == 0)) {
              if (cameraInitType ! = 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
          take_send_photo(TChatId);
          digitalWrite(LED_BUILTIN, LOW);  
        }
        if (currentLine.endsWith("GET /W")) {  // init camera for the main camera webserver
          if ((cameraInitType ! = 1) || (cameraInitType == 0)) {
              if (cameraInitType ! = 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
        }
        if (currentLine.endsWith("GET /S")) {  // deinitialize the camera
          cameraInitType = 0;
          esp_camera_deinit();  // the camera needs a deinit from its current configuration.
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(LED_BUILTIN, LOW);                // GET /L restarts the device
          esp_restart();
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
void startCameraServer();
void wifiIntManagement() {
    // STA connection and disconnection management
// WIFI DEBUG AND SERVICING SECTION START
  if (wifiDebugOn == 1) {
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
    
      Serial.println("WiFi not connected yet");
    }
    if (WiFi.status() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
    
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
    }
  if (wifiConnectionAttempts >= 32) { // turning off wifi, there is no point in trying anymore, if past 32 attempts.
    WiFi.mode(WIFI_OFF); // turning off wifi, then we go to deep sleep for a certain number of seconds.
    
    esp_err_t err = esp_camera_deinit();
    esp_deep_sleep_start();  // going to deep sleep
    
  if ((wifiConnFlag == 0) && (wifiConnectionAttempts < 32)) {  // wifiConnectionAttempts must be < 32 
    wifiConnectionAttempts++; // increasing the connection attempts counter
    
    if (wifiMulti.run() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
      Serial2.print("WiFi up and running: ");
      Serial2.print(WiFi.localIP());
      Serial2.println("' to connect");
      wifiConnFlag = 1;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
    if ((WiFi.status() != WL_CONNECTED) && (wifiBeginFlag == 0)) {
    
      Serial.println("WiFi restarting");
      WiFi.begin(ssid, password); 
      
      wifiBeginFlag = 1;
    }
  if (wifiConnFlag == 1) { // test if the wifi stays alive...
    if (WiFi.status() != WL_CONNECTED) {  // wifiMulti.run() == WL_CONNECTED // WiFi.status() != WL_CONNECTED
    
      Serial.println("WiFi disconnected");
      wifiConnFlag = 0;
      wifiBeginFlag = 0;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
  if (((wifiConnFlag == 1) && (wifiWebserverFlag == 0)) || (ESP.getFreeHeap() < 44000)) { // servicing the webserver on connection up for the first time
      // >>>>>>>> START SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      // >>>>>>>> END SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      
      wifiWebserverFlag = 1;
    
  // WIFI DEBUG AND SERVICING SECTION END 
// UDP - layer 5 control protocol
void UresetudpData() {
for(int i = 0; i < FIELDUA; i++){
  for(int j = 0; j < FIELDUB; j++) {
    UdataSplit[i][j] = 0;
for(int i = 0; i < FIELDUA; i++) {
  UfieldsLen[i] = 0;
UdataLen = 0;
} // end resetudpData()
int UfillinudpData(uint8_t *pktDataField, int pktLen) {
int i = 0;
int j = 0;
int k = 0;
UdataLen = pktLen;
for(i = 0; i < UdataLen; i++){
  if(pktDataField[i] == ',') {
    UfieldsLen[j] = k;
    Serial.print("received_udp_control_protocol_data:");
    Serial.print(UdataSplit[j]);
    Serial.print("; data_len:");
    Serial.print(k);
    Serial.print("; field_position:");
    Serial.println(j);
    j++;
    k = 0;
  if(j >= FIELDUA) {
    Serial.print("ERROR: too many commas in the udp layer 5 control protocol");
    return 100;
    
  UdataSplit[j][k] = pktDataField[i];
  k++; 
UfieldsLen[j] = k;
return 0;
} // end fillinudpData()
void UprocessudpCommand(AsyncUDPPacket packet) {
  Serial.print("processing udp layer 5 control protocol command directed to: ");
  Serial.print(UdataSplit[0]);
  Serial.print("; command is: ");
  Serial.println(UdataSplit[1]);
  // commands available at the moment, or planned, are: 
  // ACK (confirmed heartbeat reception, do nothing), TLGS (send picture to telegram), TLGC (configure telegram, field 2 = bot token, field 3 = chat id)
  // RST (reboot the device), DSLP (deep sleep)
  if(UdataSplit[0] == MY_NAME) {  // matched the field 0, the command is directed to me. 
      
      // processing the actual commands
      
      if(UdataSplit[1] == "ACK") {
        // do not reply with an ACK to an ACK, that would be ...disturbing
        UserverOK = 3;
      }
      if(UdataSplit[1] == "TLGS") {  // send picture via telegram
        //TBotToken
        //TChatId
        // technically speaking we should deinit and reinit with acceptable parameters. 
        
        if ((cameraInitType ! = 1) || (cameraInitType == 0)) {
          if (cameraInitType ! = 0) {
            esp_camera_deinit();  // the camera needs a deinit from its current configuration.
          }
          delay(1000); // this might not really be necessary
          cameraInitConfig(); // and is setup for the correct motion capture configuration
          delay(3000);
        }
         // this might not really be necessary
        take_send_photo(TChatId);   
      }
      if(UdataSplit[1] == "TLGC") { // configure telegram bot token and chat id
        bool ok; 
        String sToken = convertToString(UdataSplit[2], UfieldsLen[2]); 
        String sChatId = convertToString(UdataSplit[3], UfieldsLen[3]); 
        ok = NVS.setString ("TLGToken", sToken); // Store the data value into the key named "TLGToken" on the NVS
        if(ok) {
          ok = NVS.setString ("TLGChatId", sChatId); // Store the data value into the key named "TLGChatId" on the NVS
          
        }
        if(ok) {
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        } else {
          Serial.println("ERROR saving data to nvs");
          packet.printf(ERRNVS_DATA, packet.length());
        }
        
        
      }
      if(UdataSplit[1] == "RST") {  // restart system
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        esp_restart();
      }
      if(UdataSplit[1] == "DSLP") { // start deep sleep
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        Serial.println("RECEIVED REQUEST TO DEEP SLEEP, STARTING TO SLEEP DEEP");
        esp_err_t err = esp_camera_deinit();
        esp_deep_sleep_start();  // going to deep sleep
      }
      if(UdataSplit[1] == "WCAM") { // init camera for the webserver
        if ((cameraInitType ! = 1) || (cameraInitType == 0)) {
              if (cameraInitType ! = 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
        }   
      }
      if(UdataSplit[1] == "SCAM") { // deinitialize the camera
        cameraInitType = 0;
        esp_camera_deinit();  // the camera needs a deinit from its current configuration.
      }
      
      
void udpCommandClient() {
  if( ! udp.connected()) {
    Serial.println("UDP connecting to server A");
    udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
    Serial.println("UDP connected to server A");
  if(udp.connected()) {
        Serial.println("UDP sending to server A");
        //Send unicast
        udp.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType ! = 2) || (cameraInitType == 0)) {
              if (cameraInitType ! = 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udp.onPacket([](AsyncUDPPacket packet) {
            Serial.print("UDP Packet Type: ");
            Serial.print(packet.isBroadcast()?"Broadcast":packet.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packet.remoteIP());
            Serial.print(":");
            Serial.print(packet.remotePort());
            Serial.print(", To: ");
            Serial.print(packet.localIP());
            Serial.print(":");
            Serial.print(packet.localPort());
            Serial.print(", Length: ");
            Serial.print(packet.length());
            Serial.print(", Data: ");
            Serial.write(packet.data(), packet.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packet.data() ,packet.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packet); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
// sending the heartbeat to the backup udp command server
void udpBCommandClient() {
  if( ! udpB.connected()) {
    Serial.println("UDP connecting to server B");
    udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
    Serial.println("UDP connected to server B");
  if(udpB.connected()) {
        Serial.println("UDP sending to server B");
        //Send unicast
        udpB.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType ! = 2) || (cameraInitType == 0)) {
              if (cameraInitType ! = 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udpB.onPacket([](AsyncUDPPacket packetB) {
            Serial.print("UDP B Packet Type: ");
            Serial.print(packetB.isBroadcast()?"Broadcast":packetB.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packetB.remoteIP());
            Serial.print(":");
            Serial.print(packetB.remotePort());
            Serial.print(", To: ");
            Serial.print(packetB.localIP());
            Serial.print(":");
            Serial.print(packetB.localPort());
            Serial.print(", Length: ");
            Serial.print(packetB.length());
            Serial.print(", Data: ");
            Serial.write(packetB.data(), packetB.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packetB.data() ,packetB.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packetB); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
void clientsManagement() {
  if ((wifiConnFlag == 1) && (wifiWebserverFlag == 1)) { // HANDLE CLIENT REQUESTS HERE
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
    clientServe();
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
  } // end handle client requests if
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
// wakeup and init part 
  // packet / payload buffer allocation
  payloadBuffer = (uint8_t *)malloc(256 * sizeof(uint8_t));  // the actual size is 224 (see in the declarations), the maximum payload size for ESP-NOW is 250.
  pinMode(LED_BUILTIN, OUTPUT);
  // deep sleep boots
  ++bootCount;
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  /*
  First we configure the wake up source
  We set our ESP32 to wake up every 5 seconds
  */
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
// camera init and config
  Serial.println("WARNING, NOT INITIALIZING THE CAMERA IN ORDER TO SAVE POWER. PLEASE DO IT MANUALLY VIA UDP COMMANDS OR VIA THE MANAGEMENT HTTP SERVER ON PORT 8080");
  //cameraInitConfig(); // we want the camera not initialized by default. This saver power.
  /*
 if ((cameraInitType ! = 1) || (cameraInitType == 0)) {
              if (cameraInitType ! = 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
  */
// WIFI SECTION
  Serial.println();
  Serial.println("Configuring access point...");
  WiFi.mode(WIFI_AP_STA); // added by me // selecting the AP+STA mode
  wifiMulti.addAP("e32ap001s01border", "giampippetto");  // the connection part is verified as follows: wifiMulti.run() == WL_CONNECTED
  wifiMulti.addAP("G5SE_7499", "pippopluto");
  wifiMulti.addAP("internet-gw.iw1gpe.it.ampr.o", "heisakuukanwohiraite");
  wifiMulti.addAP("inverse", "heisakuukanwohiraite");
  wifiMulti.addAP("e32ap002s01border", "giampippetto");
  wifiMulti.addAP("e32ap003s01border", "giampippetto");
  wifiMulti.addAP("e32ap004s01border", "giampippetto");
  wifiMulti.addAP("e32ap001s02border", "giampippetto");
  wifiMulti.addAP("e32ap002s02border", "giampippetto");
  wifiMulti.addAP("e32ap003s02border", "giampippetto");
  wifiMulti.addAP("e32ap004s02border", "giampippetto");
  // You can remove the password parameter if you want the AP to be open.
  WiFi.softAP(ssid, password);
  delay(200); // wait at least 100ms until the AP has started
  if(!WiFi.softAPConfig(SetAPIP, SetAPIP, IPAddress(255, 255, 255, 0))){
      Serial.println("AP Config Failed");
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  // the STA part is configured here and managed in loop()
// old wifi section
  //WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  Serial.println("");
  Serial.println("WiFi connected");
  startCameraServer();
  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  */
  // NVS storage init
  NVS.begin();
  // trying to load the bot configuration from NVS 
  //TBotToken
  //TChatId
  // load the telegram bot token if available from NVS
  String loadedstr = NVS.getString ("TLGToken"); // Read the value of the "TLGToken" key from the NVS 
  if(loadedstr.length() > 3) { // at least we make sure the result is not empty...
    TBotToken = {};
    loadedstr.toCharArray(TBotToken, loadedstr.length()); // loading TBotToken
    loadedstr = NVS.getString ("TLGChatId"); // Read the value of the "TLGChatId" key from the NVS 
    if(loadedstr.length() > 3) {
      loadedstr.toCharArray(TChatId, loadedstr.length()); // loading TChatId
      Serial.print("Loaded Telegram BotToken and ChatId from NVS storage with values: ");
      Serial.print(TBotToken);
      Serial.print(" and ");
      Serial.println(TChatId);
    }
} // END setup()
void loop() {
  // put your main code here, to run repeatedly:
 // loopCounter check
  if (loopCounter > 16) {
    loopCounter = 0;
  clientsManagement();  // web client requests are handled always 
  if(loopCounter == 1) {
    wifiIntManagement();
  if(loopCounter == 2) {
    routeTableUpdate();
  if(loopCounter == 3) {
    udpCommandClient();
    udp.broadcastTo(MY_NAME, udpServerPort);
  if(loopCounter == 5) {
  // position number 15, let the device stabilize its connections first...
  if(loopCounter == 15) { // MOTION DETECTOR SECTION
    if ((motionDetectON == 1) || ((UserverOK == 0) && (alarmEnabled == 1)) ){
      
      if (!capture_still()) {
        Serial.println("Failed capture");
        delay(3000);
        return;
      }
      if (motion_detect()) {
        Serial.println("Motion detected");
    }
    update_frame();
    }
  // loopCounter increase
  loopCounter++;
  delay(1000);
#include <Arduino.h>
#line 1 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
// ESP32_cam_node, upgraded with una additional udp layer 5 control protocol and configurable telegram bot
// PLEASE ALSO INSTALL THE ArduinoJson library by Benoit Blanchon
#include "esp_camera.h"
#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiAP.h>
#include <WiFiUdp.h>
#include "AsyncUDP.h"
#include "lwip/api.h"
// NVS includes, non volatile storage
#include "ArduinoNvs.h"
// WIFI includes and variables section START
#define MY_NAME "e32cam001s01"
#define HEARTBEAT_DATA "e32cam001s01,HEARTBEAT,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ACK_DATA "e32cam001s01,ACK,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ERR_DATA "e32cam001s01,ERR,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ERRNVS_DATA "e32cam001s01,ERR,ERROR saving data to NVS,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#include <WiFiMulti.h> // this should support more different AP's // ToDo
WiFiMulti wifiMulti; // this should support more different AP's // ToDo
// Non volatile storage - incorporated in the project folder
#include "ArduinoNvs.h"
// CAMERA: camera configuration and initialization
camera_config_t config;
uint8_t cameraInitType = 0; // 0 = camera off, not initialized; 1 = default init, the main webserver; 2 = motion detector; 3 = color blob detector
#define ALARMS_ENABLED 1  // by default, the device works as a motion detector in case the contact with the command and control server is lost. 
// WARNING!!! Make sure that you have either selected ESP32 Wrover Module,
//            or another board which has PSRAM enabled
// Select camera model
//#define CAMERA_MODEL_WROVER_KIT
//#define CAMERA_MODEL_ESP_EYE
//#define CAMERA_MODEL_M5STACK_PSRAM
//#define CAMERA_MODEL_M5STACK_WIDE
#define CAMERA_MODEL_AI_THINKER
#include "camera_pins.h"
// of course this is the default and should be modified
void cameraInitConfig() {
  // camera part
  cameraInitType = 1;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// MOTION DETECTION SPECIFIC CAMERA DEFINES and buffers
#define WIDTH 320
#define HEIGHT 240
#define BLOCK_SIZE 10
#define W (WIDTH / BLOCK_SIZE)
#define H (HEIGHT / BLOCK_SIZE)
#define BLOCK_DIFF_THRESHOLD 0.2
#define IMAGE_DIFF_THRESHOLD 0.1
#define DEBUG 1
bool capture_still(); // declare functions
bool motion_detect();
void update_frame();
void print_frame(uint16_t frame[H][W]);
uint16_t prev_frame[H][W] = { 0 };  // these are actually 32*24 * 16bit, more than acceptable, no problem.
uint16_t current_frame[H][W] = { 0 };
uint8_t motionDetectON = 0;  // motion detection is normally kept off. The idea is to activate it in case the command & control servers do not respond, or to activate it on demand / on alarm.
uint8_t alarmEnabled = ALARMS_ENABLED; // motion detection activation is enabled by default to 1, some other kinds of usage may require this is off, for example the color blob detection mode and the webcam / telegram modes. 
// MOTION DETECTION SPECIFIC CAMERA CONFIG INIT FUNCTION (first, remember to do a deinit!!!)
void cameraInitConfigMotionDetect() {
  // camera part
  cameraInitType = 2;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_GRAYSCALE;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// CAMERA MOTION DETECTION SPECIFIC FUNCTIONS
 * Capture image and do down-sampling
bool capture_still() {
    camera_fb_t *frame_buffer = esp_camera_fb_get();
    if (!frame_buffer)
        return false;
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    //sensor_t *sensor = esp_camera_sensor_get();
    //Serial.print("Switch to JPEG: ");
    //Serial.println(sensor->set_pixformat(sensor, PIXFORMAT_RGB565));
    config.pixel_format = PIXFORMAT_RGB565;
    Serial.print("Switch ok? ");
    Serial.println(esp_camera_init(&config) == ESP_OK ? "yes" : "no");
    frame_buffer = esp_camera_fb_get();
    Serial.print("JPEG len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    //sensor->set_pixformat(sensor, PIXFORMAT_GRAYSCALE);
    frame_buffer = esp_camera_fb_get();
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    while (1) delay(50000);
    // set all 0s in current frame
    for (int y = 0; y < H; y++)
        for (int x = 0; x < W; x++)
            current_frame[y][x] = 0;
    // down-sample image in blocks
    for (uint32_t i = 0; i < WIDTH * HEIGHT; i++) {
        const uint16_t x = i % WIDTH;
        const uint16_t y = floor(i / WIDTH);
        const uint8_t block_x = floor(x / BLOCK_SIZE);
        const uint8_t block_y = floor(y / BLOCK_SIZE);
        const uint8_t pixel = frame_buffer->buf[i];
        const uint16_t current = current_frame[block_y][block_x];
        // average pixels in block (accumulate)
        current_frame[block_y][block_x] += pixel;
    }
    // average pixels in block (rescale)
    for (int y = 0; y < H; y++)
        for (int x = 0; x < W; x++)
            current_frame[y][x] /= BLOCK_SIZE * BLOCK_SIZE;
#if DEBUG
    Serial.println("Current frame:");
    print_frame(current_frame);
    Serial.println("---------------");
#endif
    return true;
 * Compute the number of different blocks
 * If there are enough, then motion happened
bool motion_detect() {
    uint16_t changes = 0;
    const uint16_t blocks = (WIDTH * HEIGHT) / (BLOCK_SIZE * BLOCK_SIZE);
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            float current = current_frame[y][x];
            float prev = prev_frame[y][x];
            float delta = abs(current - prev) / prev;
            if (delta >= BLOCK_DIFF_THRESHOLD) {
#if DEBUG
                Serial.print("diff\t");
                Serial.print(y);
                Serial.print('\t');
                Serial.println(x);
#endif
                changes += 1;
            }
        }
    }
    Serial.print("Changed ");
    Serial.print(changes);
    Serial.print(" out of ");
    Serial.println(blocks);
    return (1.0 * changes / blocks) > IMAGE_DIFF_THRESHOLD;
 * Copy current frame to previous
void update_frame() {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            prev_frame[y][x] = current_frame[y][x];
        }
    }
 * For serial debugging
 * @param frame
void print_frame(uint16_t frame[H][W]) {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            Serial.print(frame[y][x]);
            Serial.print('\t');
        }
        Serial.println();
    }
// CAMERA COLOR BLOB DETECTOR, INIT FUNCTION
// color-based blob detection - I plan to use this as part of a larger project, the idea is to help detect certain insects and pests in agricultural settings
// this camera will then become an additional sensor communicating with a robot designed to remove pests from invaded plants. 
void cameraInitConfigColorDetector() {  // specific for color-based target recognition, remember to do a deinit first!!!
  // camera part
  cameraInitType = 3;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_RGB888;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// Telegram section
#include "UniversalTelegramBotRZO.h"
#include <WiFiClientSecure.h>
char* TBotToken = "810218086:AAFPJNDbolU0tzj_Xx6lXOsatDlYnWYaa80";
char* TChatId = "537093554";
WiFiClientSecure client;
UniversalTelegramBot TBotCambot(TBotToken, client);
int Bot_mtbs = 3000; //mean time between scan messages
long Bot_lasttime;   //last time messages' scan has been done
// specific camera variables for the telegram bot
//camera_fb_t * TBotCamfb; // moved intra-function
uint8_t* TBotCamfb_buffer;
size_t TBotCamfb_length;
int TBotCamcurrentByte;
// camera functions specific for the telegram bot
bool isMoreDataAvailable() {
  return (TBotCamfb_length - TBotCamcurrentByte);
uint8_t photoNextByte() {
  TBotCamcurrentByte++;
  return (TBotCamfb_buffer[TBotCamcurrentByte - 1]);
void take_send_photo(String TChatId)
  camera_fb_t * TBotCamfb = NULL;
  TBotCamfb = esp_camera_fb_get();
  TBotCamcurrentByte = 0;
  TBotCamfb_length = TBotCamfb->len;
  TBotCamfb_buffer = TBotCamfb->buf;
  TBotCambot.sendPhotoByBinary(TChatId, "image/jpeg", TBotCamfb->len, isMoreDataAvailable, photoNextByte, nullptr, nullptr);
  esp_camera_fb_return(TBotCamfb);
  TBotCamfb_length = NULL;
  TBotCamfb_buffer = NULL;
// UDP Async client, sends keep heartbeat messages to the server and retrieves commands
AsyncUDP udp; // for server A  // udp layer 5 control protocol
AsyncUDP udpB; // for server B
// command and control IP addresses for server A and server B (redundant server), the exchange is done via udp ( the port is defined by int udpServerPort) and the layer 5 transfers commands and status info as comma separated variables
int IPudpServerAa = 192;
int IPudpServerAb = 168;
int IPudpServerAc = 88;
int IPudpServerAd = 32;
int IPudpServerBa = 192;
int IPudpServerBb = 168;
int IPudpServerBc = 88;
int IPudpServerBd = 3;
int udpServerPort = 8443; // UDP/443 because, well, we can
// udp - layer 5 control protocol processing, the layer 5 control protocol consists of 8 CSV fields. The protocol structure is simple: client_name,requested_operation,field1,field2,field3,field4,field5,field6  all unused fields are set to ascii character 0
#define FIELDUA 8
#define FIELDUB 64
char UdataSplit[FIELDUA][FIELDUB];
int UfieldsLen[FIELDUA];
int UdataLen = 0;
int UserverOK = 0; // contact with the server attempted for 3 times in a row, failing. Say, the idea is: ACK from server received: set to 3, send HEARTBEAT: decrease by 1 until zero is reached, then stop decreasing.
static uint8_t wifiDebugOn = 0;
static uint8_t wifiConnFlag = 0;
static uint8_t wifiWebserverFlag = 0;
static uint8_t wifiBeginFlag = 0;
static uint8_t wifiConnectionAttempts = 0;
// Set the local access point IP address, the netmask is assumed to be /24
IPAddress SetAPIP = {192,168,5,1};  // REMEMBER TO CHANGE THIS FOR EVERY AP YOU PLAN TO INTRODUCE TO THE NETWORK
// Set these to your desired credentials.
const char *ssid = MY_NAME;  // for the local AP  // REMEMBER TO CHANGE THE SSID AS WELL, THE NET PART CONTAINS THE THIRD BYTE OF THE AP IP ADDRESS (the network LSByte)
const char *password = "giampippetto";
WiFiServer serverSTA(8080); // adding a second server on the STA interface? Let's try
// loop() control section
uint32_t loopCounter = 0;
// NETWORK section
// processing variables subsection
uint8_t payloadCurrContent[128] = {0};
uint8_t hashCurrContent[64] = {0};
uint8_t payHeaderCurrContent[32] = {0};
// NAt processing subsection
uint32_t payloadTypeF = 0;
uint32_t srcIPext = 0; // STA side
uint32_t dstIPext = 0;
uint32_t srcIPint = 0; // AP side
uint32_t dstIPint = 0;
uint32_t srcIPpay = 0; // payload side
uint32_t dstIPpay = 0;
// in the NAT table, the folloving are converted to uint32_t 
uint16_t srcPortext = 0; // STA side
uint16_t dstPortext = 0;
uint16_t srcPortint = 0; // AP side
uint16_t dstPortint = 0;
uint16_t srcPortpay = 0; // payload side
uint16_t dstPortpay = 0;
uint16_t expiryCounter = 0;
// NAT table subsection
uint32_t NATline[16] = {0};  // there are 14 fields actually, as per the above list, plus 2 reserved fields
uint32_t NATtable[256][16] = {0};
uint16_t NATlinePointer = 0; // do we allow up to 256 flows only?
// routing table subsection
uint16_t RoutelinePointer = 0; // do we allow up to 16 routes only?
uint32_t routetable[16][8] = {0};  // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
//packet buffer sub-section
uint8_t payloadToProcessFlag = 0; // if the LSB bit0 == 1, there is a payload that needs processing, other values / bits set may mean other operations.
uint8_t * payloadBuffer = NULL;
//structure of the packet buffer:
Size = 224Bytes = 32B header + 128B payload + 64B hash
4B = Type Field( 4 bytes ) = reqtype(1B), protocolNum(1B), Reserved(1B), Reserved(1B)
4B = DST IP
4B = SRC IP 
2B = DST PORT
2B = SRC PORT
2B = PayloadLen
2B = Reserved
4B = Reserved
4B = Reserved
4B = Reserved
128B = actual payload
64B = sha256Hash_reserved(32B raw or 64B hex)
// LED section
#define LED_BUILTIN 2   // Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED
// string section 
// converts character array 
// to string and returns it 
String convertToString(char* a, int size) 
    int i; 
    String s = ""; 
    for (i = 0; i < size; i++) { 
        s = s + a[i]; 
    } 
    return s; 
// deep sleep section
#define uS_TO_S_FACTOR 1000000ULL  /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  60        /* Time ESP32 will go to sleep (in seconds) */
RTC_DATA_ATTR int bootCount = 0;
Method to print the reason by which ESP32
has been awaken from sleep
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch(wakeup_reason)
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
// update the routing table
void routeTableUpdate() {
// RoutelinePointer // do we allow up to 16 routes only?
//uint32_t *routetable[16][8] // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
uint32_t ImyLocalIP = 0;
uint32_t ImyLocalSubnet = 0;
uint32_t ImyAPIP = 0;
uint32_t ImyAPSubnet = 0;
uint32_t ImyLocalSubnetMask = 0;
uint32_t ImyAPSubnetMask = (255 >> 24) + (255 >> 16) + (255 >> 8);
uint32_t ImyLocalGateway = 0;
IPAddress myLocalIP = {0,0,0,0};
IPAddress myLocalSubnet = {0,0,0,0};
IPAddress myLocalSubnetMask = {0,0,0,0};
IPAddress myLocalGateway = {0,0,0,0};
IPAddress myAPIP = WiFi.softAPIP();
ImyAPIP = (uint32_t)((myAPIP[0] << 24) + (myAPIP[1] << 24) + (myAPIP[2] << 24) + myAPIP[3]);
ImyAPSubnet = ImyAPIP & ImyAPSubnetMask;
// the first lines
// line 0 local AP  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
routetable[0][0] = ImyAPSubnet;
routetable[0][1] = ImyAPSubnetMask;
routetable[0][2] = ImyAPIP;
routetable[0][3] = 0; // gateway of course set to 0 for the AP side
routetable[0][4] = 0; // interface ID set to zero, for the moment.
routetable[0][5] = 0;
routetable[0][6] = 0;
routetable[0][7] = 0;
if (wifiConnFlag == 1) {
  myLocalIP = WiFi.localIP();
  myLocalSubnet = WiFi.subnetMask();
  myLocalGateway = WiFi.gatewayIP();
  ImyLocalIP = (myLocalIP[0] << 24) + (myLocalIP[1] << 24) + (myLocalIP[2] << 24) + myLocalIP[3];
  ImyLocalSubnetMask = (myLocalSubnetMask[0] << 24) + (myLocalSubnetMask[1] << 24) + (myLocalSubnetMask[2] << 24) + myLocalSubnetMask[3];
  ImyLocalGateway = (myLocalGateway[0] << 24) + (myLocalGateway[1] << 24) + (myLocalGateway[2] << 24) + myLocalGateway[3];
  ImyLocalSubnet = ImyLocalIP & ImyLocalSubnetMask;
  // line 1 STA  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
  routetable[1][0] = ImyLocalSubnet;
  routetable[1][1] = ImyLocalSubnetMask;
  routetable[1][2] = ImyLocalIP;
  routetable[1][3] = ImyLocalGateway;
  routetable[1][4] = 1; // interface ID set to 1, for the moment.
  routetable[1][5] = 0;
  routetable[1][6] = 0;
  routetable[1][7] = 0; 
} else {
  routetable[1][0] = 0; // nullifying the STA route
  routetable[1][1] = 0; // nullifying the STA route
  routetable[1][2] = 0; // nullifying the STA route
  routetable[1][3] = 0; // nullifying the STA route
  routetable[1][4] = 0; // nullifying the STA route
  routetable[1][5] = 0; // nullifying the STA route
  routetable[1][6] = 0; // nullifying the STA route
  routetable[1][7] = 0; // nullifying the STA route
}  // end void routetableupdate()
// handle client requests
void clientServe() {
  WiFiClient client = serverSTA.available();   // listen for incoming clients
  if (client) {                             // if you get a client,
    Serial.println("New Client.");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to take a picture and send it via telegram (configure via udp layer 5 control protocol).<br>");
            client.print("Click <a href=\"/L\">here</a> to restart the device.<br>");
            client.print("Click <a href=\"/W\">here</a> to initialize the camera hardware for the integrated camera webserver.<br>");
            client.print("Click <a href=\"/S\">here</a> to deinitialize the camera hardware and save power.<br>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          //digitalWrite(LED_BUILTIN, HIGH);               // GET /H takes a picture and sends it via telegram
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
          take_send_photo(TChatId);
          digitalWrite(LED_BUILTIN, LOW);  
        }
        if (currentLine.endsWith("GET /W")) {  // init camera for the main camera webserver
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
        }
        if (currentLine.endsWith("GET /S")) {  // deinitialize the camera
          cameraInitType = 0;
          esp_camera_deinit();  // the camera needs a deinit from its current configuration.
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(LED_BUILTIN, LOW);                // GET /L restarts the device
          esp_restart();
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
void startCameraServer();
void wifiIntManagement() {
    // STA connection and disconnection management
// WIFI DEBUG AND SERVICING SECTION START
  if (wifiDebugOn == 1) {
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
    
      Serial.println("WiFi not connected yet");
    }
    if (WiFi.status() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
    
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
    }
  if (wifiConnectionAttempts >= 32) { // turning off wifi, there is no point in trying anymore, if past 32 attempts.
    WiFi.mode(WIFI_OFF); // turning off wifi, then we go to deep sleep for a certain number of seconds.
    
    esp_err_t err = esp_camera_deinit();
    esp_deep_sleep_start();  // going to deep sleep
    
  if ((wifiConnFlag == 0) && (wifiConnectionAttempts < 32)) {  // wifiConnectionAttempts must be < 32 
    wifiConnectionAttempts++; // increasing the connection attempts counter
    
    if (wifiMulti.run() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
      Serial2.print("WiFi up and running: ");
      Serial2.print(WiFi.localIP());
      Serial2.println("' to connect");
      wifiConnFlag = 1;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
    if ((WiFi.status() != WL_CONNECTED) && (wifiBeginFlag == 0)) {
    
      Serial.println("WiFi restarting");
      WiFi.begin(ssid, password); 
      
      wifiBeginFlag = 1;
    }
  if (wifiConnFlag == 1) { // test if the wifi stays alive...
    if (WiFi.status() != WL_CONNECTED) {  // wifiMulti.run() == WL_CONNECTED // WiFi.status() != WL_CONNECTED
    
      Serial.println("WiFi disconnected");
      wifiConnFlag = 0;
      wifiBeginFlag = 0;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
  if (((wifiConnFlag == 1) && (wifiWebserverFlag == 0)) || (ESP.getFreeHeap() < 44000)) { // servicing the webserver on connection up for the first time
      // >>>>>>>> START SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      // >>>>>>>> END SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      
      wifiWebserverFlag = 1;
    
  // WIFI DEBUG AND SERVICING SECTION END 
// UDP - layer 5 control protocol
void UresetudpData() {
for(int i = 0; i < FIELDUA; i++){
  for(int j = 0; j < FIELDUB; j++) {
    UdataSplit[i][j] = 0;
for(int i = 0; i < FIELDUA; i++) {
  UfieldsLen[i] = 0;
UdataLen = 0;
} // end resetudpData()
int UfillinudpData(uint8_t *pktDataField, int pktLen) {
int i = 0;
int j = 0;
int k = 0;
UdataLen = pktLen;
for(i = 0; i < UdataLen; i++){
  if(pktDataField[i] == ',') {
    UfieldsLen[j] = k;
    Serial.print("received_udp_control_protocol_data:");
    Serial.print(UdataSplit[j]);
    Serial.print("; data_len:");
    Serial.print(k);
    Serial.print("; field_position:");
    Serial.println(j);
    j++;
    k = 0;
  if(j >= FIELDUA) {
    Serial.print("ERROR: too many commas in the udp layer 5 control protocol");
    return 100;
    
  UdataSplit[j][k] = pktDataField[i];
  k++; 
UfieldsLen[j] = k;
return 0;
} // end fillinudpData()
void UprocessudpCommand(AsyncUDPPacket packet) {
  Serial.print("processing udp layer 5 control protocol command directed to: ");
  Serial.print(UdataSplit[0]);
  Serial.print("; command is: ");
  Serial.println(UdataSplit[1]);
  // commands available at the moment, or planned, are: 
  // ACK (confirmed heartbeat reception, do nothing), TLGS (send picture to telegram), TLGC (configure telegram, field 2 = bot token, field 3 = chat id)
  // RST (reboot the device), DSLP (deep sleep)
  if(UdataSplit[0] == MY_NAME) {  // matched the field 0, the command is directed to me. 
      
      // processing the actual commands
      
      if(UdataSplit[1] == "ACK") {
        // do not reply with an ACK to an ACK, that would be ...disturbing
        UserverOK = 3;
      }
      if(UdataSplit[1] == "TLGS") {  // send picture via telegram
        //TBotToken
        //TChatId
        // technically speaking we should deinit and reinit with acceptable parameters. 
        
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
          if (cameraInitType != 0) {
            esp_camera_deinit();  // the camera needs a deinit from its current configuration.
          }
          delay(1000); // this might not really be necessary
          cameraInitConfig(); // and is setup for the correct motion capture configuration
          delay(3000);
        }
         // this might not really be necessary
        take_send_photo(TChatId);   
      }
      if(UdataSplit[1] == "TLGC") { // configure telegram bot token and chat id
        bool ok; 
        String sToken = convertToString(UdataSplit[2], UfieldsLen[2]); 
        String sChatId = convertToString(UdataSplit[3], UfieldsLen[3]); 
        ok = NVS.setString ("TLGToken", sToken); // Store the data value into the key named "TLGToken" on the NVS
        if(ok) {
          ok = NVS.setString ("TLGChatId", sChatId); // Store the data value into the key named "TLGChatId" on the NVS
          
        }
        if(ok) {
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        } else {
          Serial.println("ERROR saving data to nvs");
          packet.printf(ERRNVS_DATA, packet.length());
        }
        
        
      }
      if(UdataSplit[1] == "RST") {  // restart system
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        esp_restart();
      }
      if(UdataSplit[1] == "DSLP") { // start deep sleep
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        Serial.println("RECEIVED REQUEST TO DEEP SLEEP, STARTING TO SLEEP DEEP");
        esp_err_t err = esp_camera_deinit();
        esp_deep_sleep_start();  // going to deep sleep
      }
      if(UdataSplit[1] == "WCAM") { // init camera for the webserver
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
        }   
      }
      if(UdataSplit[1] == "SCAM") { // deinitialize the camera
        cameraInitType = 0;
        esp_camera_deinit();  // the camera needs a deinit from its current configuration.
      }
      
      
void udpCommandClient() {
  if( ! udp.connected()) {
    Serial.println("UDP connecting to server A");
    udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
    Serial.println("UDP connected to server A");
  if(udp.connected()) {
        Serial.println("UDP sending to server A");
        //Send unicast
        udp.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udp.onPacket([](AsyncUDPPacket packet) {
            Serial.print("UDP Packet Type: ");
            Serial.print(packet.isBroadcast()?"Broadcast":packet.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packet.remoteIP());
            Serial.print(":");
            Serial.print(packet.remotePort());
            Serial.print(", To: ");
            Serial.print(packet.localIP());
            Serial.print(":");
            Serial.print(packet.localPort());
            Serial.print(", Length: ");
            Serial.print(packet.length());
            Serial.print(", Data: ");
            Serial.write(packet.data(), packet.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packet.data() ,packet.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packet); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
// sending the heartbeat to the backup udp command server
void udpBCommandClient() {
  if( ! udpB.connected()) {
    Serial.println("UDP connecting to server B");
    udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
    Serial.println("UDP connected to server B");
  if(udpB.connected()) {
        Serial.println("UDP sending to server B");
        //Send unicast
        udpB.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udpB.onPacket([](AsyncUDPPacket packetB) {
            Serial.print("UDP B Packet Type: ");
            Serial.print(packetB.isBroadcast()?"Broadcast":packetB.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packetB.remoteIP());
            Serial.print(":");
            Serial.print(packetB.remotePort());
            Serial.print(", To: ");
            Serial.print(packetB.localIP());
            Serial.print(":");
            Serial.print(packetB.localPort());
            Serial.print(", Length: ");
            Serial.print(packetB.length());
            Serial.print(", Data: ");
            Serial.write(packetB.data(), packetB.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packetB.data() ,packetB.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packetB); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
void clientsManagement() {
  if ((wifiConnFlag == 1) && (wifiWebserverFlag == 1)) { // HANDLE CLIENT REQUESTS HERE
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
    clientServe();
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
  } // end handle client requests if
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
// wakeup and init part 
  // packet / payload buffer allocation
  payloadBuffer = (uint8_t *)malloc(256 * sizeof(uint8_t));  // the actual size is 224 (see in the declarations), the maximum payload size for ESP-NOW is 250.
  pinMode(LED_BUILTIN, OUTPUT);
  // deep sleep boots
  ++bootCount;
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  /*
  First we configure the wake up source
  We set our ESP32 to wake up every 5 seconds
  */
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
// camera init and config
  Serial.println("WARNING, NOT INITIALIZING THE CAMERA IN ORDER TO SAVE POWER. PLEASE DO IT MANUALLY VIA UDP COMMANDS OR VIA THE MANAGEMENT HTTP SERVER ON PORT 8080");
  //cameraInitConfig(); // we want the camera not initialized by default. This saver power.
  /*
 if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
  */
// WIFI SECTION
  Serial.println();
  Serial.println("Configuring access point...");
  WiFi.mode(WIFI_AP_STA); // added by me // selecting the AP+STA mode
  wifiMulti.addAP("e32ap001s01border", "giampippetto");  // the connection part is verified as follows: wifiMulti.run() == WL_CONNECTED
  wifiMulti.addAP("G5SE_7499", "pippopluto");
  wifiMulti.addAP("internet-gw.iw1gpe.it.ampr.o", "heisakuukanwohiraite");
  wifiMulti.addAP("inverse", "heisakuukanwohiraite");
  wifiMulti.addAP("e32ap002s01border", "giampippetto");
  wifiMulti.addAP("e32ap003s01border", "giampippetto");
  wifiMulti.addAP("e32ap004s01border", "giampippetto");
  wifiMulti.addAP("e32ap001s02border", "giampippetto");
  wifiMulti.addAP("e32ap002s02border", "giampippetto");
  wifiMulti.addAP("e32ap003s02border", "giampippetto");
  wifiMulti.addAP("e32ap004s02border", "giampippetto");
  // You can remove the password parameter if you want the AP to be open.
  WiFi.softAP(ssid, password);
  delay(200); // wait at least 100ms until the AP has started
  if(!WiFi.softAPConfig(SetAPIP, SetAPIP, IPAddress(255, 255, 255, 0))){
      Serial.println("AP Config Failed");
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  // the STA part is configured here and managed in loop()
// old wifi section
  //WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  Serial.println("");
  Serial.println("WiFi connected");
  startCameraServer();
  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  */
  // NVS storage init
  NVS.begin();
  // trying to load the bot configuration from NVS 
  //TBotToken
  //TChatId
  // load the telegram bot token if available from NVS
  String loadedstr = NVS.getString ("TLGToken"); // Read the value of the "TLGToken" key from the NVS 
  if(loadedstr.length() > 3) { // at least we make sure the result is not empty...
    TBotToken = {};
    loadedstr.toCharArray(TBotToken, loadedstr.length()); // loading TBotToken
    loadedstr = NVS.getString ("TLGChatId"); // Read the value of the "TLGChatId" key from the NVS 
    if(loadedstr.length() > 3) {
      loadedstr.toCharArray(TChatId, loadedstr.length()); // loading TChatId
      Serial.print("Loaded Telegram BotToken and ChatId from NVS storage with values: ");
      Serial.print(TBotToken);
      Serial.print(" and ");
      Serial.println(TChatId);
    }
} // END setup()
void loop() {
  // put your main code here, to run repeatedly:
 // loopCounter check
  if (loopCounter > 16) {
    loopCounter = 0;
  clientsManagement();  // web client requests are handled always 
  if(loopCounter == 1) {
    wifiIntManagement();
  if(loopCounter == 2) {
    routeTableUpdate();
  if(loopCounter == 3) {
    udpCommandClient();
    udp.broadcastTo(MY_NAME, udpServerPort);
  if(loopCounter == 5) {
  // position number 15, let the device stabilize its connections first...
  if(loopCounter == 15) { // MOTION DETECTOR SECTION
    if ((motionDetectON == 1) || ((UserverOK == 0) && (alarmEnabled == 1)) ){
      
      if (!capture_still()) {
        Serial.println("Failed capture");
        delay(3000);
        return;
      }
      if (motion_detect()) {
        Serial.println("Motion detected");
    }
    update_frame();
    }
  // loopCounter increase
  loopCounter++;
  delay(1000);
#include <Arduino.h>
#line 1 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
// ESP32_cam_node, upgraded with una additional udp layer 5 control protocol and configurable telegram bot
// PLEASE ALSO INSTALL THE ArduinoJson library by Benoit Blanchon
#include "esp_camera.h"
#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiAP.h>
#include <WiFiUdp.h>
#include "AsyncUDP.h"
#include "lwip/api.h"
// NVS includes, non volatile storage
#include "ArduinoNvs.h"
// WIFI includes and variables section START
#define MY_NAME "e32cam001s01"
#define HEARTBEAT_DATA "e32cam001s01,HEARTBEAT,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ACK_DATA "e32cam001s01,ACK,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ERR_DATA "e32cam001s01,ERR,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ERRNVS_DATA "e32cam001s01,ERR,ERROR saving data to NVS,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#include <WiFiMulti.h> // this should support more different AP's // ToDo
WiFiMulti wifiMulti; // this should support more different AP's // ToDo
// Non volatile storage - incorporated in the project folder
#include "ArduinoNvs.h"
// CAMERA: camera configuration and initialization
camera_config_t config;
uint8_t cameraInitType = 0; // 0 = camera off, not initialized; 1 = default init, the main webserver; 2 = motion detector; 3 = color blob detector
#define ALARMS_ENABLED 1  // by default, the device works as a motion detector in case the contact with the command and control server is lost. 
// WARNING!!! Make sure that you have either selected ESP32 Wrover Module,
//            or another board which has PSRAM enabled
// Select camera model
//#define CAMERA_MODEL_WROVER_KIT
//#define CAMERA_MODEL_ESP_EYE
//#define CAMERA_MODEL_M5STACK_PSRAM
//#define CAMERA_MODEL_M5STACK_WIDE
#define CAMERA_MODEL_AI_THINKER
#include "camera_pins.h"
// of course this is the default and should be modified
#line 57 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void cameraInitConfig();
#line 145 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void cameraInitConfigMotionDetect();
#line 344 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void cameraInitConfigColorDetector();
#line 433 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
bool isMoreDataAvailable();
#line 437 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
uint8_t photoNextByte();
#line 442 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void take_send_photo(String TChatId);
#line 587 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
String convertToString(char* a, int size);
#line 609 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void print_wakeup_reason();
#line 629 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void routeTableUpdate();
#line 718 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void clientServe();
#line 806 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void wifiIntManagement();
#line 929 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void UresetudpData();
#line 947 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
int UfillinudpData(uint8_t *pktDataField, int pktLen);
#line 983 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void UprocessudpCommand(AsyncUDPPacket packet);
#line 1084 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void udpCommandClient();
#line 1153 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void udpBCommandClient();
#line 1220 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void clientsManagement();
#line 1238 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void setup();
#line 1356 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void loop();
#line 57 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void cameraInitConfig() {
  // camera part
  cameraInitType = 1;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// MOTION DETECTION SPECIFIC CAMERA DEFINES and buffers
#define WIDTH 320
#define HEIGHT 240
#define BLOCK_SIZE 10
#define W (WIDTH / BLOCK_SIZE)
#define H (HEIGHT / BLOCK_SIZE)
#define BLOCK_DIFF_THRESHOLD 0.2
#define IMAGE_DIFF_THRESHOLD 0.1
#define DEBUG 1
bool capture_still(); // declare functions
bool motion_detect();
void update_frame();
void print_frame(uint16_t frame[H][W]);
uint16_t prev_frame[H][W] = { 0 };  // these are actually 32*24 * 16bit, more than acceptable, no problem.
uint16_t current_frame[H][W] = { 0 };
uint8_t motionDetectON = 0;  // motion detection is normally kept off. The idea is to activate it in case the command & control servers do not respond, or to activate it on demand / on alarm.
uint8_t alarmEnabled = ALARMS_ENABLED; // motion detection activation is enabled by default to 1, some other kinds of usage may require this is off, for example the color blob detection mode and the webcam / telegram modes. 
// MOTION DETECTION SPECIFIC CAMERA CONFIG INIT FUNCTION (first, remember to do a deinit!!!)
void cameraInitConfigMotionDetect() {
  // camera part
  cameraInitType = 2;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_GRAYSCALE;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// CAMERA MOTION DETECTION SPECIFIC FUNCTIONS
 * Capture image and do down-sampling
bool capture_still() {
    camera_fb_t *frame_buffer = esp_camera_fb_get();
    if (!frame_buffer)
        return false;
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    //sensor_t *sensor = esp_camera_sensor_get();
    //Serial.print("Switch to JPEG: ");
    //Serial.println(sensor->set_pixformat(sensor, PIXFORMAT_RGB565));
    config.pixel_format = PIXFORMAT_RGB565;
    Serial.print("Switch ok? ");
    Serial.println(esp_camera_init(&config) == ESP_OK ? "yes" : "no");
    frame_buffer = esp_camera_fb_get();
    Serial.print("JPEG len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    //sensor->set_pixformat(sensor, PIXFORMAT_GRAYSCALE);
    frame_buffer = esp_camera_fb_get();
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    while (1) delay(50000);
    // set all 0s in current frame
    for (int y = 0; y < H; y++)
        for (int x = 0; x < W; x++)
            current_frame[y][x] = 0;
    // down-sample image in blocks
    for (uint32_t i = 0; i < WIDTH * HEIGHT; i++) {
        const uint16_t x = i % WIDTH;
        const uint16_t y = floor(i / WIDTH);
        const uint8_t block_x = floor(x / BLOCK_SIZE);
        const uint8_t block_y = floor(y / BLOCK_SIZE);
        const uint8_t pixel = frame_buffer->buf[i];
        const uint16_t current = current_frame[block_y][block_x];
        // average pixels in block (accumulate)
        current_frame[block_y][block_x] += pixel;
    }
    // average pixels in block (rescale)
    for (int y = 0; y < H; y++)
        for (int x = 0; x < W; x++)
            current_frame[y][x] /= BLOCK_SIZE * BLOCK_SIZE;
#if DEBUG
    Serial.println("Current frame:");
    print_frame(current_frame);
    Serial.println("---------------");
#endif
    return true;
 * Compute the number of different blocks
 * If there are enough, then motion happened
bool motion_detect() {
    uint16_t changes = 0;
    const uint16_t blocks = (WIDTH * HEIGHT) / (BLOCK_SIZE * BLOCK_SIZE);
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            float current = current_frame[y][x];
            float prev = prev_frame[y][x];
            float delta = abs(current - prev) / prev;
            if (delta >= BLOCK_DIFF_THRESHOLD) {
#if DEBUG
                Serial.print("diff\t");
                Serial.print(y);
                Serial.print('\t');
                Serial.println(x);
#endif
                changes += 1;
            }
        }
    }
    Serial.print("Changed ");
    Serial.print(changes);
    Serial.print(" out of ");
    Serial.println(blocks);
    return (1.0 * changes / blocks) > IMAGE_DIFF_THRESHOLD;
 * Copy current frame to previous
void update_frame() {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            prev_frame[y][x] = current_frame[y][x];
        }
    }
 * For serial debugging
 * @param frame
void print_frame(uint16_t frame[H][W]) {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            Serial.print(frame[y][x]);
            Serial.print('\t');
        }
        Serial.println();
    }
// CAMERA COLOR BLOB DETECTOR, INIT FUNCTION
// color-based blob detection - I plan to use this as part of a larger project, the idea is to help detect certain insects and pests in agricultural settings
// this camera will then become an additional sensor communicating with a robot designed to remove pests from invaded plants. 
void cameraInitConfigColorDetector() {  // specific for color-based target recognition, remember to do a deinit first!!!
  // camera part
  cameraInitType = 3;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_RGB888;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// Telegram section
#include "UniversalTelegramBotRZO.h"
#include <WiFiClientSecure.h>
char* TBotToken = "810218086:AAFPJNDbolU0tzj_Xx6lXOsatDlYnWYaa80";
char* TChatId = "537093554";
WiFiClientSecure client;
UniversalTelegramBot TBotCambot(TBotToken, client);
int Bot_mtbs = 3000; //mean time between scan messages
long Bot_lasttime;   //last time messages' scan has been done
// specific camera variables for the telegram bot
//camera_fb_t * TBotCamfb; // moved intra-function
uint8_t* TBotCamfb_buffer;
size_t TBotCamfb_length;
int TBotCamcurrentByte;
// camera functions specific for the telegram bot
bool isMoreDataAvailable() {
  return (TBotCamfb_length - TBotCamcurrentByte);
uint8_t photoNextByte() {
  TBotCamcurrentByte++;
  return (TBotCamfb_buffer[TBotCamcurrentByte - 1]);
void take_send_photo(String TChatId)
  camera_fb_t * TBotCamfb = NULL;
  TBotCamfb = esp_camera_fb_get();
  TBotCamcurrentByte = 0;
  TBotCamfb_length = TBotCamfb->len;
  TBotCamfb_buffer = TBotCamfb->buf;
  TBotCambot.sendPhotoByBinary(TChatId, "image/jpeg", TBotCamfb->len, isMoreDataAvailable, photoNextByte, nullptr, nullptr);
  esp_camera_fb_return(TBotCamfb);
  TBotCamfb_length = NULL;
  TBotCamfb_buffer = NULL;
// UDP Async client, sends keep heartbeat messages to the server and retrieves commands
AsyncUDP udp; // for server A  // udp layer 5 control protocol
AsyncUDP udpB; // for server B
// command and control IP addresses for server A and server B (redundant server), the exchange is done via udp ( the port is defined by int udpServerPort) and the layer 5 transfers commands and status info as comma separated variables
int IPudpServerAa = 192;
int IPudpServerAb = 168;
int IPudpServerAc = 88;
int IPudpServerAd = 32;
int IPudpServerBa = 192;
int IPudpServerBb = 168;
int IPudpServerBc = 88;
int IPudpServerBd = 3;
int udpServerPort = 8443; // UDP/443 because, well, we can
// udp - layer 5 control protocol processing, the layer 5 control protocol consists of 8 CSV fields. The protocol structure is simple: client_name,requested_operation,field1,field2,field3,field4,field5,field6  all unused fields are set to ascii character 0
#define FIELDUA 8
#define FIELDUB 64
char UdataSplit[FIELDUA][FIELDUB];
int UfieldsLen[FIELDUA];
int UdataLen = 0;
int UserverOK = 0; // contact with the server attempted for 3 times in a row, failing. Say, the idea is: ACK from server received: set to 3, send HEARTBEAT: decrease by 1 until zero is reached, then stop decreasing.
static uint8_t wifiDebugOn = 0;
static uint8_t wifiConnFlag = 0;
static uint8_t wifiWebserverFlag = 0;
static uint8_t wifiBeginFlag = 0;
static uint8_t wifiConnectionAttempts = 0;
// Set the local access point IP address, the netmask is assumed to be /24
IPAddress SetAPIP = {192,168,5,1};  // REMEMBER TO CHANGE THIS FOR EVERY AP YOU PLAN TO INTRODUCE TO THE NETWORK
// Set these to your desired credentials.
const char *ssid = MY_NAME;  // for the local AP  // REMEMBER TO CHANGE THE SSID AS WELL, THE NET PART CONTAINS THE THIRD BYTE OF THE AP IP ADDRESS (the network LSByte)
const char *password = "giampippetto";
WiFiServer serverSTA(8080); // adding a second server on the STA interface? Let's try
// loop() control section
uint32_t loopCounter = 0;
// NETWORK section
// processing variables subsection
uint8_t payloadCurrContent[128] = {0};
uint8_t hashCurrContent[64] = {0};
uint8_t payHeaderCurrContent[32] = {0};
// NAt processing subsection
uint32_t payloadTypeF = 0;
uint32_t srcIPext = 0; // STA side
uint32_t dstIPext = 0;
uint32_t srcIPint = 0; // AP side
uint32_t dstIPint = 0;
uint32_t srcIPpay = 0; // payload side
uint32_t dstIPpay = 0;
// in the NAT table, the folloving are converted to uint32_t 
uint16_t srcPortext = 0; // STA side
uint16_t dstPortext = 0;
uint16_t srcPortint = 0; // AP side
uint16_t dstPortint = 0;
uint16_t srcPortpay = 0; // payload side
uint16_t dstPortpay = 0;
uint16_t expiryCounter = 0;
// NAT table subsection
uint32_t NATline[16] = {0};  // there are 14 fields actually, as per the above list, plus 2 reserved fields
uint32_t NATtable[256][16] = {0};
uint16_t NATlinePointer = 0; // do we allow up to 256 flows only?
// routing table subsection
uint16_t RoutelinePointer = 0; // do we allow up to 16 routes only?
uint32_t routetable[16][8] = {0};  // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
//packet buffer sub-section
uint8_t payloadToProcessFlag = 0; // if the LSB bit0 == 1, there is a payload that needs processing, other values / bits set may mean other operations.
uint8_t * payloadBuffer = NULL;
//structure of the packet buffer:
Size = 224Bytes = 32B header + 128B payload + 64B hash
4B = Type Field( 4 bytes ) = reqtype(1B), protocolNum(1B), Reserved(1B), Reserved(1B)
4B = DST IP
4B = SRC IP 
2B = DST PORT
2B = SRC PORT
2B = PayloadLen
2B = Reserved
4B = Reserved
4B = Reserved
4B = Reserved
128B = actual payload
64B = sha256Hash_reserved(32B raw or 64B hex)
// LED section
#define LED_BUILTIN 2   // Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED
// string section 
// converts character array 
// to string and returns it 
String convertToString(char* a, int size) 
    int i; 
    String s = ""; 
    for (i = 0; i < size; i++) { 
        s = s + a[i]; 
    } 
    return s; 
// deep sleep section
#define uS_TO_S_FACTOR 1000000ULL  /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  60        /* Time ESP32 will go to sleep (in seconds) */
RTC_DATA_ATTR int bootCount = 0;
Method to print the reason by which ESP32
has been awaken from sleep
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch(wakeup_reason)
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
// update the routing table
void routeTableUpdate() {
// RoutelinePointer // do we allow up to 16 routes only?
//uint32_t *routetable[16][8] // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
uint32_t ImyLocalIP = 0;
uint32_t ImyLocalSubnet = 0;
uint32_t ImyAPIP = 0;
uint32_t ImyAPSubnet = 0;
uint32_t ImyLocalSubnetMask = 0;
uint32_t ImyAPSubnetMask = (255 >> 24) + (255 >> 16) + (255 >> 8);
uint32_t ImyLocalGateway = 0;
IPAddress myLocalIP = {0,0,0,0};
IPAddress myLocalSubnet = {0,0,0,0};
IPAddress myLocalSubnetMask = {0,0,0,0};
IPAddress myLocalGateway = {0,0,0,0};
IPAddress myAPIP = WiFi.softAPIP();
ImyAPIP = (uint32_t)((myAPIP[0] << 24) + (myAPIP[1] << 24) + (myAPIP[2] << 24) + myAPIP[3]);
ImyAPSubnet = ImyAPIP & ImyAPSubnetMask;
// the first lines
// line 0 local AP  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
routetable[0][0] = ImyAPSubnet;
routetable[0][1] = ImyAPSubnetMask;
routetable[0][2] = ImyAPIP;
routetable[0][3] = 0; // gateway of course set to 0 for the AP side
routetable[0][4] = 0; // interface ID set to zero, for the moment.
routetable[0][5] = 0;
routetable[0][6] = 0;
routetable[0][7] = 0;
if (wifiConnFlag == 1) {
  myLocalIP = WiFi.localIP();
  myLocalSubnet = WiFi.subnetMask();
  myLocalGateway = WiFi.gatewayIP();
  ImyLocalIP = (myLocalIP[0] << 24) + (myLocalIP[1] << 24) + (myLocalIP[2] << 24) + myLocalIP[3];
  ImyLocalSubnetMask = (myLocalSubnetMask[0] << 24) + (myLocalSubnetMask[1] << 24) + (myLocalSubnetMask[2] << 24) + myLocalSubnetMask[3];
  ImyLocalGateway = (myLocalGateway[0] << 24) + (myLocalGateway[1] << 24) + (myLocalGateway[2] << 24) + myLocalGateway[3];
  ImyLocalSubnet = ImyLocalIP & ImyLocalSubnetMask;
  // line 1 STA  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
  routetable[1][0] = ImyLocalSubnet;
  routetable[1][1] = ImyLocalSubnetMask;
  routetable[1][2] = ImyLocalIP;
  routetable[1][3] = ImyLocalGateway;
  routetable[1][4] = 1; // interface ID set to 1, for the moment.
  routetable[1][5] = 0;
  routetable[1][6] = 0;
  routetable[1][7] = 0; 
} else {
  routetable[1][0] = 0; // nullifying the STA route
  routetable[1][1] = 0; // nullifying the STA route
  routetable[1][2] = 0; // nullifying the STA route
  routetable[1][3] = 0; // nullifying the STA route
  routetable[1][4] = 0; // nullifying the STA route
  routetable[1][5] = 0; // nullifying the STA route
  routetable[1][6] = 0; // nullifying the STA route
  routetable[1][7] = 0; // nullifying the STA route
}  // end void routetableupdate()
// handle client requests
void clientServe() {
  WiFiClient client = serverSTA.available();   // listen for incoming clients
  if (client) {                             // if you get a client,
    Serial.println("New Client.");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to take a picture and send it via telegram (configure via udp layer 5 control protocol).<br>");
            client.print("Click <a href=\"/L\">here</a> to restart the device.<br>");
            client.print("Click <a href=\"/W\">here</a> to initialize the camera hardware for the integrated camera webserver.<br>");
            client.print("Click <a href=\"/S\">here</a> to deinitialize the camera hardware and save power.<br>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          //digitalWrite(LED_BUILTIN, HIGH);               // GET /H takes a picture and sends it via telegram
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
          take_send_photo(TChatId);
          digitalWrite(LED_BUILTIN, LOW);  
        }
        if (currentLine.endsWith("GET /W")) {  // init camera for the main camera webserver
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
        }
        if (currentLine.endsWith("GET /S")) {  // deinitialize the camera
          cameraInitType = 0;
          esp_camera_deinit();  // the camera needs a deinit from its current configuration.
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(LED_BUILTIN, LOW);                // GET /L restarts the device
          esp_restart();
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
void startCameraServer();
void wifiIntManagement() {
    // STA connection and disconnection management
// WIFI DEBUG AND SERVICING SECTION START
  if (wifiDebugOn == 1) {
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
    
      Serial.println("WiFi not connected yet");
    }
    if (WiFi.status() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
    
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
    }
  if (wifiConnectionAttempts >= 32) { // turning off wifi, there is no point in trying anymore, if past 32 attempts.
    WiFi.mode(WIFI_OFF); // turning off wifi, then we go to deep sleep for a certain number of seconds.
    
    esp_err_t err = esp_camera_deinit();
    esp_deep_sleep_start();  // going to deep sleep
    
  if ((wifiConnFlag == 0) && (wifiConnectionAttempts < 32)) {  // wifiConnectionAttempts must be < 32 
    wifiConnectionAttempts++; // increasing the connection attempts counter
    
    if (wifiMulti.run() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
      Serial2.print("WiFi up and running: ");
      Serial2.print(WiFi.localIP());
      Serial2.println("' to connect");
      wifiConnFlag = 1;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
    if ((WiFi.status() != WL_CONNECTED) && (wifiBeginFlag == 0)) {
    
      Serial.println("WiFi restarting");
      WiFi.begin(ssid, password); 
      
      wifiBeginFlag = 1;
    }
  if (wifiConnFlag == 1) { // test if the wifi stays alive...
    if (WiFi.status() != WL_CONNECTED) {  // wifiMulti.run() == WL_CONNECTED // WiFi.status() != WL_CONNECTED
    
      Serial.println("WiFi disconnected");
      wifiConnFlag = 0;
      wifiBeginFlag = 0;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
  if (((wifiConnFlag == 1) && (wifiWebserverFlag == 0)) || (ESP.getFreeHeap() < 44000)) { // servicing the webserver on connection up for the first time
      // >>>>>>>> START SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      // >>>>>>>> END SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      
      wifiWebserverFlag = 1;
    
  // WIFI DEBUG AND SERVICING SECTION END 
// UDP - layer 5 control protocol
void UresetudpData() {
for(int i = 0; i < FIELDUA; i++){
  for(int j = 0; j < FIELDUB; j++) {
    UdataSplit[i][j] = 0;
for(int i = 0; i < FIELDUA; i++) {
  UfieldsLen[i] = 0;
UdataLen = 0;
} // end resetudpData()
int UfillinudpData(uint8_t *pktDataField, int pktLen) {
int i = 0;
int j = 0;
int k = 0;
UdataLen = pktLen;
for(i = 0; i < UdataLen; i++){
  if(pktDataField[i] == ',') {
    UfieldsLen[j] = k;
    Serial.print("received_udp_control_protocol_data:");
    Serial.print(UdataSplit[j]);
    Serial.print("; data_len:");
    Serial.print(k);
    Serial.print("; field_position:");
    Serial.println(j);
    j++;
    k = 0;
  if(j >= FIELDUA) {
    Serial.print("ERROR: too many commas in the udp layer 5 control protocol");
    return 100;
    
  UdataSplit[j][k] = pktDataField[i];
  k++; 
UfieldsLen[j] = k;
return 0;
} // end fillinudpData()
void UprocessudpCommand(AsyncUDPPacket packet) {
  Serial.print("processing udp layer 5 control protocol command directed to: ");
  Serial.print(UdataSplit[0]);
  Serial.print("; command is: ");
  Serial.println(UdataSplit[1]);
  // commands available at the moment, or planned, are: 
  // ACK (confirmed heartbeat reception, do nothing), TLGS (send picture to telegram), TLGC (configure telegram, field 2 = bot token, field 3 = chat id)
  // RST (reboot the device), DSLP (deep sleep)
  if(UdataSplit[0] == MY_NAME) {  // matched the field 0, the command is directed to me. 
      
      // processing the actual commands
      
      if(UdataSplit[1] == "ACK") {
        // do not reply with an ACK to an ACK, that would be ...disturbing
        UserverOK = 3;
      }
      if(UdataSplit[1] == "TLGS") {  // send picture via telegram
        //TBotToken
        //TChatId
        // technically speaking we should deinit and reinit with acceptable parameters. 
        
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
          if (cameraInitType != 0) {
            esp_camera_deinit();  // the camera needs a deinit from its current configuration.
          }
          delay(1000); // this might not really be necessary
          cameraInitConfig(); // and is setup for the correct motion capture configuration
          delay(3000);
        }
         // this might not really be necessary
        take_send_photo(TChatId);   
      }
      if(UdataSplit[1] == "TLGC") { // configure telegram bot token and chat id
        bool ok; 
        String sToken = convertToString(UdataSplit[2], UfieldsLen[2]); 
        String sChatId = convertToString(UdataSplit[3], UfieldsLen[3]); 
        ok = NVS.setString ("TLGToken", sToken); // Store the data value into the key named "TLGToken" on the NVS
        if(ok) {
          ok = NVS.setString ("TLGChatId", sChatId); // Store the data value into the key named "TLGChatId" on the NVS
          
        }
        if(ok) {
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        } else {
          Serial.println("ERROR saving data to nvs");
          packet.printf(ERRNVS_DATA, packet.length());
        }
        
        
      }
      if(UdataSplit[1] == "RST") {  // restart system
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        esp_restart();
      }
      if(UdataSplit[1] == "DSLP") { // start deep sleep
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        Serial.println("RECEIVED REQUEST TO DEEP SLEEP, STARTING TO SLEEP DEEP");
        esp_err_t err = esp_camera_deinit();
        esp_deep_sleep_start();  // going to deep sleep
      }
      if(UdataSplit[1] == "WCAM") { // init camera for the webserver
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
        }   
      }
      if(UdataSplit[1] == "SCAM") { // deinitialize the camera
        cameraInitType = 0;
        esp_camera_deinit();  // the camera needs a deinit from its current configuration.
      }
      
      
void udpCommandClient() {
  if( ! udp.connected()) {
    Serial.println("UDP connecting to server A");
    udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
    Serial.println("UDP connected to server A");
  if(udp.connected()) {
        Serial.println("UDP sending to server A");
        //Send unicast
        udp.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udp.onPacket([](AsyncUDPPacket packet) {
            Serial.print("UDP Packet Type: ");
            Serial.print(packet.isBroadcast()?"Broadcast":packet.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packet.remoteIP());
            Serial.print(":");
            Serial.print(packet.remotePort());
            Serial.print(", To: ");
            Serial.print(packet.localIP());
            Serial.print(":");
            Serial.print(packet.localPort());
            Serial.print(", Length: ");
            Serial.print(packet.length());
            Serial.print(", Data: ");
            Serial.write(packet.data(), packet.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packet.data() ,packet.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packet); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
// sending the heartbeat to the backup udp command server
void udpBCommandClient() {
  if( ! udpB.connected()) {
    Serial.println("UDP connecting to server B");
    udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
    Serial.println("UDP connected to server B");
  if(udpB.connected()) {
        Serial.println("UDP sending to server B");
        //Send unicast
        udpB.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udpB.onPacket([](AsyncUDPPacket packetB) {
            Serial.print("UDP B Packet Type: ");
            Serial.print(packetB.isBroadcast()?"Broadcast":packetB.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packetB.remoteIP());
            Serial.print(":");
            Serial.print(packetB.remotePort());
            Serial.print(", To: ");
            Serial.print(packetB.localIP());
            Serial.print(":");
            Serial.print(packetB.localPort());
            Serial.print(", Length: ");
            Serial.print(packetB.length());
            Serial.print(", Data: ");
            Serial.write(packetB.data(), packetB.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packetB.data() ,packetB.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packetB); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
void clientsManagement() {
  if ((wifiConnFlag == 1) && (wifiWebserverFlag == 1)) { // HANDLE CLIENT REQUESTS HERE
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
    clientServe();
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
  } // end handle client requests if
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
// wakeup and init part 
  // packet / payload buffer allocation
  payloadBuffer = (uint8_t *)malloc(256 * sizeof(uint8_t));  // the actual size is 224 (see in the declarations), the maximum payload size for ESP-NOW is 250.
  pinMode(LED_BUILTIN, OUTPUT);
  // deep sleep boots
  ++bootCount;
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  /*
  First we configure the wake up source
  We set our ESP32 to wake up every 5 seconds
  */
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
// camera init and config
  Serial.println("WARNING, NOT INITIALIZING THE CAMERA IN ORDER TO SAVE POWER. PLEASE DO IT MANUALLY VIA UDP COMMANDS OR VIA THE MANAGEMENT HTTP SERVER ON PORT 8080");
  //cameraInitConfig(); // we want the camera not initialized by default. This saver power.
  /*
 if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
  */
// WIFI SECTION
  Serial.println();
  Serial.println("Configuring access point...");
  WiFi.mode(WIFI_AP_STA); // added by me // selecting the AP+STA mode
  wifiMulti.addAP("e32ap001s01border", "giampippetto");  // the connection part is verified as follows: wifiMulti.run() == WL_CONNECTED
  wifiMulti.addAP("G5SE_7499", "pippopluto");
  wifiMulti.addAP("internet-gw.iw1gpe.it.ampr.o", "heisakuukanwohiraite");
  wifiMulti.addAP("inverse", "heisakuukanwohiraite");
  wifiMulti.addAP("e32ap002s01border", "giampippetto");
  wifiMulti.addAP("e32ap003s01border", "giampippetto");
  wifiMulti.addAP("e32ap004s01border", "giampippetto");
  wifiMulti.addAP("e32ap001s02border", "giampippetto");
  wifiMulti.addAP("e32ap002s02border", "giampippetto");
  wifiMulti.addAP("e32ap003s02border", "giampippetto");
  wifiMulti.addAP("e32ap004s02border", "giampippetto");
  // You can remove the password parameter if you want the AP to be open.
  WiFi.softAP(ssid, password);
  delay(200); // wait at least 100ms until the AP has started
  if(!WiFi.softAPConfig(SetAPIP, SetAPIP, IPAddress(255, 255, 255, 0))){
      Serial.println("AP Config Failed");
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  // the STA part is configured here and managed in loop()
// old wifi section
  //WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  Serial.println("");
  Serial.println("WiFi connected");
  startCameraServer();
  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  */
  // NVS storage init
  NVS.begin();
  // trying to load the bot configuration from NVS 
  //TBotToken
  //TChatId
  // load the telegram bot token if available from NVS
  String loadedstr = NVS.getString ("TLGToken"); // Read the value of the "TLGToken" key from the NVS 
  if(loadedstr.length() > 3) { // at least we make sure the result is not empty...
    TBotToken = {};
    loadedstr.toCharArray(TBotToken, loadedstr.length()); // loading TBotToken
    loadedstr = NVS.getString ("TLGChatId"); // Read the value of the "TLGChatId" key from the NVS 
    if(loadedstr.length() > 3) {
      loadedstr.toCharArray(TChatId, loadedstr.length()); // loading TChatId
      Serial.print("Loaded Telegram BotToken and ChatId from NVS storage with values: ");
      Serial.print(TBotToken);
      Serial.print(" and ");
      Serial.println(TChatId);
    }
} // END setup()
void loop() {
  // put your main code here, to run repeatedly:
 // loopCounter check
  if (loopCounter > 16) {
    loopCounter = 0;
  clientsManagement();  // web client requests are handled always 
  if(loopCounter == 1) {
    wifiIntManagement();
  if(loopCounter == 2) {
    routeTableUpdate();
  if(loopCounter == 3) {
    udpCommandClient();
    udp.broadcastTo(MY_NAME, udpServerPort);
  if(loopCounter == 5) {
  // position number 15, let the device stabilize its connections first...
  if(loopCounter == 15) { // MOTION DETECTOR SECTION
    if ((motionDetectON == 1) || ((UserverOK == 0) && (alarmEnabled == 1)) ){
      
      if (!capture_still()) {
        Serial.println("Failed capture");
        delay(3000);
        return;
      }
      if (motion_detect()) {
        Serial.println("Motion detected");
    }
    update_frame();
    }
  // loopCounter increase
  loopCounter++;
  delay(1000);
^FS[
"3DUfw`
_CONSOLE
7dy?
K5U4
A7z3
+,jQ%)
TK$E
8Mo/
h8M@
:eG/
s,e6
v4Rpl
V^[{
FKE<
Ar5RH
l!c"
l9)J{
ZFGU
o*cq
/s1pCy
Bt:Ok
:hLNX
b'btf
ZlYmg
[ylFYn
#0R}ey
e"l[c
G^1d
_p,5b
T8HP
QCO&e*
b2::(
M7]f%C
T EMp
krH$
+*~V
Yyf<
od6TN
&MmhF
W+~0_
-&s[
o,Im
.kw%
+O7^
IiIf
l.3c
?uNd
DB\w
I$xY
q5N[
{<w	w
Natm
OA@=P~
g^->
*>rN
2!B:
?9ku@
Vq+Z
xj*b
0muz
Q9d!
2`Z4?
+Rw[.
356;(P71
0"\"8:r
;qY%ef}
@0m0zdD
5.z"?
cQ`t
1\[%u1I
*gln3
Vuu6,
!Zn5M
tC\I
Yh<@?
v;<u
5?g30
A :(B
E5iv
/DP~
S-_W	t>u
cmEvz
"g_%
RJZ%!
.p#j
lonOQ
|RYKxx
?Z^t
MJTQG2
:R:"
hQw/
>Kix
MP*O
;BUc
f*>R>
FOM(
#,C)d
j"@0
<dR6
<yq'
}wycf\
<LFG
OOIY
4C U6
$TCL$L
qopC?}>
-ob?X
(h-KX
f#y=
'BYaA3
E3Uf[
_L\$
^]S:
sAe(
#Q5H
h\nS2
Hqa`
:7E86
o4/O
2$3:
eAuk
HHt=
*u_|
ZFH.
B,}ul
cygw
)L)ch
A%y{
vY~io
TpJ:
y=TW
<0Yb
lt#)O.+A
g>+ 
&?He}
_	>7}
~=N!
8"\s
hI(r
g*q4>
Lq8V
42#kU
EMPo-i3
1K7T
Qr)w_
4t	+d
4p_*
T,eqG
6E-m0
1]e4
RrV&
*-(w
;&pq
 oPT9>^
JH@3
%IcW
;iUL
6i1Z
l@{$h:
"wME7
zWc/y<
kq#m
wv)_
u;1N
kc\)
^0VQ
!$Sf
$__H
Z`:;
5O/O{
S?2X
x&\V
s~*el
0xhYR
w"F[>
4Nwa
|^m	
ukaG
X}CV
rWa^
f`rj
S3jM
[^x@~^
uv}}
rIq`
RIgrD
2E17'
'>#.
,(/@
Nc= 
c0-O
$PP-
;_Fk
^O<Y
#Lis
8[K<
?5.x`2}
\J>"
DF(gJ#hw
Is>k
OLcC2
mNoDT
osVVD
r5%O
9!w%
	[c7
-mxx3)XF~D
p^mZt
&\#U
2\OL
Qu+WSt{
%=2>yb
iAlf
p ]8t
E{5`\
2)Xs
Y}:Tzc
d<%3
%F(8
TYX^
qHj)
Y9!&P
Y4:,R
J|t-"uB
XXCF
17bAz
Kof4
v{M$hsM
,RNE2
 	TSS
%-]&
;/=/
]2,oF
OpQ4
0)<,
x BE
~bZ>g
@VU4v
BaC_
KI,:5
VNLB/
Mt;=
 z[kI
2<&6cK
,@a8
Iyb}
:~)[
!l%{Zfz
g`@#v
y *u$
f$Mjd
AS}@
6]}o
}+Zk
553e
L/+n
2[SY
GVnU
HWRm
=St:
-C[)
\nE#
yu4u
m6]V
cg\y
ng3i
_zUX
	TXb
m;%g
2S>C
[*q"m
xjM$(xM
@<	-@.
#kgUdX
E(fG
HGB\
%iJ6
~@L\,#B
zHP4
yrkg
Js^F
>WXm
3K]1
IE%_
}JBh
6+@"
IEB:
"3DUfw`
_CONSOLE
"3DUfw`
_CONSOLE
"3DUfw`
_CONSOLE
rv)n
(&!U
)h_HY
|!*Pa<
Nka@
6;;Pez
QDi~
$b3"
E61_
1Qsb
<^P"
]0w1
^mxT
I-#/aD
QKLKK
)/Lq
n G0
tSIj
}R~B
`&`&J,{
z#%?
7DZ0
rz,;b
[Pm-A
f;})
m2\4
Cb=0
GA+M
XNZ^
u*Jh
KB(E
f57 
V?	VQ
=_X^;R*d
z66lf
4tz|
=Iv*
)w 1O
*-aj
`~.5`
cfCb{1XQ
D9im
:9HV
szDrw
,asW
\C2V
EC+[
''tw
{+]3
G1_h6\
z7],a
(uwG
*qR_U~m
$=$`K
U4^q
	eOC
E,Zn
f0LP
M2o>
Tx#Z
R[eJ}v
,v		
o50Z
b%%/`
F/Ur
jD3,
#W/2:
rHum1
:	,i
RK|_
x'UA
"v|w/
#8G5?6
Bz=>e
85^8
"_`;
][zWK
D.Si
qo7SG
{u)t
oFA_6[
|,{(
MP 4
g6"+
+yTY
)0TW
0S#g
pp_rG^fri
R|HY
1!fF
aU^r
W3xk
b4zq
sJ.V
m8!<
U,8m#
4;##'K
<#$|
q:y_
L;Fv^m
#IX2
:b!g
Mv.-H
N3@|F
W;:@
gFQ`
0M7Xv
q49M
~Q}0m9
SU|6z
iXxA
<W{>ya[,V
u{Gy
Ek^/
FWbG
_K:*
$8NJ
E]4F
KOh\
#8`H
D]]q
`C}x
^;Z}_B
J<r*W
%My{
6"|EI
>rlq
P62'
5hmb
F22^
e-1U
yqg]c
*>z6^
*S<C])
29lt
u$D	
Qw.awV 
oiz6\
65G4
Ru7G
TB;c4(
IF1?!}
~?vK
QDH}
"/S4
@y+T
R$	S.
^?vl|
Ea:d
=CJ)
z{b{
^2:s_
S yJ
u7AI
l@{i
4,km
a@W%
IP.sc
`FJff
b%NgI
iQC(?
z +\
/=bm(h
91`G
HIK96[M
d_rq
T8hr
>UTMhJ
\q-\j
}smLP@#
Bd[A
cuk[
UOY'
d.Me
G6kX
4mDA
P}U(
@	>#]
.KAr
,vmP
equ{
't4I
w#2X
=}8K
3Aq*tN
&k)z
C6Rvp
U0u3
yu/s?(U}
.@_+u
az"V
1Y4t
Z	LS
ZgID
</N8
%5(q
"$vP]
_8m-
Ij9P
`^^U,T
#Z*w
7[-C_
}	xt
-LQ.
c7!-B
;1ODp
vxR	
yv!i9
Z>dB
i9~G
jH3"
:}{l
aZJZii
o/~r`
7$M.
NwBRT
rk&/
}Uqc
s^.U
bv=lp
"N9B
%$#;
@9>q
Pfn]
[<T7-
\Bv/l
&=f@?
A!?U
c]`F
&#;W
IJ"8=
p>9P
4Vr356
|BAMfdg-
33|.E
xBZQ
83+O {
>'.9
>0wb
NO~wz
y^Q,
&xn-!_
i~/u
1d%!
AR6p
)T-Y
`{RZW
p@D\
?f)s
Jd9;
f;~[
6=lZ
!J C
(W;b
1n4^
0E18)
KBs:o?F~
J^Q_
E!;q
*~Li
2jr"
vB![Y
t0Ch`M{
tEC`
<mB1
LX?o 1
3F>s
lV[|4
8	Ub
a:zT
BniY
bl]NB:
kG 0QO
nNfG2/
L%mM
JPsn2
IgWt
ZJ;-H3
>	?e0w
\cdk	
"nP 
2I#[6
E|H+d
l&\]
srcm!6
9pea
;Azj>f;F
wu H
=cbT
[g}d
!V*4
z(#~Df(
F^dgI
zGZ?
n ao
.sxr
mS&_
VH"7
A3xC.
}lTd;
$nK<%Ixi
$F6M
x|.=
!R]I
+*d=L
GAKv)
L-ui
>VWw)Z
TiEd
L7SXW+
}qVH
}xNr N
Zbip
n"%V
"3DUfw`
_CONSOLE
 't*
DR)Z3A
q/KT
}g"cs
.0%4
;ZjR
#?VU
]icH,
u=K/D
kF_-
M<5e
^H8g
(	6jI
^0jA
*INmZWF
Abc*
;(@f:
zDFS
}d*e
MjGi
U{I6S_
ZR/kk
Bm@O
Ft`pm
G,8B
l[Ul
m7u2
+QJ'hp
%&O9Fr
oUx?
zP68
QZsX
Rwt!?
sEr*
Uvjy
$CCd
)F6k(
7w1t
"f|r
3#yR
v16%
|c7(` F
j*J\
dZF7H
mf(=:B
yorbb
Jgoh
Knn9
NX&|a
yo+W
sS7O
;V0oq*=6a
IN]=
fk%nyN
+d[6
d_1N`
XAw%
f3tr
3 .a%
R0tsI
_MDw`
o1<(
PU*M
;aYB
fSq:
LGaN
wRQN
Yzp6
:D;A
]uDF	
f_Vz8L
:HWl
.4.56
<H>N@WL
\YZi
l{ff
4U71}
)#fK!
~qT(
=tjl
h$@4
ly}X
h{B&
s0mJ&
y7Im
&9mY
>.Ck(L
iP\+
scl=\
wLQ'
P*b(J
2'D}K
`pB<2
X(aJ
#sUF
?LQ	
{v2)
&Oorh
lt.-
>Djf
xYktg
FY2x^ 
uZ={
i0Sw
+b#/a6
NI+>H;
(?**y
h+Ts
Y),6P
?Pt|q
5t'o*
5-mNDcI
;!j\
Gwg^
{20)[
l>C?
t|G?`Zo$
<[vjj
Zbn"
[+9~
8F\qk
?^-D
oDQ(a
udIj
m}JJ
C]n:
.YN-
7l-wl
E.;2
KRC5DL#
ZIp5
Z]q Q
N(6/
\.I-S
"F5y
',})<
Ua^H".
WnW"C
Qh!fVL
M}"j
bRN<
]+|aZa
{\<-
37]C
xc61
$0yv7
EngDW
V-)-
vJR*
H5xh
\y?q
">P?
$$_h
f\@,w
6]8}
p6o@
TPMp
Nb@No
(QN3/;
f]T?
gCje
Myk^/E
Sr=#
k<bp
QTi*}c
}r&_?n
!tHK
=gVa
)P^)
AZ|X
JD1)
H+yJ
h^'!
zW:E
<g,>,
%U^D
Ox%mz
 I@l
mS0I
WB*G
6:0'
;2c^z~*
7-0\
<x' 
ax\oBe
45XwJ
dI'8b
&)T0i
_%sD
HYvk
8Yknv
?%>N
5gUA
B1"sr 
~^	j7
F`"{
;yK@
!:{ B
$UaZY\Xj
`NZ:
rvGdl
n0nmL
M%]h[,A
;kq-
_CQXj
#sx,
2OjX
Hrxzn
lEiD
F?=j
j"Y%
VA~"Z
qx:"
W16Bg
SlSc|
:nGL
:c1=x
)NIvf
dm>[
lx]Elr
22M[
]s	jR
vui`H>JT3
^y&<*
l;~!~
0Zz{
/Re.
^lM2t
:7oI
m<a2
]Hy4
> ^/
ohX1c
xh~6C
F\G_
K95C6
S/(d
W8%-s
op]C
YP54C
Q9uX
.q3Wx
ro]e
>'!H
dyRm?
{Yxx
9@" 
F/8e
N`6S
C9Vc
16X?Gr
mUQ.\
vM'Hh
#QO"I
&\\T~f
{ay/
c]o1
@GxzlQ`
&*,	
r0E9
*WDJ%
"<kw
c<'o1-
uux|'0+
x<dy
Dz[X:
0JY<
uDU2
,um5
d4[l
y)F	
|5(rp
U.V0
kv5W
i^*l
zUMS
FdrI
"3DUfw` 
_CONSOLE
u2U'
cxCw
IggNJ
/T&suv=gL
0Fca
[EiT
HC6=xJ
|luC6
<xjy=
2qe>
c*"D'k
C[9H
3 %ae
w&qI
&	G\
?(92d
BQt4
Wjr)
Rgk_
	,_?
0FPO
M5K1
7}UH
&6y7%
BRw95
F0GB
^P%Da
5sT:
mbrM
H]"!
5:6\k
&J2-
T+`Y
0!OQ
e?Iq[
Z=2z
O{>x
iI\\T
0~v9
"[Ep
R.<7h
MbK6d
X	O`c
 "ga
`U[+
iFID
xh}.Y@
ohs{
C7;"
AP.G
"3DUfw`o
_CONSOLE
%hrI
)>	?6
UPvY
<@e8
	=[+
"bEI
Xt;\FZq
vgf&343
5buMd
DtLK
>_84l<2
VTp&
^!A{
1jvk:n
bItku?
0urX
U;zMC
Se}6N
XS#\j
u\YZ
p)>`}
!WkU
z41(
2kU1
!OT~k
a<xO
f&LV
?O(VV
 W*w
?#`N
zd:/
aL;P
#iV:
7KB?B
,d %
;>o98-
+)32
kfqW
EYqL
3t0D
IWUd^
qOS/
i(lB
O?@v6K
KZ8z
ZUYL
]_?s
i84aA
2PV	3xv/
(=+?S
?AWy
"3DUfw`
_CONSOLE
KQSt
2EIR
([D!
S)Va
$'Z?
_t@O)
kr1+
Q?:s7
/V4c
CI-u9
)8[\
&f[DZ
{U o
=lwCR}
/km*
	&EsJ
t7 (
~1xf
HPV/A!#B
o'W]
FwLu;
SLD=
S0^X
48-!>!
}kx0
Zm,`
n$4aX
s4%$c
$\S)
{"S}D
i-^X
KOj!
v#m!P
X;&7l
_-l?
uOn{
^6$7
B 7k
Vn`QLP
#d	B=
sp"g0z
Q,\-
"Q2t
O=~U
GUl:
Ivx)
hb<D
@]FIsG6
a&)"
~gJ0.Pn
VmwH
/(}N
P]eo
xC"~
r[z.
&[|w/*
Y.[9
A};=
~G5G
x%In
3]MDN=
D!Lq
=Kkx
WpM`
dvP2
}]&Nf
4J:1p7
g*nj
i"8ks
=l(Z
(k]G
]4W`s4
!"#S8
C^xItw
Pd9U
H){u
f[rO
^lpi
~b\>#
5	jl
2VIJ\)
	HJL1
3CK>
+vt`2j.
@8Y~1
m1,5
5)P#
aT72
_V[{
c`lYc
`w4.y
*ei}
O+P	
X%,k
m?t	S
oE:x
;J3r
>]*Cr
cWV,
u{d8:
0n>~
Ai^#
[Wmj
Q""K]A
S0)A>l 
N1JwW
r0u5
(B*/
SA*'H
[_u&Pk
y2wA
I*36
9@|h
?Rm[s
M@M)gXE
WOUBl
?S&^
i\=~
wA@~Z5
7	yr
VX]p
;!Ft
Cr7`c=0$
(mYh
fLf!
qCwc
zcI#
SJQ|
{/Dz
Ig(Y
eYOG
6t{(v&
uus^
	P9Yc
FpAL
~7M;
M19)iv
8%VX9
/3);
L!:o
1N;@
l9J#
}BEM
@ZPz0
\|	u
5>B:
x3s\
2x-22>
:NQ?XmM
S|/:%
jFv:
%doa
sX/-g
$!X<
[kasRt
?R8X
d<Z;:F<
\&'^
cgZf
;AUYC
?;-5
"3DUfw`H4,'e
_CONSOLE
D!2H
Mgz!
{gY{
6#E@QAc
S SY
=Ud%N
>X_~Z
;7#A
kM>E
4Ujj
pv,K
>4/L
h|{?
5RG.
j;0$
/+, 
fjD+
El$h
FAg+
%wZP
 ~^$
*1$;
k=X	
y77}{'
+JCC
8c"Sn
sBO8
E%AAtj(]
	F*K
:`59
MM:hO
|.4)
JwG/
a#a^xv
#@P>D
o F$
"(1N|/
ysbqFF
(".T
!,p4D
Hjl6
)_gT
d|LrV
rF~tp
eYY#MwG
_s	|
(@+M
!0hB
j7IT
'k=cq
 \j~v
@foj?
\_;1
rF<CQ
1*n^
3k5D
xTj[
&Um.
*Ct.
 %*a
b#2=8
fXkfZ
9MmeX
_	Bx>r
uL2v
8.%I
8g7$F
aPX?z
R8Zl
g ,zt
Bz-M
?7)9Z(
$e&3
/M@_
Ii@v
T%oI
v$Vj
~uNb
v4Ht[b
I9(^
}!gz
A<0e
cv=l
s0}A
fc*Wd
%mTk
{lJ<
Z K6
2Rsp
NpRE
i<p44
jKoj
b+XW
?wt 
R8-a
Ms%m
	?qB
4^hs
d2OW
2@6R(
?7k=\@
X#G	
EJ.7
`k5iv
!z6} 
azhr
yC`C
%;@\
DIf6
wa[:B4E
BT}~
x.z{
CE<p
B<	(
F9d!
fo^Un
>_Nf
e(kf0
ZP]G
*OE5
'|4G
cUil	
SW=H
Lp-M
f2Ut&&U
j"5yO
L}=00
{3|yn
tms#
/g*g
52agl
.gZj
'L4Y
<_2p
@YG.
Cn:8
Z!IGM8
^RrO
%O8!
@4{i
G~~=
=vDU
4J)f
sK>d
ui%T
:XF@
RNkS
abcW;p9
5d]/
Iz%'
d-%J
*dx]]=
{?JQ
N	%W
h,n.
<[<6
?buf
Ps<+;
.PPr
kRE&
ZfR=
e7jf?
@Tb//
U?ht'
ZOsM
`aP4
RJ#q
	FP1
zs#T`:
R1=$:
*lu7|2
or:^
Qa:z#|
=>%?u
;o.(
%y%R
,:G1
IG>=
#X2q4I
Z[+c
n~Jc=
c>fN6>h
H>G@
[_'\
ZrK+
m7sl
vj%A
SR^9B
"%`tP
+D%e
n>!`
Xy~\t<a
ER{G
BAwg
E@VZg
6Xb5$W
]#)/
6kqeF
+FYB@y
Mx!(
OP03
7qb8
+0g-
bi0V
asy 
S]%l
~jo:
'i{D
b?!B
{LJ^
s>`9
i(oU4
61g\
1zX=
$nlwu\
anBv
:]hA
k!'`.jj:Y?
Xt>6
{9+u
4Mww
+ {F?
]J	R
*E(ZVtX
>{FLG(
}K57m
`B9Fa
y_Z:
.LW(X
Za#\|
CN-9
Fw*u
4-Y3
R}~[
@S0N
ADZ1
RJ@%
q]>p
>#~L
RVH/K
l4gz
UN+;
x6&vw
r,=V
Iy]8
~n  
t{pAH~CH!
,CV1
_%^4
Vj3\.
Wu=O
11#D
NbLBe
NCA3
GK<"u
Us~B
k<&es
*Q:%
tvNT
#4'\
K}H_Q
k)p-
yNT	
k0AXe%t
A@])
n=N\l
U6:S
l__Fzb
<K.b
BUg'
x1q?
W.d7f
gQSd
R$.aE
x9Xq#
4kJAX
{W#o
5^PX
e=^ =
+B	h
	]@c
T#PXS
R74b
J>b>
 .y 
4OQ%Q
s"Bt
=>U}i;
yqoa
P:KKh*
Iv?S
.V?Y^
s#/&
8]Wpa
~Cfa
w}Cd7
e<C0
>kC^
Dr@/
3fqBxP
Y$[t
K9+&
=LY}S
j8A7T
>`pC
y4_2R
y4_2R
y4W2
Gs%#
y4W2
Gs%#
y4W2
KFJ7
M+|n
KFJ7
M+|n
KFJ7
M+|n
KFJ7
M+|n
KFJ7
M+|n
D+}b6@
y4_2R
y4_2R
~o=m
y4_2Rz
y4W2
Gs%#
y4W2
Gs%#
KFJo
KFJo
KFJo
KFJ-
KFJ7
KFJ7
y4_2R
y4_2R
>y^g
/	Qd
y4K2
y4K2
yw}q
a2W4>Lq
|wm2
&Sy?
|wm2
&Sy?
C@+f
7}p[
`=XB
p=F6F
Gs%#
y4W2
Gs%#
y4W2
nh|"h>jm
y4_2R
y4_2R
y4_2R
y4_2R
H) &>
U0>	
ytwn(
&^	SgB
!(zg
5B\$Q
	$'-
~oA*"
\@+a
a0Tu
/b0Tu
ET/d0
!=q}
v0Tu
D8c0
C1	-
"m.LKgYh8
dr0RV0
"hvQ
!q{V
aihSw
M;?\5
'8E,
O8Y=.
{*rJh
"FwD
&//v
u<_<a
g{}\
<1?v
|~|w
@.nl
.OCu5t
0W2mO
||qr
yo2G
q*-a
6FN%
-WyH
a|aE
usy86
NBiH
hx*9g
n6]{\o7=mu}
i3v@
)-{v
[`3Eor
:O	R
qQ~Z
BZ;<
Wcke
9>']
;C	m
=u!U
Oy~>
@Q}>
DHig
+bZ>
Us8^6
=-B(F
43^J
N-Cy6
y4_h
y4_(
y4_2
_7k/
OYZdi
6ch|q
f?4nk
en%Q
y2|=
%&>N
`/sv=}j)
PXDQ;|y
?}dw
y=t>
_>;t
y4_nV
y4_BS
%4e?
y4_BS
%#e?
t3gB1
^Nh%
z3k6M
Mw8^
^XIe(
SK#}
|	MiY
y4_BSZ
/:*5
1O*k
y4_^U
y4_2R
KBN~
K>~qUCf=
|w!J
.{bY?
:YLz
)|m~
y4_2R
)|m~
y4_2R
)|m~
y4_2R6
Gs%#
/}mT~
($Uh
1Q6y*}M
mwKh
f_xIU
l(}-
l(}-
y4W2
Gs%#
y4W2
Gs%#
y4W2
KFJ;
y4_2Rv
y4_2Rv
|yUi
y4_^U
|F;@
<<S=
}2?@
}*-@
^K=u0
G=Zm
y4_2R*
M(Fh
G3%#
y4S2Bh
G3%#
y4S2Bh
d$4x
d$4x
y4_2
KFB7m
KFB7m
KFB7
$L8g
'~B=
ws$?7EW
6vA)`d
)[>a
[s&^
+7r$R
qU2<2m
AAEfz
q}N>h
s_T$
`,B.
YXp6
C**>
GAO7
z%s 
x01G
>a{mWK
'\L(
W^Tjr
K\EQO
wy9_
tZ<+
|oG@
%O1)
xS6{
,*C1
Z^yt
(y~>
Fr1j
F(`|
	QhR
xIzb
so?zh&
-xn')
!@+`
y4_2
y4_2
y4_2
y4_2
y4_2R6
%#ew
0Ew]s
y4_2R
HiT&>
y4_2R
HiT&>
y4_2R
L)s&>
L|2'@
pL|Z
KFJ-.
n__v
&Uom
KFJ-:
N}Z4@
KFJ-:
3o(x
y4_2Rj
y4_2Rj
y4_2R
y4_2R
y4_2R
y4_2R
y4W2
Gs%#
y4W2
Gs%#
y4W2
KFJ7-
KFJ7-
+Mc6
y4_2R
e2on
r$D=
0e/$!G
y4_2R
y4_2R
_o.v
y4_*Qza
y4_2Rza
y4_2Rza
y4_2Rza
y4_(S*i
y4_2R*i
y4W2
Gs%#
y4W2
Gs%#
KFJ-
KFJ-
KFJ-
KFJ-
KFJ7
KFJ7
y4_2R
y4_2R
y4_2R
y4_2R
y4_2R
y4_2R
G3%#
y4S2Bh
G3%#
y4S2Bh
KFB7m
KFB7m
y4_2
KFB7m
KFB7m
KFB7
KFB7m
KFB7m
y4_2R
y4_2R
y4_2R
y4_2R
y4_2R
y4_2R
y4W2
Gs%#
y4W2
Gs%#
y4W2
KFJ7-
MK|n
KFJ7-
MK|n
KFJ7-
MK|n
KFJ7-
f}|3k
eJ-.
KFJ-.
y4_2Rjq
y4_2Rjq
y4_2Rjq
y4_2Rjq
y4_2R
y4_2R
y4W2
Gs%#
y4W2
Gs%#
y4W2
KFJ7-
KFJ7-
KFJ7-
KFJ7-
KFJ7-
KFJ7-
KFJ7-
y4_2R
y4_2R
y4_2R
y4_2R
y4_2R
y4_2R
y4_2R
Gs%#
y4W2
Gs%#
y4W2
M+|n
KFJ7
M+|n
KFJ7
M+|n
KFJ7
M+|n
KFJ7
M+|n
y={u86
h?_5m
y4_PS
y4_2R
y4_2R
y4_2R
y4_2R
.=Da
,}j @
y4_(S
y4_2R
y4_2Rjq
Gs%#
y4W2
Gs%#
y4W2
Gs%#
KFJ-
KFJ-
KFJ-
KFJ7
KFJ7
KFJ7
y4_2R
y4_2R
y4_2R
y4_2R
y4_2R
y4_2R
y4S2Bh
G3%#
y4S2Bh
G3%#
y4S2Bh
KFB7m
KFB7m
KFB7
KFBe
KFBek
KFBek
y4_2R*[
y4_2R*[
\XDQ
}:!@
}:!@
}:!@
R'L|:!@
y4_2R
y4_tT
y4_2R
.=Da
f}|3k
eJo0
KFJo0
y4_2Rz
y4_2Rz
y4_2Rjq
y4_2Rjq
y4_2R
y4_2R
y4W2
Gs%#
y4W2
Gs%#
y4W2
KFJ7-
KFJ7-
KFJ7-
KFJ7-
KFJ7-
KFJ7-
KFJ7-
y4_2R
y4_2R
<,V/b8
6I >
-8"V
qfO$O*
h^O"
!$JdZ
:dE4
]4JXB
yT~,
1G$g
S2iOL;
ND"X&
08q*
QR	u
Sve3
(UU(<
C}}s\h
>-}k
>-}k
(4Ih
y4_(S.
EX5m7
Q.n\
y4_2R
KFJ7
KFJ7
y4_2R
y4_2R
y4_2R
y4_2R
y4_2R
y4_2R
y4S2Bh
G3%#
y4S2Bh
G3%#
KFB7m
KFB7m
KFB7m
KFB7m
nZOs
KFB7m
KFB7m
64+{
|yLi
y4_2R
y4_2R
y4_2R
/0(E
l%>e
y4_2R*[
l%>e
y4_2R*[
l%>e
y4_2R*[
eJ[,
KFJ-.
KFJ-.
y4_2Rjq
y4_2Rjq
y4_2Rjq
y4_2Rjq
PXDQ
y4_2R
y4_2R
Gs%#
y4W2
Gs%#
y4W2
|:!@
|:!@
|:!@
|:!@
KFJ7-
KFJ7-
KFJ7-
!$jlZ
}:2@
}:2@
}:2@
}:2@
}:2@
}:2@
{%L5
|wJJW
KFJW
KFJW
KFJW
KFJW
KFJW
y4_2R
y4_2R
y4_2R
y4_2R
2tQh
h_(Sjq
KFJ-
KFJ-
y4_2Rjq
y4_2Rjq
y4_2Rjq
y4_2R
y4_2R
y4_2R
Gs%#
y4W2
Gs%#
y4W2
Gs%#
KFJ7
KFJ7
KFJ7
KFJ7
KFJ7
KFJ7
KFB7m
KFB7m
KFB7m
KFB7m
Gs%#
y4W2
Gs%#
y4W2
Gs%#
KFJ7-
KFJ7-
KFJ7-
KFJ7-
KFJ7-
KFJ7-
y4_2R
y4_2R
y4_2R
y4_(Sjq
y4_2Rjq
y4_2Rjq
Gs%#
y4W2
Gs%#
y4W2
Gs%#
KFJ-.
KFJ-.
64+{
EX5m
|wiJE7
KFJO6
h>3Rv
3#e'
3#e'
d3_'
h>3Rv
h>3R
h>3R
h>aP&[
W>J'
h>uT6m
h>3R6m
h>3R6m
h>3R
M+|m
h>3R
M+|m
h>3R
M+}m
h>3R
M+}m
h>3R
n{s=
(4Ih
>)Sfq
h>3Rfq
h>3Rfq
h>3R
h>3R
h>3R.
3#e`Z
Lk_`
h>3R
3#Y`
iw4O
h>3R
h>3R
h>3R
h>3R
MK|m
h>3R
h>3Rfq
h>3Rfq
,izHRUQXE
zmCz6
l=,@
M}=,@
h>3R
2JM}Q*@
h>3RF
2JM}Q*@
h>3RF
3#ej
h>3R
3#eq
h>3R
3#eq
h>3R
3#eq
h>3R
h>3R
h>3R
M+|m
h>3R
M+|m
h>3R
M+|m
h>3R
M+}m
h>3R
M+}m
v}x;k
|h>\
-Jz}	
P1e@
PXDQ
qY5@
GsY5@
C*ts
|)6@
h>-S
|)6@
h>3R
h>aP
h>3R
h>3R
{]H#
p?-I^f
U#vf
h>US.YS
~Y_u
Fqd[
h&CCh
|f$\
|f$L)
fah;
]kOsu
3#aA9
|f$,(
l]+@
h>oVv
3#e=
}}(@
h>3R
SBe6
l_;'
bX+?JB
(<$Xt&
sne<
h>3R
LYH'
i4[!
|h>\
h>US.
x	aY
h>oV&
2qO}
h>3R&
\XDQ
l!>@
h>uT
3#ek
/%,0
)W	xN
h>oT
|m3@
h>3R
i4[X
3#eX
}a5@
h>3R
RO]fq
\&K5
h>3R.
)7>=zz
h>3R6
h>3R6
2,,}
h>3R
h>3R
{Cn/
2tQh
2e{W
h>3R
h>3Rfq
h>3Rfq
h>3R
h>3R
*U{[\	
}q%@
3#e\Y
+k_\	
}q%@
h>3R
lq%B
h&3Bh
h&3Bh
3#a\9
3#a\
\q%B
3#a\9
O!~|K?
F0y?(
",u/
1Q:	
(G0z
}!>}x
|f$|
EX5m7
OW=e
hMsQ
{$0@
h>3R>
h>3R.
}Q;@
h>3RF
h>3R&[
h>3Rfq
h>3Rfq
MK}m
h>3R
MK}m
h>3R
h>3R
h>3R
h>3R
h>3R
h>3R
h>3R
h>3R
M+|m
h>3R
M+|m
h>3R
M+|m
h>3R
M+}m
h>3R
M+}m
h>3R
EX5m
Zzro
EOc+wi
,$lv
*^rQV!N
])T.
h>3R.
h>3R
h>3R
h>3R
h>3R
h>3R
h&3Bh
|f$l
mZOs
|f$l
|f$l
mZOs
|f$l
|f$l
p8>m
*&C5
x}xz
,WyH
yHok~
u6(K
/m	lx
`=[tP
A\{G
?Yi9#
?	+t
4F|o
(6@TT#(C
S <A
h>3R>
2tQh
S{e\
L|q%@
h>3R
L}q%@
h>3R
3#e\
+S_\	
L}q%@
h>3R
3#e\
MK}m
h>3R
h>aP&[
h>CU
h>3R
3#e:
h>3R
h>3R6
3#e#
h>3R
/4+{
iX&K-2	eTgZf
N9.l
4ydGE
[0^0
b|AT
3"?&m
<]\u
?'k.
?coB\V!M?=
W~sy
y4mv
Msue
Qvd%
<(E6
EXY?r
\TA_
t|eMB
>vtq
"~85L
SO</=y'
&(Bg~
T--q"
|s=DH
v5Kg
J?TC
!^8w
24h1
&:[??
8#xt
.fO~3
F0u?(
IXY_
xC8agto
F#xX
]shn
\t6"y
hs0m
5M~3
qh9W
fXy+
t	Gt
K^@m
5#PF
orT{
btC,
WFu&
DD6	
)^QQu
SfA<
=\t7Q
a58K
Y\V!
i,q\
'?]/
D!EU
I(9sP<
}Kv~>
!FkF)
RE;va
A;va
%!)VQ(
f6ry^
A^T!
jU~q
UXuU
26Z-
3hjz
~xTh
(G0z
[?]M6
,>2N
~7>;
=XC(
V>]}
57{h
j[Fy
8e7T
t9M7
__]_
+JiX4i
aF!Y
x|I(
mu_ug%e
#|QV!
o?\$
V<=}
.Keqy
LUds
cVI{
Bvf_:>
/}_I
V/Hh
~Z7g
GUeQ
->J?y
Vm;J
Hq^l
<}i"
W6A_5"
[Ez	#
FK}n=
^>zd
IE(9R0}
-i#L;
:t-Jt
eHIv>
<lcx
v}x;k
h>)S>8
PUQX
! kC
h>3R>
|1,@
l1,@
Lc+_
|i,@
h>3R
l)*@
h>3R
LQk_$
h>3RFr
h>yT
h&3Bh
\A#B
\A#B
|f$l
h>3R
h>3R
a8>QS
h>3R
3#e*
h>3R
3#e*
3#e*
h>3R
v}x;k
h>)Sfq
h>3Rfq
h>3Rfq
S4e$
h>3RFr
i4[$
h>3RFr
3#e$
h>3RFr
3#e$
h>3R
h>3R
h>3R
h>3R
h>3R
h>yT
h>3R
Gs]J
h>3R&[
|kv]
(4Ih
h>3R
h>3R
h>3R
h>3R
h>3R
h>3R
h>3R
h&3Bh
h>3R
h>3R
M{N;i
h>3Rv
(4Ih
>)S&
M|	-@
h>3R&
h>3Rfq
h>3R
MK}m
h>3R
h>3R
h>3R
h>3R
h>3R
h>3R
h>3R
/4+{
h>3R&
h>3R&
L>K_
M+}m
h>3R
M+}m
h>3R
h>)Sfq
h>3Rfq
h>3Rfq
h>3Rfq
h>3R
h>3R&[
h>3R&[
h>3R&[
|f$i
hr3:
|f$i
|f$i
|f$i
|f$i
|f$i
|f$i
S~>4
h>3R
h>3R
h>3R
MK|m
h>3R
MK|m
h>3R
Y v{
2tQh
h>3Rfq
h>3Rfq
h>AS
h>3R&r
3#e"
3#e"
h>3R&r
h>3R
h>3R
U{:_
=sN0\
3#e3
h>3R6
3#e3
h>3R6
3#e3
h>3R6
5^<j}
W]?QW
9<lgI
n9[n
F(|;(
"3DUfw`
_CONSOLE
 >?N
j-Ef
;(bE
]{hJ
0[Q7\
	RJZ#a.C
UQq5
,}'`
|+cU
9ces
Gm>#
8IY_
b;1o
@"f,
hHy_
PX#LM
|UdZ
[ ?"4
.k$.%
H<[q*
j5JN
]hTLf_
9j	{
qld9p
t,b#g
Mxp4
5)eB
%(Omgf
{cAv
lA&A
kC3zl;V
sgJuX
hV>MJ
zcHG9
;;G1
N*D/
%g7@
jl|%
7[tc
[B\HVG
u,>g
Q0IC
	s0Q
3xE)
_wBs6[)
W7y)
e>A 
"YoIp
c!_c
ck7Q
?W|#l
V*T7
z^]'
.g0w
y1ya*K
k2`a
"7M)=
Mrm(H
I*mD
:`J0
+*Vw5d4Q<b
ByOY
zPTQ
2K\>
l{Vw
/$Lt:
~W]o*
hoG5
\hy;
v1D~
X[D!
tn0D
iC'0
c%B,~_
XV	U
&.D$
:EQ;=
h4[2
E2}q
tQCg
Uz`9k~
i7xjl
iRxN
lD<`
OWHNQ]
 Dq960
RP2Q
jdGWEL
$vl:
\&[98
>j-7G
mifR=
<]	ll
i</b
.J.4
B/)gQ,h
H,j#
=1`Z
n\Zr
Ba$@
<p*Qm
r{AH
Gdb{
0Wtx'
~T1S
!|R	.
24An^
$K[h
qN|t?
<~ce
A}zH
fJ(p
}`"%!F
Z."'?
+{&r
{$uPw}
GMKt
lAsg(
l?+&
tv2W_(
! TC
TVUD(A
BKU@
t/Uy
} {p
\gb1
-/WtQ
=DmF
(513
bA3*
rR%W^M
(Y-Y
+ D,t
6EKq_
+@XX
J]}9R
_34#sa
uSw)
@M[\$
'1w<
M^9N
5/L!
'Z1&[6}x"
2pi;[
h&R;H
J$'Ds
!07/
c)%7r
W.j"
DG0A
im.M
QYh=
&{_t
>4By
T07mI
\'.?"
ci%71
H+Tq
rS*Qa
D@Sd
AFrD(
0YTHkjq
Q}qy
q '{
:;QD
_'vU
.rC<
ucA&vH
JXV`
y#3c
z=~`
>n|\
9Ol;}
X/}03
!Cl]J
5RCwT
TdVz
%`As
I@T*
x:"d
^r$;
"3DUfw`
_CONSOLE
i}=6o
)/o#
b_s 
3\Cja
R?Xon
$6!T$
5gj3NU
vE-G;
:0	y
.d9/M|
7UTTq
f|4'
I]Op
oJd5
n-E*FX[
:vEp
W#h7
f(a3v
.D4%
5w3't[
Lusc
}9_<r
Hd7YLf,
LDLb
\bV~
Kkaxa
t2_A
W*,)-
#rSW
3VGE
*3=7
Bb/g
PS+^
DN.	
MZu8B
*0D>O
H8}W
<ZU$
C:DN
0MiR!s"
N%%9
}?rL
m2(R
2fC~
lQZ4
v.#B
)GcC*Jg
9=]>
~r0E
)ZlC
FQ{>O!P
sJEeTS
m'yo
\ErM
"jddo
YWk:
cdG8l
/	:n
E*pb
?-.*
^i@f_
:>cK
vgYQF!F
c@kr
*L8.
Y#f+
,lH?d
oT?=c
'6$Q-
#(@Ss
1Fh7WKq
!Um-
at!2
d~vg;
ylBz
VGt(
ZfR_h
JRoG
eih(
.bf))}
	yvf
SI}2
KhO2
54[g
yH[Od
wjNz+wD
eEN`
hRN]
:^X~
SFfnl
*dH,
43<y
`[oZ
s 6O=
D90"
Xa>dlP
ZG$6pu1
J2;t
t_N>
}LiS}
aje>
Kz]W-
AajXI
.+yjL1n
qZwa
1y7R
	wJ]2u
@|uU
9<L6
dbQ@
,k{qI
@>F0
M3\v
x*@Bc
r/EB
hb r:"f
WGD%
,([$
j|z;I
KzsZ
]hFj,
	dj G
tW{s
U&X!
P$;u%.Jj
q?-!
rP#WM-
vA!y6k
1# +lU
m.TC
=gj|
1lTS;
l?Zci
UE-pL/
y3(l
4CE%
ugEO]
}<(.
/7l[
A;.c
CCY$
w?n5
MTL,
i?@K
%~^,*
L|{n
ko`+
V:(7
,O;S
`=.K$
k7D8
M@!7)
+M`'
e[|$+
;~sDg
+T#q
	AH(%
0n>XEui
%z_Z
MY9$
b02C
8"x7
DFs4kzcB
&g?9
xkzbR
:Y/M
dlh/%
t^X~
GAbZs
zw_B
=G\x
)V(|_lu
Jbv&CT
4*skV%
D*5h\
[]:EE-,'
>5|4
*WB+
-{*S
	\c^b
X;bX
9:PH
Q0CD
y`4b		1
2x~i
-L"T
B4VfS2
}nPr
%1|`
.Yo>l
n+=9r
;W&_
Q#2V
KVAET:`l
%eZV!\
ZLz{e
,B@_
nF	U
+YL?
p<pg
XK(E
@Fx(
cN_^h
!MfaJ
b]KjsL
4aZ{
A	uM
\Xah*]
g#|&|G
V{0fFy(~5	
cf`o
5/N'.=
"C}u>j
*hy"
k$#C
yZ:^
U\){
FC{F
"HL)
'&Td
H?U'"l
MO1/?
	sTWE3
v+7]
;(tH\
$gg:_
}#Guw
}G#[
[Y4Y
jr*yJ
z)U4W~7
R$|<l
$X:u
)2k7
TM^~
9KFl
XP:h0$n
\qe.6"
/CBW*
-ri#}
i	pj
"3DUfw`2
tIpR
_CONSOLE
]ku5
4 Qk
D@"6
*x-1
Cz+9Y`ni
61}S.
{G6X
&}_J`
O~'2_
W+&1H
S{a\
<hu7
&}rl
!{2x
I}">
%*6<
MTLS:
10<d
uCOR
W.c83s
_!FI
	%LZg
qyXsZ,b
agfXzuH
q.Vi)
4NdU
]yQxm5~]
qF"l
NlZ}
e7n3x
?X:M
km?<
Mg_5
MI,j
D^8s
<iXSK
})k-B
>dOg}0
"ZL*
3%`Q
;MCg
aF}D
KXQ@
\gm&
dTei
4i+M
C_SX
$Brh
t1>U
Uy*f
GI.}
N:;8rV
_~E> w
4TMb
.Ee/
]*(6F
1S{I
uAVP-
o`.0M
bV7N
Di:nx
V^gK$oY
:	e\>
fdU`
eUf#
ov#RGp
F)1t;
4/gQ5>*	
`Dl*"
o\)/e
(31s
A80L
)vl$
CiUy
EP[/
Dhso
SkF{
}Rt#L
;+SA
1L[C
f?NEO$
#IDD
lTQk
&o}*Q
(d;h
4MIZ
kijl
tex/
q_Y#
[p*F
z>W|
#>HJc9{l^
$l:6hg
#Qo1
{mg,
L2W`[PF
,Q~=
Y%8i
f>nc
A*>Yt
6#mv
/W7O
3/y<W
C~L+
nl"G
QWC?5
(GG9
kD{Fe
|!McqK
m}Yy
{YI	0"
BC<'
,=<Lwp
#4;:
>T'`H\
v6vj
G@Tqm
PAfu
STAx
.hEo
p,&(
..$9)
w aK
9rT/).
e.1*C
%mR|
Vf!vB
\usq
-cgP
[1@3C
N8+e
X%]=v
@(pyo
^?8sb
>O[B
:Za|
zn	T
1eq(
e"Wx
zYGw
vG/J
'bu`
tt#S
pl%WZ2
&zM8x7
uakT
g4af
l	;^
;Hf:?
}t/3
sW8/P
<S#a
#	op
DF7~s
` u@B
TxJ=H
*+J@8
v5WQe
|2TO
mN:Fk
i<hq
(;r#I
%N=r#
fzE;
13tr-
4s^K
D	W'
X,2Y*
:9En
MaQ$ r
mmt}
5ZXn
HY8v{
zb+w`*%
"h=V/U
*e6oF
uRu`}~[F
,{XD,R
te!ENDV
&%(,
x=c-
DZ!+
7j0[
&s.M
!	v9
	$q~lD
DE7f
04b@
EO_ 
K":;
|zD%
Ceu;
NFf[r
Ow>>
X-}*
rsq$
7#BA
(`K(
ju\0g
}Kss
f/g_
0@R\
D18t8>
w	W]`;b
LnFf
;te(U
P4Ab
	~H7 
F|J@
?M%0
XtQH$gc9i
Vy/a
@By[|
O<3n
	b`-
i+ch
59/v
>{2n
~vH)f
itV|
@;Gl>
.E^t*
q|;i'
\zm}
>il-#
[!dx3
Sh ZZs
+mD\
X19,
z<vo.&+
h sZ
YIqZ'
0Dp"
;=>M
AiYZ,
((!$
![	(
r}zn
WP2#4
sUp[[
"3DUfw`
_CONSOLE
amd2
aP^o
qp?f
OQNX
sLL	)
\x\:
WLZZ
V-V%f
\g<~
*am~3/
x$W=
}EB1
3tLdP
P	Js
Z>hS
@NCG
TejF
%IPIN&
LaxU
V&Gz
wZ-!
#[bui
y'[N
YHhs*
kW0S
>F)a
,:CX
RWQI
*H_x_?
Yvl!$
	"7cCg
tTWp
^ P}
uP]T
IM'C
w>44
	;H{
kn#&69I
Ofo6$[
a@Dk
<[C2T,
.)X+
~Cp@
9R1{
oqU9
}Y]g
|?VO
WQldvn
5!H;n
oF}.
N?m!O
a9v 
w40>
>=*Be
crlT|
i~xMaP
KH{5coE
fc	Q>E
(l4YDi
7Qqs
h[NU
fVmR
3<_Y&w
Gqgoe]-
B#|	.
r\a1mU
/D65
n9|v>
/7EG+
q{Fp
#[r[
4zg^m
-6Y!K
{2o\
_jT4
OV\*
:Tq4
wGO5
4XE3
S{R"`%
|R3;%\y
pWDi3
uiXC
tJIk
o*V/
q?NR
vU-#
@28e
8QqU<
X?7~
i2t8
!4[<
_4MQ
h{|L
U	_Dc2
v`z=C
 \6'
/P18l
jWCN7
!-8c
L #U
T%g<7
NQL%LsO
qjh>O
{3U0
vI;Q
r7'Q
0YC*
Ea)/
-| }
}8c}
Y'n&
_&L7U
./^p
c"0w
|VkjA
@,6\
Z2gR0
2\K;\8G
'Q`p
/:llK
QDC;	Y
xjck
9PQk
eYwu(
=A?-t<g
+~%\H
#9j#
,?&M
e9p1
_Y[?
+f'{Up
^|Q)g
Fg${
l$lw{
NKFQ
U87KX9-
aY>@
 Zyh
,d>0
 W0i
*2O,I
b^$v
cQ)D
x;>V
!L*j!T
pJ-W
3ik/rp
YtN8
:6mb
Fr-E
jn?4
..=?
b:69
;Rfv
8%}O
+QA!
Rls8
.T0d
?Xw3
J'I~Q
2LaE
HTWh
8DIZ
R]Lj
)g(s
$ H2#
]n9(
D4 x
T9W^
1k|oW
Vk)/
MYQ+.
L8l:
oQ*C
vdro
Dp+0
toiB
&?n*
y0_H
X2Q1
y -bw'W}c=
fghU
IR-oO
Q(GJ
<je!
!G<<jQ
uFqa
4O*.
qsK+
@h(E
Mk47
"3DUfw`.
_CONSOLE
s7eL
&OP+
.m1W
&aY%
(W-o
\[dy
i,wtc
:eGOQ1
-skL
MVxe
8(>f
7;(W
gQpd\
bvai
^lZc,
`cDG
y+eh
LPgL&
o)-kN
7= g?
Dr!]l
yF^l|
r	r@
"b3N
6<",(
gq]JE
O1@SnTl
di7n
HP=?
C^48
9UlG
>K	/Y
bKi"
\kSUD)B!
	wzt
!kK}
.NC-=#
698f
hS"8_V:+u
(6lx
_vrm
~\Pe
Z|9;
#]E@
8}"K
8 _UO
I=i$
K9fzL@
$CTz^'SaA
s4)bU'
/$5/
 veI
U0X`
cCTg
Y2#IB
lU`Tf
kAK?
3F>^
.NQz
	^ZZ
z8U>{$
'^Ye
N6i=n+La
HN)5
AKn?
Q4X.
CDPGx
#w @
=H1C(
/doQw
9sPX
[WK\tNJo
TsCLV
BD[O6e
5 7A
^qK_
-v:Zn	1H*
X9:U
d/F>
pI%X
hBc|h
j.DK
>%6d
.jc"
%+1)A8:2
h W]
\qM/c
N[w>
/S?rt,
B:Q[b
Kt.*]|
<q_T
pN	E
34O2
poq9
 p{I{
Tl-tJ#Y
vy=bR
yO8[X
c6	i
;qW%
5A:?
AhZa&`?
E#jY\
CD3h]
\:Oz
`<Jc0;
hoLc
#*=%
buO 
Q7];<
l	A}o=
	>>G[1
-e4I`
H^~,Me
Pghj
MW|P9W@
%)G`
uV0:g
8OG+K
<;YhP5
q(B)3
1uC5u
/[%9L}
nA]W
h^^,
5^&<V
vb_,
O-/p
.+.H
;A$N
yc{O
6C7~o
ufs"
Du^l
\Z V
35Ym
:9^k
3n9((e
pO)?
LJOe-
ESy_
i|.(
zg1^
,@D7zs
Z>q{P
D 6C
R-IW
g^7..
]0$m
+l]{
d^G?
I!y@
|"qz
g`PH
UVLr_
_~h%Q
~J4Ua
@LOQ
|Q#t
	D;%-t
rOTC
CC\6
"\yY
pOa8
f;O6uC
Anm!
AjszK
pr(L
]T/5
*pz$
G6l=
Q\re[
<1>>
|,_ 
TL%Y#
nWAr
vQg@
?c)wb
`,.9
$Ec/
i@0|
4"'4'V,
%25o
Cb [
52'3y
>nbzKq
UPUC
r^d>
6?|,
LCV2
*;(j
Sy7z
Pr4r
@=XxL
>:2E
tH|r
S]wTk
(1ym 
^'\dVK
P~td
,@Lu
cYVQh
7@{.
}c.6
?ZM5
hn'O
qU	v
-p,HD
]w#58
Hz;F
2Cp/E
4sjr.
%9.)
IL M3mH|
P6	]
*=e)3
|'c;N]
 RCm
o@ZfG
<IF\
n'[N
j]/XP
~T363
9o*(
3"2I
Ch+-
r:;0
0:&ui
8\|,Q|s
20`MB
P0X.
Y!BN
3T~I
d>Q\b
+(R8
=^fO
c+o'
erbu
J<M<
xptd
guB<
\l29\
RW$O
yP@Q'5
\B| '+
[vKk%/
<o5]
6+be
Yk[a=
,pD"
]-!S$
J:r0
E.Ql0
&S#p
?,eO
'R+*
LK],
Wn27
Co)H
q4|V
"3DUfw`
_CONSOLE
Y/ZKb
@&Vu
ur!fG
>Pbc
.6lk
KK|W
f<%*
1Vr@
jWxM
#m[U6
4kOF_
"-j/
(36({Z7
:H:'H>m
7Fw.
jU&ajky>s
9}z/C
YaC8rJ
Q	g6
y^C(
 Q(/
P6H0
cliZ
aMSL
5k}f
z5:$
tT)P
hB)ds
Yklk
	DIok#
>1sOVp
Y%!&
]`%yKx{3
;F2_
/>-Pn
"??K
*FZ7
	8k#
6dZM<l
M/51
\WST
xw/cV]H
Mp~M=z~=
lL#Hr
e~BF
Zr|J
3vb&
_leI
t=c.e]
a.tr
Z\Q1
o`Gy
8bw@\
XqFK
AU.=	#
o*}y
'mws
"4P]|
eH?W
15^V8
n5/O*%
JxAn
$Q\y
}VE2~HX-
]S~7{
!@%q
08|{
4\Zp
i+y~es
 @|ed
f+J@
-Ovf
bAI;0f
=k`1
f/7J+
O?"5y
5L6L
 RiS
Dc|^
PSb-
 BMD
!uU/
7g]x
Os9of
Od/7v7x
o!)D
f5]f
X61C
OpX"zCl}Yn
I`,B
jUG=)
X~XDb
Z$[P
:PZ:
Nz%h
pNM.
I4xMN
#}uKC<;QG
Mn3{
rW^3
?RB*y
gdri
0DKr
Yq~YfD
Z])4
|f&K
`f;<_
i+7M
{:2l
ZS9W
j_?9
|$V~
(6)N
^M!M4(
?$S"
d,n;
MECC?
N9MH<
1QO!=
Y~{sCSQ
qw,v^
4$L*p^
|_nFT2
P.fb
[h%x0
<b\J
{[UQM
U;f2
}[3j
%hlu
 {"^(
{un<
;zm1
LdDB
[nrz
E\]cP
CYYg
gd`%
gDRhG
<p%<
<TlN
"V}	 
Je=_N
}hQV 
I,\[Fi
!Ii	/
7pIM
A^Q|
oCKV
?,J?
6Bu?
Dtlh
xF5eO
>AmG
H8fV
'jD)
vJ9F
C!q:h]2/.
U}4z
EF$&
0wmN 
_ja#
KPka
xvR#
VS]r)
fJX5
7*"d
oAn=
)mO!h}
l~0}
7|Fj
d_GX%rT
Kj,B
mP*i
oO4G
^;Yf
)&/j
*S=8
}M&KQ_:
,{B!
S['	\a[
Pyrt%
=jHo
?Ro`s
%cI*
*NgH
EYBA&
*V"1G
wm|L
Rm#+
<nC}
_19I
LR=#
CPj8
EsEJ
/Uup
Q/L#
8}AT
*Y@v
/>^+Z
Y{#u|5
jGy\<
0Fp}M
GOFX
"3DUfw`
_CONSOLE
$SZTR
*FlxB
%*&;
KC;`
H1f.8)
:CKV
w}.k
J'!F
[b\|L
7o3Z
Jq#q
W77F
3s	K
(O#/
S56Q
BK"/
]3d/
 jGo%
e!z~
F5E#
"z?c
'CxU/4
#Aqt
fb#	\]
v^>D
(1fu
H2^I&
I5+q
0?<uZ
 ZlP
|lR.Q
S`]{
@;t_;I"
;N-tF
c[9N
,RkL7`\
s	.4$
sg2W
##?v+R
\)M4
Bj/5
~^CT4
{0<Q&
*FLB6e
J{CW
?OZ~[
up*%LR
J9z,0|
]Qc%
?=&i
>$gGP~
|0#9
qorMz_
@ %G
fy '
|S6N
w$c!c
KwNG
\s)e
<lF]
	<Qtz
F?YJ
msK1
fQ;D
O}>Df
t ..
k~,$<
z3.s
uOP~+eZ
gCF:][=
@vt@
q"j 
2z9=
voY4
=rbh
@(lh
W2-+
eX_Fss
uOe9t
X!v\4
"Eu$ 
3gc*
n9z2[
+t-]
x5D)&
RC.Q
=vj:
E)$f-
PHLX
P2o\L
'O0yb
lTo/
dp@`a
/!EcG
C2,G
$e$j
d^PZ
1m#n
5:M4
%[WL>4
qZ4)
7)it
o.RY
43G^
?,(H
=(#mLw
6Qz/
Dk[%M
X{G;I{
%O6q
?I@OE
#.]E#O
}Q2\
<Qb,H
!;HU
li*i
PzbP
3@RUH
lIjH/
_;Gm
O{B|
w$3_R
	f#P
)D6Sc`~
Rqo~
?>%f
xV^%A
So9I
dK|C
E4;P
/h,\
K(]\M
_baE
E//m
Ltg!&
AH$Y
C9A$
*4{(
VWp8e
%}^6
kDHRwxX
mHP>
.rctG1
mp/"
QME+
OM49
FZi/
L73l
b"H+
{At|
K6ZK
iGws
{	gE
^?7d
eNuD
T=_m
9%!=`
J	cg
>-cK&.
+[Q*
)^y)
}9Fg
E"O;
.Od]-
R Hz
$<:e
R]gD
kjjl
0V43I
alzH
R_#L
>)7E
Wk/~
)L_F
=ull
by+y
?=EU^
,7j(	y
q|n(U
`Td,
2!%G^
jlu%
mh@9lz
q=z$
}eaJ
"3DUfw`
_CONSOLE
AT_ @7#
qlZ*
mw[1
,y;.o
D$Ly'UK?
5$mb?7
3L@)
&ofBB
i$1C'
$sFh
o2Vv
w!*e
&T`K*
 ]N*
d^2/B
xc'%
/)j4
>~ 0
d0dqe
qrB 
1w5i
bJ)KKx
$ ^ PG6q
xS`2
MC7}=,
VO/A
Ue$DwO
tsl2
wd;%
liKe
TC&3
-x,NVo3c!
)?Y(
nQo/
\{O,s
|wq}
v"Zs
tg:&
*8z@K ,
zPCbOl
@w:T
5\V&
ff0+
MtWu
O	w[R
)">{
9ql~
v)C@X
 j"0D
)pjH
*\~@Ir`k
=\w0
G:Ng
[DWI
&1D7<
HCH1h
{/<W
=pv0R
{hx4
HU`BJ\j9
-04e/
I1N9]c
`P;j
ed)3
f@s\
c@+y
(D^Ey
~%iA
=DTG
R5$b
iw|-
wmG!]
dsEm
m#vW
_}8r>W
 .#t
9"H\?h
\cWJ
7\@r
BA:i
t]VU}"
fO</
})lT
'*$$i{m}
< ^E
vxkZ@7
=Xf>5(s
cV)]-
zR|#
hN;9j
N7Uo
zIMY
H5o8
@(4P
KNn{
..."
InE	
E3-"
,l U
n:OY
{$6@
{_:K
eMlq`:^g
Ebj*
~j]^{
d;=?I+
yzI=
]L+r
0X`m(OM
<w2DF
9\Qc
@,'2
\@qpc
";+g
l~_7
2Vk5
\Mbfe
 bI4
YpuL
l<( 0
k;%{yH
Y?,"}
dRN_Yf
D1q.
`q]q
	yO;
)qSE'
'DF/
:aI	w
#xc+
H9{\
"-IJlp
2Xqk
P'(@x
8i8ys6~.x
LF\t
au0eVze
m"%T
Abj5	Oo
5]re
UVx)
|k?7"
eT&Nv
CU'P/V
V^-k
q>j9
S"N}
=`.4sz
]+,{
|c$Hd
Sq-&
c0YOH
fFZvj)r
$k@l|
%'auxtz
6cOF
uQLd
RAA>
~1:L
:zj[	r
e{j[+F
z.uB5
B3GJ
-y&m
C:OQ
i,KY*
N8{?Q
}D7v
PM0!
Rk*n
'G+Q
5z	o
E"Y8
#)T 
U+Mo.
&[)#
jv}s
mn0Y<
m`M$
e3R@
}c|I
Y$n`P
YWZX
p+Z=1
;jJm
A*?{
"3DUfw`g
_CONSOLE
5<Wo8O
KNg^
\Ba1
}[QQ
 >:1F
B `M
WzSb
d6CKH'l
?O$oO
n^]<
4\RQ_
FQWKO=
w~b(	
QvNW
\7.=aU
>Gj#
T^pW
jtY^
/*5[
mam];
c(X&
kX*o
#,nF
v`r+
jL[x4
C9UuO"C*L
}T5,
++yO;
jBYt
Wc^~i
WRvb
=u}<
K-jp
^AftR
2~qq
qPN)
\\,ax
R@mL
LETA
+6@m
\m8+
(3ky
[Q5K
u>	$
I7.]
\:rh_
YYLa2)
'/~u+
pU6Sx
@Ai6
	K1{
~0B0b
/wGK
R]LQi
O7sI
Ane&
85;cC~
=PIY
eg\L
-]A=
.,n)
YQr"F
Z`*T
r;>>2
us|P
 <un
9rl+
i($:
=?a.
tc3y
Q.z*
hobP
/~q=@(n
w{k0
Fh0#
&^z_!-
-6EF
	/Q;|
.I!\VJ
$8vd
F='b
MFIN=
t9D}
HG%E
<S4	
pBv"
J)9r
y.H n
/94:
U;cKZ
_/Ke
=A?p
G6 p
mj >
1>;S
6XWz|
L%r/\
PI9s
j,U'
U[Nt
&9j<
ZE?'_
MC,#
EcplG
m'&)E|
jdrD|n
jY;.
E&^9
AAwF
|uo]aYN0@F
v-|J
@-usu
(cx*g
r2l8
ceAE
$,@r
@v|c
U%7*
3*G=
n!6O
MES}
S4W`
Yt#An%
Dd8<
3%Eq
_ z<e
zuiX
*s69
&U@x
bWmNH3	g
qf+[
jU*%0
sLg2
gcM	
,|c"tN$ 7
mIw/n0
G_aX/
)KHA
='b 
Q5`.
44Ob
CBOD
{elk
roIDP
"=Qa
!pH#
G$6r
Gt{*
jGy?
IhPU
NAlz
)bEi
C=0%
	#^i+
p"hVo
;rEb
$6/F
'94M
\P0w
t|! 
PXG:_
&^k2
!9([
:@8&d,!
1H+5
|]txHt?
_o!	
o##%
ep5af
nr3=A
z=(Y
pBuQ
m1>-
lM9(F
Nq8u
}"Cx
qXJU
}=Z	
.PHv
4e {
z;i|
,l:5
1{Su}
 bwb*
F'c"t
s,fa]
]`o;s
6oH(
,XCG
7c/z}^
FX^	)
j)k:
f9:2
6aZ.
UHvb#
7v({!9
!n\U
FHpg
w&B?v
*xZ.
WCJ= 
,j0 
e|Z`8
q>K9w`
[A6r
\'_D+
jdRo
\{ZL
0:pi
h<1}
aUe:
n,|O
W6&A: 
jMa5b
m22H;
"3DUfw`]
_CONSOLE
N,CmX
8n5Y
$GUj{
#U.~
^>O#
JfC#\
Dm^>
wQ[wb
)!CZ
<Pvz|
$!5A>:J
_|At
q4)y
Mj(n
V/o#
+J	O
y.'n
KDrL
VW<B5q
O8n|.^
TS)@_
Eo(D
?Lhn
KkT&
	;.Oa,
2#o|C
`}'"
p,WxI
r:2b
um%M
q"* 0
d-*`^2 a
3=4!
A/gA
F@u8S
IGp,
{J`rO
i#)s
HO%$m
;LsV
f)4L=3
3W[,6S
>2/e
bPAH
/pF7
TY5M
bz78
(ocF
Z $#oi[
s$\-x?N
4eOX
\/1X
n185O
	B9j
3c\F
7}X{
2Kh_
fv\G
^TaH
P`af
OF5]N
lB(t
fCtzjE?
RlKP
umSX^!
BZaS
b;R>
XSTw
A	Hb
Jh,!
R1Fw
.=0t
`%@>
=)^&
)OVhg
/X*U
?Q/%x&
uUnc
r<@Y
M`Vo
[#+sSm
e0ih
/u<p
-L,`
*OHwq
da0UY
^ Y|
3CQM`W
1aY+B;
_[i/X
k)Q(;
0n+3C
wJIT
Ie/Ef<
tJoEZ
xH=s
);Cf
(et#
rKYpQ
CeYYL
IoJr
VB5s
j.h?
vi7<
nx[A1
#9.QF
R "l:
sXwlH
G('B6(
5T'o
_U?4
-:Qt'm
oG}HyY
l&+@y=
t&\!
`]9q>
I	I27T
.u"L
 qGMG
C?z&
HmT\
?#4f
T5s!
ikXN6
R8E\
K[ws~
&MXBkRd
5w,{
B,'L;
W%b#R
jU3;^
O *Xz5h[$)b
9 x/?
+\YE
dC_;
L\|U
	boU
DC6m
Wh#.A
u.pL
_{u 
:|	_]
Xzz\
2#{#I>
%dfM
u_a}Wq
7dUl
CX	-
h~7#
qB=E
Y]	i
h*O]
'y~@
BRH{
TMI}
!RX~Y
/}cT
4XAZ
|@Ud
(0z$
-+XS!
{C(4
6FvZT
g4KA
)y(q
u>p6L
4`GO~
xFe5
|x^=
~{T(
@b!I
32 U
8t`k22
I{y(
<)&F+
O{vZZ&
8MyN
^*z8qE
69wgr:^
3W.Kk
s}y	
zS~L
9^87
_'Xh
`5n$R
OdO1
V8ht
!!@X
)Ih}
,z`D
&v78
q}La`
o'xM5
(yd$
1ASP
L <=G
wqv2
fJ5"
k_x:
:ryv
N8*U
h%v.
"3DUfw`
_CONSOLE
?RVp
;D&]
27tP9
SkQW^
OxOs(
`$)"H.
Qm~6
[10xzm 
0Y[r
Zw9A
cCA[a
ZetM	
1Z}Q
iG;=$\
E#MO
zKNo
l-qi@
nDfBK6
&T*	
o`,@
v*pz
YdI@q
hA7W
It<8s
(kZ.HG4
|% M
P1)FwXCa
D~n2i_
P;!C
Q9o[
k	Fa5
}5/:
D72q
U%MF
,\n:K
3|!_
uKIVU;
F@lWi
-yo1
eN/1(
j6zI
g/r})
k^QW
zj5x
Y&tW
FJ|g
.{f5SI
cqJSV
2'8!
k\mk
	:M9
s.=(Z
vW+UCM(U
|Gd T)x3yf.#Y
Ar'Q
[4S;
tMyT
)hBt
8f#@
f	t4
:vy\tWX
  y8	X
eYxH
a4'v
*|8-
V!XE
4p5Y
m<(A
Ni84
Pg7i
$jf{
SU0q
C``+
}:ck5e
tVwlNv
uA`p U
 I?ex
gWl-
K:B'
Y!RW
b'=O
UJm5
//k.
XlSm
6LzQ
_ #z6
6nG+
cVSC
pldeD&
~\-C
THSKI5
+.y&
G6`0
;lD@]X[Gi.
2>UL
EC9;$
l~dWP
I`vj
kcB[
+izN
r'Tx
Dz!_o^
D{l_
wL|Q
LPU9
YBV6
d8J_$
L R?
5sB	
"8!	
O#c9
jjS7 
=J{)`
7<[E1&V
XWP|
I=A6
!.(z
HG}Y
G%vAU {
xv37
>J0Co
s=~$c
'#yM
dQv$M
]U{(0
Hl}3
UfG`y
Mf"%
x{,n
sUgrm
"90(d
3-kk
^>)2
[J[\
4dRbe
}Mpu
:O	0
BZg1$
`*Bs
ajZ2
wl& 
HMu)2
Cf)l
)CJ8
V(yg
 ;|;
"Vz0
l\?93
<&;i
<Q|n
q6?[
3ECO
*rjf
3rxX
E5m_
x+u]GS
g!8dY:
zcZz
8o"{
/O3V
4H L
}#q5
=U9a
{Gs.ct
qRrm|
?Oew
@P a&G
Ss3'
ykr&
VrQ'
P"V(
WIy\
njP]
'UG6
|}Q 
C=[=
)_2cb
bn:LI
bm)xjuNg
|R*ep`
w$_7
'%5)
-PsN84Jsg
C3Pk#qY6gx
A ]N
C,F&
F_=p7
cC3T
LV D
1[!A
rS.qM
X;z4i$g
[G=s^aM
2+.}
9jpH
l807
BD}4
iW(X)
^]rb
4hMvem
oS*Ug
}V&lv_
8y^^
\=$R
jT[^PjZH
7>u:
q+r<
$Hs,YUu
e'&B
&qe,<
C*`]
"q*,
;Qu\Q,
/FR=
Z;p# fV-,
5JJ>j
&) "
PF#K>-
9,(?
"3DUfw`&
_CONSOLE
#I~Tu	
d{}sv9
;QS|
\J`/
Cu##
6=uv
cmp"aPx
}s)j 
%%4 
O!K~
=@H8
Jn3G
 &"c@
TKz :
gc;v
WLC:M
;pBK
G5i%
fI*0
VP~Xvx*)
:`Lu0(9w4g	
K=w#
abp2/`m{
a9H{<
w##,
%sr3
j$v<
9]c4fOB
I2qw
.\d@)S9
u8n^{
{H=%
VkbJ
Hw&a
Pa[s
X!&j6R
G}fh
thZ]
.G8tP
ar6C
F2lx]
vh<E
[1EP,'
/:.n
(nUZ
1E1h
0=VrU
f&}n
8'KH`
D+%U
\*kVR
iWN6
?6Dt"Q
3{W~
EHRt
:VDt
aQbj
	^tU
yy\$&
?a8o
m3.w
fpz;U
KH%>
oun~d
^=(Oj
ai&+
=/VF7VSn8Yx
i4D#
IBu~g
p>;@J<
(B\:#Y
hY"U
}<p!
pzW3
(iU8
ML*Xr
-?c#eqt
VGV7d
7.6t
ZLV8
'ZIA
 :9p
s`t)%v
O1TNM
Lvi?$]
'8r2
<_|		1
KF/2>F
[SDco
:4bK
PoRvn
335?
.pV=
MO#`HT`
FE$a
$v%e`]X
h\'DQT
a*']Zp
{fhB
n^/*|!
*_\>
r{u*H
s*r}(
rb/u
66>p
bgTt
&7|b
xtoCi
c^Cy)
ik#-
sZUI
L0s9
s]:q
3-tt
##DP}
F\{n'
yB&|
B^)M
8t7&I9
[/N9
^szLjp
,Q^UA
,;i='A
XP@g
Dla5F
')Y9F
o$D<
&YOQ{
nB+^J
F{l}
}t$W
#opA
?Cql
@`)ni,
Xw*g'
6f;9<`Y
LE[K
9dR=
xvX3>
ISAT;
m/1K?
[P^e<
!vay
MiXE
WpWxW1
>-4T_
[#}T,9
CM~\a]
qv@v
_}lu@
1UaxN,
Lx~`5
hj<$0~
&Fs5xA
zzF:
FL6|
=+Ys
7jjvGS
-"D2
2vM!
E"?2
IH:97Y
00p8
r KC
!F.?
R`E*'
	+t}
M)yG=
t|sj
.Irqm
x880
+<I[wJ
/Ex\
N5FZ
FUC=
M2h9
xuo2U
oR9XS
,?3"n
mV77i
Vp"N
"7~C
:^8$
,6%J
cwc8W
NnN)
[7ic:<N
f!swOlR
_z~a
X'7q
1KD0
^Hus
BWB}
4XC\
/M2Q
Xr2D1
"3DUfw`
_CONSOLE
o0*)K
:b1b!
uk_eL
&Jdi
uaF(!
(@c=
LaI/&	6
}(;g7
)bZE
x-\.V
*r_v
}cUmP
PbdhUu
k[OV
Xr6v
.BBh
;z;h
qcVxp
:@wV
S:n{
V;'>
+[-J
IZSN
5o.g
1f@/z7
9\`L=
	1~!
)6GNe=o
MS.A
7	U}R3>
d/OL
a\'K
X=4n
	ob.
{?&1
ePgv
RgC2
)ZJ-T"
}zET
F*Ba
S|y^
T	:p
W>qc;d+
n6[4P_
:|wO3
<F_e
MT`F
 BWV
zs@!
3,Th
hKL96
/i8LI
!q]N
@n]TT:
K@O-C
`34o
DTuC\
HbaH
T)3I]{
#o*}
x[LJ
B8gn
gk?Ecm]
j(lx
OlsP
&4"/E
oqVxq
uEXq
pM?E
|P<D
>8	 i!
xl?Xi{+
c'8I
G/Z9
H!:CB/C
EBk(\EB
4sAu&w
G7Q2
4;uA	Rh
/F0=F;#
=>OH.
q|Ev
a9P4
4L+q
t7FHM,l
N[U1|i
Z|L/
@5>Fc
D1IU?
gqpn
DWMjX
e7IIq
9LLo
9X}%:
 Y64
{fJN
;ez 4
HHx3
9	T'
)yZ8`hx
8\#eA
,kd*
'~h?
7:rd
8xM~Wl
}ngXP
"dsRIR
Ko,]i
nwVPl
&+Zw
|U6Y
aacD
$nG*Q
Cz(-
+MxW
~Tc(p
\?Jx
'R;F
Ylar/m
jK x
as[~
1:vr
4WKr
[yP,
f~aW	
T'} 
[Z'6S
RR_T
tW0E$
SRW!
9ygN{
'QO&
JjY1
}d%.
f\Zo
;@~E
Tyr]>
)(Y{e"
%\Ac
Y)l"
#@8k
7wUs
=C%`u
t<0j
sZo5
3_)R
-P?#
q6]z
O?]gy1
dC}-`
7c #
4m^9
G,Sz
F`P[
[}&'
R. Kc1
Zz1q
F2Uh
TKsI
>Mzg
idGn1
CH7-
q6_2
6mJ~
<V~x
[!o-
xy\u
ON'gUC
v+/&
AeeFT](Y
D>7H
eM^(
a> h
a2wn]
<h&=
s]'a
{S4M
GdC=
@$ec
vhEO
 Jvg
E'p8
?cq\
f**<
5"K59K
+8rN4lp
L	mB
F|~M
K*uOHK
dYP0
iAfUG
Z_UU4
[:Rp
(VIW
kOn 
C)vD9
	MD4	
Y{8k
a4iQ
,p|c
98_y
2.s~
+tK/`
/b|`
ZlT,
<Z~8
V1&Mef
}c`G
-z*J
^l/\'
"3DUfw`
_CONSOLE
L\GK
@`T.m
#[A|
}%TvJ
~nCm
9 )=
'E}E?
EU3i
9M>J
8[JdVc
|Ujp
PJjt
5JPO
aVs.c
}CFxh
ph\`
nHqB
0/]6b@
ZO9>}D
k&U":NMSE9!_
u+A3'o
cXl7
j_{`
xq_-
e5X#S
ZGN/s
]]`8
&>PH;9
v&XA
H08k
tKpwx	
P]2p
cC`Z
#iu(
uJCWR
_"KI
9fK-
BV=d
IZr>
T'!8?Ij
lo]F1}{
urt:
#LW(2}R
lpOT
`	-j
A&\H
Vj	x
xNfA
%[@>
x^ed
}rvY
68_l
teQ@N
2Qzt$|
zR~X
O*Mh,
; OSn
c!RN
dct'<
a=MY
\	_xL
;QRRzy
x(H;
_H!g
T&vB
B7|c
%s+c?	#
8F/(6YK
\;j&
`8B#
C5}Z^
eU0:\
iYB_c
dzP;^-%kQ
t)}%
S\Tv:
T|r*
w)#F
#3ux*
O$@?
3Y-]
{ AJx4
5QJ*
|N6(
$}Nj
`|	O9a
'[be
_~W`
w kY
Iq~62
lf$l_pk
 0^~\vGH
["+n
f)A8
W)~i
zn	F
~"hf1
T1NN
%xX$
	`O/
nV*vMs!
}=Jv>u
pqwj
LNHbO
]'@`
8?BH
}5IJ
^1O)
zKlA
qD8^j
qwwD
RG}V_
jzLhV
CO@J
1}u4
;+US<N
3iv;
y#=F
>6 G
$2^2
6n1g#
]P!/
!IV1
o^MQv
nj["
L,eI
~/l`
[_M0Tk
^]`.|
h(#W1
wggVD
GzykK
Mpof
1;C,
^*D(
C:xE
J|Ie
{><K
,F0n
{lL	f
"Ej"
(M ~=
V0^v]
xb;j+
7?~m
]Gtw
VnS)
IN,L
P?8Y
AX<&
sj@S0 
$u"v.
S8F(f
)h G
L0CI
6'hW
1[B=
lvwT7
|xdD#
D"xJ
ag6X
jl6c
+Q(j"
]83#i
kvZ+
x05#
poDB
slAz
ObYluT
.3X7
,leY-y
E0B>llm
liMs
}mk_
XP;o>Z
EpZtK
875q g
:kB"q
%sxr
Pb6g
X30}
e7Z-
;>q5
?61>?
3?.ufjg~
C<ocY
{C8v/{
pAtg
kvj,
:v[@l
)4mK{z
"3DUfw`VC|
_CONSOLE
rjRZ
($<D08
4(5Y
#`}(4
rDl`
t]pEB
ijISS
'1kAp
 M;H
dW4;=
](Y6
a,S{
,A#xF
"b	G 
NYF,
RGtK
,c".
308p
4;yC
~	5`	
3<nj
^k)N]y
!aGOT
:O)K&6~
#^[t
Eq8r
%@.xd
yU?j
qaby
y*:C
B"FMq,`!^
~i:F	D0
BV&&A
$;}`
sqA+
;>ovN
Aai)
pUPd
Le,zBJ
+&g!
F\gcns>j"
3Jy	=
VkJW
h 9(
HA)0
`KJ3s2
XR$QS
![/An
3opH
qPqE
	&bH
h?jSn
;~n!
B(*5k^
p1Aa
3xIf
/%1&<C
2"'y
h9sTp
JpQYjc
,Jqz>
!gi[v
NB#s
uYGP
DjT"n
AVHe
~tRc^w
FoHKs=k
)-c-\?
2"dl
[J6C
NV`8
zt#1)2oJ
;^CY
D]eL
Onj"S
 oLb.
138W
Um4i
9ldC
mDHf
8q:#
"X0e
ri}x
j5q}
,jA~
6pva
Nu$,
nc}|J
C``_
y+XOD
0`\G
xzDO
-k3s
]Qw`
\0+e
*$WS
m[S~
r6S0
sZ+L
nlq%
T7s7"X6
c*[D
a;n8
Rp{LGD
tmUP
Kkt/
<f3D
Y9H^
;)D#
sR}d
,qdy
fP0qeec	
~v'8
_}|@.
\A|f
:&AI
OR^k
Yj[U
v7q\V
KC<(
Pc	MTH
39]4
9Ky4g#
:oF0y
7.V){
	~Bf
^z-B
NEnP~
E[=N
A+<vE.,
8mJ~7
Z{Ui
y9<1x
]Qb$
|%AN"
/w?-
+=!k
@+|.
,A+A
"T|c
58$F`
>X8n
US5_?
,&Tm40
/}HW
b<cD!m
;AHCp
d=7T
VN^29
zc]*$8
Y.{eOG
0a3d
Az]i~]@
kIX^
0*i=
EH7e
Wq^b
=JSM:=
"je#
^Yl_
3&|g
"=^0]
i$p*
//?t
u$WrYQ
x2AdBg
-Yr5"U*
nCHa
PfD<o
}QTJ
u';b%(
aiL/
iyq}
2y^C
;Ih8(
R3+L
bk%\
mo',O
DVs;
3/CJq
NYs1Bq3
`jYDt;h
]g<UE?
q,7Ru
=6ok
*-Kr
GG6V_F
d-R|u
(JM=l
LYGjsWN
"}*m
!x*S
E&yU
Tl0Xi
(LT#
kGTU
rM=hE
q$hm
W+%hF
n&!*v'
k|6B
||wAUk
"+VX
(,a|
 ef6Z
'jSq
LJQI
~|%J>)
{4h2
h$.>I%
XNx9
0*n-)
+W${
<rRS
n,]+
`e`	
A\OEF(
{W'3
WXjw
6/v^L
JHdW
l	{%
Ezp:}
E#2_
ApNC
Hn}`yo
[Aak
fKzt
+LLi
}Bc"
eLwE
1JP2
?uX[
/cJ`
2e2&kNL
#$xV
m'LON
E'MAbX
//]Q
op%l
S;:|
5FK,
'L	J4
ev)i
A4my
f.?V
Z.hoA
$@fQM`'h
Ykl<
%&/m
=gu 
{(!zreN
$3O#
@js[
UD.E
;MrkS
?u6I)
UNQ~{
[D\U|
[hS3
}0Z$pO
jYPX
-]KK
0Q6m>Ah
w#1I
lhkT
t5kY
.?'6
*B_b5
h2ti\
JR\%E
0)W%
\i!\
b#2YK
<*/DY
 QG&
D=P[C
~6Kg
gh)&o
TcT"
K;q_
I;^-}
"gnT
d]p+
0OMm?
=FYo
Zs@}>_
UpHpYe
	67S
T3	l
xJ1X
KLQ;l
nE ZW
DH~wU
:!X-
`"n_$
c9L 	#;
066T
:BG:
a;<h+M]
bJd}
n4AcZ
av[!
z_mr
T4J{
{0T.
	?M(
feIO
 9bQ
?RwXZ
;\@n
eWEa
3(Z+
=},[j!z
;u)ks
g7",/
QouqN?
Y",b
Bd&RE
"5Qu
HX`M
88~#
ErCp&$
Bz2]
os:0V
VU!0y
1`%yJ
GV_Ht8
>0_N
aKh]
@=q?
K:G&
C8.<
>tmf
r|ac3
'D!"T
;osy
Z6.x
H4}hMC
)G(}
+*Yj
M$&"k
[5v'
}>[6
X4vV*
@2irC
dX3V
VZoD
dp,>
J!Qa
?/}bu
`~$v]
*8)j
P&Pby
wU(O%
dcn;
ft|Yi
	LQG
s?.=
;~L|'a
@CJ(
g	%+
(vj{DBb
8q/+x
Ub"G
ph[,-
g_N*
7Cxf
@yT=\
eh>T
l]\4ty
BEe1
%DSP*
YKYj
8I)s
0$Dv
`Os?G
n7Ik
9Tr/
R'j\
" *!
Z8dt
}G)J
GYe{~1
N#K"'
7qCxM
E\1y
Eksa
_^bLN3H8
xGS{CD
vuyZ/
anY?y
j8RJ
h nv
S7.X{
D;d?%
8s~?
le+/0
x%Ze
|o[&
[L>W[a
'}Eb
VuCb
aL`(
TQr-
\^*@
#6>X
t04y
%Dq8
zm!3
&)Uj
+c3\
 xye
l@euho`
G6{e6
5P$V
~!{*
4^hfi
%=iF1
2mxH&
*PT9
\wmL
$5y6
xR=8
iZ6"n
_Hz^f3$7c
ItUP
5K[%
<4t/T
LGg8N
0#Y+}
-`v6
4U=@
.x%Ug
B,P"
K	Eb`
6see
$#Bf.F
}tl'
^1Dg
:ifU%
sh8>
H[U{m-
d}i9
"zWD[gS
2]!J
uzI/p
C1GV
'$,t
\'IR
gW9G
&}D#
,q|7
u:+J
fCS/
Ml4u
EA;q
V/,n
@\>:
})'o
FcS5
KD)	
<7dC
yi@Y
vC .
kJ]=
5,&+
i!"v
 UrW
	-p=
U6zN%
Uipt=
8T_f
fY&-
`z+.
P6wR
wHxK6
pK8p
dH6w
er|p,wp
$*~y)t
UqPTy#
<sO8T
6=mI
Ci_i\
qtTnn
-<d4
}mBc+j
JAS1
X5Xb
R'r2
GwYX
)bcw89
p.CV!?
EP<E@
-@ *
weSEy(-B
@eOA
\0b1y
?5X6
B\985
`\><
cMZ{a
LfQ|P
@=V9
O'h\
gIyW?j
IDz?
vtB:A
h<4T
 z#t:h 
R=[\
k3KFx
LwJF
^7h9
y)H;
sw=T
I0C2
 gB%
gY%w
9"IW
N{.A+
chO]
xlhBw?
a{N,
E>|-J
;r;?
[7{L*
@1}p
 1&e>
O9]r
flW!
wky"
\|T|'
4/VF
vxy?
Q	u8d
7U:~\
|=0Q
OB$h
![~a
roN 
x,E%
U4gI
i|^.
G;kW
?Ev#
j	|he{
|BOO
Fo5_
e("7&
`?AL_
VZlWm
<L_ 
]6<Y
	}aS}~`
'/,4
FTK1B
jY55
Ll&u
w4/L.
j=5Jv
XH7i6
>:p%
~?Y$
l7# Qz
YKVv
3^QB
G4/T
vcyJ/
gPm;
OZN_
$ROj
tQMc8y2
neVY
L-n;
xqk{
B8^s#a
yV+0
j*.S
j-bLW
b.a;=
5^<Z
ejC3#
d*fS
5ikwh
do,P
*?Oc
P~^2Y
&|@0
'!af
g&;^
lyn{
YM_v
m|_`CI
/n=yS+T
/6+C
<OBSq
Ao1ry
JGg4
I^ T
!Hm/
Nn(_
JRE^
T'81%k
PD@?
O*lYg
~7am
`M*2
3twJE
dl}q
@pFy6RP	
jMMY
g#\.
o	V3f
I[Dtgg
8vE4
'J:6
<	KC
2rMPCn
]<-8,
g{;qF
7z??
ZWCsW"
fR%`U
rEwW
RH#N
crAPi
-Djcj0t8
A @y`
brV6
m1dR?
D\uU
<Uqi
OdBk
SdY5
x	Y!l
Z!UW"3	
,wn=
[0Ai
izB&S
J<Zp
)@s2UDl)
GUe-a$
a$|3o
;C_ir#
OJ7q
--R1
,80x
tL}M
dMOY
T;pP,
ZWByY
goLn
N3S?X^
g].+
J,m0
n.[=
s<fm_
&K9N
aa/qK
Bq`T"Y
A~gS2
f_oFf
#J!yrX=
s]Me
qGO2
iz!.
l7)_7_="a
z`C%m
o>i$
ii@KC~u
otiD
+t/%
A	k.
:0N!
;_	`~
s/2U
=+cS8
DlL3
]>;j 
0l!\
cA?1
McyZ
Z<:Xs`
JMxA
+qpu
=%K+
[hO|V
-g"F
>/P.
8Wo00{6h
\`.N
M7[mz
}T9`
^f3@
Rz!0B
N7[$
*=a<1|'
$iGt
3F$T
%_Mr6
\0eM
[*O~n
4{#`
ZBRS(
0:k#n
Az7i
3n_O
\,AY
EuGoUscY
t=08
G +`
1qRu
G7YXj
2!M(
U	9^
cZ"4
Wp/K
v>?s
y,3X
Qo!ug_
oj*HN
7(B*
8~i`
c6Gr
W<ix
/e\''7
960;$E
s}eY
Zu.]
cUtn_
Oj]T
g'?m
TWM-+
A$fU
/R3Es
bOeV
j3&|*
2/w2
(\mX
7?YZ
g	T5\
Kuqdi0
	MO"
<17l{
/#~9
9?\'
Yt X
&aeV
Q60a
y=*;
oJ&j_5	4
jr/m"z
;z0a
E4_=
f60G
<Lb[r
1`QR
?0o&
4BTe
%Ban
|v#J
0"[W
yR G
T%@AF
bUek+
<h+j
KX#V7
0>/9Q
C.0$[
X~Vl8
CB?b
3:>H
"?fuY
QEl"}
t"|)
SmDa
+|`_
<9PO
}x[f
qI`c
1yPi(Hi
~+O<
MJ&f
A&I`
- 8y
NV++D
h%iz
s0Uw
m2O3
wv?]Nl
IrL:
^@B8|
-uns
l%	?*
D6=RV7kh
EPP]L
II2lNmS
'^.Ky)
,H 6mf
/[* 
qfyq
`&lD
JeO[
s#/#
a	=I
kI8135eQ
NzTA
 XwzU]
xxo 
wB4;
Okr\
T|~d
3KV6L
W12p
f(A8
0tb9&
;dK6NjK
m?t	
`-hy
A~2XmK
Pdp}=
u8HH
*^wi
le~$"Y?D(
h,pp
Wv[8
lxw/:
Sx<(W
26'$ksD[
/@lC
=[V$
&$=q
5}4(
"s7sE
0tc_
.{9mA
UvLe
tTVU
_-Bm
Hv/B7
Pv~+)
_JY,
#Oi2
2{Jx
azcx/
g 0*7V
ja"@
EOww
rH Z
=BE.
^9!mJ
G?wMxCTv
&2N[<
{hx+
^48I
!9Uji
[-u0
%GTZ
4(I$N
0%ra
{FcU4D
G J*
v'%:x
STWo
]afP
UCe|
%KLe
;}TsH
,:F^
=msB
Utr_
:W3o
dxMlu
$2Q*
\rv|
}Vvc
ydU$;
U6\K6
!Z"Q
_g[9
_L,y
CtX\c
ZUFj
J8 I=a
i9fX
"Vrndp
WgI`t
-u-D!
RlT!
hx* L9
/w1\
/<f|
-|wrz
o/XAb
|F4"HyS!
9M(l
3vLH
Fbj>
X]}B
?3bV
FF\Wp
_^QV
1C6LG
w[|O
/Wh.
`v _U
j4Vp>
}?$~
-[ D
]$op
v2Kv4
2:&iO
A#)CQ
=G8{L[
W+J!q
D3_Q
i7du
UZ*#
uBv>$'
BL&f
Wy#|
aWw(
y9Xa
uu!*
|?OE
_4#)
TiH3
An }
8q[H
*P}C
Y\sy<A
lfvE
> E=
%Kb|'6
!>@c
qy.m3
 o0t%
W m;Vy
-jQYj
fo	ms
/M {8#u
.i'O
>7 {	
<r(V$
h~Bh
r.1B
bhO[
E#]v8
7`a<"
:7MA
z[=Q?
	}E?
pT/r
@;7&r
fjjf
1jOGC
d#l}
<&eO
_KlB
]H^k
RQ^S
l4gi
_N2c
T_s&
vPa!
h:qp[
)S_r
	1D.s
P:c?
/lC*G}^QVL
Io%i
 Zb 'Y
lHO^p
ZFWT
/iI^s
rc#Kz
|og-
H~yC mE
	.pM
/V y
1|.B,
^@%A
|dJ0D7'
L_YF
$Cpa
Wmi7
!.W*.
E|=M
DnOc*<
l'>~
:qP`]
uObz
)DfQ
I"	(
$wP_F
Lh	=G:
d}oDY
 .h'
 v`3
V$&p
~ PZG
qra#
(mF{
f[m<
T\F&
f:Oq+
Ep0zp
yo3W
h`1s
Qc|{
:Vh@
kDP&
m_s?
&;F|hK
"ajn
zcJ WL6#Z
7+lS
#u7f
2NsA
%!	p
k.J;
' O	N
h4MN
'BXR
|%<+:\PfS
fWug
ye6I
-FCFr
YX$"
[=O`
/#%L
YkH)E
5AVy"
Kq>U
!~GW
fXh_1
S\'h<]
yd~Q
iDLVj
gga~nvW
^~|q
VP#;
Vp>1
f#|VrDW
VpQ~
xw6_.M
A.$U
k\(Q
"jvY
<t:Q
@-0DX
)s|f
KKl 
x	4r
>A8K
]LkND<
]$%X
H%'\
"<zL
,u*S
3Ovm
5iGG
M__Z
h/_.
)<L_
TGZ0
3SvW~
7ePM|
ebS2
_!FG
`-7 
AT5w	
]S6Xb
U wFl
bT}7
R+:i
c)4[E
&HC2
cGepP
R18:q
a[LD
lf@Z&
qq/=
M N8f[
v"j)q
RZK\
o=m$
F)qO
g5.hf
AVtO
wS m
AWv~
*j?]
EW4K
Z]Nu
ne-B
yH94
;/++
nj@9
U(qo]
c?c\
@Dd3[F
D}[,
9^"H!
C`c)=
f``k<
{9auW
NvXZ
:OH1
{CetU
~}pMPk
Ug7N
ayB]
\Rg:
'Cd/
%se,
D"$whMh:8
9@h]
7suw9
]#'z
RKg(
Zd%~
nxu#
J	u.J
-CC4
~`&#
9*/3
|^3Kn
qQaL
_9D>
-T%n
WOP&J
J-Q	
saluv
._]fx
,*L, 
,tes
fD+v
IqQp
3M-;
9$7f
:;qmS 
UnS1~Z
|aig
i*zD@
Z2'BS
(y<!{
C27~
|heCfc
|6jt
l(xE
\}<	
$wR[
O~?0
1m"i2>
znGg
[lIC
lIO*Q
rNQv
/~_8
8&v&N
0VV|
Myp9
E3V"
cldn
+|~?z,|s
bm1o
B; b
?i#1<
X^}a
{jfc7R
`=sn
r6YLX/a
VF4M
n>5~5
GK7/?
t|+z
&l1.
`ag16q"P
>*z_
2=!h
?4vx^u2
G?w-
Mt	oz3
\v]>@v
]W`F
<I{2
LEMU
xvnR
v4:*
(p8vFFr
C.]n}D
$Cp}
5:y{>
+$PZu
(B@i
o>F8+
@PQ7
tNS^N
.JuE
;) )1i
#{?sn
DVXWLi<
AH0s
HU~1)
|=uR
goF>|
kp!pK
~EwtH
E};/
oZT6
"^Uq<M
u-6m9z@~
S>\#
68fs
owX#IWA
kR+Y0
Qx^P
}0EO&2
R0793T
D<zo
Tj@D	
}lb6
~ejDA
Y+ZU
f&vn
ZsC 
'(l0
'B)]
wbB@
:CPV
v_n<
1.(i
^P8_Fu
E-)K
Y:r=%U
/?M.
}n~1(
.vPC!
>*p3
X1<JT
nb/a
ZUR#
wBe"M
 +0S
04-*N
In.EPi
@c#Gq:R
;x8#
SGK"I
_Bs{
wmtl
H#M pU
0@HT,
:]wgm
z>yd
pW	V
 {QETC
|DSBr
GY:A
_]G,
R!on
/EHtj|
Rq.h
"LHJ
MI><n(
	3dO
1EBC
09V8
W6xnk
'W2L>
}6$-z
L$>ib
oO~ET 
b]b&
(|*IC=}|
6I3,A
f"*L
s-%.b
bc-6
0	)E2g
P[G67x
@OWVgv
XBGC
}=d>
5:a	\
Fp{wef
;/JF
 j@O;
`JY?
zjNB
M!8a
_$rO]
1$z;
V@#d
u!u	
ZV/2
3o80
.Mh'
z.S)
T2+GO
MDZ3T
+(qV#
/%#po
aJ i7??
q1AN"
^$	)
#R[e
ji("0oC9
x!>B
[\@ 
tUab
CD"C4e'
W%]yr!
o8yf
zsFA
y`HQ
.OA	
Zq?a
 4KR
9a'[
,VxL
X+JP
l#^k
wF1y
tLcZ
[}E`
[xp	=
0uTl
GkKs
7y{'6
r4N[
6Lz}
Q-Ke\@
04pZr
0SDy
@=Vp)=
%)sM
N1x{
Iq-6
EtI%
YsAyIObd
+KJ9
]Nf*M
3L08R;b
Zxt_}!L
k|+/
2Xl	
!	x<
VYyjN
SODN
OwBU
egg!
 Xum6
MKOi
p*m3L
RA.D
b vm
r6G\
t;-T
 P\[
k_k9{
yc_e
/[C^
D?.}m
QtYb
|zV#
_f2>
Lci"
8S0]
2K#oN
(,]y
$+rA.
Cr~V
ivxTu
f%\g
St"	\
@W+$
%	AA[lB
ZgASrb
*))`lv
,+8 
.|LO
!$Gt
ID`^er
cEEcZ,+
8-"_!9
`?Tx
s$*E
Sssv
dgX'
%IW1
*-xj
Z/ F
.JUm|
[A&cx
]TUe
JV(*+N
9M@'
U7+a,
Uc8*
PV5^
eT%t:k
td6c[i
8.=T,
c+C^Y
':Ps
L41?
NDuO9XBs_
pi0g:US
NB4E
y)/J~
@L]-
$`d9sq
hj%(_
ue}]
-`&]
+$^%
mmn|
7>DG
|r]A
Ok\+W
t\r;
gQ+gF0
n8z;
EvD`N
{0JG
bNer
Pjdu
bdbX
@v\1
_Moe
+()9
P2];z
k2:-
[$Ef50G
	'=_L
Hmj`
NA0O7
B=zV1
JkW,
pC#,
ac3J
12p>
y~l|
^Dzh$
QElC
.&w)@}
~29u
bns!F
(rD>%
d *N
P?\u
 {{d@j
'4w^
]II.
*S^~e
KvO!
"vg8
8	/N
G%(C[
bZBZ
XWE\
SR=s
6:_KD
z$xS[
R150
.eD#
.L-;
K2\\
o,-"
)RdH
vhRG+LI
j!vL
k57he
}Qv1/,
)}e8n
D|a_
l=s3
Jqf%{
,xFL0]
[/1U
A6Ml
3r?h)R
W5chkf
&>1"
oPe}
Ngbbe
vr'#wGN6
,)i%
-XZ]}X*
2E|Z
i:V?.
hA^P
Xm]lWi<
o+DM
F]/2
dri>
0kz$F/
d7(]
[\*.F
,Ewz_@
9w4h
!~KE
QoMN
`+m,
	#+r
T1`<!z
Y>O1C
,0Y0
;`V7
r	J4)
Y<N)x!r
V)%x
iT"U
op^\
*ReO
C;Eg
b^!x
jF0A
g(`l
y7[\
Il=u
r549
1]8Rc
;?]Bh
H#0f
 hJ~<}
45Fq
$7I#
u$4HV
KXw<	R7
\KWi*
]$d.
@`1a
:S).}
ieDX
>iu$;
]\%o
2lo[
&;d}
!l	!
[?J)
x1. 
7"poxc]%)
x0Nv
]$/rn
rB )
MspX
4J(Q
LF7|t
q[V0
ROKG
&?pez
63RC~
Q^n)z]
3}\)*>V
;oyY4"
2^+gM
>57Dw
SCKcf-
$Ypg+
#,TP6
 5zL
XLE_
P{/3g
P`$U	
hNG%^
@I}l
VJ,-
"+YK
\/`zP
$E}x
X_)A
`h  
*rT-ECw
dd-8
@-[bc
GlI0
b=vo
joHn
:b|_0
]N*a
ZZTW
f.X3
	B>d
>B}P
 Rv&
k/fl
k;/ae
B_eRN
H.!p
ln{7
?3ON
Yy'? 
J-_6
2r=3m
AKs-G1
5@\Bm
[H'Z
XM``
1+Zi
!74Y
XQWks0
{p_7
Cb"V
	{:^
#@Xi
o,!6.F
# {_
	\d6
@=(+
#O[%
D(yb
#0[Mx[
x%kK
f-ha
NN..
ID9gPK_
O|%)
c&[,cQ
:iP!
<,ea
GW!mw/_
`E&N-
NN^%
x*{j
<3=Zv
/bdJ
D=,!
ve{^&q
hMe]
qI!*
.SpM(b
$J:0
ksqw
z8^]
u$h+
_ltd_
7{c$]
!af).e
jV]<=
*)>v
./,I
e5C(6
jW)1
:L.t
w/EqH
dqf<)
Io7\
"	va
cem>n
ID"4
O/9\eF
#_9gT
tQr33U
))n"
Kd$R
s5:I-
H=qQ?_
]MLn7
F5Rc
?Wii
t?b1
w<X8K
x16F
XFP%
W4%D
hhLg
3j5\k
lR5-
iGc`
E6&+
3%fUZc
D~_!
fyumH
0UzJ
c38z
N2Qa
OBwR
.ER#z
-M40_-
^wUF
>L\K
zvU&
BE;R:
Xlx/q}
Q?it
\|W3
B8<'
fqKS6
Zm$]`
N867
<:}S
P\QW
.H;4.
$:LH/m
)$~&!
0X.<Y
 8C@+/F
L+hrsm
=/*n!
Kd~>
agRZ.
.F@&
F34B
 Vg`F}
!Dyz
7g8Z_e
Er#5
ghnV
Wp}7
(lB=
W|j 
E8%7
`*Mcy
[DBR
%MZ4b
UoB[
JQYkuw
K(6.
qz<k-
{iL5
N^ t
w"'Vc
$sHx
LgbYqYP
	H0d
~bkW
7<~uV
t!/9
z^LvP
ezKE
vBCh
Jrgv
\oJON
ZQtj
L"	1jD
]HFC
VE""
a$NV
!X,ss
ApJ.
q_ov.<N
k&xi
JrDZ
osgyk
/*TR
%6tb
P4=$j
IF"F
h&FL
}.jC
$KZ{[F
&80L
*}m,&m
Qw\H<
JWzF
	aaC
$W 'b
|u|*
Gf-]
(5!!_fc
m$Rf
sVx*-
>i!w
K\kx
oB{[
S]rl
k/tg
DJ"m)
,"L,
MFY1
Oo`!
QbM'
" Y2
zL'c
c{r"
i=rH-l>
 ~@'
5X]V
|vxg
JIPG
;X@j
e]kl
\V=.\
/CKY'kx
AXA:
?B	6
 y7K
YdxD(!
P=ANk+U~
r/tw
vwo6
$p,B
nEhr
^bz.^4
<+n2
1qLdht
"h\`_
q0?	
cm\#
Y_VXe
*u^^
ED#t
8PzZ
d-Y#
vWeB
JbWk
ejBRw
(tv,#
2&Z7
(:)T?
Ny"=
OS'Z*P
|bE/
Vw";
ts@w
Fsk\
fV;VQ
9_B}}
j~jU
4^H 
rm$(i^
HndF
=B]B
h~]?"
@nG?Y
(I3~
lDEV
jz#f
@{E:_Q?
VS''5
54)2i
P|v!5
so_}
L`31
QXaC>
KI-0
'DF.l
.b`(*
}M[I
t!A[2{
Iq\L
eS$}
`f*:
MRy4
##T{*P
(Pes
4FrB<
PUY6
Q6-(~
OG/j
4HCh
:zYl
6NjU
z\JKz30
t&dh
m)-x
GR\W73
r_Xt
c~5t
*z[fU
nejy&
ebDj
IJ%Gm
#R}t!
FnIL
s2.e
+lxE[N
zmFpVi
	7a%
PQ^&
 Qi,PW
|mM7
t|n(F
+ptS
<Od'
7J(dv
*05f
LG{p
hLJ>}P44Q
@{t6
-HX%c
Q[oi
A!~Y
pM|J.{o
yP!0
l|A~
DJITr5
>9`9ZBR
!]Cx
_?_Z
4s/X]P
K$'+$C.
0<[Rd2
f,Fk
ZVEtCH
^aDy
B=zx
_W_:
`OPq
<~b/-
6D-0#@&w
AAK1
 2AE
S	^@H
j5G4
OMmm`
eB$A
@)&b
ybGv
jL\V
\{T/vx
MXvL
)cg`
;&n[r
4_P3
67gv
;cX- 	P
h)_r
2vqL
;Q[k;
dw1z}
ncu"=
J}wL
7dY]S
L0a$
B;eZ-'
t+k<
{u;^
!E4^
uOcF
f!nM4
+)+-Dh
75fk
.c`k
Q4SbF9l
f,4}v
<l6&K
+[Mo
Qa4USV
<a^wA
arp=g
@e)(
l10e
bpnL`P
5pDs
 Ko5'
t.?U
Eu#fa&V
Oo1&
,dL4
us%9u
VtL,M
I@) f
9sj&(
)I\_
ThVG
OJI|
27sdGMe
>bCm
X	"n
F!nh
*z/d
9jk[
,qSiP
5ST&
T G<
lhaWT
E=-E
p]nOx
4s/0HR
*tK	
?gu\
90,U3
Mq+ZbM
I2~a
Du?f
'AdZ
L,J:
Th,3W
]]1c
R6=Z
4<li
rV(~
5GoE
~M>|
ueA8
yJy4<
bn^*
d>g	
#H_I
inpQE
7}Qf
OGxx
0Hxa\%
aqET
)^q_
StS? u
(\JW:
B.djlu
DDt[
"SqF
EKPd
+)Lh
<J,'O[
Z@awV
	xH/
#pHb\
5GK	S
"zP7
{NJ"
Gi_V
FF(v
V,n[
b|E5
E:MG
$aJg
x5iB
Kjm97
$.&(
%2Nj
aVn4
!|#c
])`NV+
:#q[3
 4kI 
W4ak
;~78
>>:/R
]Ucm
-vqPE
=KIq
){`Ev
o:\L
h*	*
{s&>z
M:Xs
v#A%W
	xAT
h3=( ;5
mVUk98(
'AA-*+T
3P-Dc
hbwT
$`*\
Nz%z
"g9N
DPJV
e\!L
`[a"4
71mM
#XDsV:o
kS2j`H
?w}ek
?Wdq
%x	i
={A#
NwryAN
GvNY
GK~IVw]
n136
@0O1
_*4'm
9\h_
}R2lb
O$/r`
Ix%L|4
VGu#
.{7\XT
}U_BBY(
Fg_c2
qdQ1
nCBq@
>SNP
C@09|
ln^DA
RaiK+
Rq2-
y}*k">
}6p|
L)*H%A
}8:v
S2[0
:i	F
	ftcS(6!
.a7o
x*#&
r^3,w
<WZ(
,yRB=h\
n)ey
	{X$
z[19
O)>s%O
*R?ZzA
O3R"
Cz]l
D2!k
^h9X
ZX<S
-\yOj
ACO8
xh@XnYj
Ls>:
jm3&
\v^7
Vd)V
AAJG
nrj<K(
#UO:
P@3	
6io#s4
x2SJ
211_
3|w'
'fbQ
"HwY5
%qA7
NA'k
\Dd#y
$vizL
-T_G6
Vvi{
<a=W
d]`W
[V#7
_/a\
'FH`%~
46@%
h|t1
4\6C
8kDbZh
/ad+
+QyG3
aB{iv
`})d
 B<(
mZ3h
$Gn^W
})'\
O}TR
8`~zc
n1u'
yF//{h
?Dt'
2~5u
CJ -
1RGz
Mm,9
EsW9v
fzpfBR!/l
`ewG
$`7}[)#
S^\`
};47
41f1
JXBYTO
nU$iK
b%zM
w1lY6	
CVAshC
W}h0
[X+,
1oW[
ViJ<
zZ0w
yMwr
eNG&
Ml~\
	BVp
[WXz
zqB;
ucs''#
qg0N
m3fcSXLp
P@QJe
"$m)
qDNNp
V2Y"
pJ4XBA0
cvz(
lt%H
_&k\y3t
Fv%@f
<;82
{q6vV
O~Q`
d~W6Sx
;T(#Z
#^L)b
Ptf#t@
V(S"
M-p 
yLMs
b8bz
835aDji
sQu[
zDy;J
(#uq
 zg,M
tpfv
|;+D
x`FV
6;S".
Tw&JQ
pzuIb(YY
<5AQ
4'tF
1R'G
M<>Wg
Vk}b
*8fZ
{au,
Bi3$W
lW	kI'
u5b|
/-jr#i
}R0(e
5a}D
	HUyj
d3'p
<nU{gp
07Lr
Y6W,
<{@x>?
K:mc
.F2;
(!-w
r6jn_b
<rip
g!%T
psvk
&K|*^
k(UN5
]kr2
118;,fa
K"7K
QMKT]
[&:C
Id%U
BT8pf
4'%Fy
B)2|
XN@'
^RHlt
f&'!x}
%Y,:
d7ru
mPyW
$OpZ
O!7V
#I=	
rA,5
$sX|
9}C{
</Gw
/Fg8+
SXgV
7fRw
=pgOL
$.Js
l$T>i6>
I&;PL
3wvb
muJo'
1ri"
Bv%T~A
x_#2
k"y,
g|#q|
9]nR
$Y{D
35zqI
6~@flq
Q.Y:r;
#S	R>
#^<D
%uf,
IFBm
E&H^KsB
Nk=\aHix}
[!L/
}Qi,
>]9l
JkgV
LU01!
D~wv0
t{(\
sx/U
[`j'
<e<B
9gxD
DYh.
QMI0A4b
6%,63
TCvm
]9a5
%iWo
+GE4
qx4'G
TuLy
)zCqX
!{iWQ
"Y.E<
Ovj.T
HD0?
{C1=
	H& !
kuAD
Y+-)
C[bw
=4GI
,ad'97
syLqWi
{DIU
lmu(/
/ISb
(8:rX	
"<jB
}8zZ
qZ(,)	
lE|N
oS>kF
J5B%
2twR
["[Y
?&^&
]6"Rs
!{t\,
Tgt[GY
G-jdaOc
S_mn?
'n>+_._
jg{1ItpJ|
sz&m{
;v#t:
7\zT
aIP;T
HLui
@>Jo
Z{85b
?S.gT
m8}C
1DF_
l|w5=
)7 =
AM`J
@<`_
d`d~
a-\2
 ,=_
H}i>pF
@n)w
y;i7
l1Frh
_M_`
DL&_
SoL}
YnqH
YA9$
8ZE&
]t[#
 {B#
jf{Z
x'">^
1@iXX
nY?c
U,)(o
Z9.[
j:&x
]`xy+
1V\_
v.F,
1R\ 0
U~Z&
Y4*tu
Fl_GH
S/qO
.&[JR
x%mS
Mf1Z	
?\l-v7
gmSa
~c{a
~UXD;
@Cjd
, ewQBt
\7IJ
6.=8v
[3l	
:#ifL,
"|QvW5}
y[tp
p*^2
]:"0|
p]u4O
*PU,I
WyJm
W)eE
7knb%
4uXG
iu$-
\HtO
u8wO
z$X>
l9`MAvvD
,B\*
oPy|S
R	L_
P6	Z
8;io
Ba@fG
!^nefv!c
vlZd
9\8QQ?
$x.q7
AmY/F
-~Ra@
(5{V
i],I
#]}K
+O6n
	]Jz
?+}+?
`{>c
UljuE
=,	2
`+[S
%8'1
lws$
{8sR
^Gc&
!SE^
ANyUW
Znrr1
hTb;
AO(t
}{	h
V	;	V
{-,m
{1oq
vG	ux
c[iF{
&2>-
llB-8M
M.IR
:)&54u
C0'j48
e;OE
oHm7B
?tbs
r`!M
+41N
d-XmW
E1=Z
8EE&
 ZB;
HDVN
CK('
6R/w'
.1wT
K%Hh4
~EST
mR	6
h[uM
AOdKoqi
N%^]
+ThC
h}?R
<Lvp
Biodx,
SM_6
|(9y
	D)=
"\':
GbhZ
`fP	-
oBD!
#[VR
sf.a
.\ZK
6-7><
5v6$
e6J5
%jmr[
3?Xe
rkE7
u;!a<
I/b4
x_Em
4^9sL
L7(5>
)N=:
]}~;fu
0/s*
EG.-U
!B42}
Ik#K
>Z%,7e
fEIi=_
yOZ9
WAv3
}CFj
~MH`
2@%	YN6oJ2
O|"-
W/VOH
d	^*
wF0 
SOB/
NLi)
jJ8'
0m3t4f
_&{MH!
+pW<x
%97m
g5Q/a
1uv.
|:	-
i,Sk
1-K5:
p,tX
O>j[
wFTj<N
}]?"_u
4Bx_
c?jbN
KV#\`
Ibtpy
&Q'l
GNW4SS
>pIk
g`h"
U)_zIil[[
}e]M
A~&t
d&w 
1&.d
t6DD37
0lY+
}bk|m
_63FY
(	Yjn
ufQP
4IkKs
<I$b
@~{GLC
nW~!o
EI.,
[hmV
/EZ\-
}B_$A
!X{* 
@U~uu
e'j>
g8wl
]X"@
9:7f
,	EXN
TRu/
 Ze+
p*-:x}
HC_~l
 zqk
$ytb
2YH?R7j
5t~#
(4ws
}O=k{GS$
#6Pz
>&nX
(!04t
cmQQTo
tP7RZ
Tmv"
qQ&i
am<L
xgQ:
UcN+<3
Fp<w<
n#M@
8#8V
r[fG4^
O,t}e
7N-^
m[4z
zvVO
r;vAZ^:
i\sN
AN@VG
b=sk
)tZN
eOiT
A4A:c
gz)u
_O =2
,Yt'
EOcx
>+UC}K
PId]
5n-e
rRiQkj
f,"Z
iVKY
^"Fk
94s1
jyvg
H0)v
=N.B
Yp"1
5=dV
kTAS[
^{wK7
AJhA~
8/oo
J!:;)
|l\K
%?TjI
O3>j
3fh;
zh E
?i[t:
itjSv
eFT#
@?Yr
(\?V
Mse\
);p\
/w!j
st<jx
9GHZ
HMy8
Po:"QG
H^dqWF
P,*v
e*B.Q
E.15
zdX--
;VV*6
Uxp2):z
}epWxUK)W
/ib@
s<<Qr27
evyb
ggb{
r_|nYj\
:]$Y!"
~#DN
uX+P
3F|)
h\u_
n*@z
#9v{
e_k;c
r;JaI
7W,R
hu>(
sNx;
KQftI
fYR9
GO}bL~`1
HfwO
kYYoD
ynV8
HUS'
o8$ct)
C^pB
cD3eX,
>&`<k,|B
M:"e.n
:sD>Q
X}-A
V*c5S
!7k7cM
tYLi
'3B+
[jRr
Fi'dx
`zZoJ
2*1+
A_5`
`+|~
X37~
N7D#
-?o	
?y_o
_H[W
M%+/
Y({N
<%E1
F	\C
7eNAIj
Df	ex
Ekh[
<b}n
M~7I
X1qTu
Vx>O
E C2s
*]20
,=y$
~;XO
T&!a
:rZ=J
>JHj
% FNn
NAGd
:Y7z
1Z0"
aCr:
&t/WQ
Yy<) Q
$(sY(
:Rb%B;
tSb*
&lA;
ZPi:b
R0qK
|TIN
%jqa))
/GAf
/,[M
$EvD
.Y}T
quJbtP
SLI}9sq
H/eVM
tyL=
).?[9
6E!1
X-Ru
C`D(;$
twO[
Sz!X
~P*Y
H@Gr
`_Ye
ta{;y
[g0\
[t0L
"fVu
,RLXM/
h/wIK
kD[E
<}*CR
 +a_
Dq1l	
H#U 96
u%0(E
-(K?
"o{L
Z9O`
Z4!'
?}qc
<i}/
JS&f
Ls{l
p+=H
7T)N
Gt,s
rX>~
cdb1~O
^YP7
i"u,
2L}Q
!two
Uqtw
]0/?
=@o:E
KT47s 
)K6R
zk58?-
T`W H8He
@&TA
<mEU\
g3+E
r~|jz%
Dm	o
L&z&
l7"}8O
V#$?
UfQW
AYy*
{HC8@]
V[Md
84Kgs
8nb.@NN
(z	A
\zn7't
o	;o
Q5T5
m$1*
	:eg
aX$ A#n
Kc hRB
t=<8
:aUnrV
|?>"-
S+RS
X`U]
-W7:
Kl:M
3_TfK
L8WNw
dxIt=
Vp9:
!sTr~
\YR~n"
:D1/
$8)F2g
q^`F}
WNq(#
*/Yc
:(xj
:[hH9wv
K%/2
i/K,
,agj
m;nz".
Btl3A_
5eK&
s4{'wL	
jP4\?
W"Hz,
f'W4
!	a2
,,TMy
xDD*
Qk6"
FV#u
Ny63
ToJ,2N
:1%?
qbIi
Huqi
*]ou
^d7@2
;1xI
bQy;
Xe/g.
_mP"
JQ9F
/	?(j,
pT<=
KHWS)7
_Z]+
JHP)
0ny>:N<"
k7Kw
;Riv
juM'
*P!C
N}Ym{
	[fFs
	y'W
0qP<
tt[)gTINa
Q5<Z
XHH4
"kkf
Ke:%d
m {y=
U8Jl
F/bg
T(kw
E2$4,b
j[AS
8d[#
Q|%G Q
msKi
o8#2
UI<f:4
0B}C
A1eQ
tj2L!-{.
VAC(
$>3b
B,8G
%b8}
N_#^-
'7x+
kpTj
_O>y
	KDp
ASjo
G{NY
eS'}
*ac@
[Ys2
(-zs
DJW4R
:8}|+}
TB_B
"'P A
*.H\^
':*2
Q6Z9
9jWD
0H!}
Z*r+
cy6X
S~Eqk
c< r
2v5s
?2=aT
7p|B
u-	_
:#AN
TLSk
qB>D
utW{
*@c+
U}DVG3
R;L9
'A`W
rbWKz
Z8$djU"0
a6Hf
io[-N
@0}U
^5Gy
I%ZT
fQ0Q#1
`	zx6
0 u[
g9<c
72Ht
mByf
{>Py
gLIX
w\jM
m=t)
[8fZ
XCk($
<2bX
-*"`
+*vpWh=
?U"N
i/Z+
|fz"
LYbP
yg>K
xHD3
g#fiE
{9bO%/
-9Z;
3\fU
Vp`a 6&
}ZMV;-
HM^'D1
Gjh@
%lo8
RwqL
R2l1n
Q8Sit
Uj%.
3LHB8v
P4HGJ
:u7|
 HS?
NIU0C
,'}'
.hBm
vA#	
wjoo
e&nS
s*~z`
6YRe
y-tBD
Lxyu
d~"5
=CrM
:YH.n
z'-_[b
 4<A=
cXE+
X(^qf
	^Zay+(
`DEV7
<T?!
6`t\
od>v"
qeG"
&0 a
U)xzB0
e|BV
TMPZ
+2ou,o
(8DkH<]M
"@k\
`NR#
.hkI
&?cr
e$?@
4(-&
Z).(V
#x%m
%6Mx(r
z*9[
m,gT
T[ZK&
]':G
aC,b
==Al
kCna
)qk%#]
Av!<
czM?
?c42
 FpMw
3f+Y-
g0Iz5"vX
kCRl
tAt?
R.`2
QW@gB/\
:FB]1F=j?
~XzS
X~>y
4(\q1W
FA/Q
-%2O?5
Q&7r-
pz:z7
Oiy6k
hfN {
H!!&0
%\-h
	7E[G
kVe9-
5n!B
^7 s
kM?J}
{\U7
!<sj/3$
Cet:i
:3HF
+i/G
*!"-
nO!]-
]hlb
9]"I
x_oa
%U\q
aDBuZ
~9mNo
	06z
9(wP_
 >0(
J|2%
%gjf?
E_WXw
kd6Y
ReiC
?BA]
+TA;
5B}$
cYr7
&O:>6G
c${8"
	&75
<U%"
YwRV
eazS
@	{r
k8qv
&(r|
Cya$_
=tZn
:`'q
@h&d+
iG!@
x] Rq=
7WXy8
hVl*w
U3~:
'}3{
bhd*^
JL	+
dpa_
!m-S
8?=G
n3V\
q/>v
`qD^d
}z;m
qchr
8HDf4
UtAnub{
dnHA
j	1u
V-H/
4Z`en
StUL
/YBj
u>4W
wzsoh
M_/E_
[/">
m!e;C
>O0U
\E/'aG#
^:rr
u\Di
jo2$
cBY.
{[lH
']}{s
DLTa
=TMO
6[*S^
_r~/
&`dE
(jyz
|S`=qP
w_3MAd
r	[>
Yt&R><
G'/y
a=8 
b*%C
8vS]
$h|<t
z<hP
MT-L
%_g+q
jK3*
M#=9
M/q>
mHWg[L
zdkl
D%H)
2?9e
Q:!9
^O6eOd
D3-ES
J#HjH(
a	`:U
B#c+
xU+:
EX-T
3KX(
dZAk
4kRE
$Gl_b
Du4pR4F
M/|&
O4X;
%'<yK&Y
*n 6
Y|Y+
fRH\
?-M*
C1!H
	vlTa3
6`Oao
?bsR
PK[U
oxHD
 9rK
i		&
n+=g.
{(lG
EkM:
HT!iF
`CfT
Q;/7
%Q'z
`pml
yPYc
%C*n
^Ejj%j}
gV:J
b^nK
P?\R
33b0
T^8S
`OHn
,&e5
@+yG#
8},!d
/ gr
lajc
Z Wq*
bV9X3
M{g!
}ukv
NM,6W
X)~U
|H^@
ct6IZ.
&J;q#
=z?Bk
9ARI
Mf4Q
{F=V
Tyxz}
\os&
@; ,
S}Tn
!j7U
h@&s
=u4ee
?o/5
pqj\
4	uz
h9Xr(
5U^&
\!%fL
g}~I'PH
#Rx=
Q	UQ
Ud5/
"Eg9j<
iDn[
2twM
en+W
hg,q
+N~U
&e'U}
}e+|}vx
6@-N9
y>+AY
[y^n+t[
j(4` i)
n96sFV
Kt7D
*Tl|
nm:ER
XS4TG
0BZ_	
vS!c
6Ht>Q
{SI=
*cfzey
:KbS
lGs_
uKGg
APw0GR
NXR&
1rX~
&:&D!
Q//)L
m5YM
i%u.4|
L:KX
k}ak
>Zp/
7,kS
W%gjp
Y4{M
nHo5
J}S>
P268H
!z+{
	G4`
	0,8
jI+>
{iZ2
8B~Y&
RSg\
w]O>
9=wV
6CtDz
|;V1
V73v
tXr![O;^8}
6uEIQ
gL3%
JYO2
fNR	
eDO(k
_zG(_A{hS
l{ln~
/064r
(XeU
kp[&w\
*R-k
Jju8
ox^C
tb:es
i&$>k;
Z$)AD8
~!	=
C.*$
@!#2 
:++j
&d<-
F\.9z+
N-p~
&#7r}
/jX9
4tav
>l{|8
kt05
IEVr
qw^d
 xYg
*+JMp7
53"M
8NUy
?&b3
gEQ$
NUWC
#mOkr
sq-:`
?tF#
9~GA
OGeF&
\DEr
LE[?
0~4|$ED
U[})
qr$<
jnQ*
m:bY/
nVk6
$}lq+z
z'_D
hA};
[kj&
+o&j
I<X"7
Oo!9(
iJ{Ff
Es$|
~3kH
0D!v
G@P{
;x}5
	]Pp
|t9X
]8XV
A@S=
T>,>t
-&YC;k
R_g0
UQ\`]
^=?ks
$xcH
CEFu
CKhK"
`R<fJ
{Qj-;b
}I7=
@I6)
^>Vc
`2}6
KBJC
.	UpFW!
E$PL]0"
#%L_
zZCD/
rP,,I
d;'j
,;<w
Jqhy
pS;x0
!7KU
j<?MS
f;jF
TmA3
T+kF
yj&x:>k
8t&!t
f}Xw
A\-a
F"A9'
5L*5
`:e.4
hh9B
B/Ji
EuH8+
Ob&c
5)YNh
	20U
z6.Z
9oN8
 B~w
%e#2
p_;7
2VLW;
LF_w
q&\_}9
k^_{-U
!|Lz
Uh~G
&	5Kbi9#
e(%9
vRle
GgbCfT
iFqja
w0.q7F!Yg
hiiO
=*5k
#Q|v
K4Q)
Nq*hW'S
"jNC
LW'2
UM(EW{w
K]7F@=D
!#cb
><Nm
:Qkm
+r]aI
Jur'!{
RI4-
IzD7
P~PG
>#o.n
qw,h
r$Z	)
kCUW
>R6P
=O;O
H4h#
yo=(
28Qb
%cm{
RaC.
#gsWN5P
KMri
BFsX
!#HGO!
E5HZ
$zxs
\fyt
'5NL
14}7<
ASE'Y{
ndU)
1fx_IO
>G9qN`
`p<.lL
@,P^
Tt'1
{0BQO
P[\s
B>v9
ctc;
v-Rt
P'9/m
4B^bZ"
=:?_
4H>x
2cH,
J- #@
%,xy
!"_G
nV_L
S9eE
?Hhp
xq2m
+gNN
9@cO
X`t\
AT.6
@U#Y
M;'g+
2kY{Z
'_|}
Yxl?
1RxMi
CGgf
szd&
ge8qZE
CQJo1
SiRB?
jQy+
Jb8h~
B`|j
1!e!
Z%R"6
C<<z
Jv`h
}FA\
h^Jg
gSgPh
gyBLl
)KGI+
TnCH
9b`H
CdTf9z
%Kbv
MBcI
!*,Q
1L#UQ
jNGS?
hfuh
bl}s
W\D#E
 >#!
Q)ZWz
tkFd
8'h4
R8N{
k,\l
e-;i
t_Rk
N+J6
Ot*a,
? j.W
!jl)
h\9Y
xd,)
o,t-
HH;<NK
Wi ]X
\;+H:V
hMV%
mE2e
3G~9
	.>I)*
7m\st
b:%}AI
UmYY
f.NS
l-0`
X{KeU
GQene
j:]\c%V
6qTD
qsAlzj
x5ry
puYmP
iD:A
-Zs(
N^J*
L>dp
r)ulEZ
<HDm
8N\F
P!u#
v?)0/*
m+U7
ZTwy
&UW$3
Ys rW6
YUbo
NJl\
[/A]
Y`6;
Su34
VM'K
GZ-J
BPr0
.;m$
R@:{
^r{j
NV6j	|
r,a=
23|yBe
xdoQ
tGG^
%Q`;
bj r
b?GU+
&[XR
{S8[:
e*[YB
`O`~
NLiy[
en_m
/|A@9
v=\~
&U3I2
.N^~&
<9}}
tfvu9
?Th8:
Ibub
`GpNF
 'l+k`j
gO_n
'V#d
pG:g
0!GV
$9?=~
M+#gf
us^I
>s%h
:@\2t{]
@}D8
@'WF]
ezIN
t?Xu
>3-D
+\8*D
YT;:
q9TdG
cHdte
|(5<G
x)KO9
^b<8*
\6N*Ut<\
?C%z=
:$Zp
zz5>
<<_/aH
 >@.
C^<F
v@0fi*
!R2e
x;qp
PYt"
(Aij
$71OD5t
VgOZ
8 n yy#wY
9kl@
mXi_
Bk/#
a&V?
$W;h:
-'T}
4u].V
*'GR
/!ey;
A$Pa
Ds Z
)Wpm
OOa}C?
PE:WI
j-T`
<#jIV	
jC$V
2Bzk
ML#)*
h:6C
}MBmb
YFNe
?Tz&
"=>:
?" Cn
>flYA
rz> U1
V_b,w
'PPgFE
Yuna
r3R1
bN)5
-iy{"yY&
9A]yW
R?h<kR
}o1-Ho
i]]~<
L,	c
`^`H5
5bB'
2ieQ
Fyp8
6}~2
H4?n{GcZ
Wx6:b
l+l#@
!`vo
HAN(
[\{I5
zVnI
f]0k
N$5X
F[Fo
$$!.
lW3u)
C(Kw?
@UbBY.
rlaO
07yE]
ro,~T
/&8c
*>tV
 jz/
$2Hb
&Nlkb
2QRJ.
 g>FR
#0*C
vt.M
Sfdvo>
J2*4
}[{]a
W7j0
vU,!H
	9c,
fQEVS
KpF8
uz!"
}L!(
T$ <m:
|HX7h
DUmA
voL=
X{mu
MVi+
3`}T
%Z.Jzn8
M7<:
3)y{i@6
tCOwl
q38/
=W0L
z2j#
 P=4
^9*F
VhPtN	2
6%+G
W#Z,\a
^*F7CI
yBZ&
hWdd6;
j@H0)
SJ'2J
x$~},
@H% <
N5an
+e>qC1
%vM*
is_n
871Q
oOhw
>4`F
BU/`H
^b%Sc
(kHnJ
o/!!
Qkan
i'*|m
*;*F
O b"
FTV7Yv
^Y7p
'X9;
1^Fb
Y^}^
+/Ym@
iB3=
4r_ 
$~9z
U4MB
#iPCX
7Jz*
h"=J;8
x=F(g[B
g4J[
Akuf
" *G
5sBSR$
Io-R
|2-^
2)Ws
Q.`g
+.%g
p|;#
JqX<0
V$iq
ZB7xm
e-Co
T.@4
GI\_
$0XsO
[bi8
|s,|$
0R/CS5]z
tsjR%
5Zf!
#|YV
ueFQ/
WN=j
*]Zf
Kk[*
t;EY_
 R>V
NT^4
sMoS
B?(O
%Mt)
4-#q
^vtI
lVTc
~qKV
x:3S
Ha4p/
Yh-n
Z6$%PXQc
-?fp
A@h|
S]RZ
Du3m
KROq
`;Be;$3
#	o$V@s
q|+^W
0{|G'1w
$bKo]lLP
giel
>'~\C
)1qV
4Jv\
6-bah1
IXx]
GZt2AHVY
^	NG
<}\`9r8
+}hT
/j.#
4]<~
6fU&i
K#v^:
RuAj
q*W]U
R%2b%
8tpm
R@"b
LULl
B*PBh<
uq4G
nM#m@Z8
vZ"XY9
a4,{
Y$IbA[
!WL1w
S;g8/=V
9MQa
H]$?
s:WZ
<7nV
8)NU
*MJ@
q-\3
jEC7F
K!w*
AC:	
j;6&
fDUpo
tKeV
pCpy
g)|:
#=dBOI
4#IQ
7ZWKG
R 7S
i7q[,5-a
K6@/
7QLk
%Agoa
5[xy
3 eax
so4U
>uyLa
j4CcV
L&Kl
1M,t
keqK
%VW:
~0sW
HTF=?
ggH{
B[>c
)e)-K^9<
;uT0
xua'0,*
GP r
.uGd
9b+)
LN)=
!;92
k@Y4_
>E"$
3Ae8
]Au'
Q/5.
)"Rc
:"nf
\#mD
`Bd#5D
)++F
!|~z>
&T4s
62w_
t-yLL
"SVwX9
CZ&Z{
2xuX
2E-%
0`NN
]>8g
uYWj
._C1
d_nd
OU8` 
0>{yo/,R
"|^m
_aTP
u!qZ~
\iIcMDIA
hTxd
v~/X
im+)
h*00
OO#E
Fc+]
UeX5
$[<q';S
M?+6?
Rbje
& %"
7*ElK
Emqb
c'#~
e9dh
N|L^AR
{%_8U
Wt+:
58"L
/	w[
\[-f
s83nK
m~YFG<
Ebhf
iig>
*'TI
_7k*
Q2yU
Ha74
$+B3zg
I 7}
]3Z4N
hMI8
z@;}C
:+Jl
Jnn/)
BhPg
N_?V
L[	,
1":IaJ"
N'[J
TQX'
i/:9k
4;is
P8vfV6
L$y#
1+{C
z#F*iFM
t\k7}
]9KKK
WBNX
!}XF
&$_:d7
rJHC
	~'r
aA:#
6b)/Fr
:k3<NIS
YY6p
xUY1"
\cIB
,yg^M
#m?9
('*]
B.'>c
!]z@
3x%+
'>>b7
/<!:
C$Xm
{?nd
TV6G
$"]5'p
I2d[E
G'P0
K3ic
c"-f
cp6u
HWb^
18ni
_>":3
<-F6
0T+-""e
],.d4I9S.&
dB6?L4
KBN,
E;TJ)
djrfM
V5Z"y
q.$?
$m~W,
7j}eW
n/tP?
ritk
Z;2	
=g7xr
\JX.
|L](
Xp~pF=9Y/
ZHVU
Res9
0<_yk
UVh*xu7sX
.|&4d
t!pr|T
A5IV
 lKV
DQxL
A'wFl
H>cy
;2k~
2GaLSi
wK"W(
6+Nkh
^I|g
m<;gY
!\j 
Dg[m
[l(o$
7R)_'\e
=mO4Y
c:Hi?4
'K<W
unsX:A0
E8u 
J,vo
j=A/
30jI
.W)?<
W~(8
ji@X[
Vsl`
iH`*
a`mA
~l@H
UpG?2
<#+$.
t^h]
]Y76
E:`F
@<Ux
+FnMf
OI;iv
;Y9&
$z{w
\NW$
yUY1[
Piolz
`"]A
o:.s
UqnT:G\
w	'd
<+q2
!	l[
R8`l&~u
Wf9@c9
ogt]
M4M6
c{ M
=kZ{
*!"UX
?y8:
O:~%
Eizs
Q!r2v
 nXk
jGY<BST
D(W0
]-^^
s%Ir$
`}v9
Zj /
V|^R
$~3<@2
@VT";
k6O/ai
EgeD
#^86w
bq}}
TbQDg
,`:{
h[k\l
*J"hdF	
aq((
=Xh@~6
&%jW(0C
{1V8
*IlC
^}K3L
Y3v<
vo!o
0&cV 
Q 	M
*7e#
? [k
5/t>
{x"NE
X_1z
Rj+B
g$qZh
'PIa
Vlj?
c{hy"h
V<fs
o>4q
7)BL
 )sa
d1!q
!s21kk3
!KVK
-qM^
%azs
tVsIQT
_6^(
jZFk
G{;{`,
}(Ep
?I',[I
#-H]
A-CG}
j7+Y\
%y0n
{^u*{
sqA4
pTz1kg7"5!6]
7vlH"%x
5/!y
a^:N
aey?.
}oj:
G0'e
m,wf
sN7@
mlpP
RZnw
~5h?
yF|]
_0Vv
+/R'
}\EB
.*R.g
t.HD
Dwde&
b|7$T
g jY
'nm^
ZDjl
j:	SH
Y9)Ci
-<VJT
!2]G
!q<T
[V3~5
t$&|
Q,1-%
vTcA
~.\-
_x[}
Y1="
C[W6|_
,2WQ
z;/F
=	3 
L+i5
:d(i
T1tN
i&4F
xG0G<
>2_@
2=$$
SLMvZ
J_H;=oo
r]_7
!ZD<
?wye
?%Li
Hc+RS
S=Hn
gmT9
RKeb`
$$e!
%$[8d]uP
t0']
_dw	
.>XZ
	yaQ
.G4]
#G 1
~--@
DIlAK
]ccN
BeCP
06?B
2b*vq
`;A`
*4	P
AOI]1:3`V
:6'8
rclQ
D+#.
ieQ~
8a~g
2o>`
X)R'
U+]>
(Q*V
;&K6
L?+)		
`S>0
k&=^
HrIIP
~ijwl
#6q4Don
cg"nM9]u2
-!p})
a:Y^
fMVh
@?c1_
jWc!
u]-nq
bnMB
Hl9}
Atjs
X/)}
 {!B
8~7L
&X<;*
@b-Q
6C_w
zhcV
|0)=
A\~j
=%ox 
BB[7
$V/$
g:#Ue
M) |
COK)
uN"O
._/Qn 
f5,R
\.u:
n?W+
A+t8eOp
?ZT'
WTQ2
--
                Serial.print(y);
                Serial.print('\t');
                Serial.println(x);
#endif
                changes += 1;
            }
        }
    }
    Serial.print("Changed ");
    Serial.print(changes);
    Serial.print(" out of ");
    Serial.println(blocks);
    return (1.0 * changes / blocks) > IMAGE_DIFF_THRESHOLD;
 * Copy current frame to previous
void update_frame() {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            prev_frame[y][x] = current_frame[y][x];
        }
    }
 * For serial debugging
 * @param frame
void print_frame(uint16_t frame[H][W]) {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            Serial.print(frame[y][x]);
            Serial.print('\t');
        }
        Serial.println();
    }
// CAMERA COLOR BLOB DETECTOR, INIT FUNCTION
// color-based blob detection - I plan to use this as part of a larger project, the idea is to help detect certain insects and pests in agricultural settings
// this camera will then become an additional sensor communicating with a robot designed to remove pests from invaded plants. 
void cameraInitConfigColorDetector() {  // specific for color-based target recognition, remember to do a deinit first!!!
  // camera part
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_RGB888;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// Telegram section
#include "UniversalTelegramBotRZO.h"
#include <WiFiClientSecure.h>
char* TBotToken = "810218086:AAFPJNDbolU0tzj_Xx6lXOsatDlYnWYaa80";
char* TChatId = "537093554";
WiFiClientSecure client;
UniversalTelegramBot TBotCambot(TBotToken, client);
int Bot_mtbs = 3000; //mean time between scan messages
long Bot_lasttime;   //last time messages' scan has been done
// specific camera variables for the telegram bot
//camera_fb_t * TBotCamfb; // moved intra-function
uint8_t* TBotCamfb_buffer;
size_t TBotCamfb_length;
int TBotCamcurrentByte;
// camera functions specific for the telegram bot
bool isMoreDataAvailable() {
  return (TBotCamfb_length - TBotCamcurrentByte);
uint8_t photoNextByte() {
  TBotCamcurrentByte++;
  return (TBotCamfb_buffer[TBotCamcurrentByte - 1]);
void take_send_photo(String TChatId)
  camera_fb_t * TBotCamfb = NULL;
  TBotCamfb = esp_camera_fb_get();
  TBotCamcurrentByte = 0;
  TBotCamfb_length = TBotCamfb->len;
  TBotCamfb_buffer = TBotCamfb->buf;
  TBotCambot.sendPhotoByBinary(TChatId, "image/jpeg", TBotCamfb->len, isMoreDataAvailable, photoNextByte, nullptr, nullptr);
  esp_camera_fb_return(TBotCamfb);
  TBotCamfb_length = NULL;
  TBotCamfb_buffer = NULL;
// UDP Async client, sends keep heartbeat messages to the server and retrieves commands
AsyncUDP udp; // for server A  // udp layer 5 control protocol
AsyncUDP udpB; // for server B
// command and control IP addresses for server A and server B (redundant server), the exchange is done via udp ( the port is defined by int udpServerPort) and the layer 5 transfers commands and status info as comma separated variables
int IPudpServerAa = 192;
int IPudpServerAb = 168;
int IPudpServerAc = 88;
int IPudpServerAd = 32;
int IPudpServerBa = 192;
int IPudpServerBb = 168;
int IPudpServerBc = 88;
int IPudpServerBd = 3;
int udpServerPort = 8443; // UDP/443 because, well, we can
// udp - layer 5 control protocol processing, the layer 5 control protocol consists of 8 CSV fields. The protocol structure is simple: client_name,requested_operation,field1,field2,field3,field4,field5,field6  all unused fields are set to ascii character 0
#define FIELDUA 8
#define FIELDUB 64
char UdataSplit[FIELDUA][FIELDUB];
int UfieldsLen[FIELDUA];
int UdataLen = 0;
int UserverOK = 0; // contact with the server attempted for 3 times in a row, failing. Say, the idea is: ACK from server received: set to 3, send HEARTBEAT: decrease by 1 until zero is reached, then stop decreasing.
static uint8_t wifiDebugOn = 0;
static uint8_t wifiConnFlag = 0;
static uint8_t wifiWebserverFlag = 0;
static uint8_t wifiBeginFlag = 0;
static uint8_t wifiConnectionAttempts = 0;
// Set the local access point IP address, the netmask is assumed to be /24
IPAddress SetAPIP = {192,168,5,1};  // REMEMBER TO CHANGE THIS FOR EVERY AP YOU PLAN TO INTRODUCE TO THE NETWORK
// Set these to your desired credentials.
const char *ssid = MY_NAME;  // for the local AP  // REMEMBER TO CHANGE THE SSID AS WELL, THE NET PART CONTAINS THE THIRD BYTE OF THE AP IP ADDRESS (the network LSByte)
const char *password = "giampippetto";
WiFiServer serverSTA(8080); // adding a second server on the STA interface? Let's try
// loop() control section
uint32_t loopCounter = 0;
// NETWORK section
// processing variables subsection
uint8_t payloadCurrContent[128] = {0};
uint8_t hashCurrContent[64] = {0};
uint8_t payHeaderCurrContent[32] = {0};
// NAt processing subsection
uint32_t payloadTypeF = 0;
uint32_t srcIPext = 0; // STA side
uint32_t dstIPext = 0;
uint32_t srcIPint = 0; // AP side
uint32_t dstIPint = 0;
uint32_t srcIPpay = 0; // payload side
uint32_t dstIPpay = 0;
// in the NAT table, the folloving are converted to uint32_t 
uint16_t srcPortext = 0; // STA side
uint16_t dstPortext = 0;
uint16_t srcPortint = 0; // AP side
uint16_t dstPortint = 0;
uint16_t srcPortpay = 0; // payload side
uint16_t dstPortpay = 0;
uint16_t expiryCounter = 0;
// NAT table subsection
uint32_t NATline[16] = {0};  // there are 14 fields actually, as per the above list, plus 2 reserved fields
uint32_t NATtable[256][16] = {0};
uint16_t NATlinePointer = 0; // do we allow up to 256 flows only?
// routing table subsection
uint16_t RoutelinePointer = 0; // do we allow up to 16 routes only?
uint32_t routetable[16][8] = {0};  // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
//packet buffer sub-section
uint8_t payloadToProcessFlag = 0; // if the LSB bit0 == 1, there is a payload that needs processing, other values / bits set may mean other operations.
uint8_t * payloadBuffer = NULL;
//structure of the packet buffer:
Size = 224Bytes = 32B header + 128B payload + 64B hash
4B = Type Field( 4 bytes ) = reqtype(1B), protocolNum(1B), Reserved(1B), Reserved(1B)
4B = DST IP
4B = SRC IP 
2B = DST PORT
2B = SRC PORT
2B = PayloadLen
2B = Reserved
4B = Reserved
4B = Reserved
4B = Reserved
128B = actual payload
64B = sha256Hash_reserved(32B raw or 64B hex)
// LED section
#define LED_BUILTIN 2   // Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED
// string section 
// converts character array 
// to string and returns it 
String convertToString(char* a, int size) 
    int i; 
    String s = ""; 
    for (i = 0; i < size; i++) { 
        s = s + a[i]; 
    } 
    return s; 
// deep sleep section
#define uS_TO_S_FACTOR 1000000ULL  /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  60        /* Time ESP32 will go to sleep (in seconds) */
RTC_DATA_ATTR int bootCount = 0;
Method to print the reason by which ESP32
has been awaken from sleep
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch(wakeup_reason)
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
// update the routing table
void routeTableUpdate() {
// RoutelinePointer // do we allow up to 16 routes only?
//uint32_t *routetable[16][8] // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
uint32_t ImyLocalIP = 0;
uint32_t ImyLocalSubnet = 0;
uint32_t ImyAPIP = 0;
uint32_t ImyAPSubnet = 0;
uint32_t ImyLocalSubnetMask = 0;
uint32_t ImyAPSubnetMask = (255 >> 24) + (255 >> 16) + (255 >> 8);
uint32_t ImyLocalGateway = 0;
IPAddress myLocalIP = {0,0,0,0};
IPAddress myLocalSubnet = {0,0,0,0};
IPAddress myLocalSubnetMask = {0,0,0,0};
IPAddress myLocalGateway = {0,0,0,0};
IPAddress myAPIP = WiFi.softAPIP();
ImyAPIP = (uint32_t)((myAPIP[0] << 24) + (myAPIP[1] << 24) + (myAPIP[2] << 24) + myAPIP[3]);
ImyAPSubnet = ImyAPIP & ImyAPSubnetMask;
// the first lines
// line 0 local AP  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
routetable[0][0] = ImyAPSubnet;
routetable[0][1] = ImyAPSubnetMask;
routetable[0][2] = ImyAPIP;
routetable[0][3] = 0; // gateway of course set to 0 for the AP side
routetable[0][4] = 0; // interface ID set to zero, for the moment.
routetable[0][5] = 0;
routetable[0][6] = 0;
routetable[0][7] = 0;
if (wifiConnFlag == 1) {
  myLocalIP = WiFi.localIP();
  myLocalSubnet = WiFi.subnetMask();
  myLocalGateway = WiFi.gatewayIP();
  ImyLocalIP = (myLocalIP[0] << 24) + (myLocalIP[1] << 24) + (myLocalIP[2] << 24) + myLocalIP[3];
  ImyLocalSubnetMask = (myLocalSubnetMask[0] << 24) + (myLocalSubnetMask[1] << 24) + (myLocalSubnetMask[2] << 24) + myLocalSubnetMask[3];
  ImyLocalGateway = (myLocalGateway[0] << 24) + (myLocalGateway[1] << 24) + (myLocalGateway[2] << 24) + myLocalGateway[3];
  ImyLocalSubnet = ImyLocalIP & ImyLocalSubnetMask;
  // line 1 STA  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
  routetable[1][0] = ImyLocalSubnet;
  routetable[1][1] = ImyLocalSubnetMask;
  routetable[1][2] = ImyLocalIP;
  routetable[1][3] = ImyLocalGateway;
  routetable[1][4] = 1; // interface ID set to 1, for the moment.
  routetable[1][5] = 0;
  routetable[1][6] = 0;
  routetable[1][7] = 0; 
} else {
  routetable[1][0] = 0; // nullifying the STA route
  routetable[1][1] = 0; // nullifying the STA route
  routetable[1][2] = 0; // nullifying the STA route
  routetable[1][3] = 0; // nullifying the STA route
  routetable[1][4] = 0; // nullifying the STA route
  routetable[1][5] = 0; // nullifying the STA route
  routetable[1][6] = 0; // nullifying the STA route
  routetable[1][7] = 0; // nullifying the STA route
}  // end void routetableupdate()
// handle client requests
void clientServe() {
  WiFiClient client = serverSTA.available();   // listen for incoming clients
  if (client) {                             // if you get a client,
    Serial.println("New Client.");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to take a picture and send it via telegram (configure via udp layer 5 control protocol).<br>");
            client.print("Click <a href=\"/L\">here</a> to restart the device.<br>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          digitalWrite(LED_BUILTIN, HIGH);               // GET /H takes a picture and sends it via telegram
          take_send_photo(TChatId);
          digitalWrite(LED_BUILTIN, LOW);  // restart the device
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(LED_BUILTIN, LOW);                // GET /L restarts the device
          esp_restart();
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
void startCameraServer();
void wifiIntManagement() {
    // STA connection and disconnection management
// WIFI DEBUG AND SERVICING SECTION START
  if (wifiDebugOn == 1) {
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
    
      Serial.println("WiFi not connected yet");
    }
    if (WiFi.status() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
    
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
    }
  if (wifiConnectionAttempts >= 32) { // turning off wifi, there is no point in trying anymore, if past 32 attempts.
    WiFi.mode(WIFI_OFF); // turning off wifi, then we go to deep sleep for a certain number of seconds.
    
    esp_err_t err = esp_camera_deinit();
    esp_deep_sleep_start();  // going to deep sleep
    
  if ((wifiConnFlag == 0) && (wifiConnectionAttempts < 32)) {  // wifiConnectionAttempts must be < 32 
    wifiConnectionAttempts++; // increasing the connection attempts counter
    
    if (wifiMulti.run() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
      Serial2.print("WiFi up and running: ");
      Serial2.print(WiFi.localIP());
      Serial2.println("' to connect");
      wifiConnFlag = 1;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
    if ((WiFi.status() != WL_CONNECTED) && (wifiBeginFlag == 0)) {
    
      Serial.println("WiFi restarting");
      WiFi.begin(ssid, password); 
      
      wifiBeginFlag = 1;
    }
  if (wifiConnFlag == 1) { // test if the wifi stays alive...
    if (WiFi.status() != WL_CONNECTED) {  // wifiMulti.run() == WL_CONNECTED // WiFi.status() != WL_CONNECTED
    
      Serial.println("WiFi disconnected");
      wifiConnFlag = 0;
      wifiBeginFlag = 0;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
  if (((wifiConnFlag == 1) && (wifiWebserverFlag == 0)) || (ESP.getFreeHeap() < 44000)) { // servicing the webserver on connection up for the first time
      // >>>>>>>> START SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      // >>>>>>>> END SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      
      wifiWebserverFlag = 1;
    
  // WIFI DEBUG AND SERVICING SECTION END 
// UDP - layer 5 control protocol
void UresetudpData() {
for(int i = 0; i < FIELDUA; i++){
  for(int j = 0; j < FIELDUB; j++) {
    UdataSplit[i][j] = 0;
for(int i = 0; i < FIELDUA; i++) {
  UfieldsLen[i] = 0;
UdataLen = 0;
} // end resetudpData()
int UfillinudpData(uint8_t *pktDataField, int pktLen) {
int i = 0;
int j = 0;
int k = 0;
UdataLen = pktLen;
for(i = 0; i < UdataLen; i++){
  if(pktDataField[i] == ',') {
    UfieldsLen[j] = k;
    Serial.print("received_udp_control_protocol_data:");
    Serial.print(UdataSplit[j]);
    Serial.print("; data_len:");
    Serial.print(k);
    Serial.print("; field_position:");
    Serial.println(j);
    j++;
    k = 0;
  if(j >= FIELDUA) {
    Serial.print("ERROR: too many commas in the udp layer 5 control protocol");
    return 100;
    
  UdataSplit[j][k] = pktDataField[i];
  k++; 
UfieldsLen[j] = k;
return 0;
} // end fillinudpData()
void UprocessudpCommand(AsyncUDPPacket packet) {
  Serial.print("processing udp layer 5 control protocol command directed to: ");
  Serial.print(UdataSplit[0]);
  Serial.print("; command is: ");
  Serial.println(UdataSplit[1]);
  // commands available at the moment, or planned, are: 
  // ACK (confirmed heartbeat reception, do nothing), TLGS (send picture to telegram), TLGC (configure telegram, field 2 = bot token, field 3 = chat id)
  // RST (reboot the device), DSLP (deep sleep)
  if(UdataSplit[0] == MY_NAME) {  // matched the field 0, the command is directed to me. 
      
      // processing the actual commands
      
      if(UdataSplit[1] == "ACK") {
        // do not reply with an ACK to an ACK, that would be ...disturbing
        UserverOK = 3;
      }
      if(UdataSplit[1] == "TLGS") {  // send picture via telegram
        //TBotToken
        //TChatId
      take_send_photo(TChatId);
        
        
      }
      if(UdataSplit[1] == "TLGC") { // configure telegram bot token and chat id
        bool ok; 
        String sToken = convertToString(UdataSplit[2], UfieldsLen[2]); 
        String sChatId = convertToString(UdataSplit[3], UfieldsLen[3]); 
        ok = NVS.setString ("TLGToken", sToken); // Store the data value into the key named "TLGToken" on the NVS
        if(ok) {
          ok = NVS.setString ("TLGChatId", sChatId); // Store the data value into the key named "TLGChatId" on the NVS
          
        }
        if(ok) {
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        } else {
          Serial.println("ERROR saving data to nvs");
          packet.printf(ERRNVS_DATA, packet.length());
        }
        
        
      }
      if(UdataSplit[1] == "RST") {  // restart system
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        esp_restart();
      }
      if(UdataSplit[1] == "DSLP") { // start deep sleep
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        Serial.println("RECEIVED REQUEST TO DEEP SLEEP, STARTING TO SLEEP DEEP");
        esp_err_t err = esp_camera_deinit();
        esp_deep_sleep_start();  // going to deep sleep
      }
      
void udpCommandClient() {
  if( ! udp.connected()) {
    Serial.println("UDP connecting to server A");
    udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
    Serial.println("UDP connected to server A");
  if(udp.connected()) {
        Serial.println("UDP sending to server A");
        //Send unicast
        udp.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            esp_camera_deinit();  // the camera needs a deinit from its current configuration.
            delay(3000);
            cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration,
          }
        }
        udp.onPacket([](AsyncUDPPacket packet) {
            Serial.print("UDP Packet Type: ");
            Serial.print(packet.isBroadcast()?"Broadcast":packet.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packet.remoteIP());
            Serial.print(":");
            Serial.print(packet.remotePort());
            Serial.print(", To: ");
            Serial.print(packet.localIP());
            Serial.print(":");
            Serial.print(packet.localPort());
            Serial.print(", Length: ");
            Serial.print(packet.length());
            Serial.print(", Data: ");
            Serial.write(packet.data(), packet.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packet.data() ,packet.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packet); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
// sending the heartbeat to the backup udp command server
void udpBCommandClient() {
  if( ! udpB.connected()) {
    Serial.println("UDP connecting to server B");
    udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
    Serial.println("UDP connected to server B");
  if(udpB.connected()) {
        Serial.println("UDP sending to server B");
        //Send unicast
        udpB.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            esp_camera_deinit();  // the camera needs a deinit from its current configuration.
            delay(3000);
            cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration,
          }
        }
        udpB.onPacket([](AsyncUDPPacket packetB) {
            Serial.print("UDP B Packet Type: ");
            Serial.print(packetB.isBroadcast()?"Broadcast":packetB.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packetB.remoteIP());
            Serial.print(":");
            Serial.print(packetB.remotePort());
            Serial.print(", To: ");
            Serial.print(packetB.localIP());
            Serial.print(":");
            Serial.print(packetB.localPort());
            Serial.print(", Length: ");
            Serial.print(packetB.length());
            Serial.print(", Data: ");
            Serial.write(packetB.data(), packetB.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packetB.data() ,packetB.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packetB); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
void clientsManagement() {
  if ((wifiConnFlag == 1) && (wifiWebserverFlag == 1)) { // HANDLE CLIENT REQUESTS HERE
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
    clientServe();
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
  } // end handle client requests if
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
// wakeup and init part 
  // packet / payload buffer allocation
  payloadBuffer = (uint8_t *)malloc(256 * sizeof(uint8_t));  // the actual size is 224 (see in the declarations), the maximum payload size for ESP-NOW is 250.
  pinMode(LED_BUILTIN, OUTPUT);
  // deep sleep boots
  ++bootCount;
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  /*
  First we configure the wake up source
  We set our ESP32 to wake up every 5 seconds
  */
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
// camera init and config
cameraInitConfig();
// WIFI SECTION
  Serial.println();
  Serial.println("Configuring access point...");
  WiFi.mode(WIFI_AP_STA); // added by me // selecting the AP+STA mode
  wifiMulti.addAP("e32ap001s01border", "giampippetto");  // the connection part is verified as follows: wifiMulti.run() == WL_CONNECTED
  wifiMulti.addAP("G5SE_7499", "pippopluto");
  wifiMulti.addAP("internet-gw.iw1gpe.it.ampr.o", "heisakuukanwohiraite");
  wifiMulti.addAP("inverse", "heisakuukanwohiraite");
  wifiMulti.addAP("e32ap002s01border", "giampippetto");
  wifiMulti.addAP("e32ap003s01border", "giampippetto");
  wifiMulti.addAP("e32ap004s01border", "giampippetto");
  wifiMulti.addAP("e32ap001s02border", "giampippetto");
  wifiMulti.addAP("e32ap002s02border", "giampippetto");
  wifiMulti.addAP("e32ap003s02border", "giampippetto");
  wifiMulti.addAP("e32ap004s02border", "giampippetto");
  // You can remove the password parameter if you want the AP to be open.
  WiFi.softAP(ssid, password);
  delay(200); // wait at least 100ms until the AP has started
  if(!WiFi.softAPConfig(SetAPIP, SetAPIP, IPAddress(255, 255, 255, 0))){
      Serial.println("AP Config Failed");
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  // the STA part is configured here and managed in loop()
// old wifi section
  //WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  Serial.println("");
  Serial.println("WiFi connected");
  startCameraServer();
  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  */
  // NVS storage init
  NVS.begin();
  // trying to load the bot configuration from NVS 
  //TBotToken
  //TChatId
  // load the telegram bot token if available from NVS
  String loadedstr = NVS.getString ("TLGToken"); // Read the value of the "TLGToken" key from the NVS 
  if(loadedstr.length() > 3) { // at least we make sure the result is not empty...
    TBotToken = {};
    loadedstr.toCharArray(TBotToken, loadedstr.length()); // loading TBotToken
    loadedstr = NVS.getString ("TLGChatId"); // Read the value of the "TLGChatId" key from the NVS 
    if(loadedstr.length() > 3) {
      loadedstr.toCharArray(TChatId, loadedstr.length()); // loading TChatId
      Serial.print("Loaded Telegram BotToken and ChatId from NVS storage with values: ");
      Serial.print(TBotToken);
      Serial.print(" and ");
      Serial.println(TChatId);
    }
} // END setup()
void loop() {
  // put your main code here, to run repeatedly:
 // loopCounter check
  if (loopCounter > 16) {
    loopCounter = 0;
  clientsManagement();  // web client requests are handled always 
  if(loopCounter == 1) {
    wifiIntManagement();
  if(loopCounter == 2) {
    routeTableUpdate();
  if(loopCounter == 3) {
    udpCommandClient();
    udp.broadcastTo(MY_NAME, udpServerPort);
  if(loopCounter == 4) { // MOTION DETECTOR SECTION
    if ((motionDetectON == 1) || (UserverOK == 0)){
      
      if (!capture_still()) {
        Serial.println("Failed capture");
        delay(3000);
        return;
      }
      if (motion_detect()) {
        Serial.println("Motion detected");
    }
    update_frame();
    }
  if(loopCounter == 5) {
  // loopCounter increase
  loopCounter++;
  delay(1000);
otadata
app0
spiffs
h&!,[3
"3DUfw`~
Y%$}
_CONSOLE
yw%I
@#Og
g.2#
r{VB
,aA| 
ft%1?6`K
cCUa
s~NI
R86Bp1,
3)DUH
elyv
p4BU
x8)aDd
s7ZS
R,J]
&HvR
k4~u
:;S:
ye,:
lo.d#
jd\]e
ZP?:$
P(|l
2'2s
w 6>Ea:h
J dQ
4qOn+
^=S`
=2i%rt
{`{_}
V/PT
PA! 
g/gn 
%\+4
VP<T
-,5R
Opn[b&5
x&f*
WJg_#
lbEs
4(.,u
WckI@N
IYY[
NJg0
 j,w.
;+Uj
c8,^
}KY)
Z5 ~
2|hF8c
<l5	
>[jw
D@Im
^"nNC
[,X:v!
{7C0
RL5Q
nT)`
=T8C
_:]$
kU&E
btEJ
\iAYU
-Yl%EyE
Llav|L
f1x8
Fz(DG
62lo|$
rv!|
qz]R
ySULGy#
tc8h
gk+M
_D%b
gX$*t^"
.e<3
BGz&
6[\J
e#nk
S.*)
h6,6
b41x
b%5B
*fbC
&7#h
{^9W
h61V$	}
u=`>
FSaW
N6tK,
nx`_
v($Z2
W#@N
zfm*
uDpN~
Q3x.
&tW4
hquU
m"!3KP
kY	V
5<%~
^NKY
/JHt!
>+hH
a/rO
Kx"9
61%,
Cop*
5?Gr
j}9	
cjFR_
MvA%/
@Yp:
QN~w7
yi{f@/
5Ssp
z12p
G<r:l
1z=j}L
(\7V"@)#Q
GbL^1
}#Ev
j=[n
-1Qcip
S_{#
C`6U5>
n+]F
rjC,
!lol
<s) 
7d#B
EDvv
Sp!]k_!
d=pf
a];r
:S7s(g
+ns_/b0
3(d~27
g2y1
%JEq
/M=(
v$#@
	@nf
Rv-j
qvB:G
C[i5(
`czB
d}>Z
Blz,
iQSm
<*P_
sqD.d
MH3O
nS"'
^\Nm
2v-c
tE/-9u
i(W#yk
W@z,*O*
90?/q
l{&5kQl
p	$f
EuO7T8+
pp"o
E1f!
3A o
+Us>
4R;d
ek0Yv
 1%]o%K
x`-dq
b?>I
j [I3K*
iH*V 
q-Bo
-*it
Y:h0
]E9yA=
j`P?*um
y{O(
	bhe
/y?RGh
fOi\
};>HJ,
o2"m
^2"(M
oikuz
EjE(W
G#}l
o=;NK
\vVH
0g>*[
%+](;
0Yk-<
u$(IW
~:\4
;wy9
.rT:
)]DuQE
8+2C
iLtgg
]]th
|#BV
auH3
Q^ef
=TMU
\'<r
|m.g
8S4	f
_].Ip
)^#c.
seKAu
#P>@
R8's
lo)Bu
~iWT
L?:jN
Ipm8Q@
_X|]KS
Bpi7
]u-l]
:Xj:k
U+aC
[pXf
+1fZ
,*z:
h;!I-i;b
}o[h
<Hxx
ly/O
GbQ&
B2jj
PtEI
Mub	4V
[;ZH
W+o<
6?Ai
+a{:U
9?kGX
a!lMp<#
Hu/^
Thq-
h+FN
J:vZ
V~2V
?yZu
\yJqJ
Af*y
*vve
m^-}
<0XwYAg
g/O\
q+y@
/U["a
wZJ6P
0l9e
6g~[
$yN?k
^FRi
W`rA{~
@"WG
?{,>i
j<#!A
2r0[mz7
 38~V
v69D
(uQbKx
c<Vt
#U v|
/h79
.T`]
M=,?>#
u9?B
d%AYa_Z(
-.or
h%@[
'G[.
QQ*c=.
*\[e
}W,W
7b_@
V?'e
~14abu
	I;;
7;[H
G$Sn
dZ5B
A*-e
;%l`
'#J8p>)CT
J&R,o
1l|C;
.]kb
&b?$
2HFM.
Pn0$T
2R/}
J'BpQ
S[<b
xpg2HfH
xaOww
 #qkA
NMRs
Dd<20rg
^n[>
s9/&
*"zd
CMzb
i|!Q
-w[X
*s_c
:LNVK.h	;
O2mEi
@&0z
1kqQ
k6"o.W
sk2*
&as@p$
q2eL
? _aU
Rjb0
TTe"Wk
(+,)
Potc4{MxS
0[XT
p=9i
OFF1
%`?Z
261|7
Dfr#
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585438226
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
"3DUfw`
_CONSOLE
rI	l8
C `=
F3HV
9zm@Z
W-%?4
H"rBi
z])#q
(!8Q
%8"T
U$k@
}h(^
Z"Et+
$2>,
BH$*
@s0`L
-4ce
T:Us.
QK@b
XH2<
?pY.Ud
\brZ A(
EXT?s
P-YL
t\xc
'f6;p
6_n-%~
5z4.
GaS[i#L
:\HC
~$_n
 4j&
KDGvF
+ u&'
~(2A
&"dd$
jdF[
7pm&+
,]N*
uEr7
K6eR
1	M9YF
6zY=m
/tDs
>I;Y)Rb,
	g^Q
3VQz
t"e}
UyGi
'_E^
&!9P
[/~'
*	iO
f6<c
@nCK4
FoW`
DyG:
j<L*I
,^HaF
6{Ab
}{&E
665H
C36q
%7k.
.9Bi
}1bj
t3)z
HWTl
i~LX
8Z3l
<Y8Zv;o
t5Z"-
i=<{IYI
~ey^
=A|5
f:a+
>$k7+ ,
g^Dm
V]'@
*Zvv+
dPYq
NQf_/
:S	/
#H6D>Xs
#}.R*
7x" 
zlm!+
h8@Xz
evaV9b
lfe8n
PdvlK
.[i%
 8/<3
@j&B
,DCB
sTRJ
lAtm
6l?^
E86/pr
byp6
IqT!
B)J!
W.]\
7sB&
+NyZ
R3&7_
J)u43K:
K?\K
Z)%^`t
E&jv^
("M 
JbHN
8"bdS
[_H{
Pbv]
th#T
+!ze
}d,>
l47n
qG{i6#
+`.)}3f
Iq#(
q9!e
(Lo\C
\>zm
v!'t
9|)u
a73jS@hj1
&/^P}`
=w1d
=SM4{
iAN),u
.N&3
nABq
'`|L
D%4O
Wx)O
RL1i
/iFL|
GP((`<F
PgR7
s\2D}-n
YcGl
KJ3=
y4'j
6p)|F
u,dE#
I1^(x6
 {vIPRb
4B($t
)~'R
(YD\N%
Zr_&Yh\lL
jF=i
Ide*
:P	~#Q
D1>xo
3 *zS
y=!uw
@9B"
:4 q
_L/3
04Z#
8bH'
M61a
+!1a
7%Uo
}KNVLe
f.`)
/qKtgu@
|hIS
=_.Dq
,(9`
L[*!
F@@C=
aN-&
jNve
d|dV
@F+G
$`	9
CAS[
.C{x
2E$$TyaF1[
Ay 5
k3EP
[5HP9
nl1&
v"%I
kZvi
wAYJ
q^gL%
TzNN
;`Tg
C9q#Q
H}KB
2T'oc]
i;"-
Ssy}
n\PRw
w)v^
_vWM
Ifh8F
r?pZ
Nl2m
q`_ZF
Ujt5
1Lg@
+Yes%
.>ame
7M	F{
sy!+
Bb>b
4e]y
\eUT
NC@d
B@k1
<eV-
X Oo
GQvPtE
%U4_T
_vn?
C3.32
)F>w
Vzx+
AADA-
 GP~kc
kGd`
X'S]
g6HO_
'@`v
)squp
D$W;
VQTf
hdC{
G]m!
7!FTX&
;d"Bp[p
t\2kub
N.KO
_^U`
R'{s]
.V1hH\
 zZe	32
JZMFr
Dj:s
=5b~
E?Mo
[)3d
GCiB=
0=n~wN
/U02
* l>
F	#qj\
Eb.WQo
PXtt
PRjP3zaSjl
{%[@j
^AL9
7 \C.
{I~*
Z+XN
n888|
c*mk$eg
"3DUfw`
_CONSOLE
.`c/F-
$	Al
iU42
C+]<
	7bn$
"nbmM
F\wh
fuapf
,~I_O
V8-<
y50Nh
@W8rGb
5/ j
QUb+|!
7JETF9
}JwL
1h&u
wHM;M
%VQ?
 P+r
)I9"]
b3N%-
6}_M
VRSD
 6mc
a/ |
p!"{[
(7Ks
G9U**
d%(m
c>%'
z_'EU)
v1IyC%
eY*&m=OE
Iz\3
DheZ
6!3n
)&Cn,f
grTFE
J8YV
}~i0
\sU?
i!DX
Y}[0]
]Mi"S
{%uO
*Boc
pL(K
&TM*t
a :o
BxD5
fPY7
TY/q<
B?%(
j<sva/
]q8<
Y/{U/Q
4fPf
cIpU
+N8"N
%Mc-~j
< Lc
dBn)
(oO'
Pu@r
~MPa
6_&LE
9aX|
H":g6p$
4>76
+gxI
K3t\
G<>mBxt
?Xe^
oNM\A
k-V&,
RIoU
Sif;
DAC!
3`YT_r
yJw}[ab
s|!!W
da6Z
H1 p	
ZD6KoZ6
{Gvt
g'!<w
3.l`
'9-5; 
[:x4
_n$,
Hmi	6
I;bT
~@qM
`ur.z
w~e.-P
o TY
k]wr
71{h
B%ap
4 }R
(*	@|H
!Pi>k
%ruV;K\
e)`SR
jU]+HjT
@ZWM
>{`{_#J
ts6a
	B|5
>PJ0Mu+7
6Ip{
NM(45$'8
r->]
)2,}
$}=7
!VXm-P0
!>z<b>
I1;|
R'Q3
C7,T;A
p,v?
MKV[
6RmK
$O7d
)!RA
*Lgh)U`
hgz?d
R=:a
N`j>
p&p2
&,C9
m8=?y%
6WZg
+|n~:
a"~c
q`<!mx
23zv
GP/*
bNcG^
>Pno
V)_U#
KT l
u]'2B
Zn}Ap
&6ak6
?wz6
>(^^
(-,/
MOYJ
XzV(
}O)x
D,s/PcV
EhDl
QktF
:AO_
4p1`
n\mi
/!sW
n2vJ
(-53
*`VE
n8}eR
.d=d
tr~`AJd
>yzi
f@B!
+d$i
Qyh:
KJ1;~
n,|@w
hzV-!O
i7()
2''l
tG8_
}5b2
Dui!
y!>H
fI5v
;C63
e	Yy
Y%:j
KErd!
T+&Xu
p]8t
h6h,
'MAc
I3}=
b}Ik
cvm{_
.Bw%
:&=n
f8 2
>5Q7
ThQt
hydM
B_;1l
Y,py
B^}U
;_"$
E>k:_%
u]U6
v~lA	
ZJkPP
TT[O
.o-9
N9@'
9S%D4zuBCg
5m95
o-Y~P;
5qC0[
Qi%6
Zkj76
}*+!%S
p~43
{!}q
?mba
i|_dMd
n89N
xbR`}
JoHG
KB1~
/w5}Wb
 +,r
?S}.Zn
rk:<
p5jfi
y9 o
J#gV
 y2S
8(#4d6!r
aR6K
M'P],kWA
N_q}
"YtN
q:l@
$9AH
	,nM(
d{>Y
\C#v
SnjO?/
VN[eE_
lx*T
m)NV
'P#a O
izPpb
{N?i
C:rc
dZBZ
Hf'{_l
_E573
R@cF
JeCXZ
i(Y.
xLg~Q
k&]|}T
C4U,
'	y,
M&B'
I%!*{m
?Z5iq
Xdek
P:pX
Le*&
>g-9
~*'n
- nK]$
5ny4p
^ZB:
s}%|WPu
UyM[u
Dh_3
A;SN
bH#0v}
dg?}l^
 V@H
0A+vqN3
c=\<
ta^Gc
RU0?
~Yq*d
cvpE
V/zg:
|UI0
MU"H
<2pH:
a-0	
lG6l
%C%	
NpvG
'rLj
0%QpU
e2dTa>
vt-O
KM_pN?
	:]#
 OA)
I)9KR
Q~#8U
@);m;
cOq[
ccEKPg
=eeX
5=zz
k5Ya
Cddc
8?0(/
 _LO
YMw	
Uu a*,
cO0~
zIqO$
S|8{m
xjcl
/0{b
tPq{P
MuhUK
wHZL~E$=
}Cq:g
`.GB
G}wV
q>z*
#_jbSL
^=c9
hJ*1`-lP
R2k!/
EGzfI
s1-`
3:&9
Rtk%5h
	'hk
 <'\
aTzE
3t* 
5zZ4
)4J5C8
:Sx 
L-y#
y6l7
}RU-
79G!
oWbX
J>vl
0f:(
'-?~o4Q
y{v9
@u*q=
1fVd
S% V
"3DUfw`
_CONSOLE
YU_b
Kx7g
Zg>|
-Z3P
:XW3
1J3=K\
3ov)
&r~W
<7|9
G\xk
| wec
je6a
i<5K
+Z@A
Sj7T
p,['F
7nL	
w+izH
^6J^?
pl-A
\WgC
xhOk
u8s.
8H	K
)	]n
&:2l
FQ_gWVp
$Fmr%?l/
L.*j
7E)	y
VaJ"Y
]uX(
g),XG
'EtBX
/PA6E
+d ^
+Up/
x*'f
sM`WS>
Ew^*%
#b?h
8]]'
Zc!of
{cspN{
2}L]I
=t_W
xS]kZ%
zFd/
M/A$r
pc4k0
~32<
J-\G
y}K)?
LTS>
og{Z$
}"ox
o1eQ
TXz]k
z:f!
]h%p
Ox%>
sAar
-?$ 
)OuE_
!BqH
Nb`?
e+^@
@T1z
2|.i
kV7H
3_CLy
0F8L
jbQfM
(pbS
s^1F
KQ"fJ
z2t+
]SO)
8mD	
2DC?
}Mcy
mQn6j
,REg
~D%jX
$ Hv
;mJb#0>
vK{1
|INz
%[%r|W
=7Xn
|\GN&
&_^dh'D'D
F;eB
Jov[
r@NfI
aqCE1"I
lqF0"r
KS2j
--8Y'
B}[;Q
 C"-'
;AJf"
-EV\I
{[WZ
w447
8%=k-
ZO#Y
~+U9
ar&f
u5rb
c~ LlI>#
E8'`
 '%4
(]t`3
.L.@h
&v}+
N0lX
@LN3
X'5V
6]40o
hd	D.
Jyjg
:>1"
PSPb
|&T(
`=z>
{TQF,
l5xePj7F
[e/mZc
l>9`
ZS_(J4
r?F.h
-e0w
1R&W9H
gN	W
?X1r)Eo
|Iio
$\{_
mQdu*
B-Ne
EqM	
{+J>O
ap]/
"<RY
m2p(
)xR-
Nh};
9 Iv
9/ )
TD'W
#q=B
htyJh[
):Kp
%P'Q#\
f9hHy
Kf):~r
O?cO
ty^A
38uE
4@99
</K:
s/n8
a4:6
#TmK
[h>s~
n:94;jM
q.Ri[
r4:8
B)#T
;3d?
u`1ANYH]
ke=)e
#>|z
Oa't
U@t|
4@u!
-2'd
F#Z]
q=u(
@hBR(
wR*	Z
u%-(vt
 R"'_Y
<s>fY
6xTU
3 3X
n%Wt
Lw>J
[G`tT6
L<wKJK
F$|q
.+>[I
ej.nx
6J(B
*c4n
H3@t
V{L;
5!fa
aX9b
	4q*/
~FdA
L6Mb
or$QJo
8XI9
YQ"`
AJf4'
=pMv
(=-V
\|a)T
OByX
w*]j
Gd_.
hwo~{
|y$E|
x(8X
KVd8-w
VY5M
1L-q
8{|H&
e/`|m
1(5Y
a6bk
OqfmgE
<Hz^
u)}o
|3N]
4g~4
Ci,u
M~UZ5
S;(J
6z"|
&(fw
)xm\
j6T#
YmTv
}&g2
?a>N
+#=8T
j{9K
8t6K^
P|TR
M}mP
Pv`n
P3q`
A='7
b5Y{%Id
0v[v
xa7jk
<e0'CZ
my*}
bsQO
,j.J7W
Qm~G~
Vif:7
vVO]
>]scy9m
	Q(N;
H!|0
g"s55_Z
weoX
#G~U
Bl^>
^HLJc
;Nk =+
$LNkR
wmTB
`,WB
D.$+
j42N
J"MV
F/*#
!y#'
b?4=
%!:b
JzbQ&2
oX1&
g#	[
zu	SB	
|UrkQ
!hkqO
a2D'
D"x-
"3DUfw`
_CONSOLE
`^^4k
gj|>
qy=KJ
bYKjlN<c<
CXKY$t
fK=<
`	0B
s0`A}q|
CGm}d
#vPn
Ewl/
"xt1.
!CTD
\5ci
UEx%
nk|}
<qSxLy
EFu+
<.VK3;
gMGB
"9G3<|
{vGJ`
;("_
2#NH
[p3(
fI[ai
\34J
t[&c
XOx^
h,?{dTp
v^ZcS
bv))}
0Nj5
zN:n
~L\;
n+#Q
sm,qM
>6,)
B;zU
YU\J
$r=2
&I3jP
VSjH
 rqQ
bI4@
ZniD
fsy*
9Z4r
a0.uP
'cxD
*(%C
S}|0
7^0N
Zd/Pb`g
=F>.0
gWLT(
}m6[
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585438526
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
/tmp/arduino_build_383460/sketch/esp32_cam_node.ino.cpp.o: \
 /tmp/arduino_build_383460/sketch/esp32_cam_node.ino.cpp \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Arduino.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdint.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/_default_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/features.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/_intsup.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/_ansi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/newlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/ieeefp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core-isa.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/cdefs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/reent.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/_ansi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/lock.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/sched.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/stdio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/stdlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/alloca.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/string.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/string.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/inttypes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/FreeRTOS.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/config/sdkconfig.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/hal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtensa-versions.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core-matmap.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/tie.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/system.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_context.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/corebits.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime-frames.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/ets_sys.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_assert.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/assert.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/projdefs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/deprecated_definitions.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portmacro.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/specreg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_crosscore_int.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_timer.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_err.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/heap/esp_heap_caps.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/heap/multi_heap.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc_memory_layout.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_attr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portbenchmark.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/mpu_wrappers.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_system.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_sleep.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_struct.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/rtc_io_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/io_mux_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_sig_map.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_pins.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_intr_alloc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_periph.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/touch_pad.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_intr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/ets_sys.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_api.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/touch_channel.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/task.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/limits.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/list.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/semphr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/queue.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/math.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-log.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/log/esp_log.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/log/esp_log_internal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-matrix.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-uart.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-touch.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-dac.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-adc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-spi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-i2c.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/event_groups.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/timers.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/task.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-ledc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-rmt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-sigmadelta.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-timer.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-bt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-psram.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-cpu.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp8266-compat.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/stdlib_noniso.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/binary.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WCharacter.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WString.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/pgmspace.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Stream.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Print.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Printable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/IPAddress.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WString.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Printable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Client.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Server.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Udp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Stream.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/IPAddress.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/HardwareSerial.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Esp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/variants/esp32/pins_arduino.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/esp_camera.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/ledc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/periph_ctrl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/dport_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/dport_access.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_dport_access.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/uart_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/periph_defs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/sensor.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/img_converters.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Print.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/IPv6Address.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiType.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiSTA.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiGeneric.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_event_loop.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp_event/esp_event.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/queue.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp_event/esp_event_base.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_event_legacy.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_wifi_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_private/esp_wifi_types_private.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/queue.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_interface.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/tcpip_adapter/tcpip_adapter.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_wifi_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/ip_addr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/opt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwipopts.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/time.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/fcntl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/_default_fcntl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/stat.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/vfs/sys/ioctl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/select.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_task.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/netif/dhcp_state.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/debug.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/arch.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/arch/cc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/errno.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/errno.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/arch/sys_arch.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/arch/vfs_lwip.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/def.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/ip4_addr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/ip6_addr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/def.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/dhcpserver/dhcpserver.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiAP.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiScan.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiClient.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Client.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiServer.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Server.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiUdp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Udp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/cbuf.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiClient.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiAP.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiUdp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/AsyncUDP/src/AsyncUDP.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/api.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/netbuf.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/pbuf.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/err.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/sys.h \
 /tmp/arduino_build_383460/sketch/ArduinoNvs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/spi_flash/esp_partition.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/spi_flash/esp_spi_flash.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/nvs_flash/nvs_flash.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/nvs_flash/nvs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/nvs_flash/nvs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiMulti.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFi.h \
 /tmp/arduino_build_383460/sketch/camera_pins.h \
 /tmp/arduino_build_383460/sketch/UniversalTelegramBotRZO.h \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson.h \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Configuration.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayRef.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Collection/CollectionData.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Namespace.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/version.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/assert.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayIterator.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/SlotFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/StringAdapters.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ConstRamStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/safe_strcmp.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/IsString.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/conditional.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/enable_if.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/integral_constant.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_array.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_base_of.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_class.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/declval.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_const.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_convertible.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_enum.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_floating_point.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_integral.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_same.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_signed.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_unsigned.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/type_identity.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_const.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_reference.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/StoragePolicy.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/RamStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/Alignment.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StringSlot.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/mpl/max.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/gsl/not_null.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/Float.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/Integer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/SizedRamStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/StlStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ArduinoStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/FlashStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/SizedFlashStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/convertNumber.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/alias_cast.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/math.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/limits.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantRef.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Misc/Visitable.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantOperators.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantCasts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/attributes.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantComparisons.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantOr.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantAs.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/IsWriteableString.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantShortcuts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayShortcuts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectShortcuts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectRef.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectIterator.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/Pair.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/String.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/DynamicJsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantTo.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/StaticJsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantAsImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/parseFloat.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/parseNumber.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/ctype.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/parseInteger.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/deserialize.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/NestingLimit.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Reader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/IteratorReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/RamReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStreamReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStringReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/StdStreamReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/StringStorage/StringStorage.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StringBuilder.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/StringStorage/StringMover.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/EscapeSequence.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/Latch.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/Utf16.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/Utf8.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/FloatParts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/measure.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/DummyWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/serialize.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/StaticStringWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStringWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/ArduinoStringWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStreamWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/PrintWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/PrettyJsonSerializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/endianess.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/utility.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/ieee754.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/compatibility.hpp \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/core_version.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/WiFiClientSecure.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/ssl_client.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/esp_mem.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/check_config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform_time.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net_sockets.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl_ciphersuites.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/pk.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/md.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/rsa.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecdsa.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/asn1.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecdh.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/debug.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/entropy.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/sha512.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ctr_drbg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/aes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/aes_alt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/hwcrypto/aes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/aes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/error.h
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585438826
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585440926
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585442726
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585446626
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585448426
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585449026
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
NG: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 05:28:37 2020 -> Trying again in 5 secs...
Sun Mar 29 05:28:42 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 05:29:12 2020 -> WARNING: Download failed (28) Sun Mar 29 05:29:12 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 05:29:12 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 05:29:12 2020 -> Trying again in 5 secs...
Sun Mar 29 05:29:17 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 05:29:47 2020 -> ERROR: Download failed (28) Sun Mar 29 05:29:47 2020 -> ERROR:  Message: Timeout was reached
Sun Mar 29 05:29:47 2020 -> ERROR: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 05:29:47 2020 -> Giving up on https://database.clamav.net...
Sun Mar 29 05:29:47 2020 -> ERROR: Update failed for database: daily
Sun Mar 29 05:29:47 2020 -> WARNING: fc_update_databases: fc_update_database failed: Connection failed (5)
Sun Mar 29 05:29:47 2020 -> ERROR: Database update process failed: Connection failed (5)
Sun Mar 29 05:29:47 2020 -> ERROR: Update failed.
Sun Mar 29 05:29:47 2020 -> --------------------------------------
Sun Mar 29 06:29:47 2020 -> Received signal: wake up
Sun Mar 29 06:29:47 2020 -> ClamAV update process started at Sun Mar 29 06:29:47 2020
Sun Mar 29 06:29:47 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 06:30:17 2020 -> WARNING: Download failed (28) Sun Mar 29 06:30:17 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 06:30:17 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 06:30:17 2020 -> Trying again in 5 secs...
Sun Mar 29 06:30:22 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 06:30:52 2020 -> WARNING: Download failed (28) Sun Mar 29 06:30:52 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 06:30:52 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 06:30:52 2020 -> Trying again in 5 secs...
Sun Mar 29 06:30:57 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 06:31:27 2020 -> WARNING: Download failed (28) Sun Mar 29 06:31:27 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 06:31:27 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 06:31:27 2020 -> Trying again in 5 secs...
Sun Mar 29 06:31:32 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 06:32:02 2020 -> WARNING: Download failed (28) Sun Mar 29 06:32:02 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 06:32:02 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 06:32:02 2020 -> Trying again in 5 secs...
Sun Mar 29 06:32:07 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 06:32:37 2020 -> ERROR: Download failed (28) Sun Mar 29 06:32:37 2020 -> ERROR:  Message: Timeout was reached
Sun Mar 29 06:32:37 2020 -> ERROR: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 06:32:37 2020 -> Giving up on https://database.clamav.net...
Sun Mar 29 06:32:37 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 06:33:07 2020 -> WARNING: Download failed (28) Sun Mar 29 06:33:07 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 06:33:07 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 06:33:07 2020 -> Trying again in 5 secs...
Sun Mar 29 06:33:12 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 06:33:42 2020 -> WARNING: Download failed (28) Sun Mar 29 06:33:42 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 06:33:42 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 06:33:42 2020 -> Tryin[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585453226
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585454126
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585455326
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585455626
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
g again in 5 secs...
Sun Mar 29 06:33:47 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 06:34:17 2020 -> WARNING: Download failed (28) Sun Mar 29 06:34:17 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 06:34:18 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 06:34:18 2020 -> Trying again in 5 secs...
Sun Mar 29 06:34:23 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 06:34:53 2020 -> WARNING: Download failed (28) Sun Mar 29 06:34:53 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 06:34:53 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 06:34:53 2020 -> Trying again in 5 secs...
Sun Mar 29 06:34:58 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 06:35:28 2020 -> ERROR: Download failed (28) Sun Mar 29 06:35:28 2020 -> ERROR:  Message: Timeout was reached
Sun Mar 29 06:35:28 2020 -> ERROR: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 06:35:28 2020 -> Giving up on https://database.clamav.net...
Sun Mar 29 06:35:28 2020 -> ERROR: Update failed for database: daily
Sun Mar 29 06:35:28 2020 -> WARNING: fc_update_databases: fc_update_database failed: Connection failed (5)
Sun Mar 29 06:35:28 2020 -> ERROR: Database update process failed: Connection failed (5)
Sun Mar 29 06:35:28 2020 -> ERROR: Update failed.
Sun Mar 29 06:35:28 2020 -> --------------------------------------
Sun Mar 29 07:35:28 2020 -> Received signal: wake up
Sun Mar 29 07:35:28 2020 -> ClamAV update process started at Sun Mar 29 07:35:28 2020
Sun Mar 29 07:35:31 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 07:36:01 2020 -> WARNING: Download failed (28) Sun Mar 29 07:36:01 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 07:36:01 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 07:36:01 2020 -> Trying again in 5 secs...
Sun Mar 29 07:36:06 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 07:36:36 2020 -> WARNING: Download failed (28) Sun Mar 29 07:36:36 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 07:36:36 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 07:36:36 2020 -> Trying again in 5 secs...
Sun Mar 29 07:36:41 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 07:37:11 2020 -> WARNING: Download failed (28) Sun Mar 29 07:37:11 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 07:37:11 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 07:37:11 2020 -> Trying again in 5 secs...
Sun Mar 29 07:37:16 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 07:37:46 2020 -> WARNING: Download failed (28) Sun Mar 29 07:37:46 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 07:37:46 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 07:37:46 2020 -> Trying again in 5 secs...
Sun Mar 29 07:37:51 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 07:38:21 2020 -> ERROR: Download failed (28) Sun Mar 29 07:38:21 2020 -> ERROR:  Message: Timeout was reached
Sun Mar 29 07:38:21 2020 -> ERROR: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 07:38:21 2020 -> Giving up on https://database.clamav.net...
Sun Mar 29 07:38:21 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 07:38:51 2020 -> WARNING: Download failed (28) Sun Mar 29 07:38:51 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 07:38:51 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 07:38:51 2020 -> Trying again in 5 secs...
Sun Mar 29 07:38:56 2020 -> daily database available for download (remote version: 25765)
Su[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585457426
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585458026
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585458626
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585459226
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585459526
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
KBXf
n Mar 29 07:39:26 2020 -> WARNING: Download failed (28) Sun Mar 29 07:39:26 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 07:39:26 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 07:39:26 2020 -> Trying again in 5 secs...
Sun Mar 29 07:39:31 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 07:40:01 2020 -> WARNING: Download failed (28) Sun Mar 29 07:40:01 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 07:40:01 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 07:40:01 2020 -> Trying again in 5 secs...
Sun Mar 29 07:40:06 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 07:40:36 2020 -> WARNING: Download failed (28) Sun Mar 29 07:40:36 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 07:40:36 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 07:40:36 2020 -> Trying again in 5 secs...
Sun Mar 29 07:40:41 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 07:41:11 2020 -> ERROR: Download failed (28) Sun Mar 29 07:41:11 2020 -> ERROR:  Message: Timeout was reached
Sun Mar 29 07:41:11 2020 -> ERROR: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 07:41:11 2020 -> Giving up on https://database.clamav.net...
Sun Mar 29 07:41:11 2020 -> ERROR: Update failed for database: daily
Sun Mar 29 07:41:11 2020 -> WARNING: fc_update_databases: fc_update_database failed: Connection failed (5)
Sun Mar 29 07:41:11 2020 -> ERROR: Database update process failed: Connection failed (5)
Sun Mar 29 07:41:11 2020 -> ERROR: Update failed.
Sun Mar 29 07:41:11 2020 -> --------------------------------------
Sun Mar 29 08:41:11 2020 -> Received signal: wake up
Sun Mar 29 08:41:11 2020 -> ClamAV update process started at Sun Mar 29 08:41:11 2020
Sun Mar 29 08:41:17 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 08:41:47 2020 -> WARNING: Download failed (28) Sun Mar 29 08:41:47 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 08:41:47 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 08:41:47 2020 -> Trying again in 5 secs...
Sun Mar 29 08:41:52 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 08:42:22 2020 -> WARNING: Download failed (28) Sun Mar 29 08:42:22 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 08:42:22 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 08:42:22 2020 -> Trying again in 5 secs...
Sun Mar 29 08:42:27 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 08:42:57 2020 -> WARNING: Download failed (28) Sun Mar 29 08:42:57 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 08:42:57 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 08:42:57 2020 -> Trying again in 5 secs...
Sun Mar 29 08:43:02 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 08:43:32 2020 -> WARNING: Download failed (28) Sun Mar 29 08:43:32 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 08:43:32 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 08:43:32 2020 -> Trying again in 5 secs...
Sun Mar 29 08:43:37 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 08:44:07 2020 -> ERROR: Download failed (28) Sun Mar 29 08:44:07 2020 -> ERROR:  Message: Timeout was reached
Sun Mar 29 08:44:07 2020 -> ERROR: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 08:44:07 2020 -> Giving up on https://database.clamav.net...
Sun Mar 29 08:44:07 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 08:44:37 2020 -> WARNING: Download failed (28) Sun Mar 29 08:44:37 2020 -> WARNING:  Message: Timeout wa[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585461026
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585463126
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585467326
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
29 09:49:47 2020 -> Giving up on https://database.clamav.net...
Sun Mar 29 09:49:47 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 09:50:17 2020 -> WARNING: Download failed (28) Sun Mar 29 09:50:17 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 09:50:17 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 09:50:17 2020 -> Trying again in 5 secs...
Sun Mar 29 09:50:22 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 09:50:52 2020 -> WARNING: Download failed (28) Sun Mar 29 09:50:52 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 09:50:52 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 09:50:52 2020 -> Trying again in 5 secs...
Sun Mar 29 09:50:57 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 09:51:27 2020 -> WARNING: Download failed (28) Sun Mar 29 09:51:27 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 09:51:27 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 09:51:27 2020 -> Trying again in 5 secs...
Sun Mar 29 09:51:32 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 09:52:02 2020 -> WARNING: Download failed (28) Sun Mar 29 09:52:02 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 09:52:02 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 09:52:02 2020 -> Trying again in 5 secs...
Sun Mar 29 09:52:07 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 09:52:37 2020 -> ERROR: Download failed (28) Sun Mar 29 09:52:37 2020 -> ERROR:  Message: Timeout was reached
Sun Mar 29 09:52:37 2020 -> ERROR: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 09:52:37 2020 -> Giving up on https://database.clamav.net...
Sun Mar 29 09:52:37 2020 -> ERROR: Update failed for database: daily
Sun Mar 29 09:52:37 2020 -> WARNING: fc_update_databases: fc_update_database failed: Connection failed (5)
Sun Mar 29 09:52:37 2020 -> ERROR: Database update process failed: Connection failed (5)
Sun Mar 29 09:52:37 2020 -> ERROR: Update failed.
Sun Mar 29 09:52:37 2020 -> --------------------------------------
Sun Mar 29 10:52:37 2020 -> Received signal: wake up
Sun Mar 29 10:52:37 2020 -> ClamAV update process started at Sun Mar 29 10:52:37 2020
Sun Mar 29 10:52:38 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 10:53:08 2020 -> WARNING: Download failed (28) Sun Mar 29 10:53:08 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 10:53:08 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 10:53:08 2020 -> Trying again in 5 secs...
Sun Mar 29 10:53:13 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 10:53:43 2020 -> WARNING: Download failed (28) Sun Mar 29 10:53:43 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 10:53:43 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 10:53:43 2020 -> Trying again in 5 secs...
Sun Mar 29 10:53:48 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 10:54:18 2020 -> WARNING: Download failed (28) Sun Mar 29 10:54:18 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 10:54:18 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 10:54:18 2020 -> Trying again in 5 secs...
Sun Mar 29 10:54:23 2020 -> daily database available for download (remote version: 25765)
Sun Mar 29 10:54:53 2020 -> WARNING: Download failed (28) Sun Mar 29 10:54:53 2020 -> WARNING:  Message: Timeout was reached
Sun Mar 29 10:54:53 2020 -> WARNING: getcvd: Can't download daily.cvd from https://database.clamav.net/daily.cvd
Sun Mar 29 10:54:53 2020 -> Trying again in 5 secs...
Sun Mar 29 10:54:58 2020 -> daily database available for down[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585470326
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585471526
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
"3DUfw`
_CONSOLE
2QX.
t@Xo/F
v>J2
$fIO"~
k2:ig
<u9[
bO/c\Y
<tSs
]w8GqO&m
?k,e
'|d"Q
0Tws
8=A.
[M;z
[ i%
h~	2
:%+Y
=@`E
d5CF
vV-27
fEu39
IX;W[
3}0_
%*"@	
[:K>
zvPG
'|b$6
,D)V
T#4F
;T9.
qn*{
Q+70
e<s,9
$uFh
3}ZE
LkX*'"uH
7<KRR
P(a<
ra-G
{1-JM"G
 "fz{
B6'w
I}">_
H(k=rCs
Vl<3
L:0=
+s%2
'+9%
gdEM
/Yz<
-EZe
pn!l
iWS+
>WQ\2
0zG'
aq;|2
s~B^*e()
#Bhk 
:\C^Mm
e2<#
yeAP3
KY&=-*
[7EW
ni(]s
U+TQ
0 n5t
	0nTbv
C	B#
IiU~E
nQC-m;]
MF"P?
oGC#%
-2TZc
DxZ'v)b
kG0U<
paQ(
=t2;u
YegEkvj
,NHl
;rx*
tv(%
;yTTO*9(/
KMK,
iTcp
{{k<
7~Y_s
]2]{
^dA6	UX
N6}@uc
_3|,j
iY1f
FAup-
T~tcF
n~ng&qC
&8a*T
N%-8@-
6lu[
%x/O
px=`
scgo
x\feT
9<|8D
*shh
wh\By
i$y%9
6x?+
#CE.
nZucE
8#~~P
\wcF
q7[)
@hD*7
D,3C_
AfEl
p$wU
jz_R
Ya>L
M~pfZ9
sqB$t
$U<}Eq
T	de_
TMo 
R^^H
0(fE
@uoY
'buL
K	h}i+5
gv}s8
Y.1l
radz
[NVJH
WLy**}
F@lq
7b/.K
8dI}
;v@t+al
(b=1s
j@UX
RQ&G
{+[,d
xuvH
rlq<
DInog
s.4:
'T)@
miv!$
1Ji!y
\!1b4
:y^	'G@
;,`0
[It 
D-#G
fK)/
Llk;
_Ota
VxL`
S	b2o{^
K6DG
fo3w
'}yTy
YU>O
zH1n
T+_P
4R6u(
2A"=-
lS+i
aaC$
m))9
tF.GH\#
";	&o
ml8+
0*G7
<4_;3
C9X2
U:[P
+Tw(S
eiW#%
'Xl6
A*}q
y^t!>
H7 NwY
eiZ'
kR\]*
mBNuty$b
ElE,D
RKo[
GvYh
[Xl3
<m,w
0%6e
PDEr~
5FUm
ucmpD/
rirV
"Ph`*
m~U!-
i5-)
7|sD
GcYwD
RF7tW
Q[-+|
_c<t
o$Qe
B_*'
]YCP
hv]_
w'w)
Q t\
'>F~
}rnW!
]q8N
DE<mY
a_>@
9JWt
rgT?
zhUD
_uDE
}|S 
_wso\
3i/!
c5'lW
ltZ>
xP!}&`
H$cX
V~#N
q*Zh;
"N%(U
F7Kqj
ZjKCQ_
ak(F6
+AJh
GU:JM:*
s1Ki 
1wS<
I<2Z
[U!ws
i1Y4p,
PZ62-C<
*?t#%
_b.S
,T[W
m qq
J;(0e
>D^g
gt-^
2IuH
AKgo
w 6l	a
]gha>
p3o~
@/l&
(S#4sQ
$]Gib7S
/>E>i
\m[C
g}o.
=hZh
\[)J
`l=o
BY7w
oio)WY
}&"M
z31:
Hw%5
m,po
\j!H<
OJIv
:TDCr
dV$0
|2&^ja
JZ'Y
zgwJ5
g&]$
SorF
v&ju
?QEQ
EUk{d
o",5
4py2~@
c{eAx
-zOba;
>5n5
 a'g
![['
?B(E
M3+<
!"Y_N
wP"r,#b
"3DUfw`2
_CONSOLE
%17'
s[g'n
H:]{
 n|8
?]4r
25WS
g,HE
!:+up
IT3M
8^+T
MdNY4
8<. )
 nc1[
ho\>
[DM/
-BL!a
v&kh:W
8:k#Tk
9@,Y6
K51R
-Ao\
O%)E
6fjU
|/=f
#8wt
ExeL
	M|N
Iya'dn9j
bk7c
+33a
B\(}`Z>.
Eg~j
!5n*
Wa<zk
Kv(T{(6R
pOBWzM
5wN#
J9|gA
awQ;{bX
|i0[
	g_k
sL'[
8/#s
uv-2
2P=xLgZ
gl	s
3McL
 z1s
&8xe
<`:(
"3DUfw`_
#$1:qV
_CONSOLE
T_X>
N-K`
+S<b
x9hm)4))
|-y%
;'47J
|fb9
zy2%=
,81h
$1bu
JG@n
0t>Kt
q}UO
2T@)
+EKU3
]@%{
T8I;
(9[u
@wMK%?
e&hNH N
,(Ul
+ed4
*N>n
pfn5o
"l{O+
?F}^
&W)M
S-5v
H|vh
CeiJ
@M=9
&Z)-
-+/ur
\zd9
@1MJL
QxpD
Cdk_8
}($'.
Tmme)
}:>%
Q!iV
g-qbDXd
V=IZp
Cm\j
yzX;m
(Zl7
N_t=
I9jLoL
z$}c=J9
|.1@q
pkF:
F-QZ
/Gv(
\F< a
1\N,]E
"3DUfw`
_CONSOLE
ja4A
ivSA
WSJd
tu~c
=|S7{
PF=t
i6ee=
R}z|
tO9;
,%ao
swGA
)]Qw9
6I8_
HP'y
m1`'
R2f|qI
*~08
Qn)N
i_N6
HFRV
=&;W
~n$q[
:#`J3
Yx>L
2n(/
%P @
x;V*rE
4yh|
fA5]&[
1|xA
QUkL
^\W]
pyHw
0u**
F&?>
${B8
=;A 
aI6S
<+`T
+-|K
Zyf#A
7	V%4
h%o'>
>zie
,kEO
d\D4
LT<i
Y`W=
c5+i
}x][azMkp
/(X)
2>##
=v*0Jx
6J+NZ
"gC(
;R:/
8T/{1/vd
M#xMz
vy_G
Vy'8
I(%_
3dDt
 KA|
5fOW
vN	Y
w>=p
tUIwi4
Ow0[
ufUe
Ue)g\
~eBz
||^*
(~X+V
}6Gw
9&zrW
Q?\Yy
/98w
x5 U
Wk)K
rYIHA
.b!O
vpQ-
})pV
Wec8#Oxk
^Zgag
Y"u3
h|(=
ooa6+
"!ne
W8xM
1pi,Y
pMAR
w4<my
LN}]+
cEV4^
hsNB
-mPv
iFY1fT
rP7o
j3!z
['8=
vo)!
>3g[U*
.<pX	
z'4j
-/}n|
qbem
gK&X
].O[
D[@ 
wS:D
0=J>
d&Py
@2@:
cP&.Z
ig(_
H}vg
29Z}
G,HC4
O24]
0=9W
4+N'<
2k:[
L|^<
p&fik
R@\vZ]
A%x7
^@c\N
BTmA{
0%"k
#bum
}JeA`1
[}@&Z
AvD=7u
"0}d
!r^x
3`@M
-UNxF0a
~V./
>	.E
tk#s@{
V}Lc
0sNY
	".0
0Vkru
D\;]k
gWwW
4M4S"
=BJ}
I04\
@%]Jt$
__|4
J_[W
XRn]
um|"&
@`9F
c-0E
MES6
%u u
8s7~X
85fAw
bhl^7bD
3?PW
$XMQ
rsp@
M.<3
#V`d
"MPpH
gs?.s5
	V8Jt,
]I0Ez
xA^s
.'Kj;PjJ
1SX,
]0 <
?h:*
q1[K@
i+-M7
Bt6I
1^(=h)Gk
 %r.
}6e&<
v)5-MkU
!kFn
,(/M
y~D|h
'W<2G
'^eRL
fM!#
,Vs!)
u%L=O
Wsbw
BE^y
;1ma
{Si.m
<nNE3
wY=9
SNtS;J
s9z5
;NXa[
iwF=A
w*~y
p#H=
ZMKuyj
3Nkj+
te|e
s!1z
^33xO
OcBn
z8[xHF
B7KW
-6*v
Q+BW
M3x?
hFyzr 
d=4R
%puU,
:v[h2E
8w*m
6Bbfqp
bu.C
HeWH
xQ`G
JB1"
R\7f
pUtYU
/3o^
h=!]
bgbeU
VeU%
}	l(
_p8X,
?%G]
	skfB
S1aL
3}Xq
H[eO
lBdt
Cyfy
D"(~
+Y	5QF
	Wv.H
qXx}
\um9
y;a)o
}	0=
VK~2
UP0L
O2g~
w(Xe
RR~	m
Bma#
D{vP
b9'pw
E8~"
TpT#
Mqu$
d.WS
/q@l
MeX6
mI\/-:
`.}a
\A3_
F4z7
vG !
Im7E
-a[[Y
g&Eqt
x1-Q
- .o
GVkA
oxNPE
`JVI
d10/r)
\w'kF
OJvZ
"IV{
p%/?
'X.Ag
S?wPf
 }AH
~/-RT=%
b,0a
^&!>
W19i
+BV'
EALf
5m(4 
JnDZ
MJW/
6w),
_#dS?
YjW%
![+)
u)Sc
UUut
{Q<1
#Y3(
vyHg
_n;Z|)
	7dCt
Pt@-
%cGe
E[B,`
<M# 
{wg6
m-Qm
)T_-E;
k~wYd
~\&6
(+E&
LCg0
:<s$
JuGT0
GAgCIs;
P:/v
uk=8
e1.0^
SQ6G
*m~s
o\*p/
 ]n%D
{Md2
M3)Q
)5RM
Nw+|
w6X<
$vf"k b
>fyS
sj(p+
HpfI
_TE}1
IVC`
^,Nd\
YTs4
JDo o
P{G3
?i`	
8)Pr
h&#/
25K<
X]P4C"E
hIr!Ym
|u~Q
2cn\5
m)?m
a*v,UlO
nkTm
'+SD
12z?P
l	fXe
6p![
*	?w
g4;k9w
A7RZ
e)vF
IU*;
Vwu4"
\h".
tEUrNO
xZDC
nCCnr
Q/da
,Mkr
W<k8^
(3aI
 a~B
*aMw|A5j
d.DOb
_D$a
-!MTJ
y_de
$Dt.d
(?U:
o|yU
"3DUfw`
WB&(t
_CONSOLE
:E0E
N4R:
Yn!DD
?ePVP:s
)+IP
PB'4e
x0F(]
1WeH
?%`g
3e= p
\@9*
=ujP
<z$4
~iTo
)x0S
`1U^
Y#36
~QW%
H%)3
JS( p
;T(!6
XF0u
W.n5&6K
C+wu
r{	Mm
1$:`
;Z|x
%-J@
L)V	
`K[X
H2^KL
DjXt
O`Ki
'$xL
r0<}^P
+$lD
NWP_F
eHV>
XmWO
r@lOhf
GbcFHeb
l7~ZL
w!w4
0"nP
xr	xO
p)U5p
_GM/5
u'FW
S`uo>
N5~z^F
hFRs^
~Mdh^
;)-}z
Pi#_
H6M*
nw|<
$h\\
`<9<
95`<
If+d~U
dIkT
C=@3
k64Yh
>Q\gB
l,%6
>g+Z
	j`(
|:{]}
`\kE
yO2t
Z:mq
N7CO
$-;D
#u8Y
'y	Wn
]Vc3Z<v
!@qD3duN{=
kRZIi
.RV-
!eG4
NpG6
W]Sr
iSl 
N[Bk
y3Ij>2)V
Wpd]N
)#`)[
z Yk
N;$4
jV0I
+QY^
=JpdnOOk
KU^&:
q yP
D=~]
IO,#
[c0U3&
kG+\
(}!+k
w+tV
;kp{
[;Z2
5d^	?dO
c#q(,
.iKE
EV^7T/yRk
DF'y`1
"79k
Z}j+
A$WG
jt& 
\SD 
n.#J
_qk|Q
}Jvh\j)>o_
l.!@
ju#O^
J^<C
k;Fr/u
OUUn}e0D
s~,%f
u2|6F
oe>?
k]QZD
% A@f
MS~h
5`bH
Hj`>
FZr^
IvUdn
Eg!WKN
PL9N
llTp
*AX3C%
{6/6
F.=8
'`Cu
1t^0{X
w2@g
$_E7`
V@[Q
H~),
p/(Xy*
.4p6
ptTP
iwbq	
yG]*:Xt
z_v5
[QvB
:lh,
pDF.
erMt
mYGV
q]pO}
XA}5i
>-KU
ibuv
AGm.
rHbx2
P	\Q"(
fkz4
aXi0;4,7
?tTn
Gz^S
(|6&%
fNTZ
*k}?
/WvgXu
84+!
ju(C
.O.|
Q!C)J
3^A=
ZJ|"
undx.c
8i_@
(c_+W
96-G
jeZL
BQlp
)Hj/
T=#x
RcuIc
b`Re
ZZ^.
>DCY2
X2GFV
9*V*l~9{
rEV$
~n ,
WIE`1
(zspQ
jlhk
$p*<,
VJM*
P=hB
]pro+ 
WX[J
umUBG
U],@fg
BQ4p
{#NL
g<lv
W24)
`$&`	<
%|Pc.
9DX9C3
fwjT
#20%
F\wy
d1+\
H6'H
=L)!
9u/"l
|j,~
Ezm;3#5=
]IjU
M:\v
d5I+U^g
-~&,
gpNp
;8hn
nF4"OD
Qo	i
ve;0Y0
VieY
LN;W
LS}#
rDO"
OnIV
!qeq
"f*{
/3$&
a69o
U\PBS
TY-w5
de:A:
y.| V
lCbvd
8joV
OqSo
Q^ `
r~#bz
P)s}
dL~"
aA$t.
p+g6J
[-bQ]
sZYj
q"%8
Y'Z=
fYm?
y6&fQ
ikL-
0V3xK
S|vB
sv(`Y*
]1#S
fd1>
:{mX
kN-k
ejnF
	15x
+/t]
&I|S9
_I9/Y
{>)\uu
sYWlsM
]-]5+
<u5h
&pqMy
8>i>
YPIQ
$	UC
1`WF
"KM*
-qI=
Jfc5Y\7
SYWn
ktfZ_
	YES
&Ft4
X03s
80Xm
8-]^C
h[!c
cXlTF^@
#sSt
SlVY
='hN
rfT*
f@wG8
Happ
	}l1~
;Ml;
`G!}
T'j75R
R![p
IJW\
A69M
o3+|
#HMV
{9XD
p0o8wp
Cen)r
?9~:
@<+H
'3$>v
]b@!
cF&R
UUlR_
m5jk
8Er?
zK-%);Q
kMF;
>Lii+
WJ-uT\
`q9l
aP,>C0
a(k\
P[MYF4
`$ViH
i]hLf
;h&VlBS
:2AW
	],t
=^{yr;m
&[lYtr6
~wZ_t
"3DUfw`He
_CONSOLE
SOPAL
k-!n_=
f<i}28
hT/|#
kB27
QC1'
9@pLuy
6eyR
'A4Me
(OMZ 
%jZt
|4v	?
I	Rqe
J3huL
-VXk
YaMxYF
l);9g$>
wsG}
)g)i
V}R#
ECYF
N|	{
`#_Z
?~y+
xQgh
HMs#K 
xy4?H
v\fo
dTJKp
IN|`,_A
-KLG%
9b_-
1w'#
#().
	qpaG
C6/+,#u
Y#bd
s'(!Zn
1npU3
AjLUwv
QWIWn
dI{N
BPBI
"$kN
!k p
Np@l
?iZ#
mj8$!
jv%9^y-
zk?o_v
av9K
w&aZ
@I[,]
P/Bd
gJo(
{i`G
RFi,
ULvo
o07p
!dS{
._}%r
sV~P
Ay;Y
.qE)
\Z'd
*BhY
Ms"x=6
hRm<_
\*Ra$
8IJ!
.Kd{
>.Ks
_2#\~
KhIhw
`X9aE<
HBG{
tLB%	
Q2*q
ItK-#
D)y 
$qsT
sX&]
l$oy
;y2;!`
(=Tu
"xB|hQ
F[J&N$
>""CE
K\@G
l)HW=j
@hu'-
Z7]8
D".)
G{Zt
|=)Z
!%&o
V3g~
@7}- 1
b-oo_%
/g)	
5L0o7k
Jxl%
6F;D
r\ r
iDQJ
DD"G
 6{!-a-
H`z^a
<=&!
'Nh_=
gyt1
IS!pQ-I
Dc|EOJ
tqmCo
*mR<
.?|Ug}p
2_IT
xKtVAI21e
ZF\GV	
K+~S
%o/_]
U1lu>
Xi"s
4sB	
GE^a
)= k
%S;v
htl 
n&	H{U@
@Ilm
$M^J
'9%o
~\uU
ZS/oR
-BD!
3GgvE
T31]
]l6z
1-DH
UjB	[d
1s MH
[@)k
2c*)
Dl+o
7KAzsJ
/.mY
zf,bj
+$%&
cVBy
:C`@
kb>s
JyB?{;
F_Xf?
01/(}M
\,dfQ
kM :O
!].[
|Gw=
_)"e
+,tF
I`']
79@i
y'=]
R~1:
t<x2-M
3y,!
@}O@
.S};
mw*2
.g2K&
O)9	m&
Pz:g=
J-Sj
l',j
"$x=
sXDq;G``
u4_!
0@	m
pN9^w
_tHj
h0Ony
eW3{
8	 7fZ
Vk_y
,rh6U
LLTC
o`D@
Bu0!KU
P*X!:
zxOD
SDhi
Buv8E
3Sf^
7bB"
Q^'z
t3fFC
gF'9i
-@(p
Ls;	
N7=bB
M	o8
3Ark
sAzL
 $/A
?-wGP
ght/
yo{C
+rvLV
vE)B
3<{;
pKo{
f.'iiIZ
,<Nc{{
j=%H
w7/a
fT+7
~$&c
bwYx
%r?w
+~2/
;&YK
toU=
~O, M
^4Ftd
xC?w
+hmsX
X<`C
Ni@Q
XPfE
w!6P:
V5]V
GATP<uY
0VW9kG
I@$E&8M
78je
vJGN
>';#
%1PI6
4oT	-
,j\:
25t]
PmGQ
(|%#3#I
2TzB_
;BQ}
0DG)
'y8U?X
gQg+K
VdHS)c
?gbw
n6h*
z:]0
~4Qt
0]B	q
z)BIO
U.[XY
~xj,T
AR154
^ j%
F1]Y
OyG7N
V2q`c>
AcTo
9!#j
iGMZ
M{U#
r][9O?
BpVB#
j `K
-,c~
 ,I<95
.Xh%|9
2H+W
|R,N
\,#m
`1F\
6lcd
GtnX
.nZ_C
HOIZ
oyX\R
N2;K1!
2jU*.
IzMO
wz[#
CfUWo
ZfSo
aW)6
w(|A
C8/@X
6oM<Q
vk"$cJ
5V"y
'\s-JSD
0pW,
5yJe>c\D\G~
}d>;
lMR"Q
zr<{$
@`zX
kFK\
}\6)
,8#K$f.K
*>d.5
J,hW
jJoZ
"3DUfw`
_CONSOLE
OS{8
M]7Z
		{f
riCM
.EIQ
p!D0
)V|V
s2VJ
Zb"6
Pd%&E
-PM8
#mha
`jWFMI9f
\?|,>,a
{k8#y
?|(@
Sgo]r
hW2*
4{]t
o;il
ytQ_
%j;k
neg[y
E%xk
b/wW
f{.	
P;P`(o
H-G.
Rn9m
Yv6>
sx\E
@IsV
4]S8N
|%r	Y
0' $@p
BqI*
f\v&<
$19T
hk3N
;'bV
P	/m
B"!(8>
(!Hc_
NiaLJ
(d\XK
=A$aFtW
82Ar
s%~?P1-
~.{]{
Hf!X
ZJ;S
YF})
sgpp?
_Y[7(
Xeaf
O)0ml
IToC
Z)%c
<iWZng
ZT(8
v0J|
F+@DR
1hcun
gP&Q
7VcAqm
GtEc8
WI}{^!
nrG^
YVys
E:<4
,1w$ll
F(#%
I]a>V
,0y+
FBO_
GpCx
#\T?n
)esR
RihS~SM=
Ax#X(?G7t
H'Q9
-=9M
@rTC
^`Klmw|1Vy
#?Ir
VsfHs
5< ,
GLwt
fbG@Kd
O3C/
I,*5
Lcb6m%_
[."kT
I_dv|f
PcpQC
vN_z$2
;.2`
l; Z
8IR.^A
?u(G]
gxL39
mo8tx
Jm7.
in5q
xR:#
/j~z
oS-pC
Y*75
RqCKe
r4Qw[
)MzK
'M<_r
+w"Y:
]3,R;]
	=PAh"
@#]+
:]Ks
"yx-
_M?k
{,uR&
H(!/)
-AAkJ
)b~.
4{k(
[3ED
IqQf
GH1Z
8,@f
];bJ
co{	
EBq:_
 Pe{~
!y/2|
f6+$
Mm@Zm
[d0~
1kF@
f\Iz
q	vV>L
!p)R
i^L%
Jtqi
0K)pD
?cr/
"(8VOc
,=-9b|
#,`O:
kNo[+
9EO+
ph]6
$Fs>
Q>V#
T/Y_
{o/u
L^r~
Ya,G
~lt5
/_0/
-~Xq
SCOp
:D<e
CR W
}H7eB
eEtj
:\W9
-TCx
s"QDH
3/dM
Ef?;
2/B1<
p}z|
1Ncz
%3Xy
Cj	V
nmyv
1]tH
KapLYJ
!Vd<
brl]%T+$
6Mx	
G'R6
XG/q
F$,V
??#a
Cg&p
EQqe
WbM%
Ny\,
|?U8H
XmH]7
7q.<
WR]FAV:
NP053+
#tMu
*eWZX
SG4G
[ <f/%PR
@v4T.y
1\qQk%
&`r7
.meZ
g['t
Q_P-
}gXmfrQ
$.	{qd
*f+^
BDr)
D,HZ
~KD:
yu	#Zh8hN?
#FHNM
g&ao
6XF-}
nSU&
yy]I
s"O;
G$Nh
]}cF
{ c]
'q;~BV
~	0 R
U@dP*p
S*^w{X
5,>w
_xBe
rEn}l
R_tO3,V
3f%yj
}l#__&~4
C{y9$)
rq	l~
KAHE
)f*9
v:l|c
}^[/
~j1n
`T7mp
a6l~zi
px|3
x/WZ?
E^b+
">628V`(]
)&b:
K>fD
q.T+
z'g4
SO^A
h7 G
d(VY
YOwX,
ZImz
d :\
{%TU|
'ub"
T*q?
f[}e>
X#r4
1ZK'
;Eu0
:40;
&S{]
$v\di
nT]2
7BMWY
Lg0oO
$qH0
9KVd<
	k,n
>Pr(
<o{xv4
kCezJ
17Ys`
|tPz5
XGjk
vWnD{
w?S!
0yM_
(OK	
j}mF
>8e$
m+-D
0u~|
ZOQ.
jq4~
S?\R
zA^$
xbh+
-yYN
Whv5
!94S
#`=}_+
,VZ{
-"Q/
99`X
@ERB/
BU/Eg(
xz:Y
"anM
LG[G
x M0s
\"uO
+ c"S
!OWv
'|	<;
mI"$B
"3DUfw`
_CONSOLE
<@Y"
o),W\
1NDp
qHUS
tnQF
}MCCE
E!^o
J8^3#Z[
q;xS"
(6Bg!ORx
;5CB
F9=&
I}_&sH
!f.r
vq=*
,XJ8	S
tqd 
&[qX
f[Z`
DRLfh
'bdA
	h-:v
 J[s
5l6>*
}	-i2
^Z5H
*?Y@&
P8F2Kg
K^pf
fu'V
J^(Q0
A9L@pm+
v\d*
h/=X
GWJ;	N{$D
9Z$%
TU[_w 
(hx|
8("7
042G5k
lAo=W
0`8o
2UgB
Vku^X
[@6w
cGmC
),`P
"~kT
RgH|
1KEG
CQB`
1<a5PO
 @l*
@TH@A
8ZWr'
YsG:
q:c|8
*5_,
J8)&rS
;+Kn
N%|t
B/g$.
9beBAQS
(NO`
-:p$"(_H
rP[)?
:4ov
|;Nd
=J&!
8]Ne
w`^$P
Z!/6
lTC*PB
MyO+
2tJ5
tV5-
RLlsL
JykH>
`eZX
Gk?R
znwOe
]?aj
E8%-
q?$s
66	xI
!V|d
-J_,
Q Jak-
;4*'
BySSbR
756^
#Vfc
!AWpA
>!Wg
$@DS
o$h@
P/L)P
bs	y
'gZ7D
-r+h
HT;Js6B
Mc</
G\va
U%;eC
7-zQp'
NqchV
s'exu!
rG7|K
&o</
!P:52
$)MQ*
pkmi
#pr@
[%=dt
#uJ`
[<JK
bzLfk
_Y+u
u0\\
@NSB~
A?KO+
{5Xc
{eQJ
 6/][
m*G)
tLhN
jU$X
`vsQ
LkX1
f[Q(.A
,~2U>
Zw"]
/)@.7
'^Qy
dc{*
-Yt7{2,R$
 CDi
mDIf
SRP$
^jQI
_6]	
,D&|43y8?
+@>6
=Y9)
|_cj
RxW&
lM;$
wcbOoa
g\MD
_M@o6R7
&^Iu
zm%*
WseA
APY/
zXaV
!KA?D
aM<*
[d8<
_:.B
Qqk&x
M0Vq*]
:A8N5
%L8[
{CwJ
KjZF
s'B V
h%#i 
-s$?R
''?7
97p+l
oQYm
KT=3Y!
CTV	
Oi6v
WVz5
o{9|
g0/U.
)MvJ\
aRaN
d/UsC
3`m$
`J|5- 
':lll
~T'|
D4HW
{o(]
K	`\
YB\@
6)|m
55?3
B `XF
tJ~o
U(k*
\@$9
6vmhq{%
#17BFD
R>-j
Ib}G
PqO9`
w8'^
u9vzqX
LgYh2
.,!W
LF7P
1-\'
+U\W(
pFpN
Op	D+
?chX
KeaB
Nc9i%
7w|86
M!f`
,+;$f[K
/KBo
0\W:P
q|6N
'3(}
U"YXz
`t}Wl|
H/#mn
e@gX
x@M6[N
?7S>
55m;
\ojO
]L_N
N&DN|
" 74
D}/w
RM~!
uj@Z`$N
L^Cz
+""/
x[aN
*Uhk(
.DRh
z@=m
=lapw
RZjH:7
`9[^
)@v`
\F{0M
~&tI
|a=K
!55E*1
p^NMd)
E&J'
Ek/D
K-T{M
6@MO
|oqw
^]e!
iT5F
5&Zn
CTdT
k\T-
\Gqr"
lq*2
B5~al
;@9du|
IF_R
j^$z
1T}P
%TrV
k0[`d
CP	6
*FEc
|LwD/
rRa{
MQ9P
9NVVy
	h]nI
m	cJ
6.|UA
8oz0
,8gR
dD.|
_=E;
s:+#
!+|&
ZWN^
:2q.
}IE1
Fxm6
RuL'}
ZC:!
6/3fp
jtd2dW
kRWqZ
X0z%
*'8[t
J;uvapRoc
PT8)
!aZ\
<LHl
 p*"J
%<O4q
lGz5
Z_/T
|mI`
d	Fk
xS5s
H6AjR
]gqIA
659e
CvJk
~PaD
&g"I]:<
#3XB
o*$w
D2nV
u&G7
DB_>
@8g5
<	>f
\!'Wv
x=rb
m	aX1
6e\E
UaF,
XY^X
$Sk6S
,bET
 =iz
VZsWNf
1!GL
\&zt
Ehma
<+.k%*
hTbC
{Cee
,0	v
7rB+
u-T\
ik[_8x
	Rm|x
$U!j\BF
KG4H
bk9K
J;?b-o
{y>!~
91vI
&NTg
E8!U
qS_8uQ
0/:vS
0b!g
uPEF
h`Xh^e
L\+;
ZN5!"
_p+e
.5Dl
}xCK
~ScID
&Q	O
'\rh
gdu3Uw
fudB
BWaTq
z$b9
=&/l
pg~9
`M&O
d-i.
sTE@
XTW<
TX`Mc
~UhS
'DlOta
;mm])k;.
k^~z
qa)Q
cpu4Q
)iE"
XVzV
Bj6G
 k)wX
b|51
AQA&
WgES
H<D2
<t)B
W?.@v
Sg_I
N|%}
a@>/
Qkx[e
;//y
Whr*
 <}3
Yt8T
K>/,f
&;\H
dB2>%{0
Uh1g
{Z||;
mf+N<;~
@Tly
YR#"
	xV*<wNiOz
uanS
{+rs
"3DUfw`#
_CONSOLE
X8Pf_
.hDF
]6`4[
ucNH
$Sj.
IxZR6
+'EH
	C0TH
 d/4kgSe
_3]"8:
x&n.
,aF	n
1rII.
w(akM;
(w6B
qSs%
NUTd
Qm0_
&*M=D
f	eK
n7qB
&n`]
pT6+n
~!v? 
^?I I
5m<P
F^7YmvS
%@xz
%_`I
.W)6R
r$3\
$y`u
019p
bR-KY
3y=k
nWEN
A88%*)
B=Qi
".MW
XWJ{_
"vh+
e![W
dp>:m(
czKlP
OR]&.
hP'6E
OU6Q
)fZm
7*)Y[
q*Wj
z5v/
*78+
UxM6
i]Ta
uwb'&
NO[D
A^@m
HhJ^
~5_]i
G7YE]
)+8{0
$U+5
-C*U^j
Ao62C
vjit
aL#v
nPr2F
R6	#
<)#j
bphO
P9\ 
zbBT
NQFU_
	 M3
OxM6
CQy+!v>7
;`Nd
 x9-]z
H/cY
W.t-
~Q5o{(
MU`\
![f[.;
cK	y
MbU	
+fCQ
`fKvt
jyS<u
(O@`
u4hdT
Z;94G
}gb`
GN/?
&yR48P
A3=G
dye8
ni{,P5
_)?Hf#
.~Ow[g
-8DU
B;q	~
-uVy^
{Kt$
1@PU):
;{m,_T
H2a0
-|!%.b6g.
717!J
Cx+B
WEm/
+'W@Gh
^_(x
71	z
%v*J
XL="
]Lt@G
t<C$
C$8d
&klzc
qV[h
tiS	
Ow{:
mY__
[5\3#!S
m-)y
2UC%
<?X?4
I!!'
3T~=1
E>~gM
g8q3
_'kd	
vNA$
K 4y
;#'Ob
LdCfiY
Xn.Ok
ck=t
&|jx
Q}Id.MY
EA.{
!1uus
Spcv{
#M_&
obIv
0J[g19X>
F^5d
IDSY
k1x=
5}h]
 0JttwbHS
!dd|f
$7(1
[L&*
ek7~
zqS0WJ(m
$_0Q
x,4.
{R;y
DrJ7
UHYAHi
RL}1a
SG__
Z(l#>]*O
GLx$
;lsq
4YuM
,"=S
?ER`
F^}Leo
1I,Z
pb<l
gjwR4
Y(eL
%'-qwv
95-O
	\rc
nnl#
3`q$.N
f7	[
-iQB
;GEmc?
t~JN
BF24b5ff
Eu/!\@
}xt;h
}.hT
!U3	
<2`I,%}
2+ZHVf	77c
E{[J
&2t3
<yH9
:8WNn
z4^]
Z|juT7v
TZSLC{
9R+o
10NtWr
%gVpQ
CW|V@I
qKLokQ
Nwb&~
h`M,
HfGO
*\1i
DaWvI
,z91si
1X};
NnS3
nVct&/
Qal$
pOn+
9k\)
#q$_
uqE@
#	FO
8&-?m
<3sJ
JbfU7J
el>[
SXjPN
o@'7
%m$Ye
8"<jm
FKb>O
G0U ^|
'(GS
JNs3
.`Q(M
8"]<6
lIr%rs
H/6)
Ju^W}P
1$y_
`t/\
w)8q
HcX<
3\gx+Y*	
#5N3
hWA2e
/^HsYC
!qQY,
g	`'
z/je
g'p8
v&Q@
!.||
*]xv
074o<
y'en
kz]T
\b3_
pce!
KB(I
oipU
/*^&E
@{Fd
6ibe
Zg&C#
UtWS
?{pv
nsVE<h
"b/]b
a:_%K
D!>Z[K
.o!Q0
\ut?6
=:cZ
h	Rp
ol\A
7RSz 
'SJ_
EyA	5
?~Pp
"EtNG
%gJAlm1d
aZ_}
pDwQ2
<j\&nZ
"3DUfw`Tm
_CONSOLE
MN6Z
8rtk
JdE-%~
U3sL
|j>Z
Rrw+
6JJ7"+
7`[:{qF
Z,Yh
$Yz7Z
!	vj
1rWZu
-384
3"}"s%
E/fap}7,73.
)Gn_
P5n)
wp=ra.b
Y3U(
{mXc
X1WuqxP
Aufcm
em,2&
7v~>
Aedi
!;S2
%X7d
#N=X
[q4t
Ls	u
?42-v
mYt'
)O}L%Y
UVU+H
1Md3
	E*E
]v{MbD
&eAoaW
1tL2%
)*Eu
/U@2^
51={
W/r7
+gX?
|xTnVi1
_I	}w
)-Ln
]QLb
n'p+k
yup=h
(9Ix
P<i<
a29`
;Z?gT
lh0c
>[2H
9sC2qP
1xgs
Sv+?7.
@3FN@
njs:UC
=3)e
%OZb>
f|~A
6,[8
kity8
NYC_$
)). 
16~>
g^Vy0B#
yN$61
,^\z
"!dq=HM`#
yEIR:
RR;B|
!n$Q=
d"7dy
_$'J
N.#wg
\	\h
0w{`
S3)J
LWA'[p
2w8W
x#7^
y/K"
:OUP'
swX3xGM
rV,E
p[x0J
T/z'
PH/lHL
WJL5
FAqjm
\k&V
]e2"B
)7&.
h0JF;J
H/>atg
*3FB
/</J
-:zZ
;nF&kb
v9>_N7
 pEC
rDvI
MwNqX
9q5z
g|72~
EC-z
%Exh
b[iM@
dwF[
zWSeK
(<: 
,+ .y
"s6	
i.vi
\.9r
~9L4
#Av+
Zp4+
ego)
h&s~
g$!"
{n:	
I!~<
)SW@q
P3_/
rjGr
Y! m
=2o\
rGao.
SOi^
*]Hx0:Z
bUH_
07\Ls
X$OM
tIPN
K|Qa
2S#/
Z"`&::
#(]	$k
:.m6
G,Yw
(#uY(
'rrm
LY"r,
	V29Zb
_4>;D
,]R;
{Mee
m./]2
.<5[yr
x^W`V
2'<T4
:~bs
6RK;AD
N{pl
Y}uEg|
KQ?m
2 u]
:Q,Cb
4^cT2`
"Fq}
ytc6
W1@W
|n]j
cKeT
7Er#
{AkA
QTfz
_;'!S/)
]bs3
.Uyc
o(|$\k
;0s4
W<Ec`;
2xHR,n
d$QY
Qlxu
,kv^>w
BnW6
Ff8M.
GlL5
<T#H
Q2Zp
0Z+,
DW5<
VA/(>
k *4h
z7@MM
fJH>
F5R4p-
26IEz
2.oB
[VB/5
N`&8f
V/H 
<^6\pm
!n)_
&-C'|+;u1
SA]F7-
cKM;
4ozf
hB'k
WD[57
!p.WT+
|tP2
q{Xi
LMoE
/9fk
A;(`
lTyr
ue.nt
n8G8
N,UQ
}ZLP
a@)l
M}	[
Dd$6
lISt
qR}.
jr}"
:tp:
Wj{k
Gz>>-
0yr$
e5{|.
r=h2ko
(}*GP
Z)?h
j%Y1
3G)	
6G1dE
T/\oEK)
{5-&
'Y0:4t
 D[L
MEh: e	DFS
,;1/
UFY&
^hW!~
=)yf.
N Zo
||p^=
5vt^O
;K^a
leU&!8k
Sx2v
x]B<
2WA`
NbzH
cOxP?
.9(Qt'
zedx
t|N~
z>@ai
k5UP
s'0*2
q**k
Eq	Hm
*E4=
`lo]d
#*gc=9
1QKF
T g{_M
5|aNd
6u&/
0C0G
:ay^)
*	Re
0h6rf
t%tK
e7&|
d?X{
3G%Q.I-5
+	l3PL
&'IA
=g[B
$mZ2
R/-xi
F!]s
%c(c
8xRq]
+#iy
N{t2o
KrwU
dJLki
=l]!
0(wN
:;}P
[r02
?@j\
]zl(p
_V>Ex
-,sy%
z[d^/
zo7x_
_,<MyH
B+=O
	5\u
"3DUfw`
_CONSOLE
N^9A
*p27
:iT[*
)FWx
7OMX
}PmnU\
lAHf\
GtfF
}q}DEBT
m]ys
^c:WJ$?
:&B!IQ
d*hq
@ZVX
qQCk~
,Dut
j{%^
`:hn
N%"c
$7!I!D
aN	/
n#`G:
1wbjv
t:]\
(h)/[;
r/T3
]=HobZ
9-7-O>
bFgx
<JUN^ "
SHC7
d]EB
5BW&
M${?Ti
 1NY
6lX{
\u3I.
\|'h
K0P0T
4FC.
qwF8-
>F&J
}snQ}
Dc.w
	.V7
C<`QI
zGH{
x9q=
Ef+T
D <7F
]SP'
=^6A
F>j577
`Q8B
xKU%RT#
Uv"b
hZ7}
"j5C
W]"`
@t)Y
L+{BGA
_p[H
 9iL
AsKxM
>iIri
	bM8
BhdFo}
Gq.R
>8Ru
5DE3}A
uR#8X
XECI
@n?haPJ
{/4-
i6Y^
$HW_
/rg}
:<[m
?dZ)}
GZ!+
KRq@
9MQB
cry$
h^@J|
rb*l
,c/Y
W-rBk
BPKl`
?Zc>Q7<
tgq<
+W`*
oy[#
]TNAe
oZpw
HSub
Sb{l
"r#,Z
8$i`#-7*
X1g0
lv7Xf
QbMA
^c)mW1?n
<Tc(1
1[#2s'
2R[a
N0swZ!
:h[Q`H
 0HD
VE2t
nCwe
<	0S
PWf#}
g7te
}%~cB
qt#t
Sx	D
1[Qz
yCOJU
P=(j
HVf/
e:n^^
l@CF
OFW'
$-xI
262JN
H`W]{
H9'_
),<_ 
a[y|
h6lciW
C77	*
_HyR*@
@&7V
zLM*M
1Dc'.
3]-XN
H=V9@
[eO\
N'gKrTr
cAu5g
Qa?<
WWa$
.?T4!\e7
7VD-
I12$
qiI8
-S%$/z
i%gH~
6;yq!
O'v}*
 	@1
f`Vu
q4"h
RUzS
sfHGT
KN6,
Wku'8
I$?T
ef;C
;B9d
A/W94)g
hk B
3,Q}
"bzo
-Nr4L
B06@
~V@Xv
x(JY
-i/%
51<p
-fn	TN
Tn+R
<!7Jq5
]9q$
ql	l
Pq68f?7
2y4]
8^cGS?H9
yb2j
|cWJ
d~RY
'K-e^OW>
zw7"
|B{pM
z#LJ2y
8?N-
c!QN
s{p 8
qDAF
pr-`
,by>
yJ%n
h%jH
0nTb
R2x\
rD|A
GG`~
Qp=3
h{51
Zp]	
/$tu
=)4:Yq) Y
(FS-
:lO:
CG8.
xJHJ
`vOkE
	M{e
J/Uc
X:Np
1]D"
|r[]i
;JL%Q
PM8y
$Db'
tVb{
\@DU
OLs+
}'6L
kK|j
V2uw
1~k.
8'_Y
&R<K
Lk)iX
u*S|M
]O#S
a0ZXu
y(u2
0M2F?
i$m"d
a$RP
t7P4@O
% ?v
eE,W$
3Y9]
7@Bn
:~7R
nn4GP
Z;k4{
fT6[
OBZA
X};$
6,nl
&tVI'`J
,`ZQbX
#2+Mq
eoJh:x(
{M$~
u[9Xx
UXez
e:"kh
b>k*r
#:805
l=$	
ltQ3
,on()7
m*y%t
RuM"x
Y?v~
Z=jL
=fh7xo
3IzU
"+:%
CRtH
c'Ic^
TeBT
-R'=
t?]	'o
?=8rw
$Ly$
|bv$
na+>]
-Z/n
HVC7
32|}
^9Zc
*.2s
s=\Y
|HI{
VTjM
M52'K
"3DUfw`
_CONSOLE
*2bN
hO@y
^0aQ
G(dR
pfO.
t]-9
nw9@\{
Jiq 
8;98i
n"{0,(
<@Xm
&0f^
6t 	A8
>IFvG
?S5[
xZ`^
m5e/
/e;B
.g'Ea
6/qY
T;5x
?jJ 
9"6D
;dx-w
 kCm
SYV^
g!g4#HQ.
QD25
PIbW
5F"E
SlR5>
|zl2
xDn~
r9o8
=jrE
{Ne_
ylu{
8c]H
Eg-I
L(Z1
hgMT
l^^x
wB!z2
d+Q5
?nGqD
,%K`-E
qU6p
I^,j`
C[%f
a`xQL
_\\G
x5s!Q
"PTuj
:{iN
7)NN
	?hy
^OTY
ZVb>
a-<`-
{*o;
,h>&
KvL+
	n|s
5|4%&
a!$DW
A"Pv
XH$u*^B
L68-q
4;izm
i]F4@
AHtr
&FQ:g
{ bH
o%Me
J]+{
&@AP^
,M#	[
=2$5
[mr>
&s!<
ToQT
:O>i
D[J,|
=l9|
-i0z
f6|W
FVI2v
#KU"
%;&T
E!fwZ<
#RtK
Sf3ph
<^gR
-p;aj
78GF
UhIX
r&4W[
8vA7
GtN&
)FR%
[>8D
KjN[
+P#8
m#-[
w'`1s
!&O3OE?3
]edLA|f,
1l%=
^QP.
.zl"2
C#k7
5Ke+n
6=w7
n#"D;
(p]}P]Ur
<U]+}F
		@}[
YQrDU
AlNH
@rS0
(f$c
@l_V}o
PqdO'*
81"A{!
A&HG
|]}l
TnC]
#mQ5
IGsgVH>
W6;"
lDC_
l3fJe
}\Dd
9N&VY
Rtm~
~zsuL
Ikz}p
Q=tE
=P<Ju
V6 %n
"|to1
MFyl0
{M5p
;qiC6Oy4
,t(v
awKo
~Q	[
G?nw
b#VL
gk>vF?
(QU<
~oZ,P
tAy;
>v?n:;
b*^g?
&_I[
'86z
y&A)
oe}*
 *_Q
K(C|
jY[G?#V
VXUx
1Trp
-tA=\tR
pS8acq
Mng|
W'|~
d^$7
tMRs
oB/'
Of[{
Fst:h
=zXG]
i#$v
&#0;
.x/<
L8:`
k,);X
VS kr p
*Ik1g
a"UV
3*9Z
uP[:t
!e	ky /n
5uam
,w,M
tO'P.
wqHB]f
mFQ!
_B'm
kq{{#
ef}B>#
{}_G
K_{4
 =CL
`nzC
H	mZg
Xn/m
TgPjU'V
T'$w'
B>-\!vq
7_=x
/2x(%
sXdn
[tOPT
^LhM
e[UWc
q}^0z
0 ~S
a1v	,
m+^hy
/#oTm
6_>6
(p]rwyQQ$
Zzg#
$ZY]
*l3S
l:fU
0]&L\x
GGFu
:sgZ
F^[9+
\0gk
dtV4
:QeLL
9NF{	Kn2m
cXRI
U}F;
P&R[zaRH4
7LHm!l
tq+`
"-GZyU.
7&=<
ZR"f
x@Rm
ue^(b
8R5zbp
_&u}Qg
4|m`
C;6BB
#4TpXa
{ L([
u&MZ
,} '5
e$0F
g7.ahF
K4%^
+i}se^
O!$PaQ~
6 Sq
)8!>
|]r06
^9v.
)fi4
EJyR
"Sluy
(x4U
<>&O
g*M<
u-uMl
>):	U<
sZSdp
y'X%
21m4
$~},
FNgG
![O(+
QTeE
L6oQ
cG'.]
_-9*
Wke"
5MAk
BBnr
hWt6j
''eZK
\o~/3
U8a	V
tMO(
lB2x
Q,YE
w@O~
sD f
;"?c
*|$E
{^{z1S
*So]Y
cEE=D
q]k*
:Il/
l8fo
k-qnG
C9]n
UU@O
MC"h
	,H6
dteT
<iXeE$@
E[iW
(NW 
`<4X
vf4g^
/Yggk
H{:m:~
{zbk
^+x	<*a
@aFD
B+>$
bRKpO
T+k]
?%\9
~8ah
5LIR
%d\N
O%zG
>P'Rr
"n5il
"3DUfw`
_CONSOLE
P^2aIY
3qPD6n4h	
lc1B
^WYE$
[9x,
\mGhl
[_su
*fE=0[9*P
?.w w
VG4(
ko=o
nA:%
gr	~0wW
zUVA
NRh.
u,Mx
};{m
4o}+
3qe5
[|6&
G6T=
^Lax%
KCAv
h5V?
GL3I]
}( (_
QB%T
LvC;t
IM7y4~
|JTx3
9bhA
@WTC
 h`SM
&005
&!+Fm,o
jn9cMm
6azH
IC.(n
`H[D
K!DB
<R**
F[w1
) u,
6tB3
B&{8'
!F~}
/."C%
#mI;
	}% l
IW%m
?Do~6
w9>vfI
3Z/<_
:T\X
`KCEB
,Gje/
1YXt[ 
"hk		N
w]:U
*=fj6
J5El/9
sKan
`o{YG
Y:@x
ug7JT`
ZjoF
3#19
0~]}
6TY(
},og
tn1eoE
0Cf/
KG=2
2{$u
a8ak
fx3'
=D;ym
0A\Y
"i[H
,i*w
icC"
I+"}
ZK 3
<w4j
PTpI:
wyid
clfi/*k)
Jk2D@
V&Pe
>$EH
\(]=y
r+Zo
=??"
Aq:\
U/0!N
vnH_
Z.dU}
5Q"&
'm_L
LtDI
nt^z*
"SH|
}kc`
/9MG
wPhW
7y[6|t
K4{V
]qz7
j8xa
XW*o
z#7Z
!H.tE
 Vfpcn#
YKx!
gVJIw
2+"@
!=B~
!7z"
tdT~
3/:k
dG7w
0vPW
xRn[
3-Yn_=`
 P/wGR+U+
%nf'
eA$I
qS$$fQE*
$r^!
%u,|
7f,vv
]oM^
z3(aR
0F;s
eJR."
4~k|
j(wI
58}+O[
j:e[
N@4 
1srR`%
sh)^
0gM	
j! k
%iyc
JLF8
A8e%/c
sRfK
Z,X*@
Vxbgb
w06lfM
EJ/&2
9bO+1
(r0[
pz~i
M*^l
~P)%
Ql^H
2Qr	
KnlE\jJ
/720`]?
;6v7
ogHS
}L?,
hwt,
h)O&O
NX9H<
LI*ry
&bBjd
0|G.S
uQ1,(8S
7le>
}f~e
&%q8Th
8?Ks2
M/SB
QQS2T
DPlP{
;sc2
/]>+
v0q'S
-~-q
{6q$
lh?JM#
cKkG
nv\=
%z"c
M@7F%
L/Go
vOAB
_fHp
g&bv
mlJ*
>zGb
K^JN
u44,X
A_fm
Br.2:
OOBnU2
h!;v
Dd(v
j#``d
 Hdy[j
r'F1
r]0V
RN!4}c_W
aj[j%
dE	nZ:
E0wo
Jd>Oa
][6O
9+[Qb
mr_#1
t	`iJ
#9,C
Z,h8
Y9u!Q
sxL:
0[o.
j*I~Glxlf
0I/9
qVEW
-_E]
p9mQ<
i/qG
 kmO
~}'Q
2D~|
<=|]f0(H
19z<
tvUJ%2
>h,G
~.Dq
S-;i
!-TW
s,K/
)6A41
e-B!
GzB4
N`Lx sL
[ Gfu
":*_
>sxZ
<@v@
iE).o
Ec"a
*^XK
&/7[O
O#C8
ld,~
)1'l
@sqe
3$7d
C]IB
#2CFV
,4e$nm$
| sq
Dnn*
T-/g0
vln	
~W\F,u$ \
AaZ-
4faw6q
Y0sg:
m::=
Hgk|7
GK3A
dR-d
,`?A
Geh\
)Kg}+
Z;*FH
[c82
[ejl
N#R-_
.poY
e1dcT6
0'SQ"
mHJ	
CV2$[/
A+5{
we_~
%Z7-
oR)(^u
HV&&WC?t@,
Otj+
x+ie~
tF: 
LyhuYK
"a~DZ
Ry=1
IZpI
@ixX
W"$e
&R\Z
mfv<<nQ
~	k:
ZK[V
vJ-W%
y&vYG,
cnGhT
Y:xX
\D&\
`H% 
ClUO
Hgkr
rU`]
:ai+
M6sK
z#9q
p3u!
nm=@
vKe_dg
*`h0|UD2Zc+
A=54$p
gA_ERY
"3DUfw`}
_CONSOLE
6%QY
7UKB
K7(y
G8tF
NU;P#
MQoA
p5t=
FIDB
IM,6JR
MeB1/
1I!2P
j\]^
lKV\HJ<
lKs4
&E{g
5rvR
>e=4$V
@s[%X
E<r(
;i^lWVg
Or;z
x\)E
I#2+S
o_pV
zKE/
(X3v
vq	U
rPA0
!^[T
klp4@IL
mK,x
O28r
<5?Z
zq"n
vkbQ
>)s'3
hr;S
7oUV
r\u=
s>N]
<bn2f
:%!n
G(GU
RMi^7
ca}1%
=qz)w
 6 s$
7=Wu
CxLx
}kgk
)jzE^
gW:x;
?&=_=D
?>NA
7O>[
kD]En
8CEwH
m"[O8
	,Xm
1_	X
QuDA
|~zEr:
33"i7
cTPP
*,5ni
LEB3
agJ.
_5z!
e%";
x^F>
wtE'
3~j-
e`Tv
 Cn;c
]jz4
H'Xi'
4$2?
tMoSn+
[w\-
QYNo{
'YHw
|T^`
QAu<
BuL{`
_i]o
#5F#
l1X>Y
Fp&9
5VLx
@+Oi
.|pl
5j!`;
w(n:
^2D}
M$]H
-:ADP
G^hJ/
H7	U
``(D
PH2=$
jkM;
;(Rv
"*r|
:rN:hM
HXLl
fzDr
7/ *H
Es*%T
~d@2
Ry&!A
%n'L
E$\Y
c:nZ$
V(t 
[j=p
s?Mq
&#2n9
FB	'
P,iZ
%EDS
8_27~	+
-J^TU2
9+	d
MCH=
aD/I
XECq
4'Z#
>g:^
'g!p
=r6!m
[ :o
jo!M
]6w9zE
U5%|.
'_`4<
\.Vn
5FLhLOM
W,UCA
Pt^F
y086
`E)K
J5m?
b_05
d`^c
tRc;O
/}4B
i,j%
17sf
!KW#
$HfV
j,!|
Sf&O97
b"Ct
/w9yD
) ]G
+AP|
;0A}H
vTE`
3c_.
al?-zO
!T4=
;gB5
13QO4	
dP;L
f	bb
U<&G
!|.r
~v^>+
`WiT9
=$;ce
ON83
STol
t:a.
9n4o
Wt~,
.VjY
@*Af
po@u
Qs5Va
Gv>o
^HY.
0_p{ws
ol+:
[G`O~B
H [T
`<AP
Yrt3
?s}Y
D0;Ev
tM5F
!:.(
@4Z<r
Vvy|
HAmD
+(8x;
{b_T
%@hU:
 Y.~
uC#H
M'0O=|
:yrX
s|8h0
eYuC
(Y]xS
tn{`|i1A
@gk8q
vGFx
Z6y{Jp$
O.%I
	e5K
i=b~
cyhV
`5 9
x)w%
W#P	
!zY0
[fK)&
-n~S
~%\E
z4gL^k
?!h9;)W
N	c4
\_[7
[ P];
ueQ'
+!`Y3
mR5	
Yfx2
f,.XB
LC"Eu
Uma>
:3SpE
D##`
00K+O
v?8]
hr9(
C8{K="F
p6'q
^)1{
X%]T
Bev3	
iw9x
)	3<
@-D!
t3xl
gDG1
w,Y 
zFz"jxn
$N&5@S
2*H7
D@`8
~inr
J}X4
8><_b
YGjv
/eD\
=2LkFD
rKaEP
;cwN
H+2G
%6r?|
[uVXo
6R-#
M^"Qz
FVf[
N;b:
`>iQ
9/6# 
+BZW
c0?i\w
)f)nVH
%L4-
w0Bl
[3NM
|j<(
wEcM
B8a6
pNUi
1ODo
YhKI<
oFWqL
ecWvu
@%Mx
:gF%
#EU$Q
0C7b{
>S=J
-/rY 
|#x`v
37~]T
_NQ'V-
3cIJ
{]q%
1tZBY
+/dOd*
kTo`JH
vQjy!
JOf/
h7PV
p"Siy
	A15<
+_b#R
>C	^)
1WDO^Z)
,<	!K?
h<7O
9BR\
!bM178
j#g(3
f]`^
4(Mr
W2W]
jIjt
PIlW@
89GF~	AcZK
l>=lN
||]Y
!.|%"
:!?h
%-Uk2*
FV?L\
?*jc
Jc1B
'-^z
;=5^D;
+]Yc
7>Shm
R3Qtw
x>rr>
?lD(
r`>[7&
IIV%C
1_1|
k@ylGLV8F
"3DUfw`
_CONSOLE
O]3'
]/$8
$8S$
	}j_
fgJ7)
eGAu4
N}0eG3
AwDB
Lh&g}
o/[B
0D>`
-=>."p8
4J(/A
!j$0Z
P[v]
KYy y1;
9R>M
@nF{
A*k/_
Z~-5u
 6HpY
C2@[/
U{2=
^#	 
45PMp\**&h
gKX4A
+yyL
0RKdM
sdgH6
%N+(iY
/_C8
vbk[
A1!|1
[h@L
m81UT
H5zq
Hzq,<O
[q\	](
5{8z
ME^@
_\zhO
@M:QTj
L--3
Y$Ts
%AL~u
Kkj7*
ZoDi
:\Yf
K/	wc
L)km8
.yN=
UvQ'
S_SW2p; 
bsr#
B]:h
gT$ 
C!xS
?"pZ
%r&|6[*^
HCyt
i	)h
2U~s
WVx{Q
>~o`j/#
Y"*z'
VW/p
}_\O
^')>
emja
joAg
>E4o
lm4$
76i^uJ
=+fp`3
_seN c
[t|T
JXsG
;(SD
AH`l
Lw_A
'YeZ`&j
}qycU
ld$`
Hz*VXY
Uxw#
mqpB1\n
oX+y
D/3)U
6'k_
kS%2
oG|3
 =O5$
`t-Q
F%*~y
)]Jz
zqAP
&m0W
~~#"K5
L)Yn
LDFS1
#Wof6
c]~\:
xQ7R
4dV,
s04|
ql\:/'5
'nlv`
ONZvP
N|J[
&/h 
qOCn
&,(F=
i7Z%
W40-
&'f,;x
l*D/
RFA~
GBQ]
@ &T
A^,XL
19e&
qbu@
>x0i
8=i`B
<^KM
6@h(1g.
8?u/
=<R.
62$[0
Q#9E
At8z
U(!B
MB{Ii;X
f%e]
"]C(
]s`E_
w4}\
9JD|
*wBk
LEYBq
yjot
j2>^
[P'l
{`@M~'r
b <q
T	Qh
OcX5
2)|\KES
3U@jz
2Ch+=#
-u:k
/BA;
(rDm
]"%-
qP0iwS0
S	ao
5Y ]
-/o-
s_R)>
r1R[e=zhn!
"<PL'(&
PW;D
m=Q/o
;c?8
Q	O3
(c0Y?+
cHlr
z>g&
ga!}
;}"/t
)b]T;
{Z(|
C%TR
|gMF
Hh9X><
HnZ;'@
3POh
JtjE
qF20Lv
x~g0G
"1"Fh
XKybi
J)xc
v~[X
`!~Z
~P|Yq,
UoOC
{rjK
iKUY
`F! w
K]Z&p
1a2$
k@wh
E(nHrs
zwlWm
fQ\_
`=A9^
cvT;
tK$M
h~,E
 SEH
rT-.
n)"?
6=22
df//
Y`OX
D9%@
v_O=
X`F=u
*xry#
wz_s
R*2=
'Hya
H>4F
w>OpA
R0-a
E5)5oP
?Qt/
<Qi\1
Kep#
	AMb6
xuyh
p@vS
D?XVh
>hEr
\C<W
QN 1
Q9&>
_,Er
Mah48v
JQmq
%O	@
b1t5*8xg{
(!4rd
2F8hR
kwdc
4euk
((FZpH2
KI~ST
"S|c
8A~7
K/^3G
U$|?q
^f!,|*
KNWK
#)KQ
\0t?zRV
M(Z<v
"g*PR
0}c5
2*|<
yszb
nNWkvC
D*|i#8
o&4S_
Q)A98
$JB#
/RcSu_8oF;$n
pug:
<e*%\M$'
mVDU
-Ql|).)I
7t)7
hnGV
w]I;qQ
.J(_
WBr-^K
)Z!B
Tf5`
(NAC
#0 a
kDl5F
PHj6
*+?&\
J [1[
toV=
!Hq_
>0{Y4(Uh
k'@N
<Y	I
wMb!|
[Eg5
j`$d
A0%5
5\Rb
M?=>
f`>	
<\|^ov
<*gk'
n?f}
iz #
Yn_Q
[z&B
J6.X)
[-h`
VYUc
WR7o(
Z@P*x
>3<P
8KS:
kjVO
PG1D
{=!H
g)gPa
byzN
b<X!#
rxkA
i$/Y
$opj
&b~=
twYU
\'u|
i=k4
0]Cm
M-xt
^{+d
H;[A
7l [3
#hemk
B>ho
i{`2Ul
Gh5 
z?}"
"3DUfw`gev5
_CONSOLE
ec)_d|
zr#B
q5w5
Lx$Y
WU h
rvLRc
-~mo
?Mpgs
Md:\
R1Rb
$KGr>
L{0e
 Mw'
/h![z
_v(j
n1<r
Ayrz
G$@b
|%I@
!S&"
O/B,?
Ctj9m
Vnbn
K2+1`j
JZbnU`\
F!K$
_*mQ
`Wp2
oo#a
er%;
`JCU%
U//jw
tJD[
PhrV
#BVT
EU"+
8"18
E5v61G
;Oa6H
>Y\N1
j:%u&(8
fTgR
J|[o4
S$!?
y5\t
t)JF9
$d)>
a<:!
H_(U%
~U1I
^zBd
#fs&QE:$
_"vA)
=zxX}
=/G 
Dt~=
?)~a
S7mD
Nxdc
B^rc?
e_fU
E &dmE2
y@wv
zJoc]w
W?}Zi@
#/F6
4];-
bo#E
@19v?
FJZLdo
%%s	
=j_ K
 $RO
)vD_
^!%:
{pHdS
k/NN
bd0)
`he4f
vhG|
4yy,s
vX!*
0iOkU
JT;'7J^tv_m
"	s~
=<Pc
Rc|A
EN]A
*zPK
1OeB!|x
|Gge
Iaa+9
$N%>
Jpugz
1ke;
LQ'iB
v1SD
<Mmo
.d!t
XRt5O9
'aC	
Sq$u
MyYP
~BH_
4F`B
o|M/
p(U(
	;yqp.al
n"`L
lL6@
6H#q
/-Cr
]vL[
 S'S
$j:L
W6CC
kW2p|
&j&0
71XTR
7d~?
8@WK
]u3I
?5K-
?m!-]
Ixjd
Fs~Y
!7	^Gv
=OGrSP
QMi?
bDv&Z~
d+RDU
 KJx
r+EE{
n#a#4
`}v5`G
{27j=
|^N6,
THYD
Uq%[@J
YiLM
IL5\Fu
jn>T
t#8nn
q2"[
w-}"Y
-t`L
@u"q
:%qK
/c7v
3*Zl
: fY
Wshd
y9!l+*
@44'
Ux~]
]7c`'
*1\4Z
qpU/,j
-Xu-
z	v2
EA!*H
}OK**Z!S
Py5=}
9L= 
Ry2O]
=d?!
	8fP
9taR#W
R3U=
	j?!
e3..
.<hAT
HZ4.:
#1|iQ
t)ma
_tE?u
yD6F
miG!Ir
GB~_
&Q(]=
pkne
7M)a
v?zP
mJ)Z
I()9yY
CLK~
b1"80
V[}3;
SRX)
}&0	
@qob
Koy+m|
T`_/
|j62
=|z!W
aRSD
R$6-
\%?r
,s(G
fH*z
C@/$
q`Wx
n4*P
,,0t
Vn&>!}k
q4g(
WR`5
GCSv
~x?p
3[c,~
7@G<
UzM	
w:sm
L}.A
pU#~
Ev a
_N>u2
o.:s
YrN+
@]4j
	'a8
_j>PU;y
\sJ,])*$
P4FL
zS6g
@"-.
ulX"pb&
8|9X
Mx5]
WCT>
?pl%
Wx~ @
vzoC&|
7>f/
rZ3z
w!t'U
EyPT
8BLtx
K}C'#
MrJ7
8|(`
dYBea
mM/K
'CD)
YVcO
(Zk4
7r^:|
F?/X$
|@~aP	
MDUb
l582
k	<h)
JkKC
.v'f
x[PG
Gw76$
W_};\
af06
alUx,pO
D%pX
	I/.
)}6Ac
`?omjzA
eM7&0
F5T L&
o+t0
I}dh
|;|9
o=F"%?<
(zsOG
.CIr=
oHSkh
~^<8
	=Hr
"P(~
>byo
@$#A
q8;%=
dlNi
UPZP
hX?^
#j[-
51Hq!
g)9{
Uj}kp
^xN!.A
r`	p
EXvrwka
5X{ER
d:H	
Ao}=
.^=-
=mZNu
]|#/
zK* 
[=v~
qz]>i
{8IB5
j&t`v
xhBa
zb.6
tdK!
VQ*@
"3DUfw`
_CONSOLE
y6Q6m
pCip
P|=]
p;5	Ur
`yL"@
F<R3
m9n_
</j(
CuSV
U)a 
*.+D
.n|e
"V	N5=
l ku
\K$9
&Fn+
2W\;/
vufE
:! Ly
Vxkr
JGSWqI$R
LpXx
qUwgxWS^
ent+~(
2MV.
57[.[	
:8fPI
w[(mH
o:@F8V
v9(TG`
$1hB
EGXh
0NbW
qN{A>4
}^F/\
@{6]M
ebJJ
waux
bbfZI
^D'@Q
1T^-
B7]F&
P^`@~
d	HgY
45zB
<2XO
@$WT
Sel0
dJ`i8m
eRAN
+`}XB
!E7D
y`vzNR
g7dU
GWB.0
q6^AT
K&\i'
C-Fq
{!A#e
PDo}
p)h"
Hp	vI
<c?A
G6!0
90B}
Hd:?6
Ie"_
1SizUY
UxQ%
oFUL
\5,i
cOr{
	6\3
g4	&
*Vb!
H]GDc
:VK"
m	k:
4%^F
=.EH{a-
Z>53(4
w9'Yx[\xc
K3}5
F=X2
/_q0
x/_2Q:8H:u
bsike
J]g}"
wF{q
7y8"
l{@xF
r447
%	+)
G2'A
3R2`
f SSSq
q0hb
7)'/
H`=\]
W2mf
6I'3
_Y"G
JB|G
uV(Q_
]OJ~
4q0 
>	&#11l
T~1Ls
G?	cR+
[;6L
,rJ_
>'R(h
hm67}BB2j:
	S<,1J
wMIy_
}Aw\G	w
/`$b[d
AWx}
B5(:
-JS`V0A
I9(gp
EzQG
:arO
m2(f
Ves6
|])b
}eO4
[bDK
y&JU
 'QD
Qu;(
m`l1
"SGF
1)] 
JT'I
,^Cm[@
0I(+
Uu,V
K,)c&T
wJ>Mjwa
nP<,8
e]8d`kU
9q9[
~O	C
iNF!
c-8X
qu.d`
]@ w
SFW_O
UKD6
aK~@p
?gj2
bV9z
!ey+O
@ARI
 XTL
2c\W
BiWlE
(qX'
956kT
I ?u
8aY{
0:w+
^Dcf
uSu!*
WEjVZI
MQ`Mn
V*%d
6*"s
wDxe
O	5,C
P.@%
p$6`Zk
ct/2
	'JS
PnJ-
0.Q	}
n{d0T
.@'~\%?j
4mq)J
n`nE
w+_?
B0 U
H4|6
\}-E
,iM,1
'7ZS>(
ZH@1F
c?2`
 kw1
nKeg
c-8j
=2E6
\(U3
qdu 
qq#;X
BI:.
4%ah
~{sOl
`h^Wme/J
{6`@
X,B@[
'	r@LGP
rjIC
{%b$
)KoWl
'QI.
U(0KF
BB~(
Eq:^
!KhqX>
(jmvO+s
`8^C
Chr4
'bMZ
WMBZ
} YK
+"3`J
?9g3z
o!wH
|WD 
Eyn)(
7<	v
CX)E
t#UV
+!RE
VOU`A
2_fIN/
JJ$W
#{">
c?Fa
uhG"j
n9&-
QZ<6.
lYaB
PU$m
AhP:
9gWP
)	9%
W*C.
>w*C
<"[HB,P
z^q6E
ku\C
U^$F
Qx3s3
y2	YC
yU3T(
3aW7
AG\q
AChs
BW`sV
9ej4
!*v4
8{AB
PBU.
QQ.A)\^
%	8w
(>h'%0
t*HB`
RWydC@8
NsC7
Y.z'Zx)
N3f~
Qv}Kl
TFkl
|hP|/
ls,q
Eu7%-oZ)	
Ko2A
	Eh}
d *Ec
p&/e
MiUe
aBui
E%r@
m9C6x
D\v+
mWr*
OjDM
\?|q>
JW=}
\#T,
O?gsr
aOJ2
)`xG
Xw>,
eG`Q
	/Bo
uZT9
<ij+
wqMcq
IQ8q=n
0g&wj
b[&i8
*CE=}
a?Cn
XeW9
\7[i
Kt)efC
:KO"
~5h)S<.
_#D]
a1pN
'/M.
$Ps5
h\]i
6?rB
ElL"Y
9L_	U-3
5$\&Kg
2uC)g
 a^(
"4XEgpr
(INU%
EhrS
OL$>
\X6[`
e1	C
~LHe
IOq-
|1K(:
PB{s
?Bc)
WejyC
4(1AW{
6+yW
og?.~
,1;l
{pJ}CZp
CZ$*o
t'vD
"NI2
>FH7
ZOz&
F_.5#e
IZKvT?
,5E.
`q-8
!e~i
EQG\
QVmr
tP&(
;9D*
 a;+
6zWS
GOm8
&82y
n"a^k
,zp,
+vB1
webmB
t@,M
Lavf56.25.101WA
Lavf56.25.101s
V_VP8
'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'8{'.
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585473026
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
'g)i
"3DUfw`Sz`
_CONSOLE
g81E
RGVd"
]q	&
h9B7
-XB9
&_(&A
"1`[
]2sm
/N_>
,-U-
)^=:
#8# S
/qI8
%m;H
 Hfl
f;TB
T0.$
W1W{ 
f_6TQ
-%|\3
j;k(
cgFp
|Ctp
YV~~
>BHJ
:qyA
P*os
;+dJ
-a#e
dUxg\
OqkZ1
JLDN];
EaHZ
iv]F
Z!?-.s
>>f]%L)
dB^0m"
qa,c
PwTw
G~o*
/tB0>
b#([
ueQc
~[%tk
Pf3[s
s|<C
\v&a
ItM*
`^+w
G6lF
	0G	
BO`k|
BrB[
S_t@
#zVK
hY6]
wY!{8
/CV|!xF
/<E&@
vQa4t0.
ifX"
l Xb
;/f.
m`a+
!v8?
3D}Y#4
>s}'
EC~L
E.k%hn
JLU8A
oR?a=7n
_Ph-
+BXr1
P@g]n
uUY<
d&gU
9GYM
7U<(
`^O&
C0(_@
OwLO.
)2o#
;1DS
fw\l
G#!vS
b*H<
WsNu
>\sLG
A1h8
>%bw8$
m<`k
~ @jL
uYtPToA
j[@A`H
CH%/
r9kz
:Ca1z
uEB]G
x@z#9cN
r	wt=
v;A0
t*pm
&Mp_
oiy>
f7^3
W4dn
k@Ys
Ng?!
$bv]5
/Z"No
k]8?
lN,;
t%N?CA
J&Eo
5]kN
X +@
v$cH
F?^%B
l)|iX
W!D 7
D;tY
m{M!%Hd
{Q9Rk
blrU
m\wr
Gf],
@)GK
%fbz
)JV]
d5m ;
wD-W
W-<^
./D;
.Smz
@Oi`
S<MQ
M'A&
_qTT
Bh;u
([8s
o^|u
\j^{
=w(9
uq6z
7#77
w*x{v
}-<iX?LTa
"3`$K,#
N!EOA
!tf~~
y#AB$
xs{`~9l=
YD<MC+
_4+(
y=?m\tmjX
+!J]6o
k{s"
0&b} 
NX%e
"1MV
]c1	
ooAR:<
4#,4
gkXH5
GYkL
TykO
YkR*
,Nm(
b5e5
V|Ko
hLWg
>	DO
Jv82
4F=G
]m{V
wtt}
+k&w
Mb;{|
5e#!
q^SX
<"Rqe2)L!G
0Yr7
^`|,
]D,N
- =/
AC2sSx
>V	c
*&3y
`?LtC
}4a5
hTfQ
"Lj=;
*N0{
.{V5
QtV60
e	T>j'Hm
D rU
au"L
6;,|j
q~zB
*pGL
;'V1
-9eG
xm;{aM
o\="DT9^Efu
F9Ido
B+MN
{2v5K
xDA)
7&CD
3_'j
Uj}E
T!7]
3,lY
>. x:
doi-b
4=SS
V4)g
icB0
 }*u 
Z<|b
QEeJ
;#EQ
COBn
CQ9!\
ak&Y-d
zmZ	
r:s>
fBk+
~yX=d
s<4P
X7,a
?x:!
b>,%
\9Ce
d"5l
j@;sh,
ubQn
ECNnG
l@1P:
$KO;
nNH'
$@#U~dC
"9Lk
J2Em%
mg8uj
duge
;Py2Cf_
7Gm)
C I|
\IvI
_-h}
R,<&
c(~^
uYX}
,t2E*
2`k5
A$Xl
tF};
+N|{
w|*^~
k^#u
tF#I
:c57
 )S	
)ns+Z
1^	t
@:aI
b19&}m
)9v?2l
VRsS
]F4Ul
H<{,
myiF
H0)"
Jw5;
taA@
5XdZvW
I}yw
^;s{
^*8K
I"%A2
2iCku
SqGG_c
f]pBu
W:TY
ETbe
D=*a
wJnz
{vi 
0r3g!
.R N
E1~N_
AETt
0aCz
A.A,LVo
F8og<
U_/>
P,	h
w3<p
Ea	wC
?:qy
2p{,B
Q`X\
A11Iu
knK+G
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585473926
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585475126
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
"3DUfw`
_CONSOLE
b3[N
&z[}
fdA$
Q{D@
`Qh{
A5eV
(S{N
3p~O
qd)I
nhZX
UI#A
}47N0>
Ft2T
y"]C
pcxe
%-,\H
4<.(
A1}Y
"o	Xu
~{	e+
n>[d
%6mYDwg$/4
]3/X
gja]
KW f 
)3dC3
kL5]
Km\^
UP~1
!k2k
7Rov
:l`O
yF#v
Y'Yv
#Txs
<r1g
X41y
qZ1Z[|>
V{kgt2D
e>*8
EJAgu
 3QW
1Gt\
Qy+e
{'.2
fy*<P
9H5b)
G#MD<*k
SV@I
5F\,
I@PR
8iDZ;L
;,[q
cvl RV%
+Z+);
R8^$
g*]&
iQ)SGWF
"3DUfw`
_CONSOLE
8s%[
U '!
p)(Q
'$q!c
'V{r4
E^^Km
1y^(P
	Gv&
IxC^
![9l
[4wL
)ZI[
NytO3I5
(EAm{
5(05Q
3g.R e
V	l?
w+EXs
gI_A
pYQk
xj+z
D|$	q
T(.P
Cn!mS
OY=s
D,?s
 '2	_4
z^DZm#
YM94Q
uG&e
ui(/
P?"T
TKOB*=,
AgY&j
pR/<
o8um
GdIo
@1u7/
]@,dA
]t8E
Ho7\
8;?H
m/ou
Q:n"
vBm=w
}!SIk
^K;z@
+3wf
_3(J
zAl3sA
:dHS
MAQo
tZ#W
M=4`
qN	k
YcDN
AX|S<
UhC0
"-Dyi
1".PQ
~-^.
/Z-[
px;:4
%+n"c
]Ry'"
%bv9A
Hk_({
a(KU7m
M/tCt
T*0Q
zEQ7
r'?2y
/%#U
_bJa
Ie_/
3@>6
{!,L
zGc}
ayuZ
*I)D
L5Sl\>LV
@'@[?
[Lo{\O)
w&t>{-
dTI5M
XD!t?
S_Q3
4SS0	
$*E>z
[$yF
lCH[
{c3{
n7LXZ
BKp,
g}^l<A
_?CS
M<2	
CkB=
;.dv/
B^:J
lR'z
d6Yb
'wa^v
oO--
jEB,
^e$q
Da#Z1
%0R+Y
lpJ\
)Y08
V@<x
!xg9
dnX2
<Ot[
^SCA
H?b~
&7vp`z
mJ`o
x4\G
j0:H
:N3!
!k;b
zG^	
p) <m
 	Sw
478M
hNJt
8(,E
.|*@
6F-6
'>U;
cCSJ
Z3,+
!5fC/=
FF#q^U@loI
	h?d
k1]*
Si{bj
BF(d
*]3U
)7`d
`%+e
BG,FVm
.QeM
]8hZ
C2d;
tqYi
 1<z
_By>ms
<Ks_M
zo\[&
:}8m
i6%1
.:L3
@'Mw
B_Qr
s`ouy6
w&vS
iH>S
v~`c
(+b%
[aE@
I-Zs8
]xFy
1;ju
}K`+
PX&ky/
t'	q8
@:'F
9GM%
YYo^u
}T5K
.j%[
0aUB
fXD.
>@a9
)Cx/
#dv6%
Qi t
gytKx
g[l6
!]pf9
3N~nl
<W3.O
ML}Q
~))X
|Ee_sR
FSpx
]:KL\S
U_'t
mPdt
%% i}
Sse7I
(Dyo
*{_5
}.N=W
w@cq
g J`
3+nb
!R))3
<k5P
cVg:k
ez|"
,G=6
*V,4
z|8z16
N"RAQp"6
hXv`{_I
1a':
UB,^
iAjp
d	1N
	LC8KL
AxS	
nv</?
6B`I
xi`GhU
E5QG
sO?,v
)!!r}
4?KD;
+u;L
?UG&
M dtX
Uzf~{T1
:):H
C5_G
t2^~(_V{
0~%h8"
d	qO$;
*+#]
EUp@m
!HVJ
aRCNL
;O`j^
Sp7|E$
]&wM
(m9m
fH:&
cVF~&C#
t%G4F
Y="p}B
HN..	
@h!,
-ZLM
H3Xi+)
Qbn4
U0zDO
Gdlg
$CSC
Ku%gJ
g5 ]
WC_jw
Y= z
x2,0
a6P1b
I&oC
[{[_m
{>0m
HOay
0unx
 W|l
[<fw
>6_v
7*G,
)u+h
"!KV
s?:B0~
Y=Z3*
??vq?
^LK/
Pow&
?79^
U&1.
cso?
lY6s
F<Xa
r9_K
2cA/
a{Bh=
$fI(
	So	
kJ'3
/nE'j*
.dBD
~ebop
8|?QJz"
#G-5!oF
k(`x
\#Qn
)Ms/
d.]-
_tlw
v<Dx
V&$V
YGWY}
5=/J
P$/tmp/arduino_build_383460/sketch/app_httpd.cpp.o: \
 /tmp/arduino_build_383460/sketch/app_httpd.cpp \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp_http_server/esp_http_server.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/_ansi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/newlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/ieeefp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/features.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core-isa.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/cdefs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/_default_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/reent.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/_ansi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/lock.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/sched.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/stdio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/string.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/string.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/FreeRTOS.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdint.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/_intsup.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/config/sdkconfig.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/hal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtensa-versions.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core-matmap.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/tie.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/system.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_context.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/corebits.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime-frames.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/stdlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/alloca.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/ets_sys.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_assert.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/assert.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/projdefs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/deprecated_definitions.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portmacro.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/specreg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_crosscore_int.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_timer.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_err.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/heap/esp_heap_caps.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/heap/multi_heap.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc_memory_layout.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_attr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portbenchmark.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/mpu_wrappers.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_system.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_sleep.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_struct.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/rtc_io_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/io_mux_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_sig_map.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_pins.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_intr_alloc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_periph.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/touch_pad.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_intr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/ets_sys.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_api.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/touch_channel.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/task.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/limits.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/list.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/nghttp/http_parser.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/esp_camera.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/ledc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/periph_ctrl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/dport_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/dport_access.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_dport_access.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/uart_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/periph_defs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/sensor.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/img_converters.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/img_converters.h \
 /tmp/arduino_build_383460/sketch/camera_index.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Arduino.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/inttypes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/semphr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/queue.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/math.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-log.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/log/esp_log.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/log/esp_log_internal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-matrix.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-uart.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-touch.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-dac.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-adc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-spi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-i2c.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/event_groups.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/timers.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/task.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-ledc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-rmt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-sigmadelta.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-timer.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-bt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-psram.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-cpu.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp8266-compat.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/stdlib_noniso.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/binary.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WCharacter.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WString.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/pgmspace.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Stream.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Print.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Printable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/IPAddress.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WString.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Printable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Client.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Server.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Udp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Stream.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/IPAddress.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/HardwareSerial.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Esp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/variants/esp32/pins_arduino.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/fb_gfx/fb_gfx.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp-face/fd_forward.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp-face/image_util.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp-face/mtmn.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp-face/dl_lib_matrix3d.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp-face/dl_lib_matrix3dq.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp-face/fr_forward.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp-face/frmn.h
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585476026
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
  "additionalFiles": "..,..,..,..,..,..,..",
  "builtInLibrariesFolders": "/home/inverse/arduino-1.8.12/libraries",
  "builtInToolsFolders": "/home/inverse/arduino-1.8.12/tools-builder,/home/inverse/arduino-1.8.12/hardware/tools/avr,/home/inverse/.arduino15/packages",
  "customBuildProperties": "build.warn_data_percentage=75,runtime.tools.mkspiffs.path=/home/inverse/.arduino15/packages/esp32/tools/mkspiffs/0.2.3,runtime.tools.mkspiffs-0.2.3.path=/home/inverse/.arduino15/packages/esp32/tools/mkspiffs/0.2.3,runtime.tools.esptool_py.path=/home/inverse/.arduino15/packages/esp32/tools/esptool_py/2.6.1,runtime.tools.esptool_py-2.6.1.path=/home/inverse/.arduino15/packages/esp32/tools/esptool_py/2.6.1,runtime.tools.xtensa-esp32-elf-gcc.path=/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0,runtime.tools.xtensa-esp32-elf-gcc-1.22.0-80-g6c4433a-5.2.0.path=/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0",
  "fqbn": "esp32:esp32:esp32cam",
  "hardwareFolders": "/home/inverse/arduino-1.8.12/hardware,/home/inverse/.arduino15/packages,/home/inverse/Arduino/hardware",
  "otherLibrariesFolders": "/home/inverse/Arduino/libraries",
  "runtime.ide.version": "10812",
  "sketchLocation": "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
#include <Arduino.h>
#line 1 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
// ESP32_cam_node, upgraded with una additional udp layer 5 control protocol and configurable telegram bot
// PLEASE ALSO INSTALL THE ArduinoJson library by Benoit Blanchon
#include "esp_camera.h"
#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiAP.h>
#include <WiFiUdp.h>
#include "AsyncUDP.h"
#include "lwip/api.h"
// NVS includes, non volatile storage
#include "ArduinoNvs.h"
// WIFI includes and variables section START
#define MY_NAME "e32cam001s01"
#define HEARTBEAT_DATA "e32cam001s01,HEARTBEAT,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ACK_DATA "e32cam001s01,ACK,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ERR_DATA "e32cam001s01,ERR,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ERRNVS_DATA "e32cam001s01,ERR,ERROR saving data to NVS,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#include <WiFiMulti.h> // this should support more different AP's // ToDo
WiFiMulti wifiMulti; // this should support more different AP's // ToDo
// Non volatile storage - incorporated in the project folder
#include "ArduinoNvs.h"
// CAMERA: camera configuration and initialization
camera_config_t config;
uint8_t cameraInitType = 0; // 0 = camera off, not initialized; 1 = default init, the main webserver; 2 = motion detector; 3 = color blob detector
#define ALARMS_ENABLED 1  // by default, the device works as a motion detector in case the contact with the command and control server is lost. 
// WARNING!!! Make sure that you have either selected ESP32 Wrover Module,
//            or another board which has PSRAM enabled
// Select camera model
//#define CAMERA_MODEL_WROVER_KIT
//#define CAMERA_MODEL_ESP_EYE
//#define CAMERA_MODEL_M5STACK_PSRAM
//#define CAMERA_MODEL_M5STACK_WIDE
#define CAMERA_MODEL_AI_THINKER
#include "camera_pins.h"
// of course this is the default and should be modified
void cameraInitConfig() {
  // camera part
  cameraInitType = 1;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// MOTION DETECTION SPECIFIC CAMERA DEFINES and buffers
#define WIDTH 320
#define HEIGHT 240
#define BLOCK_SIZE 10
#define W (WIDTH / BLOCK_SIZE)
#define H (HEIGHT / BLOCK_SIZE)
#define BLOCK_DIFF_THRESHOLD 0.2
#define IMAGE_DIFF_THRESHOLD 0.1
#define DEBUG 1
bool capture_still(); // declare functions
bool motion_detect();
void update_frame();
void print_frame(uint16_t frame[H][W]);
uint16_t prev_frame[H][W] = { 0 };  // these are actually 32*24 * 16bit, more than acceptable, no problem.
uint16_t current_frame[H][W] = { 0 };
uint8_t motionDetectON = 0;  // motion detection is normally kept off. The idea is to activate it in case the command & control servers do not respond, or to activate it on demand / on alarm.
uint8_t alarmEnabled = ALARMS_ENABLED; // motion detection activation is enabled by default to 1, some other kinds of usage may require this is off, for example the color blob detection mode and the webcam / telegram modes. 
// MOTION DETECTION SPECIFIC CAMERA CONFIG INIT FUNCTION (first, remember to do a deinit!!!)
void cameraInitConfigMotionDetect() {
  // camera part
  cameraInitType = 2;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_GRAYSCALE;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// CAMERA MOTION DETECTION SPECIFIC FUNCTIONS
 * Capture image and do down-sampling
bool capture_still() {
    camera_fb_t *frame_buffer = esp_camera_fb_get();
    if (!frame_buffer)
        return false;
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    //sensor_t *sensor = esp_camera_sensor_get();
    //Serial.print("Switch to JPEG: ");
    //Serial.println(sensor->set_pixformat(sensor, PIXFORMAT_RGB565));
    config.pixel_format = PIXFORMAT_RGB565;
    Serial.print("Switch ok? ");
    Serial.println(esp_camera_init(&config) == ESP_OK ? "yes" : "no");
    frame_buffer = esp_camera_fb_get();
    Serial.print("JPEG len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    //sensor->set_pixformat(sensor, PIXFORMAT_GRAYSCALE);
    frame_buffer = esp_camera_fb_get();
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    while (1) delay(50000);
    // set all 0s in current frame
    for (int y = 0; y < H; y++)
        for (int x = 0; x < W; x++)
            current_frame[y][x] = 0;
    // down-sample image in blocks
    for (uint32_t i = 0; i < WIDTH * HEIGHT; i++) {
        const uint16_t x = i % WIDTH;
        const uint16_t y = floor(i / WIDTH);
        const uint8_t block_x = floor(x / BLOCK_SIZE);
        const uint8_t block_y = floor(y / BLOCK_SIZE);
        const uint8_t pixel = frame_buffer->buf[i];
        const uint16_t current = current_frame[block_y][block_x];
        // average pixels in block (accumulate)
        current_frame[block_y][block_x] += pixel;
    }
    // average pixels in block (rescale)
    for (int y = 0; y < H; y++)
        for (int x = 0; x < W; x++)
            current_frame[y][x] /= BLOCK_SIZE * BLOCK_SIZE;
#if DEBUG
    Serial.println("Current frame:");
    print_frame(current_frame);
    Serial.println("---------------");
#endif
    return true;
 * Compute the number of different blocks
 * If there are enough, then motion happened
bool motion_detect() {
    uint16_t changes = 0;
    const uint16_t blocks = (WIDTH * HEIGHT) / (BLOCK_SIZE * BLOCK_SIZE);
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            float current = current_frame[y][x];
            float prev = prev_frame[y][x];
            float delta = abs(current - prev) / prev;
            if (delta >= BLOCK_DIFF_THRESHOLD) {
#if DEBUG
                Serial.print("diff\t");
                Serial.print(y);
                Serial.print('\t');
                Serial.println(x);
#endif
                changes += 1;
            }
        }
    }
    Serial.print("Changed ");
    Serial.print(changes);
    Serial.print(" out of ");
    Serial.println(blocks);
    return (1.0 * changes / blocks) > IMAGE_DIFF_THRESHOLD;
 * Copy current frame to previous
void update_frame() {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            prev_frame[y][x] = current_frame[y][x];
        }
    }
 * For serial debugging
 * @param frame
void print_frame(uint16_t frame[H][W]) {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            Serial.print(frame[y][x]);
            Serial.print('\t');
        }
        Serial.println();
    }
// CAMERA COLOR BLOB DETECTOR, INIT FUNCTION
// color-based blob detection - I plan to use this as part of a larger project, the idea is to help detect certain insects and pests in agricultural settings
// this camera will then become an additional sensor communicating with a robot designed to remove pests from invaded plants. 
void cameraInitConfigColorDetector() {  // specific for color-based target recognition, remember to do a deinit first!!!
  // camera part
  cameraInitType = 3;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_RGB888;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// Telegram section
#include "UniversalTelegramBotRZO.h"
#include <WiFiClientSecure.h>
char* TBotToken = "810218086:AAFPJNDbolU0tzj_Xx6lXOsatDlYnWYaa80";
char* TChatId = "537093554";
WiFiClientSecure client;
UniversalTelegramBot TBotCambot(TBotToken, client);
int Bot_mtbs = 3000; //mean time between scan messages
long Bot_lasttime;   //last time messages' scan has been done
// specific camera variables for the telegram bot
//camera_fb_t * TBotCamfb; // moved intra-function
uint8_t* TBotCamfb_buffer;
size_t TBotCamfb_length;
int TBotCamcurrentByte;
// camera functions specific for the telegram bot
bool isMoreDataAvailable() {
  return (TBotCamfb_length - TBotCamcurrentByte);
uint8_t photoNextByte() {
  TBotCamcurrentByte++;
  return (TBotCamfb_buffer[TBotCamcurrentByte - 1]);
void take_send_photo(String TChatId)
  camera_fb_t * TBotCamfb = NULL;
  TBotCamfb = esp_camera_fb_get();
  TBotCamcurrentByte = 0;
  TBotCamfb_length = TBotCamfb->len;
  TBotCamfb_buffer = TBotCamfb->buf;
  TBotCambot.sendPhotoByBinary(TChatId, "image/jpeg", TBotCamfb->len, isMoreDataAvailable, photoNextByte, nullptr, nullptr);
  esp_camera_fb_return(TBotCamfb);
  TBotCamfb_length = NULL;
  TBotCamfb_buffer = NULL;
// UDP Async client, sends keep heartbeat messages to the server and retrieves commands
AsyncUDP udp; // for server A  // udp layer 5 control protocol
AsyncUDP udpB; // for server B
// command and control IP addresses for server A and server B (redundant server), the exchange is done via udp ( the port is defined by int udpServerPort) and the layer 5 transfers commands and status info as comma separated variables
int IPudpServerAa = 192;
int IPudpServerAb = 168;
int IPudpServerAc = 88;
int IPudpServerAd = 32;
int IPudpServerBa = 192;
int IPudpServerBb = 168;
int IPudpServerBc = 88;
int IPudpServerBd = 3;
int udpServerPort = 8443; // UDP/443 because, well, we can
// udp - layer 5 control protocol processing, the layer 5 control protocol consists of 8 CSV fields. The protocol structure is simple: client_name,requested_operation,field1,field2,field3,field4,field5,field6  all unused fields are set to ascii character 0
#define FIELDUA 8
#define FIELDUB 64
char UdataSplit[FIELDUA][FIELDUB];
int UfieldsLen[FIELDUA];
int UdataLen = 0;
int UserverOK = 0; // contact with the server attempted for 3 times in a row, failing. Say, the idea is: ACK from server received: set to 3, send HEARTBEAT: decrease by 1 until zero is reached, then stop decreasing.
static uint8_t wifiDebugOn = 0;
static uint8_t wifiConnFlag = 0;
static uint8_t wifiWebserverFlag = 0;
static uint8_t wifiBeginFlag = 0;
static uint8_t wifiConnectionAttempts = 0;
// Set the local access point IP address, the netmask is assumed to be /24
IPAddress SetAPIP = {192,168,5,1};  // REMEMBER TO CHANGE THIS FOR EVERY AP YOU PLAN TO INTRODUCE TO THE NETWORK
// Set these to your desired credentials.
const char *ssid = MY_NAME;  // for the local AP  // REMEMBER TO CHANGE THE SSID AS WELL, THE NET PART CONTAINS THE THIRD BYTE OF THE AP IP ADDRESS (the network LSByte)
const char *password = "giampippetto";
WiFiServer serverSTA(8080); // adding a second server on the STA interface? Let's try
// loop() control section
uint32_t loopCounter = 0;
// NETWORK section
// processing variables subsection
uint8_t payloadCurrContent[128] = {0};
uint8_t hashCurrContent[64] = {0};
uint8_t payHeaderCurrContent[32] = {0};
// NAt processing subsection
uint32_t payloadTypeF = 0;
uint32_t srcIPext = 0; // STA side
uint32_t dstIPext = 0;
uint32_t srcIPint = 0; // AP side
uint32_t dstIPint = 0;
uint32_t srcIPpay = 0; // payload side
uint32_t dstIPpay = 0;
// in the NAT table, the folloving are converted to uint32_t 
uint16_t srcPortext = 0; // STA side
uint16_t dstPortext = 0;
uint16_t srcPortint = 0; // AP side
uint16_t dstPortint = 0;
uint16_t srcPortpay = 0; // payload side
uint16_t dstPortpay = 0;
uint16_t expiryCounter = 0;
// NAT table subsection
uint32_t NATline[16] = {0};  // there are 14 fields actually, as per the above list, plus 2 reserved fields
uint32_t NATtable[256][16] = {0};
uint16_t NATlinePointer = 0; // do we allow up to 256 flows only?
// routing table subsection
uint16_t RoutelinePointer = 0; // do we allow up to 16 routes only?
uint32_t routetable[16][8] = {0};  // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
//packet buffer sub-section
uint8_t payloadToProcessFlag = 0; // if the LSB bit0 == 1, there is a payload that needs processing, other values / bits set may mean other operations.
uint8_t * payloadBuffer = NULL;
//structure of the packet buffer:
Size = 224Bytes = 32B header + 128B payload + 64B hash
4B = Type Field( 4 bytes ) = reqtype(1B), protocolNum(1B), Reserved(1B), Reserved(1B)
4B = DST IP
4B = SRC IP 
2B = DST PORT
2B = SRC PORT
2B = PayloadLen
2B = Reserved
4B = Reserved
4B = Reserved
4B = Reserved
128B = actual payload
64B = sha256Hash_reserved(32B raw or 64B hex)
// LED section
#define LED_BUILTIN 2   // Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED
// string section 
// converts character array 
// to string and returns it 
String convertToString(char* a, int size) 
    int i; 
    String s = ""; 
    for (i = 0; i < size; i++) { 
        s = s + a[i]; 
    } 
    return s; 
// deep sleep section
#define uS_TO_S_FACTOR 1000000ULL  /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  60        /* Time ESP32 will go to sleep (in seconds) */
RTC_DATA_ATTR int bootCount = 0;
Method to print the reason by which ESP32
has been awaken from sleep
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch(wakeup_reason)
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
// update the routing table
void routeTableUpdate() {
// RoutelinePointer // do we allow up to 16 routes only?
//uint32_t *routetable[16][8] // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
uint32_t ImyLocalIP = 0;
uint32_t ImyLocalSubnet = 0;
uint32_t ImyAPIP = 0;
uint32_t ImyAPSubnet = 0;
uint32_t ImyLocalSubnetMask = 0;
uint32_t ImyAPSubnetMask = (255 >> 24) + (255 >> 16) + (255 >> 8);
uint32_t ImyLocalGateway = 0;
IPAddress myLocalIP = {0,0,0,0};
IPAddress myLocalSubnet = {0,0,0,0};
IPAddress myLocalSubnetMask = {0,0,0,0};
IPAddress myLocalGateway = {0,0,0,0};
IPAddress myAPIP = WiFi.softAPIP();
ImyAPIP = (uint32_t)((myAPIP[0] << 24) + (myAPIP[1] << 24) + (myAPIP[2] << 24) + myAPIP[3]);
ImyAPSubnet = ImyAPIP & ImyAPSubnetMask;
// the first lines
// line 0 local AP  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
routetable[0][0] = ImyAPSubnet;
routetable[0][1] = ImyAPSubnetMask;
routetable[0][2] = ImyAPIP;
routetable[0][3] = 0; // gateway of course set to 0 for the AP side
routetable[0][4] = 0; // interface ID set to zero, for the moment.
routetable[0][5] = 0;
routetable[0][6] = 0;
routetable[0][7] = 0;
if (wifiConnFlag == 1) {
  myLocalIP = WiFi.localIP();
  myLocalSubnet = WiFi.subnetMask();
  myLocalGateway = WiFi.gatewayIP();
  ImyLocalIP = (myLocalIP[0] << 24) + (myLocalIP[1] << 24) + (myLocalIP[2] << 24) + myLocalIP[3];
  ImyLocalSubnetMask = (myLocalSubnetMask[0] << 24) + (myLocalSubnetMask[1] << 24) + (myLocalSubnetMask[2] << 24) + myLocalSubnetMask[3];
  ImyLocalGateway = (myLocalGateway[0] << 24) + (myLocalGateway[1] << 24) + (myLocalGateway[2] << 24) + myLocalGateway[3];
  ImyLocalSubnet = ImyLocalIP & ImyLocalSubnetMask;
  // line 1 STA  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
  routetable[1][0] = ImyLocalSubnet;
  routetable[1][1] = ImyLocalSubnetMask;
  routetable[1][2] = ImyLocalIP;
  routetable[1][3] = ImyLocalGateway;
  routetable[1][4] = 1; // interface ID set to 1, for the moment.
  routetable[1][5] = 0;
  routetable[1][6] = 0;
  routetable[1][7] = 0; 
} else {
  routetable[1][0] = 0; // nullifying the STA route
  routetable[1][1] = 0; // nullifying the STA route
  routetable[1][2] = 0; // nullifying the STA route
  routetable[1][3] = 0; // nullifying the STA route
  routetable[1][4] = 0; // nullifying the STA route
  routetable[1][5] = 0; // nullifying the STA route
  routetable[1][6] = 0; // nullifying the STA route
  routetable[1][7] = 0; // nullifying the STA route
}  // end void routetableupdate()
// handle client requests
void clientServe() {
  WiFiClient client = serverSTA.available();   // listen for incoming clients
  if (client) {                             // if you get a client,
    Serial.println("New Client.");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to take a picture and send it via telegram (configure via udp layer 5 control protocol).<br>");
            client.print("Click <a href=\"/L\">here</a> to restart the device.<br>");
            client.print("Click <a href=\"/W\">here</a> to initialize the camera hardware for the integrated camera webserver.<br>");
            client.print("Click <a href=\"/S\">here</a> to deinitialize the camera hardware and save power.<br>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          //digitalWrite(LED_BUILTIN, HIGH);               // GET /H takes a picture and sends it via telegram
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
          take_send_photo(TChatId);
          digitalWrite(LED_BUILTIN, LOW);  
        }
        if (currentLine.endsWith("GET /W")) {  // init camera for the main camera webserver
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
        }
        if (currentLine.endsWith("GET /S")) {  // deinitialize the camera
          cameraInitType = 0;
          esp_camera_deinit();  // the camera needs a deinit from its current configuration.
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(LED_BUILTIN, LOW);                // GET /L restarts the device
          esp_restart();
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
void startCameraServer();
void wifiIntManagement() {
    // STA connection and disconnection management
// WIFI DEBUG AND SERVICING SECTION START
  if (wifiDebugOn == 1) {
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
    
      Serial.println("WiFi not connected yet");
    }
    if (WiFi.status() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
    
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
    }
  if (wifiConnectionAttempts >= 32) { // turning off wifi, there is no point in trying anymore, if past 32 attempts.
    WiFi.mode(WIFI_OFF); // turning off wifi, then we go to deep sleep for a certain number of seconds.
    
    esp_err_t err = esp_camera_deinit();
    esp_deep_sleep_start();  // going to deep sleep
    
  if ((wifiConnFlag == 0) && (wifiConnectionAttempts < 32)) {  // wifiConnectionAttempts must be < 32 
    wifiConnectionAttempts++; // increasing the connection attempts counter
    
    if (wifiMulti.run() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
      Serial2.print("WiFi up and running: ");
      Serial2.print(WiFi.localIP());
      Serial2.println("' to connect");
      wifiConnFlag = 1;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
    if ((WiFi.status() != WL_CONNECTED) && (wifiBeginFlag == 0)) {
    
      Serial.println("WiFi restarting");
      WiFi.begin(ssid, password); 
      
      wifiBeginFlag = 1;
    }
  if (wifiConnFlag == 1) { // test if the wifi stays alive...
    if (WiFi.status() != WL_CONNECTED) {  // wifiMulti.run() == WL_CONNECTED // WiFi.status() != WL_CONNECTED
    
      Serial.println("WiFi disconnected");
      wifiConnFlag = 0;
      wifiBeginFlag = 0;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
  if (((wifiConnFlag == 1) && (wifiWebserverFlag == 0)) || (ESP.getFreeHeap() < 44000)) { // servicing the webserver on connection up for the first time
      // >>>>>>>> START SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      // >>>>>>>> END SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      
      wifiWebserverFlag = 1;
    
  // WIFI DEBUG AND SERVICING SECTION END 
// UDP - layer 5 control protocol
void UresetudpData() {
for(int i = 0; i < FIELDUA; i++){
  for(int j = 0; j < FIELDUB; j++) {
    UdataSplit[i][j] = 0;
for(int i = 0; i < FIELDUA; i++) {
  UfieldsLen[i] = 0;
UdataLen = 0;
} // end resetudpData()
int UfillinudpData(uint8_t *pktDataField, int pktLen) {
int i = 0;
int j = 0;
int k = 0;
UdataLen = pktLen;
for(i = 0; i < UdataLen; i++){
  if(pktDataField[i] == ',') {
    UfieldsLen[j] = k;
    Serial.print("received_udp_control_protocol_data:");
    Serial.print(UdataSplit[j]);
    Serial.print("; data_len:");
    Serial.print(k);
    Serial.print("; field_position:");
    Serial.println(j);
    j++;
    k = 0;
  if(j >= FIELDUA) {
    Serial.print("ERROR: too many commas in the udp layer 5 control protocol");
    return 100;
    
  UdataSplit[j][k] = pktDataField[i];
  k++; 
UfieldsLen[j] = k;
return 0;
} // end fillinudpData()
void UprocessudpCommand(AsyncUDPPacket packet) {
  Serial.print("processing udp layer 5 control protocol command directed to: ");
  Serial.print(UdataSplit[0]);
  Serial.print("; command is: ");
  Serial.println(UdataSplit[1]);
  // commands available at the moment, or planned, are: 
  // ACK (confirmed heartbeat reception, do nothing), TLGS (send picture to telegram), TLGC (configure telegram, field 2 = bot token, field 3 = chat id)
  // RST (reboot the device), DSLP (deep sleep)
  if(UdataSplit[0] == MY_NAME) {  // matched the field 0, the command is directed to me. 
      
      // processing the actual commands
      
      if(UdataSplit[1] == "ACK") {
        // do not reply with an ACK to an ACK, that would be ...disturbing
        UserverOK = 3;
      }
      if(UdataSplit[1] == "TLGS") {  // send picture via telegram
        //TBotToken
        //TChatId
        // technically speaking we should deinit and reinit with acceptable parameters. 
        
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
          if (cameraInitType != 0) {
            esp_camera_deinit();  // the camera needs a deinit from its current configuration.
          }
          delay(1000); // this might not really be necessary
          cameraInitConfig(); // and is setup for the correct motion capture configuration
          delay(3000);
        }
         // this might not really be necessary
        take_send_photo(TChatId);   
      }
      if(UdataSplit[1] == "TLGC") { // configure telegram bot token and chat id
        bool ok; 
        String sToken = convertToString(UdataSplit[2], UfieldsLen[2]); 
        String sChatId = convertToString(UdataSplit[3], UfieldsLen[3]); 
        ok = NVS.setString ("TLGToken", sToken); // Store the data value into the key named "TLGToken" on the NVS
        if(ok) {
          ok = NVS.setString ("TLGChatId", sChatId); // Store the data value into the key named "TLGChatId" on the NVS
          
        }
        if(ok) {
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        } else {
          Serial.println("ERROR saving data to nvs");
          packet.printf(ERRNVS_DATA, packet.length());
        }
        
        
      }
      if(UdataSplit[1] == "RST") {  // restart system
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        esp_restart();
      }
      if(UdataSplit[1] == "DSLP") { // start deep sleep
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        Serial.println("RECEIVED REQUEST TO DEEP SLEEP, STARTING TO SLEEP DEEP");
        esp_err_t err = esp_camera_deinit();
        esp_deep_sleep_start();  // going to deep sleep
      }
      if(UdataSplit[1] == "WCAM") { // init camera for the webserver
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
        }   
      }
      if(UdataSplit[1] == "SCAM") { // deinitialize the camera
        cameraInitType = 0;
        esp_camera_deinit();  // the camera needs a deinit from its current configuration.
      }
      
      
void udpCommandClient() {
  if( ! udp.connected()) {
    Serial.println("UDP connecting to server A");
    udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
    Serial.println("UDP connected to server A");
  if(udp.connected()) {
        Serial.println("UDP sending to server A");
        //Send unicast
        udp.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udp.onPacket([](AsyncUDPPacket packet) {
            Serial.print("UDP Packet Type: ");
            Serial.print(packet.isBroadcast()?"Broadcast":packet.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packet.remoteIP());
            Serial.print(":");
            Serial.print(packet.remotePort());
            Serial.print(", To: ");
            Serial.print(packet.localIP());
            Serial.print(":");
            Serial.print(packet.localPort());
            Serial.print(", Length: ");
            Serial.print(packet.length());
            Serial.print(", Data: ");
            Serial.write(packet.data(), packet.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packet.data() ,packet.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packet); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
// sending the heartbeat to the backup udp command server
void udpBCommandClient() {
  if( ! udpB.connected()) {
    Serial.println("UDP connecting to server B");
    udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
    Serial.println("UDP connected to server B");
  if(udpB.connected()) {
        Serial.println("UDP sending to server B");
        //Send unicast
        udpB.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udpB.onPacket([](AsyncUDPPacket packetB) {
            Serial.print("UDP B Packet Type: ");
            Serial.print(packetB.isBroadcast()?"Broadcast":packetB.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packetB.remoteIP());
            Serial.print(":");
            Serial.print(packetB.remotePort());
            Serial.print(", To: ");
            Serial.print(packetB.localIP());
            Serial.print(":");
            Serial.print(packetB.localPort());
            Serial.print(", Length: ");
            Serial.print(packetB.length());
            Serial.print(", Data: ");
            Serial.write(packetB.data(), packetB.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packetB.data() ,packetB.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packetB); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
void clientsManagement() {
  if ((wifiConnFlag == 1) && (wifiWebserverFlag == 1)) { // HANDLE CLIENT REQUESTS HERE
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
    clientServe();
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
  } // end handle client requests if
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
// wakeup and init part 
  // packet / payload buffer allocation
  payloadBuffer = (uint8_t *)malloc(256 * sizeof(uint8_t));  // the actual size is 224 (see in the declarations), the maximum payload size for ESP-NOW is 250.
  pinMode(LED_BUILTIN, OUTPUT);
  // deep sleep boots
  ++bootCount;
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  /*
  First we configure the wake up source
  We set our ESP32 to wake up every 5 seconds
  */
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
// camera init and config
  Serial.println("WARNING, NOT INITIALIZING THE CAMERA IN ORDER TO SAVE POWER. PLEASE DO IT MANUALLY VIA UDP COMMANDS OR VIA THE MANAGEMENT HTTP SERVER ON PORT 8080");
  //cameraInitConfig(); // we want the camera not initialized by default. This saver power.
  /*
 if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
  */
// WIFI SECTION
  Serial.println();
  Serial.println("Configuring access point...");
  WiFi.mode(WIFI_AP_STA); // added by me // selecting the AP+STA mode
  wifiMulti.addAP("e32ap001s01border", "giampippetto");  // the connection part is verified as follows: wifiMulti.run() == WL_CONNECTED
  wifiMulti.addAP("G5SE_7499", "pippopluto");
  wifiMulti.addAP("internet-gw.iw1gpe.it.ampr.o", "heisakuukanwohiraite");
  wifiMulti.addAP("inverse", "heisakuukanwohiraite");
  wifiMulti.addAP("e32ap002s01border", "giampippetto");
  wifiMulti.addAP("e32ap003s01border", "giampippetto");
  wifiMulti.addAP("e32ap004s01border", "giampippetto");
  wifiMulti.addAP("e32ap001s02border", "giampippetto");
  wifiMulti.addAP("e32ap002s02border", "giampippetto");
  wifiMulti.addAP("e32ap003s02border", "giampippetto");
  wifiMulti.addAP("e32ap004s02border", "giampippetto");
  // You can remove the password parameter if you want the AP to be open.
  WiFi.softAP(ssid, password);
  delay(200); // wait at least 100ms until the AP has started
  if(!WiFi.softAPConfig(SetAPIP, SetAPIP, IPAddress(255, 255, 255, 0))){
      Serial.println("AP Config Failed");
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  // the STA part is configured here and managed in loop()
// old wifi section
  //WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  Serial.println("");
  Serial.println("WiFi connected");
  startCameraServer();
  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  */
  // NVS storage init
  NVS.begin();
  // trying to load the bot configuration from NVS 
  //TBotToken
  //TChatId
  // load the telegram bot token if available from NVS
  String loadedstr = NVS.getString ("TLGToken"); // Read the value of the "TLGToken" key from the NVS 
  if(loadedstr.length() > 3) { // at least we make sure the result is not empty...
    TBotToken = {};
    loadedstr.toCharArray(TBotToken, loadedstr.length()); // loading TBotToken
    loadedstr = NVS.getString ("TLGChatId"); // Read the value of the "TLGChatId" key from the NVS 
    if(loadedstr.length() > 3) {
      loadedstr.toCharArray(TChatId, loadedstr.length()); // loading TChatId
      Serial.print("Loaded Telegram BotToken and ChatId from NVS storage with values: ");
      Serial.print(TBotToken);
      Serial.print(" and ");
      Serial.println(TChatId);
    }
} // END setup()
void loop() {
  // put your main code here, to run repeatedly:
 // loopCounter check
  if (loopCounter > 16) {
    loopCounter = 0;
  clientsManagement();  // web client requests are handled always 
  if(loopCounter == 1) {
    wifiIntManagement();
  if(loopCounter == 2) {
    routeTableUpdate();
  if(loopCounter == 3) {
    udpCommandClient();
    udp.broadcastTo(MY_NAME, udpServerPort);
  if(loopCounter == 5) {
  // position number 15, let the device stabilize its connections first...
  if(loopCounter == 15) { // MOTION DETECTOR SECTION
    if ((motionDetectON == 1) || ((UserverOK == 0) && (alarmEnabled == 1)) ){
      
      if (!capture_still()) {
        Serial.println("Failed capture");
        delay(3000);
        return;
      }
      if (motion_detect()) {
        Serial.println("Motion detected");
    }
    update_frame();
    }
  // loopCounter increase
  loopCounter++;
  delay(1000);
# 1 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
// ESP32_cam_node, upgraded with una additional udp layer 5 control protocol and configurable telegram bot
// PLEASE ALSO INSTALL THE ArduinoJson library by Benoit Blanchon
# 6 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 7 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 9 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 12 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 13 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 14 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 15 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
// NVS includes, non volatile storage
# 18 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
// WIFI includes and variables section START
#define MY_NAME "e32cam001s01"
#define HEARTBEAT_DATA "e32cam001s01,HEARTBEAT,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/
#define ACK_DATA "e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/
#define ERR_DATA "e32cam001s01,ERR,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/
#define ERRNVS_DATA "e32cam001s01,ERR,ERROR saving data to NVS,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/
# 28 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
WiFiMulti wifiMulti; // this should support more different AP's // ToDo
// Non volatile storage - incorporated in the project folder
# 33 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
// CAMERA: camera configuration and initialization
camera_config_t config;
uint8_t cameraInitType = 0; // 0 = camera off, not initialized; 1 = default init, the main webserver; 2 = motion detector; 3 = color blob detector
#define ALARMS_ENABLED 1 /* by default, the device works as a motion detector in case the contact with the command and control server is lost. */
// WARNING!!! Make sure that you have either selected ESP32 Wrover Module,
//            or another board which has PSRAM enabled
// Select camera model
//#define CAMERA_MODEL_WROVER_KIT
//#define CAMERA_MODEL_ESP_EYE
//#define CAMERA_MODEL_M5STACK_PSRAM
//#define CAMERA_MODEL_M5STACK_WIDE
#define CAMERA_MODEL_AI_THINKER 
# 53 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
// of course this is the default and should be modified
void cameraInitConfig() {
  // camera part
  cameraInitType = 1;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != 0 /*!< esp_err_t value indicating success (no error) */) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == (0x36)) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
// MOTION DETECTION SPECIFIC CAMERA DEFINES and buffers
#define WIDTH 320
#define HEIGHT 240
#define BLOCK_SIZE 10
#define W (WIDTH / BLOCK_SIZE)
#define H (HEIGHT / BLOCK_SIZE)
#define BLOCK_DIFF_THRESHOLD 0.2
#define IMAGE_DIFF_THRESHOLD 0.1
#define DEBUG 1
bool capture_still(); // declare functions
bool motion_detect();
void update_frame();
void print_frame(uint16_t frame[(240 / 10)][(320 / 10)]);
uint16_t prev_frame[(240 / 10)][(320 / 10)] = { 0 }; // these are actually 32*24 * 16bit, more than acceptable, no problem.
uint16_t current_frame[(240 / 10)][(320 / 10)] = { 0 };
uint8_t motionDetectON = 0; // motion detection is normally kept off. The idea is to activate it in case the command & control servers do not respond, or to activate it on demand / on alarm.
uint8_t alarmEnabled = 1 /* by default, the device works as a motion detector in case the contact with the command and control server is lost. */; // motion detection activation is enabled by default to 1, some other kinds of usage may require this is off, for example the color blob detection mode and the webcam / telegram modes. 
// MOTION DETECTION SPECIFIC CAMERA CONFIG INIT FUNCTION (first, remember to do a deinit!!!)
void cameraInitConfigMotionDetect() {
  // camera part
  cameraInitType = 2;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_GRAYSCALE;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != 0 /*!< esp_err_t value indicating success (no error) */) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == (0x36)) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
// CAMERA MOTION DETECTION SPECIFIC FUNCTIONS
 * Capture image and do down-sampling
bool capture_still() {
    camera_fb_t *frame_buffer = esp_camera_fb_get();
    if (!frame_buffer)
        return false;
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != 
# 222 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                                  __null 
# 222 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                                       ? frame_buffer->len : 0);
    //sensor_t *sensor = esp_camera_sensor_get();
    //Serial.print("Switch to JPEG: ");
    //Serial.println(sensor->set_pixformat(sensor, PIXFORMAT_RGB565));
    config.pixel_format = PIXFORMAT_RGB565;
    Serial.print("Switch ok? ");
    Serial.println(esp_camera_init(&config) == 0 /*!< esp_err_t value indicating success (no error) */ ? "yes" : "no");
    frame_buffer = esp_camera_fb_get();
    Serial.print("JPEG len: ");
    Serial.println(frame_buffer != 
# 233 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                                  __null 
# 233 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                                       ? frame_buffer->len : 0);
    //sensor->set_pixformat(sensor, PIXFORMAT_GRAYSCALE);
    frame_buffer = esp_camera_fb_get();
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != 
# 237 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                                  __null 
# 237 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                                       ? frame_buffer->len : 0);
    while (1) delay(50000);
    // set all 0s in current frame
    for (int y = 0; y < (240 / 10); y++)
        for (int x = 0; x < (320 / 10); x++)
            current_frame[y][x] = 0;
    // down-sample image in blocks
    for (uint32_t i = 0; i < 320 * 240; i++) {
        const uint16_t x = i % 320;
        const uint16_t y = floor(i / 320);
        const uint8_t block_x = floor(x / 10);
        const uint8_t block_y = floor(y / 10);
        const uint8_t pixel = frame_buffer->buf[i];
        const uint16_t current = current_frame[block_y][block_x];
        // average pixels in block (accumulate)
        current_frame[block_y][block_x] += pixel;
    }
    // average pixels in block (rescale)
    for (int y = 0; y < (240 / 10); y++)
        for (int x = 0; x < (320 / 10); x++)
            current_frame[y][x] /= 10 * 10;
    Serial.println("Current frame:");
    print_frame(current_frame);
    Serial.println("---------------");
    return true;
 * Compute the number of different blocks
 * If there are enough, then motion happened
bool motion_detect() {
    uint16_t changes = 0;
    const uint16_t blocks = (320 * 240) / (10 * 10);
    for (int y = 0; y < (240 / 10); y++) {
        for (int x = 0; x < (320 / 10); x++) {
            float current = current_frame[y][x];
            float prev = prev_frame[y][x];
            float delta = abs(current - prev) / prev;
            if (delta >= 0.2) {
                Serial.print("diff\t");
                Serial.print(y);
                Serial.print('\t');
                Serial.println(x);
                changes += 1;
            }
        }
    }
    Serial.print("Changed ");
    Serial.print(changes);
    Serial.print(" out of ");
    Serial.println(blocks);
    return (1.0 * changes / blocks) > 0.1;
 * Copy current frame to previous
void update_frame() {
    for (int y = 0; y < (240 / 10); y++) {
        for (int x = 0; x < (320 / 10); x++) {
            prev_frame[y][x] = current_frame[y][x];
        }
    }
 * For serial debugging
 * @param frame
void print_frame(uint16_t frame[(240 / 10)][(320 / 10)]) {
    for (int y = 0; y < (240 / 10); y++) {
        for (int x = 0; x < (320 / 10); x++) {
            Serial.print(frame[y][x]);
            Serial.print('\t');
        }
        Serial.println();
    }
// CAMERA COLOR BLOB DETECTOR, INIT FUNCTION
// color-based blob detection - I plan to use this as part of a larger project, the idea is to help detect certain insects and pests in agricultural settings
// this camera will then become an additional sensor communicating with a robot designed to remove pests from invaded plants. 
void cameraInitConfigColorDetector() { // specific for color-based target recognition, remember to do a deinit first!!!
  // camera part
  cameraInitType = 3;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_RGB888;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != 0 /*!< esp_err_t value indicating success (no error) */) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == (0x36)) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
// Telegram section
# 414 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 415 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
char* TBotToken = "810218086:AAFPJNDbolU0tzj_Xx6lXOsatDlYnWYaa80";
char* TChatId = "537093554";
WiFiClientSecure client;
UniversalTelegramBot TBotCambot(TBotToken, client);
int Bot_mtbs = 3000; //mean time between scan messages
long Bot_lasttime; //last time messages' scan has been done
// specific camera variables for the telegram bot
//camera_fb_t * TBotCamfb; // moved intra-function
uint8_t* TBotCamfb_buffer;
size_t TBotCamfb_length;
int TBotCamcurrentByte;
// camera functions specific for the telegram bot
bool isMoreDataAvailable() {
  return (TBotCamfb_length - TBotCamcurrentByte);
uint8_t photoNextByte() {
  TBotCamcurrentByte++;
  return (TBotCamfb_buffer[TBotCamcurrentByte - 1]);
void take_send_photo(String TChatId)
  camera_fb_t * TBotCamfb = 
# 444 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                           __null
# 444 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                               ;
  TBotCamfb = esp_camera_fb_get();
  TBotCamcurrentByte = 0;
  TBotCamfb_length = TBotCamfb->len;
  TBotCamfb_buffer = TBotCamfb->buf;
  TBotCambot.sendPhotoByBinary(TChatId, "image/jpeg", TBotCamfb->len, isMoreDataAvailable, photoNextByte, nullptr, nullptr);
  esp_camera_fb_return(TBotCamfb);
  TBotCamfb_length = 
# 451 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                    __null
# 451 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                        ;
  TBotCamfb_buffer = 
# 452 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                    __null
# 452 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                        ;
// UDP Async client, sends keep heartbeat messages to the server and retrieves commands
AsyncUDP udp; // for server A  // udp layer 5 control protocol
AsyncUDP udpB; // for server B
// command and control IP addresses for server A and server B (redundant server), the exchange is done via udp ( the port is defined by int udpServerPort) and the layer 5 transfers commands and status info as comma separated variables
int IPudpServerAa = 192;
int IPudpServerAb = 168;
int IPudpServerAc = 88;
int IPudpServerAd = 32;
int IPudpServerBa = 192;
int IPudpServerBb = 168;
int IPudpServerBc = 88;
int IPudpServerBd = 3;
int udpServerPort = 8443; // UDP/443 because, well, we can
// udp - layer 5 control protocol processing, the layer 5 control protocol consists of 8 CSV fields. The protocol structure is simple: client_name,requested_operation,field1,field2,field3,field4,field5,field6  all unused fields are set to ascii character 0
#define FIELDUA 8
#define FIELDUB 64
char UdataSplit[8][64];
int UfieldsLen[8];
int UdataLen = 0;
int UserverOK = 0; // contact with the server attempted for 3 times in a row, failing. Say, the idea is: ACK from server received: set to 3, send HEARTBEAT: decrease by 1 until zero is reached, then stop decreasing.
static uint8_t wifiDebugOn = 0;
static uint8_t wifiConnFlag = 0;
static uint8_t wifiWebserverFlag = 0;
static uint8_t wifiBeginFlag = 0;
static uint8_t wifiConnectionAttempts = 0;
// Set the local access point IP address, the netmask is assumed to be /24
IPAddress SetAPIP = {192,168,5,1}; // REMEMBER TO CHANGE THIS FOR EVERY AP YOU PLAN TO INTRODUCE TO THE NETWORK
// Set these to your desired credentials.
const char *ssid = "e32cam001s01"; // for the local AP  // REMEMBER TO CHANGE THE SSID AS WELL, THE NET PART CONTAINS THE THIRD BYTE OF THE AP IP ADDRESS (the network LSByte)
const char *password = "giampippetto";
WiFiServer serverSTA(8080); // adding a second server on the STA interface? Let's try
// loop() control section
uint32_t loopCounter = 0;
// NETWORK section
// processing variables subsection
uint8_t payloadCurrContent[128] = {0};
uint8_t hashCurrContent[64] = {0};
uint8_t payHeaderCurrContent[32] = {0};
// NAt processing subsection
uint32_t payloadTypeF = 0;
uint32_t srcIPext = 0; // STA side
uint32_t dstIPext = 0;
uint32_t srcIPint = 0; // AP side
uint32_t dstIPint = 0;
uint32_t srcIPpay = 0; // payload side
uint32_t dstIPpay = 0;
// in the NAT table, the folloving are converted to uint32_t 
uint16_t srcPortext = 0; // STA side
uint16_t dstPortext = 0;
uint16_t srcPortint = 0; // AP side
uint16_t dstPortint = 0;
uint16_t srcPortpay = 0; // payload side
uint16_t dstPortpay = 0;
uint16_t expiryCounter = 0;
// NAT table subsection
uint32_t NATline[16] = {0}; // there are 14 fields actually, as per the above list, plus 2 reserved fields
uint32_t NATtable[256][16] = {0};
uint16_t NATlinePointer = 0; // do we allow up to 256 flows only?
// routing table subsection
uint16_t RoutelinePointer = 0; // do we allow up to 16 routes only?
uint32_t routetable[16][8] = {0}; // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
//packet buffer sub-section
uint8_t payloadToProcessFlag = 0; // if the LSB bit0 == 1, there is a payload that needs processing, other values / bits set may mean other operations.
uint8_t * payloadBuffer = 
# 557 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                         __null
# 557 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                             ;
//structure of the packet buffer:
Size = 224Bytes = 32B header + 128B payload + 64B hash
4B = Type Field( 4 bytes ) = reqtype(1B), protocolNum(1B), Reserved(1B), Reserved(1B)
4B = DST IP
4B = SRC IP 
2B = DST PORT
2B = SRC PORT
2B = PayloadLen
2B = Reserved
4B = Reserved
4B = Reserved
4B = Reserved
128B = actual payload
64B = sha256Hash_reserved(32B raw or 64B hex)
// LED section
#define LED_BUILTIN 2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/
// string section 
// converts character array 
// to string and returns it 
String convertToString(char* a, int size)
    int i;
    String s = "";
    for (i = 0; i < size; i++) {
        s = s + a[i];
    }
    return s;
// deep sleep section
#define uS_TO_S_FACTOR 1000000ULL /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP 60 /* Time ESP32 will go to sleep (in seconds) */
__attribute__((section(".rtc.data"))) int bootCount = 0;
Method to print the reason by which ESP32
has been awaken from sleep
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch(wakeup_reason)
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
// update the routing table
void routeTableUpdate() {
// RoutelinePointer // do we allow up to 16 routes only?
//uint32_t *routetable[16][8] // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
uint32_t ImyLocalIP = 0;
uint32_t ImyLocalSubnet = 0;
uint32_t ImyAPIP = 0;
uint32_t ImyAPSubnet = 0;
uint32_t ImyLocalSubnetMask = 0;
uint32_t ImyAPSubnetMask = (255 >> 24) + (255 >> 16) + (255 >> 8);
uint32_t ImyLocalGateway = 0;
IPAddress myLocalIP = {0,0,0,0};
IPAddress myLocalSubnet = {0,0,0,0};
IPAddress myLocalSubnetMask = {0,0,0,0};
IPAddress myLocalGateway = {0,0,0,0};
IPAddress myAPIP = WiFi.softAPIP();
ImyAPIP = (uint32_t)((myAPIP[0] << 24) + (myAPIP[1] << 24) + (myAPIP[2] << 24) + myAPIP[3]);
ImyAPSubnet = ImyAPIP & ImyAPSubnetMask;
// the first lines
// line 0 local AP  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
routetable[0][0] = ImyAPSubnet;
routetable[0][1] = ImyAPSubnetMask;
routetable[0][2] = ImyAPIP;
routetable[0][3] = 0; // gateway of course set to 0 for the AP side
routetable[0][4] = 0; // interface ID set to zero, for the moment.
routetable[0][5] = 0;
routetable[0][6] = 0;
routetable[0][7] = 0;
if (wifiConnFlag == 1) {
  myLocalIP = WiFi.localIP();
  myLocalSubnet = WiFi.subnetMask();
  myLocalGateway = WiFi.gatewayIP();
  ImyLocalIP = (myLocalIP[0] << 24) + (myLocalIP[1] << 24) + (myLocalIP[2] << 24) + myLocalIP[3];
  ImyLocalSubnetMask = (myLocalSubnetMask[0] << 24) + (myLocalSubnetMask[1] << 24) + (myLocalSubnetMask[2] << 24) + myLocalSubnetMask[3];
  ImyLocalGateway = (myLocalGateway[0] << 24) + (myLocalGateway[1] << 24) + (myLocalGateway[2] << 24) + myLocalGateway[3];
  ImyLocalSubnet = ImyLocalIP & ImyLocalSubnetMask;
  // line 1 STA  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
  routetable[1][0] = ImyLocalSubnet;
  routetable[1][1] = ImyLocalSubnetMask;
  routetable[1][2] = ImyLocalIP;
  routetable[1][3] = ImyLocalGateway;
  routetable[1][4] = 1; // interface ID set to 1, for the moment.
  routetable[1][5] = 0;
  routetable[1][6] = 0;
  routetable[1][7] = 0;
} else {
  routetable[1][0] = 0; // nullifying the STA route
  routetable[1][1] = 0; // nullifying the STA route
  routetable[1][2] = 0; // nullifying the STA route
  routetable[1][3] = 0; // nullifying the STA route
  routetable[1][4] = 0; // nullifying the STA route
  routetable[1][5] = 0; // nullifying the STA route
  routetable[1][6] = 0; // nullifying the STA route
  routetable[1][7] = 0; // nullifying the STA route
} // end void routetableupdate()
// handle client requests
void clientServe() {
  WiFiClient client = serverSTA.available(); // listen for incoming clients
  if (client) { // if you get a client,
    Serial.println("New Client."); // print a message out the serial port
    String currentLine = ""; // make a String to hold incoming data from the client
    while (client.connected()) { // loop while the client's connected
      if (client.available()) { // if there's bytes to read from the client,
        char c = client.read(); // read a byte, then
        Serial.write(c); // print it out the serial monitor
        if (c == '\n') { // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to take a picture and send it via telegram (configure via udp layer 5 control protocol).<br>");
            client.print("Click <a href=\"/L\">here</a> to restart the device.<br>");
            client.print("Click <a href=\"/W\">here</a> to initialize the camera hardware for the integrated camera webserver.<br>");
            client.print("Click <a href=\"/S\">here</a> to deinitialize the camera hardware and save power.<br>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else { // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') { // if you got anything else but a carriage return character,
          currentLine += c; // add it to the end of the currentLine
        }
        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          //digitalWrite(LED_BUILTIN, HIGH);               // GET /H takes a picture and sends it via telegram
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          }
          take_send_photo(TChatId);
          digitalWrite(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x0);
        }
        if (currentLine.endsWith("GET /W")) { // init camera for the main camera webserver
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          }
        }
        if (currentLine.endsWith("GET /S")) { // deinitialize the camera
          cameraInitType = 0;
          esp_camera_deinit(); // the camera needs a deinit from its current configuration.
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x0); // GET /L restarts the device
          esp_restart();
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
void startCameraServer();
void wifiIntManagement() {
    // STA connection and disconnection management
// WIFI DEBUG AND SERVICING SECTION START
  if (wifiDebugOn == 1) {
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("WiFi not connected yet");
    }
    if (WiFi.status() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer(); // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
    }
  if (wifiConnectionAttempts >= 32) { // turning off wifi, there is no point in trying anymore, if past 32 attempts.
    WiFi.mode(WIFI_MODE_NULL); // turning off wifi, then we go to deep sleep for a certain number of seconds.
    esp_err_t err = esp_camera_deinit();
    esp_deep_sleep_start(); // going to deep sleep
  if ((wifiConnFlag == 0) && (wifiConnectionAttempts < 32)) { // wifiConnectionAttempts must be < 32 
    wifiConnectionAttempts++; // increasing the connection attempts counter
    if (wifiMulti.run() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer(); // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
      Serial2.print("WiFi up and running: ");
      Serial2.print(WiFi.localIP());
      Serial2.println("' to connect");
      wifiConnFlag = 1;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
    if ((WiFi.status() != WL_CONNECTED) && (wifiBeginFlag == 0)) {
      Serial.println("WiFi restarting");
      WiFi.begin(ssid, password);
      wifiBeginFlag = 1;
    }
  if (wifiConnFlag == 1) { // test if the wifi stays alive...
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() != WL_CONNECTED
      Serial.println("WiFi disconnected");
      wifiConnFlag = 0;
      wifiBeginFlag = 0;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
  if (((wifiConnFlag == 1) && (wifiWebserverFlag == 0)) || (ESP.getFreeHeap() < 44000)) { // servicing the webserver on connection up for the first time
      // >>>>>>>> START SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      // >>>>>>>> END SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      wifiWebserverFlag = 1;
  // WIFI DEBUG AND SERVICING SECTION END 
// UDP - layer 5 control protocol
void UresetudpData() {
for(int i = 0; i < 8; i++){
  for(int j = 0; j < 64; j++) {
    UdataSplit[i][j] = 0;
for(int i = 0; i < 8; i++) {
  UfieldsLen[i] = 0;
UdataLen = 0;
} // end resetudpData()
int UfillinudpData(uint8_t *pktDataField, int pktLen) {
int i = 0;
int j = 0;
int k = 0;
UdataLen = pktLen;
for(i = 0; i < UdataLen; i++){
  if(pktDataField[i] == ',') {
    UfieldsLen[j] = k;
    Serial.print("received_udp_control_protocol_data:");
    Serial.print(UdataSplit[j]);
    Serial.print("; data_len:");
    Serial.print(k);
    Serial.print("; field_position:");
    Serial.println(j);
    j++;
    k = 0;
  if(j >= 8) {
    Serial.print("ERROR: too many commas in the udp layer 5 control protocol");
    return 100;
  UdataSplit[j][k] = pktDataField[i];
  k++;
UfieldsLen[j] = k;
return 0;
} // end fillinudpData()
void UprocessudpCommand(AsyncUDPPacket packet) {
  Serial.print("processing udp layer 5 control protocol command directed to: ");
  Serial.print(UdataSplit[0]);
  Serial.print("; command is: ");
  Serial.println(UdataSplit[1]);
  // commands available at the moment, or planned, are: 
  // ACK (confirmed heartbeat reception, do nothing), TLGS (send picture to telegram), TLGC (configure telegram, field 2 = bot token, field 3 = chat id)
  // RST (reboot the device), DSLP (deep sleep)
  if(UdataSplit[0] == "e32cam001s01") { // matched the field 0, the command is directed to me. 
      // processing the actual commands
      if(UdataSplit[1] == "ACK") {
        // do not reply with an ACK to an ACK, that would be ...disturbing
        UserverOK = 3;
      }
      if(UdataSplit[1] == "TLGS") { // send picture via telegram
        //TBotToken
        //TChatId
        // technically speaking we should deinit and reinit with acceptable parameters. 
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
          if (cameraInitType != 0) {
            esp_camera_deinit(); // the camera needs a deinit from its current configuration.
          }
          delay(1000); // this might not really be necessary
          cameraInitConfig(); // and is setup for the correct motion capture configuration
          delay(3000);
        }
         // this might not really be necessary
        take_send_photo(TChatId);
      }
      if(UdataSplit[1] == "TLGC") { // configure telegram bot token and chat id
        bool ok;
        String sToken = convertToString(UdataSplit[2], UfieldsLen[2]);
        String sChatId = convertToString(UdataSplit[3], UfieldsLen[3]);
        ok = NVS.setString ("TLGToken", sToken); // Store the data value into the key named "TLGToken" on the NVS
        if(ok) {
          ok = NVS.setString ("TLGChatId", sChatId); // Store the data value into the key named "TLGChatId" on the NVS
        }
        if(ok) {
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf("e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        } else {
          Serial.println("ERROR saving data to nvs");
          packet.printf("e32cam001s01,ERR,ERROR saving data to NVS,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        }
      }
      if(UdataSplit[1] == "RST") { // restart system
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf("e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        esp_restart();
      }
      if(UdataSplit[1] == "DSLP") { // start deep sleep
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf("e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        Serial.println("RECEIVED REQUEST TO DEEP SLEEP, STARTING TO SLEEP DEEP");
        esp_err_t err = esp_camera_deinit();
        esp_deep_sleep_start(); // going to deep sleep
      }
      if(UdataSplit[1] == "WCAM") { // init camera for the webserver
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
        }
      }
      if(UdataSplit[1] == "SCAM") { // deinitialize the camera
        cameraInitType = 0;
        esp_camera_deinit(); // the camera needs a deinit from its current configuration.
      }
void udpCommandClient() {
  if( ! udp.connected()) {
    Serial.println("UDP connecting to server A");
    udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
    Serial.println("UDP connected to server A");
  if(udp.connected()) {
        Serial.println("UDP sending to server A");
        //Send unicast
        udp.print("e32cam001s01,HEARTBEAT,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/); // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
          }
        }
        udp.onPacket([](AsyncUDPPacket packet) {
            Serial.print("UDP Packet Type: ");
            Serial.print(packet.isBroadcast()?"Broadcast":packet.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packet.remoteIP());
            Serial.print(":");
            Serial.print(packet.remotePort());
            Serial.print(", To: ");
            Serial.print(packet.localIP());
            Serial.print(":");
            Serial.print(packet.localPort());
            Serial.print(", Length: ");
            Serial.print(packet.length());
            Serial.print(", Data: ");
            Serial.write(packet.data(), packet.length());
            Serial.println();
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packet.data() ,packet.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packet); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            // packet response processing END
        });
    }
// sending the heartbeat to the backup udp command server
void udpBCommandClient() {
  if( ! udpB.connected()) {
    Serial.println("UDP connecting to server B");
    udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
    Serial.println("UDP connected to server B");
  if(udpB.connected()) {
        Serial.println("UDP sending to server B");
        //Send unicast
        udpB.print("e32cam001s01,HEARTBEAT,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/); // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
          }
        }
        udpB.onPacket([](AsyncUDPPacket packetB) {
            Serial.print("UDP B Packet Type: ");
            Serial.print(packetB.isBroadcast()?"Broadcast":packetB.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packetB.remoteIP());
            Serial.print(":");
            Serial.print(packetB.remotePort());
            Serial.print(", To: ");
            Serial.print(packetB.localIP());
            Serial.print(":");
            Serial.print(packetB.localPort());
            Serial.print(", Length: ");
            Serial.print(packetB.length());
            Serial.print(", Data: ");
            Serial.write(packetB.data(), packetB.length());
            Serial.println();
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packetB.data() ,packetB.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packetB); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            // packet response processing END
        });
    }
void clientsManagement() {
  if ((wifiConnFlag == 1) && (wifiWebserverFlag == 1)) { // HANDLE CLIENT REQUESTS HERE
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    clientServe();
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
  } // end handle client requests if
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
// wakeup and init part 
  // packet / payload buffer allocation
  payloadBuffer = (uint8_t *)malloc(256 * sizeof(uint8_t)); // the actual size is 224 (see in the declarations), the maximum payload size for ESP-NOW is 250.
  pinMode(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x02);
  // deep sleep boots
  ++bootCount;
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  /*
  First we configure the wake up source
  We set our ESP32 to wake up every 5 seconds
  */
  esp_sleep_enable_timer_wakeup(60 /* Time ESP32 will go to sleep (in seconds) */ * 1000000ULL /* Conversion factor for micro seconds to seconds */);
// camera init and config
  Serial.println("WARNING, NOT INITIALIZING THE CAMERA IN ORDER TO SAVE POWER. PLEASE DO IT MANUALLY VIA UDP COMMANDS OR VIA THE MANAGEMENT HTTP SERVER ON PORT 8080");
  //cameraInitConfig(); // we want the camera not initialized by default. This saver power.
  /*
 if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
  */
// WIFI SECTION
  Serial.println();
  Serial.println("Configuring access point...");
  WiFi.mode(WIFI_MODE_APSTA); // added by me // selecting the AP+STA mode
  wifiMulti.addAP("e32ap001s01border", "giampippetto"); // the connection part is verified as follows: wifiMulti.run() == WL_CONNECTED
  wifiMulti.addAP("G5SE_7499", "pippopluto");
  wifiMulti.addAP("internet-gw.iw1gpe.it.ampr.o", "heisakuukanwohiraite");
  wifiMulti.addAP("inverse", "heisakuukanwohiraite");
  wifiMulti.addAP("e32ap002s01border", "giampippetto");
  wifiMulti.addAP("e32ap003s01border", "giampippetto");
  wifiMulti.addAP("e32ap004s01border", "giampippetto");
  wifiMulti.addAP("e32ap001s02border", "giampippetto");
  wifiMulti.addAP("e32ap002s02border", "giampippetto");
  wifiMulti.addAP("e32ap003s02border", "giampippetto");
  wifiMulti.addAP("e32ap004s02border", "giampippetto");
  // You can remove the password parameter if you want the AP to be open.
  WiFi.softAP(ssid, password);
  delay(200); // wait at least 100ms until the AP has started
  if(!WiFi.softAPConfig(SetAPIP, SetAPIP, IPAddress(255, 255, 255, 0))){
      Serial.println("AP Config Failed");
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  // the STA part is configured here and managed in loop()
// old wifi section
  //WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  Serial.println("");
  Serial.println("WiFi connected");
  startCameraServer();
  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  */
  // NVS storage init
  NVS.begin();
  // trying to load the bot configuration from NVS 
  //TBotToken
  //TChatId
  // load the telegram bot token if available from NVS
  String loadedstr = NVS.getString ("TLGToken"); // Read the value of the "TLGToken" key from the NVS 
  if(loadedstr.length() > 3) { // at least we make sure the result is not empty...
    TBotToken = {};
    loadedstr.toCharArray(TBotToken, loadedstr.length()); // loading TBotToken
    loadedstr = NVS.getString ("TLGChatId"); // Read the value of the "TLGChatId" key from the NVS 
    if(loadedstr.length() > 3) {
      loadedstr.toCharArray(TChatId, loadedstr.length()); // loading TChatId
      Serial.print("Loaded Telegram BotToken and ChatId from NVS storage with values: ");
      Serial.print(TBotToken);
      Serial.print(" and ");
      Serial.println(TChatId);
    }
} // END setup()
void loop() {
  // put your main code here, to run repeatedly:
 // loopCounter check
  if (loopCounter > 16) {
    loopCounter = 0;
  clientsManagement(); // web client requests are handled always 
  if(loopCounter == 1) {
    wifiIntManagement();
  if(loopCounter == 2) {
    routeTableUpdate();
  if(loopCounter == 3) {
    udpCommandClient();
    udp.broadcastTo("e32cam001s01", udpServerPort);
  if(loopCounter == 5) {
  // position number 15, let the device stabilize its connections first...
  if(loopCounter == 15) { // MOTION DETECTOR SECTION
    if ((motionDetectON == 1) || ((UserverOK == 0) && (alarmEnabled == 1)) ){
      if (!capture_still()) {
        Serial.println("Failed capture");
        delay(3000);
        return;
      }
      if (motion_detect()) {
        Serial.println("Motion detected");
    }
    update_frame();
    }
  // loopCounter increase
  loopCounter++;
  delay(1000);
#include <Arduino.h>
#line 1 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
// ESP32_cam_node, upgraded with una additional udp layer 5 control protocol and configurable telegram bot
// PLEASE ALSO INSTALL THE ArduinoJson library by Benoit Blanchon
#include "esp_camera.h"
#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiAP.h>
#include <WiFiUdp.h>
#include "AsyncUDP.h"
#include "lwip/api.h"
// NVS includes, non volatile storage
#include "ArduinoNvs.h"
// WIFI includes and variables section START
#define MY_NAME "e32cam001s01"
#define HEARTBEAT_DATA "e32cam001s01,HEARTBEAT,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ACK_DATA "e32cam001s01,ACK,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ERR_DATA "e32cam001s01,ERR,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ERRNVS_DATA "e32cam001s01,ERR,ERROR saving data to NVS,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#include <WiFiMulti.h> // this should support more different AP's // ToDo
WiFiMulti wifiMulti; // this should support more different AP's // ToDo
// Non volatile storage - incorporated in the project folder
#include "ArduinoNvs.h"
// CAMERA: camera configuration and initialization
camera_config_t config;
uint8_t cameraInitType = 0; // 0 = camera off, not initialized; 1 = default init, the main webserver; 2 = motion detector; 3 = color blob detector
#define ALARMS_ENABLED 1  // by default, the device works as a motion detector in case the contact with the command and control server is lost. 
// WARNING!!! Make sure that you have either selected ESP32 Wrover Module,
//            or another board which has PSRAM enabled
// Select camera model
//#define CAMERA_MODEL_WROVER_KIT
//#define CAMERA_MODEL_ESP_EYE
//#define CAMERA_MODEL_M5STACK_PSRAM
//#define CAMERA_MODEL_M5STACK_WIDE
#define CAMERA_MODEL_AI_THINKER
#include "camera_pins.h"
// of course this is the default and should be modified
#line 57 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void cameraInitConfig();
#line 145 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void cameraInitConfigMotionDetect();
#line 344 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void cameraInitConfigColorDetector();
#line 433 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
bool isMoreDataAvailable();
#line 437 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
uint8_t photoNextByte();
#line 442 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void take_send_photo(String TChatId);
#line 587 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
String convertToString(char* a, int size);
#line 609 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void print_wakeup_reason();
#line 629 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void routeTableUpdate();
#line 718 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void clientServe();
#line 806 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void wifiIntManagement();
#line 929 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void UresetudpData();
#line 947 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
int UfillinudpData(uint8_t *pktDataField, int pktLen);
#line 983 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void UprocessudpCommand(AsyncUDPPacket packet);
#line 1084 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void udpCommandClient();
#line 1153 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void udpBCommandClient();
#line 1220 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void clientsManagement();
#line 1238 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void setup();
#line 1356 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void loop();
#line 57 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void cameraInitConfig() {
  // camera part
  cameraInitType = 1;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// MOTION DETECTION SPECIFIC CAMERA DEFINES and buffers
#define WIDTH 320
#define HEIGHT 240
#define BLOCK_SIZE 10
#define W (WIDTH / BLOCK_SIZE)
#define H (HEIGHT / BLOCK_SIZE)
#define BLOCK_DIFF_THRESHOLD 0.2
#define IMAGE_DIFF_THRESHOLD 0.1
#define DEBUG 1
bool capture_still(); // declare functions
bool motion_detect();
void update_frame();
void print_frame(uint16_t frame[H][W]);
uint16_t prev_frame[H][W] = { 0 };  // these are actually 32*24 * 16bit, more than acceptable, no problem.
uint16_t current_frame[H][W] = { 0 };
uint8_t motionDetectON = 0;  // motion detection is normally kept off. The idea is to activate it in case the command & control servers do not respond, or to activate it on demand / on alarm.
uint8_t alarmEnabled = ALARMS_ENABLED; // motion detection activation is enabled by default to 1, some other kinds of usage may require this is off, for example the color blob detection mode and the webcam / telegram modes. 
// MOTION DETECTION SPECIFIC CAMERA CONFIG INIT FUNCTION (first, remember to do a deinit!!!)
void cameraInitConfigMotionDetect() {
  // camera part
  cameraInitType = 2;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_GRAYSCALE;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// CAMERA MOTION DETECTION SPECIFIC FUNCTIONS
 * Capture image and do down-sampling
bool capture_still() {
    camera_fb_t *frame_buffer = esp_camera_fb_get();
    if (!frame_buffer)
        return false;
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    //sensor_t *sensor = esp_camera_sensor_get();
    //Serial.print("Switch to JPEG: ");
    //Serial.println(sensor->set_pixformat(sensor, PIXFORMAT_RGB565));
    config.pixel_format = PIXFORMAT_RGB565;
    Serial.print("Switch ok? ");
    Serial.println(esp_camera_init(&config) == ESP_OK ? "yes" : "no");
    frame_buffer = esp_camera_fb_get();
    Serial.print("JPEG len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    //sensor->set_pixformat(sensor, PIXFORMAT_GRAYSCALE);
    frame_buffer = esp_camera_fb_get();
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    while (1) delay(50000);
    // set all 0s in current frame
    for (int y = 0; y < H; y++)
        for (int x = 0; x < W; x++)
            current_frame[y][x] = 0;
    // down-sample image in blocks
    for (uint32_t i = 0; i < WIDTH * HEIGHT; i++) {
        const uint16_t x = i % WIDTH;
        const uint16_t y = floor(i / WIDTH);
        const uint8_t block_x = floor(x / BLOCK_SIZE);
        const uint8_t block_y = floor(y / BLOCK_SIZE);
        const uint8_t pixel = frame_buffer->buf[i];
        const uint16_t current = current_frame[block_y][block_x];
        // average pixels in block (accumulate)
        current_frame[block_y][block_x] += pixel;
    }
    // average pixels in block (rescale)
    for (int y = 0; y < H; y++)
        for (int x = 0; x < W; x++)
            current_frame[y][x] /= BLOCK_SIZE * BLOCK_SIZE;
#if DEBUG
    Serial.println("Current frame:");
    print_frame(current_frame);
    Serial.println("---------------");
#endif
    return true;
 * Compute the number of different blocks
 * If there are enough, then motion happened
bool motion_detect() {
    uint16_t changes = 0;
    const uint16_t blocks = (WIDTH * HEIGHT) / (BLOCK_SIZE * BLOCK_SIZE);
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            float current = current_frame[y][x];
            float prev = prev_frame[y][x];
            float delta = abs(current - prev) / prev;
            if (delta >= BLOCK_DIFF_THRESHOLD) {
#if DEBUG
                Serial.print("diff\t");
                Serial.print(y);
                Serial.print('\t');
                Serial.println(x);
#endif
                changes += 1;
            }
        }
    }
    Serial.print("Changed ");
    Serial.print(changes);
    Serial.print(" out of ");
    Serial.println(blocks);
    return (1.0 * changes / blocks) > IMAGE_DIFF_THRESHOLD;
 * Copy current frame to previous
void update_frame() {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            prev_frame[y][x] = current_frame[y][x];
        }
    }
 * For serial debugging
 * @param frame
void print_frame(uint16_t frame[H][W]) {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            Serial.print(frame[y][x]);
            Serial.print('\t');
        }
        Serial.println();
    }
// CAMERA COLOR BLOB DETECTOR, INIT FUNCTION
// color-based blob detection - I plan to use this as part of a larger project, the idea is to help detect certain insects and pests in agricultural settings
// this camera will then become an additional sensor communicating with a robot designed to remove pests from invaded plants. 
void cameraInitConfigColorDetector() {  // specific for color-based target recognition, remember to do a deinit first!!!
  // camera part
  cameraInitType = 3;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_RGB888;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// Telegram section
#include "UniversalTelegramBotRZO.h"
#include <WiFiClientSecure.h>
char* TBotToken = "810218086:AAFPJNDbolU0tzj_Xx6lXOsatDlYnWYaa80";
char* TChatId = "537093554";
WiFiClientSecure client;
UniversalTelegramBot TBotCambot(TBotToken, client);
int Bot_mtbs = 3000; //mean time between scan messages
long Bot_lasttime;   //last time messages' scan has been done
// specific camera variables for the telegram bot
//camera_fb_t * TBotCamfb; // moved intra-function
uint8_t* TBotCamfb_buffer;
size_t TBotCamfb_length;
int TBotCamcurrentByte;
// camera functions specific for the telegram bot
bool isMoreDataAvailable() {
  return (TBotCamfb_length - TBotCamcurrentByte);
uint8_t photoNextByte() {
  TBotCamcurrentByte++;
  return (TBotCamfb_buffer[TBotCamcurrentByte - 1]);
void take_send_photo(String TChatId)
  camera_fb_t * TBotCamfb = NULL;
  TBotCamfb = esp_camera_fb_get();
  TBotCamcurrentByte = 0;
  TBotCamfb_length = TBotCamfb->len;
  TBotCamfb_buffer = TBotCamfb->buf;
  TBotCambot.sendPhotoByBinary(TChatId, "image/jpeg", TBotCamfb->len, isMoreDataAvailable, photoNextByte, nullptr, nullptr);
  esp_camera_fb_return(TBotCamfb);
  TBotCamfb_length = NULL;
  TBotCamfb_buffer = NULL;
// UDP Async client, sends keep heartbeat messages to the server and retrieves commands
AsyncUDP udp; // for server A  // udp layer 5 control protocol
AsyncUDP udpB; // for server B
// command and control IP addresses for server A and server B (redundant server), the exchange is done via udp ( the port is defined by int udpServerPort) and the layer 5 transfers commands and status info as comma separated variables
int IPudpServerAa = 192;
int IPudpServerAb = 168;
int IPudpServerAc = 88;
int IPudpServerAd = 32;
int IPudpServerBa = 192;
int IPudpServerBb = 168;
int IPudpServerBc = 88;
int IPudpServerBd = 3;
int udpServerPort = 8443; // UDP/443 because, well, we can
// udp - layer 5 control protocol processing, the layer 5 control protocol consists of 8 CSV fields. The protocol structure is simple: client_name,requested_operation,field1,field2,field3,field4,field5,field6  all unused fields are set to ascii character 0
#define FIELDUA 8
#define FIELDUB 64
char UdataSplit[FIELDUA][FIELDUB];
int UfieldsLen[FIELDUA];
int UdataLen = 0;
int UserverOK = 0; // contact with the server attempted for 3 times in a row, failing. Say, the idea is: ACK from server received: set to 3, send HEARTBEAT: decrease by 1 until zero is reached, then stop decreasing.
static uint8_t wifiDebugOn = 0;
static uint8_t wifiConnFlag = 0;
static uint8_t wifiWebserverFlag = 0;
static uint8_t wifiBeginFlag = 0;
static uint8_t wifiConnectionAttempts = 0;
// Set the local access point IP address, the netmask is assumed to be /24
IPAddress SetAPIP = {192,168,5,1};  // REMEMBER TO CHANGE THIS FOR EVERY AP YOU PLAN TO INTRODUCE TO THE NETWORK
// Set these to your desired credentials.
const char *ssid = MY_NAME;  // for the local AP  // REMEMBER TO CHANGE THE SSID AS WELL, THE NET PART CONTAINS THE THIRD BYTE OF THE AP IP ADDRESS (the network LSByte)
const char *password = "giampippetto";
WiFiServer serverSTA(8080); // adding a second server on the STA interface? Let's try
// loop() control section
uint32_t loopCounter = 0;
// NETWORK section
// processing variables subsection
uint8_t payloadCurrContent[128] = {0};
uint8_t hashCurrContent[64] = {0};
uint8_t payHeaderCurrContent[32] = {0};
// NAt processing subsection
uint32_t payloadTypeF = 0;
uint32_t srcIPext = 0; // STA side
uint32_t dstIPext = 0;
uint32_t srcIPint = 0; // AP side
uint32_t dstIPint = 0;
uint32_t srcIPpay = 0; // payload side
uint32_t dstIPpay = 0;
// in the NAT table, the folloving are converted to uint32_t 
uint16_t srcPortext = 0; // STA side
uint16_t dstPortext = 0;
uint16_t srcPortint = 0; // AP side
uint16_t dstPortint = 0;
uint16_t srcPortpay = 0; // payload side
uint16_t dstPortpay = 0;
uint16_t expiryCounter = 0;
// NAT table subsection
uint32_t NATline[16] = {0};  // there are 14 fields actually, as per the above list, plus 2 reserved fields
uint32_t NATtable[256][16] = {0};
uint16_t NATlinePointer = 0; // do we allow up to 256 flows only?
// routing table subsection
uint16_t RoutelinePointer = 0; // do we allow up to 16 routes only?
uint32_t routetable[16][8] = {0};  // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
//packet buffer sub-section
uint8_t payloadToProcessFlag = 0; // if the LSB bit0 == 1, there is a payload that needs processing, other values / bits set may mean other operations.
uint8_t * payloadBuffer = NULL;
//structure of the packet buffer:
Size = 224Bytes = 32B header + 128B payload + 64B hash
4B = Type Field( 4 bytes ) = reqtype(1B), protocolNum(1B), Reserved(1B), Reserved(1B)
4B = DST IP
4B = SRC IP 
2B = DST PORT
2B = SRC PORT
2B = PayloadLen
2B = Reserved
4B = Reserved
4B = Reserved
4B = Reserved
128B = actual payload
64B = sha256Hash_reserved(32B raw or 64B hex)
// LED section
#define LED_BUILTIN 2   // Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED
// string section 
// converts character array 
// to string and returns it 
String convertToString(char* a, int size) 
    int i; 
    String s = ""; 
    for (i = 0; i < size; i++) { 
        s = s + a[i]; 
    } 
    return s; 
// deep sleep section
#define uS_TO_S_FACTOR 1000000ULL  /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  60        /* Time ESP32 will go to sleep (in seconds) */
RTC_DATA_ATTR int bootCount = 0;
Method to print the reason by which ESP32
has been awaken from sleep
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch(wakeup_reason)
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
// update the routing table
void routeTableUpdate() {
// RoutelinePointer // do we allow up to 16 routes only?
//uint32_t *routetable[16][8] // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
uint32_t ImyLocalIP = 0;
uint32_t ImyLocalSubnet = 0;
uint32_t ImyAPIP = 0;
uint32_t ImyAPSubnet = 0;
uint32_t ImyLocalSubnetMask = 0;
uint32_t ImyAPSubnetMask = (255 >> 24) + (255 >> 16) + (255 >> 8);
uint32_t ImyLocalGateway = 0;
IPAddress myLocalIP = {0,0,0,0};
IPAddress myLocalSubnet = {0,0,0,0};
IPAddress myLocalSubnetMask = {0,0,0,0};
IPAddress myLocalGateway = {0,0,0,0};
IPAddress myAPIP = WiFi.softAPIP();
ImyAPIP = (uint32_t)((myAPIP[0] << 24) + (myAPIP[1] << 24) + (myAPIP[2] << 24) + myAPIP[3]);
ImyAPSubnet = ImyAPIP & ImyAPSubnetMask;
// the first lines
// line 0 local AP  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
routetable[0][0] = ImyAPSubnet;
routetable[0][1] = ImyAPSubnetMask;
routetable[0][2] = ImyAPIP;
routetable[0][3] = 0; // gateway of course set to 0 for the AP side
routetable[0][4] = 0; // interface ID set to zero, for the moment.
routetable[0][5] = 0;
routetable[0][6] = 0;
routetable[0][7] = 0;
if (wifiConnFlag == 1) {
  myLocalIP = WiFi.localIP();
  myLocalSubnet = WiFi.subnetMask();
  myLocalGateway = WiFi.gatewayIP();
  ImyLocalIP = (myLocalIP[0] << 24) + (myLocalIP[1] << 24) + (myLocalIP[2] << 24) + myLocalIP[3];
  ImyLocalSubnetMask = (myLocalSubnetMask[0] << 24) + (myLocalSubnetMask[1] << 24) + (myLocalSubnetMask[2] << 24) + myLocalSubnetMask[3];
  ImyLocalGateway = (myLocalGateway[0] << 24) + (myLocalGateway[1] << 24) + (myLocalGateway[2] << 24) + myLocalGateway[3];
  ImyLocalSubnet = ImyLocalIP & ImyLocalSubnetMask;
  // line 1 STA  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
  routetable[1][0] = ImyLocalSubnet;
  routetable[1][1] = ImyLocalSubnetMask;
  routetable[1][2] = ImyLocalIP;
  routetable[1][3] = ImyLocalGateway;
  routetable[1][4] = 1; // interface ID set to 1, for the moment.
  routetable[1][5] = 0;
  routetable[1][6] = 0;
  routetable[1][7] = 0; 
} else {
  routetable[1][0] = 0; // nullifying the STA route
  routetable[1][1] = 0; // nullifying the STA route
  routetable[1][2] = 0; // nullifying the STA route
  routetable[1][3] = 0; // nullifying the STA route
  routetable[1][4] = 0; // nullifying the STA route
  routetable[1][5] = 0; // nullifying the STA route
  routetable[1][6] = 0; // nullifying the STA route
  routetable[1][7] = 0; // nullifying the STA route
}  // end void routetableupdate()
// handle client requests
void clientServe() {
  WiFiClient client = serverSTA.available();   // listen for incoming clients
  if (client) {                             // if you get a client,
    Serial.println("New Client.");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to take a picture and send it via telegram (configure via udp layer 5 control protocol).<br>");
            client.print("Click <a href=\"/L\">here</a> to restart the device.<br>");
            client.print("Click <a href=\"/W\">here</a> to initialize the camera hardware for the integrated camera webserver.<br>");
            client.print("Click <a href=\"/S\">here</a> to deinitialize the camera hardware and save power.<br>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          //digitalWrite(LED_BUILTIN, HIGH);               // GET /H takes a picture and sends it via telegram
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
          take_send_photo(TChatId);
          digitalWrite(LED_BUILTIN, LOW);  
        }
        if (currentLine.endsWith("GET /W")) {  // init camera for the main camera webserver
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
        }
        if (currentLine.endsWith("GET /S")) {  // deinitialize the camera
          cameraInitType = 0;
          esp_camera_deinit();  // the camera needs a deinit from its current configuration.
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(LED_BUILTIN, LOW);                // GET /L restarts the device
          esp_restart();
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
void startCameraServer();
void wifiIntManagement() {
    // STA connection and disconnection management
// WIFI DEBUG AND SERVICING SECTION START
  if (wifiDebugOn == 1) {
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
    
      Serial.println("WiFi not connected yet");
    }
    if (WiFi.status() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
    
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
    }
  if (wifiConnectionAttempts >= 32) { // turning off wifi, there is no point in trying anymore, if past 32 attempts.
    WiFi.mode(WIFI_OFF); // turning off wifi, then we go to deep sleep for a certain number of seconds.
    
    esp_err_t err = esp_camera_deinit();
    esp_deep_sleep_start();  // going to deep sleep
    
  if ((wifiConnFlag == 0) && (wifiConnectionAttempts < 32)) {  // wifiConnectionAttempts must be < 32 
    wifiConnectionAttempts++; // increasing the connection attempts counter
    
    if (wifiMulti.run() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
      Serial2.print("WiFi up and running: ");
      Serial2.print(WiFi.localIP());
      Serial2.println("' to connect");
      wifiConnFlag = 1;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
    if ((WiFi.status() != WL_CONNECTED) && (wifiBeginFlag == 0)) {
    
      Serial.println("WiFi restarting");
      WiFi.begin(ssid, password); 
      
      wifiBeginFlag = 1;
    }
  if (wifiConnFlag == 1) { // test if the wifi stays alive...
    if (WiFi.status() != WL_CONNECTED) {  // wifiMulti.run() == WL_CONNECTED // WiFi.status() != WL_CONNECTED
    
      Serial.println("WiFi disconnected");
      wifiConnFlag = 0;
      wifiBeginFlag = 0;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
  if (((wifiConnFlag == 1) && (wifiWebserverFlag == 0)) || (ESP.getFreeHeap() < 44000)) { // servicing the webserver on connection up for the first time
      // >>>>>>>> START SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      // >>>>>>>> END SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      
      wifiWebserverFlag = 1;
    
  // WIFI DEBUG AND SERVICING SECTION END 
// UDP - layer 5 control protocol
void UresetudpData() {
for(int i = 0; i < FIELDUA; i++){
  for(int j = 0; j < FIELDUB; j++) {
    UdataSplit[i][j] = 0;
for(int i = 0; i < FIELDUA; i++) {
  UfieldsLen[i] = 0;
UdataLen = 0;
} // end resetudpData()
int UfillinudpData(uint8_t *pktDataField, int pktLen) {
int i = 0;
int j = 0;
int k = 0;
UdataLen = pktLen;
for(i = 0; i < UdataLen; i++){
  if(pktDataField[i] == ',') {
    UfieldsLen[j] = k;
    Serial.print("received_udp_control_protocol_data:");
    Serial.print(UdataSplit[j]);
    Serial.print("; data_len:");
    Serial.print(k);
    Serial.print("; field_position:");
    Serial.println(j);
    j++;
    k = 0;
  if(j >= FIELDUA) {
    Serial.print("ERROR: too many commas in the udp layer 5 control protocol");
    return 100;
    
  UdataSplit[j][k] = pktDataField[i];
  k++; 
UfieldsLen[j] = k;
return 0;
} // end fillinudpData()
void UprocessudpCommand(AsyncUDPPacket packet) {
  Serial.print("processing udp layer 5 control protocol command directed to: ");
  Serial.print(UdataSplit[0]);
  Serial.print("; command is: ");
  Serial.println(UdataSplit[1]);
  // commands available at the moment, or planned, are: 
  // ACK (confirmed heartbeat reception, do nothing), TLGS (send picture to telegram), TLGC (configure telegram, field 2 = bot token, field 3 = chat id)
  // RST (reboot the device), DSLP (deep sleep)
  if(UdataSplit[0] == MY_NAME) {  // matched the field 0, the command is directed to me. 
      
      // processing the actual commands
      
      if(UdataSplit[1] == "ACK") {
        // do not reply with an ACK to an ACK, that would be ...disturbing
        UserverOK = 3;
      }
      if(UdataSplit[1] == "TLGS") {  // send picture via telegram
        //TBotToken
        //TChatId
        // technically speaking we should deinit and reinit with acceptable parameters. 
        
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
          if (cameraInitType != 0) {
            esp_camera_deinit();  // the camera needs a deinit from its current configuration.
          }
          delay(1000); // this might not really be necessary
          cameraInitConfig(); // and is setup for the correct motion capture configuration
          delay(3000);
        }
         // this might not really be necessary
        take_send_photo(TChatId);   
      }
      if(UdataSplit[1] == "TLGC") { // configure telegram bot token and chat id
        bool ok; 
        String sToken = convertToString(UdataSplit[2], UfieldsLen[2]); 
        String sChatId = convertToString(UdataSplit[3], UfieldsLen[3]); 
        ok = NVS.setString ("TLGToken", sToken); // Store the data value into the key named "TLGToken" on the NVS
        if(ok) {
          ok = NVS.setString ("TLGChatId", sChatId); // Store the data value into the key named "TLGChatId" on the NVS
          
        }
        if(ok) {
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        } else {
          Serial.println("ERROR saving data to nvs");
          packet.printf(ERRNVS_DATA, packet.length());
        }
        
        
      }
      if(UdataSplit[1] == "RST") {  // restart system
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        esp_restart();
      }
      if(UdataSplit[1] == "DSLP") { // start deep sleep
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        Serial.println("RECEIVED REQUEST TO DEEP SLEEP, STARTING TO SLEEP DEEP");
        esp_err_t err = esp_camera_deinit();
        esp_deep_sleep_start();  // going to deep sleep
      }
      if(UdataSplit[1] == "WCAM") { // init camera for the webserver
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
        }   
      }
      if(UdataSplit[1] == "SCAM") { // deinitialize the camera
        cameraInitType = 0;
        esp_camera_deinit();  // the camera needs a deinit from its current configuration.
      }
      
      
void udpCommandClient() {
  if( ! udp.connected()) {
    Serial.println("UDP connecting to server A");
    udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
    Serial.println("UDP connected to server A");
  if(udp.connected()) {
        Serial.println("UDP sending to server A");
        //Send unicast
        udp.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udp.onPacket([](AsyncUDPPacket packet) {
            Serial.print("UDP Packet Type: ");
            Serial.print(packet.isBroadcast()?"Broadcast":packet.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packet.remoteIP());
            Serial.print(":");
            Serial.print(packet.remotePort());
            Serial.print(", To: ");
            Serial.print(packet.localIP());
            Serial.print(":");
            Serial.print(packet.localPort());
            Serial.print(", Length: ");
            Serial.print(packet.length());
            Serial.print(", Data: ");
            Serial.write(packet.data(), packet.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packet.data() ,packet.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packet); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
// sending the heartbeat to the backup udp command server
void udpBCommandClient() {
  if( ! udpB.connected()) {
    Serial.println("UDP connecting to server B");
    udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
    Serial.println("UDP connected to server B");
  if(udpB.connected()) {
        Serial.println("UDP sending to server B");
        //Send unicast
        udpB.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udpB.onPacket([](AsyncUDPPacket packetB) {
            Serial.print("UDP B Packet Type: ");
            Serial.print(packetB.isBroadcast()?"Broadcast":packetB.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packetB.remoteIP());
            Serial.print(":");
            Serial.print(packetB.remotePort());
            Serial.print(", To: ");
            Serial.print(packetB.localIP());
            Serial.print(":");
            Serial.print(packetB.localPort());
            Serial.print(", Length: ");
            Serial.print(packetB.length());
            Serial.print(", Data: ");
            Serial.write(packetB.data(), packetB.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packetB.data() ,packetB.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packetB); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
void clientsManagement() {
  if ((wifiConnFlag == 1) && (wifiWebserverFlag == 1)) { // HANDLE CLIENT REQUESTS HERE
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
    clientServe();
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
  } // end handle client requests if
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
// wakeup and init part 
  // packet / payload buffer allocation
  payloadBuffer = (uint8_t *)malloc(256 * sizeof(uint8_t));  // the actual size is 224 (see in the declarations), the maximum payload size for ESP-NOW is 250.
  pinMode(LED_BUILTIN, OUTPUT);
  // deep sleep boots
  ++bootCount;
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  /*
  First we configure the wake up source
  We set our ESP32 to wake up every 5 seconds
  */
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
// camera init and config
  Serial.println("WARNING, NOT INITIALIZING THE CAMERA IN ORDER TO SAVE POWER. PLEASE DO IT MANUALLY VIA UDP COMMANDS OR VIA THE MANAGEMENT HTTP SERVER ON PORT 8080");
  //cameraInitConfig(); // we want the camera not initialized by default. This saver power.
  /*
 if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
  */
// WIFI SECTION
  Serial.println();
  Serial.println("Configuring access point...");
  WiFi.mode(WIFI_AP_STA); // added by me // selecting the AP+STA mode
  wifiMulti.addAP("e32ap001s01border", "giampippetto");  // the connection part is verified as follows: wifiMulti.run() == WL_CONNECTED
  wifiMulti.addAP("G5SE_7499", "pippopluto");
  wifiMulti.addAP("internet-gw.iw1gpe.it.ampr.o", "heisakuukanwohiraite");
  wifiMulti.addAP("inverse", "heisakuukanwohiraite");
  wifiMulti.addAP("e32ap002s01border", "giampippetto");
  wifiMulti.addAP("e32ap003s01border", "giampippetto");
  wifiMulti.addAP("e32ap004s01border", "giampippetto");
  wifiMulti.addAP("e32ap001s02border", "giampippetto");
  wifiMulti.addAP("e32ap002s02border", "giampippetto");
  wifiMulti.addAP("e32ap003s02border", "giampippetto");
  wifiMulti.addAP("e32ap004s02border", "giampippetto");
  // You can remove the password parameter if you want the AP to be open.
  WiFi.softAP(ssid, password);
  delay(200); // wait at least 100ms until the AP has started
  if(!WiFi.softAPConfig(SetAPIP, SetAPIP, IPAddress(255, 255, 255, 0))){
      Serial.println("AP Config Failed");
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  // the STA part is configured here and managed in loop()
// old wifi section
  //WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  Serial.println("");
  Serial.println("WiFi connected");
  startCameraServer();
  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  */
  // NVS storage init
  NVS.begin();
  // trying to load the bot configuration from NVS 
  //TBotToken
  //TChatId
  // load the telegram bot token if available from NVS
  String loadedstr = NVS.getString ("TLGToken"); // Read the value of the "TLGToken" key from the NVS 
  if(loadedstr.length() > 3) { // at least we make sure the result is not empty...
    TBotToken = {};
    loadedstr.toCharArray(TBotToken, loadedstr.length()); // loading TBotToken
    loadedstr = NVS.getString ("TLGChatId"); // Read the value of the "TLGChatId" key from the NVS 
    if(loadedstr.length() > 3) {
      loadedstr.toCharArray(TChatId, loadedstr.length()); // loading TChatId
      Serial.print("Loaded Telegram BotToken and ChatId from NVS storage with values: ");
      Serial.print(TBotToken);
      Serial.print(" and ");
      Serial.println(TChatId);
    }
} // END setup()
void loop() {
  // put your main code here, to run repeatedly:
 // loopCounter check
  if (loopCounter > 16) {
    loopCounter = 0;
  clientsManagement();  // web client requests are handled always 
  if(loopCounter == 1) {
    wifiIntManagement();
  if(loopCounter == 2) {
    routeTableUpdate();
  if(loopCounter == 3) {
    udpCommandClient();
    udp.broadcastTo(MY_NAME, udpServerPort);
  if(loopCounter == 5) {
  // position number 15, let the device stabilize its connections first...
  if(loopCounter == 15) { // MOTION DETECTOR SECTION
    if ((motionDetectON == 1) || ((UserverOK == 0) && (alarmEnabled == 1)) ){
      
      if (!capture_still()) {
        Serial.println("Failed capture");
        delay(3000);
        return;
      }
      if (motion_detect()) {
        Serial.println("Motion detected");
    }
    update_frame();
    }
  // loopCounter increase
  loopCounter++;
  delay(1000);
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585476326
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
"3DUfw`
_CONSOLE
%MsW\]
^i32H
*>Um
B}qh
TUa#z
vzv#
/T/2
pIL1
4%?S
]R**
vz\q%
.3rPL
6=kz
S<OqU
O?"O
$hy%
<`mv
s4[~
:2iQs
7p#:o
To$?
crYc
kFRdOX
un'K)
3@bn
qr/>
8b]%
5@Xq[]
w2|`
]z:o"
o^I3Y
QDWy
/MU>
o+6:
_A<[
JbUoZXV
'4BK
iV=`
M Yu
,vM7
#y4(
CR;[
jepu
H=sO
@Sx:
Z2b6
DC0G
G	Yfag
5%EY+
$G/+3
9kOH8/
P':v?U=
C:^4
y>(0
I$	/"
-	ik
_HN'm
bPVqD
ZWUTXDL
tg:q
2WCiJ
qiG)H	
BJ{tbUq
E ,gWd
;m&#*gx
jz%`
9kS=
ZWMlhJ
P?;q<2
eu-{
tirWb,Qx
Vw-5
8bXA[
AJ:z
0VBw
>@0)
YQR1
uS:M`
j]Oi
7cv7u
/=/"yW
2"OFv
K[c8
0#T`W
/-at
!3a,5n
`MxKs
(T7}<
g9en
/|XiC
E=7=
c91%1C*7
Oo(c< sF
Wjr}
RXI)
GT'n
=!!h
y#qxv
l;Ai
1OnW}
l=H{
WzRV
sHD_u
=ChYv
>V5i
bb)nq
b.Gt
FV|Pn
L1m%
rgNf
p5"7
-b[l
a$]fro
k-<C
}>.|
&imm\
	zuC
E0_U
x8P>gN\
Ve#J
{N,fz
dy?T
Nt|:
e"AN
"W3r
o5vW
Kt[Q(Y
.{PiOXM~
2rAW?
a,UF
cH8]U
+S.j>
D|v,U
pN2|
OETd
>HM`
KcU	
 X6s
-L"?
#M|x
2uBg68"
^LNF
Hr^O
%/j:
83=v>
#m;IN
8IST0
px0T
Z`E$
VG>R[
593<
A,Z0
<4q$
{gv}
=pO4
hNe6t}
2RwrT
UNi=6
IJ)6
AIRx
J1dqA
q$i2
Az#R
[X%{@*Z
<6`n
)!F8
fN`)
'UzgF
z	US,
H#'5
>q+N
:k|nB$~
R03@Q
>I,&r
3`IA
FYEY
Eh/=
yY[k
VrqA
,W5	ZY
zL$i
76$/
&D`J
Y(CoM!
(?,/K
1}!E
rg@~
<2>Y
a&fR
X!:d
UP6|mO
@S(o
Qe)J
Z,C!
NX3)
0]MogQ
QpeO
rnvf
?o$w6<
'U;NX
+@XB/
h+I;a
:F3b)
^F|3K
uo^K
<N/;
{_*	
g#6n
Sr0c
g0CP%
xrm7-\
pF.&
Hyu$ GK
kJ&i
iMMHu
LjYtC
j9Hhl9
zv&:
2dj}
LiJ}qV
^`m-tv
kjyl
@]D4)
aa n 
eRvFU}y
|NCL9
3'9A
.Ga/
JY([\
+r`#
,P[:k
OZ5J
L-<>
Uon*
/U[hw
zTa`X
Povs
&:?bv
\Dg-
;MDN
Owpb}
$UCn
CsMD
KfaI
(d(z<"9qO4	
y4d!Z~
&QsIV
pGy=
f_%L(z
IMdD
~nB<
`}"1%G
+C3m
=M!a
,0;~
n9k;
y2	(
eN\G\B=
Phk$X=
1-dx
qG=r*
D'S3
s^a8F[
!gYvS
qL56:{
`*>\
,dTY
BiqF
W<X\
*l'^
<[vl
$QgCT
WRW	
evjI
8L;)
C{iG
D|W!
O'xFJ
dpTe
^EjH:
2..L
*u^R
OsV;
a"x?
l}p_
tPjD
ZQJG?
O\,+cm
g=^\
V,Vy]
YP21
DlrV
\{$y
#Sv&
>LrN
Mo5J
~)o~
vA;X
](cx(Y
gFaJ~
,VKm{
rH_"=
^8&6.
[qJ7
yT[p
"3DUfw`
_CONSOLE
DQy<
hTV4`Ll
e<tz
0d{)
|U.#
S\Wq
-([1Y
6%pW
{LjR
Pt`{
SVTd
JVX-#q
	wU@w
_,Ps
R<eel
KF]B
hd;~
Rt'K
c723
T-#v
}Q<L
eX2+E2+
/1l 
,%F&
8KyDa
>6{KAQ
n@.s
_4+|
bbC~
`)3d&
oc2~yD
,=E'M
6a?:
K;gN
d>}eN
ah3aW(tk
?jQ_d`
zG["
SE0t
"-z5
t7A_
p|`-
CL $p
Z[Vw
NC("
a='#
3T^VHv
K4Qr
:9=q
$THC
+	w0
q,Oz
]ZQW
I1a{M/
9iT7
}%; 4
5w_/
i9s{]
4{0c_
ZT@$
#13g0
`b]4|
b)3g
McAWz
s(aK
WSUCB
?ng`
#(o*
I4'?K@
NQI|N
c9ZH
4tmQ
[sG7
N0J2
K,G#
Iy@VV
]G s
sg8r
p~>0
~RwxQ
r~8#
AyDsB
*y:4y!
Zt.aN
?P5du
/0\a
A<$N
"""`
sb05
W+)b
hkd[
,hcw
3_T=JW
/@k9L
v.	$"
i_=	{uh:+0
G5Lv
Zjh@G
Qngz
{o7O
VDzB
UX13y
1_h&n
~(Q@!
;Cf%
0]1 
4|@^
%X]z
 yMYJ
cZ+C
	+BD
A=eq
gJ!W=
E\W_8
(bSX
;W(:
rX2m
'Jd9q
ED>!I
_vbi
1e!T\
uW>6
+Ra{
 @;|Kg
Up*4
)NWC
k5'p
%b*4
W.H*
puW=
'nH8%
N\B($i
v^-d~x
f(9wl
$|%%
+s`_
u5uWq
Zz9o
wkz;
}HBbMafo>
2&@i
KqQ]
(@T.
eNnom
{X_E
Up_>
Y&(R
_G#*
49'H8
R*$C
i:RQ
E,b!
hwX\
w> P
KF8Q
A5g"
CsHA
F*_3p
d?pk
QMUg
"Cn3
MPn'
EPYk
_tH,
fDf5A'j
;LK$
lh#Ma
ObO6;
kC9Y'
YTT2
X4Mg
{ZtS,k
d&?n
fcx'
;f`O
_*d/
6liU
)<%jl
coJzuC
v.H_
koKmmu
r*OM
;)pU
2jJ7
i:AU
HC,v%
~R8`
3P/R
8n/8%
Cu8 
!4@Dw
'RA5
Z!]P|
qZ;@
#7;0Fc
+1_6e
w_5P_=:X
npXI
2Eaf)u8p
OKlMF
F1WgG
@s9p
>"%@
YtlB
I!Z`
F!h|s
=d0P
6T?J
f4Q:
'[40*dB
4I*o7&
c'_8
M$*v
T,"i]
cJXBb
An%_{@N
[I!@
EV {
)!7g
'5Q{
ck8S
I6f7
;W>i
:Kw@
`@zv
qZ:U++)ky
Q 6+pY
W"=M
j8asH
EY^)<!8
Wz:<
Ktz6
}}>*+
:n)2
48ip
9 +")0^9
*JQ/
FXYal
8hZ-
qSvX
~E~?
M1jL9
F$Ed
-@Zt
R4tg
hL!T
Z[QD
M;|S	R
pXW%
=A"y
#[ZvKJG
;T"z!
j;i`-
E2)xP2X
4`>#X
3RH.dy
N,Za<{N
^o-G5
,3p0
 <^e
\1|*
{bAh
T8{0&
]1F\
@*Rv
"]'%3
E`;a`<a
II-_b
DJ\&s[b
4g64
%Qhh
L^{}
'9.b
i~+h
8yqB
s7C%
E3E>
jMjZ
\Bue
0X?C"
^`@t
XCaj
G	:}
H)Q}E
&Q(2
b=2S@
$F!Q
	_l(
v^m3
"3DUfw`
_CONSOLE
SB)F*
g8Om
Lk[c
^W!q
c@==p
R)d]
06k+-P
D8my
\:8-
Qx4{Q
<:^]
bUBZJ
Sv@T
cGbtb
fi%)
t#{R
EWbo
gP`7
!#zq
aY>{
^EY 
(lsxu
^=Dh
}8M:
K!)>
	c#$
IOT5
;.>qDku
x.m4
PRe$
gI,G
>&Q1Fy`
C=sB
}J/6
	xV8[
6L5*(
&#\s
I7+]
4Q)\aN
E(W^
bUPF
<.OYV
7cix
M&\>^n
QxoE-\Hj
U*I8
n=L\s
_y.g
c30 
Zc,k
ea,!
[+Gd
]L@{#
op4J
) ls
L^%J
~YEa	Y
vlEa
	N ]z
%W,R
<UCV
_(3 Y
b%q^
7+10_
`A|JT-
vmkvo
(?MV
N_se
(yGd
|S0Mj=
pO=X
0O\z
$2*|GBe
%_<{
zmVc
@!y`UN%
MQHk{
7DfY
Q;2Su
\+:W
	*'yQ
z$d~
spR.'
0s9^D
-;l!u\U>
'v3D
=8s.j
bP--
3U5s
T-ha(
'XT,
#xtT\~
l8mh+
YAo(
@f$kF9
qo"A
Y\"-
Ff:7SZ
4!3}
}]'?
@=3&
DLjW
coJ9%>
*N~*
o\US
]C*_"
awf?sS
F+@F
LgxT
1=1o
h99!
y^IO$
ZFRLBy+s~
Avyy
Ic,.1
ynJn
X:m/
\	z 
u% :
f&7&
>._L
$sAVLU5
M]m4.
L k@d
OtJV
~fkk].w
1\mn\
it$}
#*gU
/m=`Ik
"}0fE
''oZ
6/@`
[9g`
eI5f
j>|u
I\w2
Rd@i
Kn-_
,v_g
@)IU
y6.^
xt^r P+
9,Un7
[9DC
Vt(Iw
b9z5is
h+ni`
zA9Y"
[U8K
i;D	.
Fs\7
b#Jg
3Lza
Eo$-vcK
Gv8D
Ul.:&
Z=a{^
G,bM}
\SB-
Ec}W
LIHk
w55Q
&^(<
l}f<k{#
>X`n<
jZDPt
**|e
|fOi
AjAt
[W`\
>)+z
)k%/
X?~zkV'
^G)*fT
PDg:#\
"d5 I
\?pn[
)s;e
L4rL@
6F;g&
QR@Y
~AslC
F]>t
"9|Q"
l#c[^
zNxt
up)3I
ouj#
ci13_
%R!,
K^;*}
j-?57
v *#
FJ&8
U!mPp
#[aV/
:D|>x
g%6G
`\Dt
vXDc
I,_e
5=)S
Ls9	%
[nv;
0px	y
l, Z
Tj3Q#
DiXp;n
X;v0
UY"gO
ib3O3
^*Vg3
H6Ir
l4h[
igW|
TeT\
spTH
7AP|i
S2eL
@|."
jx(t
,q<(
"2c~
z<Ye
98fK L
_Uel
@oC?>
~9Tf
FR~_
r7t0]0r
_$%&
N~r@l
	pK"
wn=%U
0Uomx
)pPGp
7)2)
IffO
)<N'm
wG=j%
{Ap[U
tec|
9Tw]
'{w!
M%18
_(h@6
I;7@
5w/'D
Z!UY
B?yr
GcUk
PP?Vq
wPG	
fd<h
F]'Vm
i8.Z
8WJ,:
,I7T
BGa\H
wAnP
{C[7
moJs
G;rW;
?h[?5
@m[|
]uChQ
&2O#
W'UnF
.jBu
.pXr
#rg	
  "additionalFiles": "..,..,..,..,..,..,..",
  "builtInLibrariesFolders": "/home/inverse/arduino-1.8.12/libraries",
  "builtInToolsFolders": "/home/inverse/arduino-1.8.12/tools-builder,/home/inverse/arduino-1.8.12/hardware/tools/avr,/home/inverse/.arduino15/packages",
  "customBuildProperties": "build.warn_data_percentage=75,runtime.tools.mkspiffs.path=/home/inverse/.arduino15/packages/esp32/tools/mkspiffs/0.2.3,runtime.tools.mkspiffs-0.2.3.path=/home/inverse/.arduino15/packages/esp32/tools/mkspiffs/0.2.3,runtime.tools.esptool_py.path=/home/inverse/.arduino15/packages/esp32/tools/esptool_py/2.6.1,runtime.tools.esptool_py-2.6.1.path=/home/inverse/.arduino15/packages/esp32/tools/esptool_py/2.6.1,runtime.tools.xtensa-esp32-elf-gcc.path=/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0,runtime.tools.xtensa-esp32-elf-gcc-1.22.0-80-g6c4433a-5.2.0.path=/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0",
  "fqbn": "esp32:esp32:esp32cam",
  "hardwareFolders": "/home/inverse/arduino-1.8.12/hardware,/home/inverse/.arduino15/packages,/home/inverse/Arduino/hardware",
  "otherLibrariesFolders": "/home/inverse/Arduino/libraries",
  "runtime.ide.version": "10812",
  "sketchLocation": "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
#include <Arduino.h>
#line 1 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
// ESP32_cam_node, upgraded with una additional udp layer 5 control protocol and configurable telegram bot
// PLEASE ALSO INSTALL THE ArduinoJson library by Benoit Blanchon
#include "esp_camera.h"
#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiAP.h>
#include <WiFiUdp.h>
#include "AsyncUDP.h"
#include "lwip/api.h"
// NVS includes, non volatile storage
#include "ArduinoNvs.h"
// WIFI includes and variables section START
#define MY_NAME "e32cam001s01"
#define HEARTBEAT_DATA "e32cam001s01,HEARTBEAT,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ACK_DATA "e32cam001s01,ACK,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ERR_DATA "e32cam001s01,ERR,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ERRNVS_DATA "e32cam001s01,ERR,ERROR saving data to NVS,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#include <WiFiMulti.h> // this should support more different AP's // ToDo
WiFiMulti wifiMulti; // this should support more different AP's // ToDo
// Non volatile storage - incorporated in the project folder
#include "ArduinoNvs.h"
// CAMERA: camera configuration and initialization
camera_config_t config;
uint8_t cameraInitType = 0; // 0 = camera off, not initialized; 1 = default init, the main webserver; 2 = motion detector; 3 = color blob detector
#define ALARMS_ENABLED 1  // by default, the device works as a motion detector in case the contact with the command and control server is lost. 
// WARNING!!! Make sure that you have either selected ESP32 Wrover Module,
//            or another board which has PSRAM enabled
// Select camera model
//#define CAMERA_MODEL_WROVER_KIT
//#define CAMERA_MODEL_ESP_EYE
//#define CAMERA_MODEL_M5STACK_PSRAM
//#define CAMERA_MODEL_M5STACK_WIDE
#define CAMERA_MODEL_AI_THINKER
#include "camera_pins.h"
// of course this is the default and should be modified
void cameraInitConfig() {
  // camera part
  cameraInitType = 1;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// MOTION DETECTION SPECIFIC CAMERA DEFINES and buffers
#define WIDTH 320
#define HEIGHT 240
#define BLOCK_SIZE 10
#define W (WIDTH / BLOCK_SIZE)
#define H (HEIGHT / BLOCK_SIZE)
#define BLOCK_DIFF_THRESHOLD 0.2
#define IMAGE_DIFF_THRESHOLD 0.1
#define DEBUG 1
bool capture_still(); // declare functions
bool motion_detect();
void update_frame();
void print_frame(uint16_t frame[H][W]);
uint16_t prev_frame[H][W] = { 0 };  // these are actually 32*24 * 16bit, more than acceptable, no problem.
uint16_t current_frame[H][W] = { 0 };
uint8_t motionDetectON = 0;  // motion detection is normally kept off. The idea is to activate it in case the command & control servers do not respond, or to activate it on demand / on alarm.
uint8_t alarmEnabled = ALARMS_ENABLED; // motion detection activation is enabled by default to 1, some other kinds of usage may require this is off, for example the color blob detection mode and the webcam / telegram modes. 
// MOTION DETECTION SPECIFIC CAMERA CONFIG INIT FUNCTION (first, remember to do a deinit!!!)
void cameraInitConfigMotionDetect() {
  // camera part
  cameraInitType = 2;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_GRAYSCALE;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// CAMERA MOTION DETECTION SPECIFIC FUNCTIONS
 * Capture image and do down-sampling
bool capture_still() {
    camera_fb_t *frame_buffer = esp_camera_fb_get();
    if (!frame_buffer)
        return false;
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    //sensor_t *sensor = esp_camera_sensor_get();
    //Serial.print("Switch to JPEG: ");
    //Serial.println(sensor->set_pixformat(sensor, PIXFORMAT_RGB565));
    config.pixel_format = PIXFORMAT_RGB565;
    Serial.print("Switch ok? ");
    Serial.println(esp_camera_init(&config) == ESP_OK ? "yes" : "no");
    frame_buffer = esp_camera_fb_get();
    Serial.print("JPEG len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    //sensor->set_pixformat(sensor, PIXFORMAT_GRAYSCALE);
    frame_buffer = esp_camera_fb_get();
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    while (1) delay(50000);
    // set all 0s in current frame
    for (int y = 0; y < H; y++)
        for (int x = 0; x < W; x++)
            current_frame[y][x] = 0;
    // down-sample image in blocks
    for (uint32_t i = 0; i < WIDTH * HEIGHT; i++) {
        const uint16_t x = i % WIDTH;
        const uint16_t y = floor(i / WIDTH);
        const uint8_t block_x = floor(x / BLOCK_SIZE);
        const uint8_t block_y = floor(y / BLOCK_SIZE);
        const uint8_t pixel = frame_buffer->buf[i];
        const uint16_t current = current_frame[block_y][block_x];
        // average pixels in block (accumulate)
        current_frame[block_y][block_x] += pixel;
    }
    // average pixels in block (rescale)
    for (int y = 0; y < H; y++)
        for (int x = 0; x < W; x++)
            current_frame[y][x] /= BLOCK_SIZE * BLOCK_SIZE;
#if DEBUG
    Serial.println("Current frame:");
    print_frame(current_frame);
    Serial.println("---------------");
#endif
    return true;
 * Compute the number of different blocks
 * If there are enough, then motion happened
bool motion_detect() {
    uint16_t changes = 0;
    const uint16_t blocks = (WIDTH * HEIGHT) / (BLOCK_SIZE * BLOCK_SIZE);
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            float current = current_frame[y][x];
            float prev = prev_frame[y][x];
            float delta = abs(current - prev) / prev;
            if (delta >= BLOCK_DIFF_THRESHOLD) {
#if DEBUG
                Serial.print("diff\t");
                Serial.print(y);
                Serial.print('\t');
                Serial.println(x);
#endif
                changes += 1;
            }
        }
    }
    Serial.print("Changed ");
    Serial.print(changes);
    Serial.print(" out of ");
    Serial.println(blocks);
    return (1.0 * changes / blocks) > IMAGE_DIFF_THRESHOLD;
 * Copy current frame to previous
void update_frame() {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            prev_frame[y][x] = current_frame[y][x];
        }
    }
 * For serial debugging
 * @param frame
void print_frame(uint16_t frame[H][W]) {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            Serial.print(frame[y][x]);
            Serial.print('\t');
        }
        Serial.println();
    }
// CAMERA COLOR BLOB DETECTOR, INIT FUNCTION
// color-based blob detection - I plan to use this as part of a larger project, the idea is to help detect certain insects and pests in agricultural settings
// this camera will then become an additional sensor communicating with a robot designed to remove pests from invaded plants. 
void cameraInitConfigColorDetector() {  // specific for color-based target recognition, remember to do a deinit first!!!
  // camera part
  cameraInitType = 3;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_RGB888;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// Telegram section
#include "UniversalTelegramBotRZO.h"
#include <WiFiClientSecure.h>
char* TBotToken = "810218086:AAFPJNDbolU0tzj_Xx6lXOsatDlYnWYaa80";
char* TChatId = "537093554";
WiFiClientSecure client;
UniversalTelegramBot TBotCambot(TBotToken, client);
int Bot_mtbs = 3000; //mean time between scan messages
long Bot_lasttime;   //last time messages' scan has been done
// specific camera variables for the telegram bot
//camera_fb_t * TBotCamfb; // moved intra-function
uint8_t* TBotCamfb_buffer;
size_t TBotCamfb_length;
int TBotCamcurrentByte;
// camera functions specific for the telegram bot
bool isMoreDataAvailable() {
  return (TBotCamfb_length - TBotCamcurrentByte);
uint8_t photoNextByte() {
  TBotCamcurrentByte++;
  return (TBotCamfb_buffer[TBotCamcurrentByte - 1]);
void take_send_photo(String TChatId)
  camera_fb_t * TBotCamfb = NULL;
  TBotCamfb = esp_camera_fb_get();
  TBotCamcurrentByte = 0;
  TBotCamfb_length = TBotCamfb->len;
  TBotCamfb_buffer = TBotCamfb->buf;
  TBotCambot.sendPhotoByBinary(TChatId, "image/jpeg", TBotCamfb->len, isMoreDataAvailable, photoNextByte, nullptr, nullptr);
  esp_camera_fb_return(TBotCamfb);
  TBotCamfb_length = NULL;
  TBotCamfb_buffer = NULL;
// UDP Async client, sends keep heartbeat messages to the server and retrieves commands
AsyncUDP udp; // for server A  // udp layer 5 control protocol
AsyncUDP udpB; // for server B
// command and control IP addresses for server A and server B (redundant server), the exchange is done via udp ( the port is defined by int udpServerPort) and the layer 5 transfers commands and status info as comma separated variables
int IPudpServerAa = 192;
int IPudpServerAb = 168;
int IPudpServerAc = 88;
int IPudpServerAd = 32;
int IPudpServerBa = 192;
int IPudpServerBb = 168;
int IPudpServerBc = 88;
int IPudpServerBd = 33;
int udpServerPort = 8443; // UDP/443 because, well, we can
// udp - layer 5 control protocol processing, the layer 5 control protocol consists of 8 CSV fields. The protocol structure is simple: client_name,requested_operation,field1,field2,field3,field4,field5,field6  all unused fields are set to ascii character 0
#define FIELDUA 8
#define FIELDUB 64
char UdataSplit[FIELDUA][FIELDUB];
int UfieldsLen[FIELDUA];
int UdataLen = 0;
int UserverOK = 0; // contact with the server attempted for 3 times in a row, failing. Say, the idea is: ACK from server received: set to 3, send HEARTBEAT: decrease by 1 until zero is reached, then stop decreasing.
static uint8_t wifiDebugOn = 0;
static uint8_t wifiConnFlag = 0;
static uint8_t wifiWebserverFlag = 0;
static uint8_t wifiBeginFlag = 0;
static uint8_t wifiConnectionAttempts = 0;
// Set the local access point IP address, the netmask is assumed to be /24
IPAddress SetAPIP = {192,168,5,1};  // REMEMBER TO CHANGE THIS FOR EVERY AP YOU PLAN TO INTRODUCE TO THE NETWORK
// Set these to your desired credentials.
const char *ssid = MY_NAME;  // for the local AP  // REMEMBER TO CHANGE THE SSID AS WELL, THE NET PART CONTAINS THE THIRD BYTE OF THE AP IP ADDRESS (the network LSByte)
const char *password = "giampippetto";
WiFiServer serverSTA(8080); // adding a second server on the STA interface? Let's try
// loop() control section
uint32_t loopCounter = 0;
// NETWORK section
// processing variables subsection
uint8_t payloadCurrContent[128] = {0};
uint8_t hashCurrContent[64] = {0};
uint8_t payHeaderCurrContent[32] = {0};
// NAt processing subsection
uint32_t payloadTypeF = 0;
uint32_t srcIPext = 0; // STA side
uint32_t dstIPext = 0;
uint32_t srcIPint = 0; // AP side
uint32_t dstIPint = 0;
uint32_t srcIPpay = 0; // payload side
uint32_t dstIPpay = 0;
// in the NAT table, the folloving are converted to uint32_t 
uint16_t srcPortext = 0; // STA side
uint16_t dstPortext = 0;
uint16_t srcPortint = 0; // AP side
uint16_t dstPortint = 0;
uint16_t srcPortpay = 0; // payload side
uint16_t dstPortpay = 0;
uint16_t expiryCounter = 0;
// NAT table subsection
uint32_t NATline[16] = {0};  // there are 14 fields actually, as per the above list, plus 2 reserved fields
uint32_t NATtable[256][16] = {0};
uint16_t NATlinePointer = 0; // do we allow up to 256 flows only?
// routing table subsection
uint16_t RoutelinePointer = 0; // do we allow up to 16 routes only?
uint32_t routetable[16][8] = {0};  // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
//packet buffer sub-section
uint8_t payloadToProcessFlag = 0; // if the LSB bit0 == 1, there is a payload that needs processing, other values / bits set may mean other operations.
uint8_t * payloadBuffer = NULL;
//structure of the packet buffer:
Size = 224Bytes = 32B header + 128B payload + 64B hash
4B = Type Field( 4 bytes ) = reqtype(1B), protocolNum(1B), Reserved(1B), Reserved(1B)
4B = DST IP
4B = SRC IP 
2B = DST PORT
2B = SRC PORT
2B = PayloadLen
2B = Reserved
4B = Reserved
4B = Reserved
4B = Reserved
128B = actual payload
64B = sha256Hash_reserved(32B raw or 64B hex)
// LED section
#define LED_BUILTIN 2   // Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED
// string section 
// converts character array 
// to string and returns it 
String convertToString(char* a, int size) 
    int i; 
    String s = ""; 
    for (i = 0; i < size; i++) { 
        s = s + a[i]; 
    } 
    return s; 
// deep sleep section
#define uS_TO_S_FACTOR 1000000ULL  /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  60        /* Time ESP32 will go to sleep (in seconds) */
RTC_DATA_ATTR int bootCount = 0;
Method to print the reason by which ESP32
has been awaken from sleep
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch(wakeup_reason)
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
// update the routing table
void routeTableUpdate() {
// RoutelinePointer // do we allow up to 16 routes only?
//uint32_t *routetable[16][8] // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
uint32_t ImyLocalIP = 0;
uint32_t ImyLocalSubnet = 0;
uint32_t ImyAPIP = 0;
uint32_t ImyAPSubnet = 0;
uint32_t ImyLocalSubnetMask = 0;
uint32_t ImyAPSubnetMask = (255 >> 24) + (255 >> 16) + (255 >> 8);
uint32_t ImyLocalGateway = 0;
IPAddress myLocalIP = {0,0,0,0};
IPAddress myLocalSubnet = {0,0,0,0};
IPAddress myLocalSubnetMask = {0,0,0,0};
IPAddress myLocalGateway = {0,0,0,0};
IPAddress myAPIP = WiFi.softAPIP();
ImyAPIP = (uint32_t)((myAPIP[0] << 24) + (myAPIP[1] << 24) + (myAPIP[2] << 24) + myAPIP[3]);
ImyAPSubnet = ImyAPIP & ImyAPSubnetMask;
// the first lines
// line 0 local AP  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
routetable[0][0] = ImyAPSubnet;
routetable[0][1] = ImyAPSubnetMask;
routetable[0][2] = ImyAPIP;
routetable[0][3] = 0; // gateway of course set to 0 for the AP side
routetable[0][4] = 0; // interface ID set to zero, for the moment.
routetable[0][5] = 0;
routetable[0][6] = 0;
routetable[0][7] = 0;
if (wifiConnFlag == 1) {
  myLocalIP = WiFi.localIP();
  myLocalSubnet = WiFi.subnetMask();
  myLocalGateway = WiFi.gatewayIP();
  ImyLocalIP = (myLocalIP[0] << 24) + (myLocalIP[1] << 24) + (myLocalIP[2] << 24) + myLocalIP[3];
  ImyLocalSubnetMask = (myLocalSubnetMask[0] << 24) + (myLocalSubnetMask[1] << 24) + (myLocalSubnetMask[2] << 24) + myLocalSubnetMask[3];
  ImyLocalGateway = (myLocalGateway[0] << 24) + (myLocalGateway[1] << 24) + (myLocalGateway[2] << 24) + myLocalGateway[3];
  ImyLocalSubnet = ImyLocalIP & ImyLocalSubnetMask;
  // line 1 STA  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
  routetable[1][0] = ImyLocalSubnet;
  routetable[1][1] = ImyLocalSubnetMask;
  routetable[1][2] = ImyLocalIP;
  routetable[1][3] = ImyLocalGateway;
  routetable[1][4] = 1; // interface ID set to 1, for the moment.
  routetable[1][5] = 0;
  routetable[1][6] = 0;
  routetable[1][7] = 0; 
} else {
  routetable[1][0] = 0; // nullifying the STA route
  routetable[1][1] = 0; // nullifying the STA route
  routetable[1][2] = 0; // nullifying the STA route
  routetable[1][3] = 0; // nullifying the STA route
  routetable[1][4] = 0; // nullifying the STA route
  routetable[1][5] = 0; // nullifying the STA route
  routetable[1][6] = 0; // nullifying the STA route
  routetable[1][7] = 0; // nullifying the STA route
}  // end void routetableupdate()
// handle client requests
void clientServe() {
  WiFiClient client = serverSTA.available();   // listen for incoming clients
  if (client) {                             // if you get a client,
    Serial.println("New Client.");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to take a picture and send it via telegram (configure via udp layer 5 control protocol).<br>");
            client.print("Click <a href=\"/L\">here</a> to restart the device.<br>");
            client.print("Click <a href=\"/W\">here</a> to initialize the camera hardware for the integrated camera webserver.<br>");
            client.print("Click <a href=\"/S\">here</a> to deinitialize the camera hardware and save power.<br>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          //digitalWrite(LED_BUILTIN, HIGH);               // GET /H takes a picture and sends it via telegram
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
          take_send_photo(TChatId);
          digitalWrite(LED_BUILTIN, LOW);  
        }
        if (currentLine.endsWith("GET /W")) {  // init camera for the main camera webserver
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
        }
        if (currentLine.endsWith("GET /S")) {  // deinitialize the camera
          cameraInitType = 0;
          esp_camera_deinit();  // the camera needs a deinit from its current configuration.
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(LED_BUILTIN, LOW);                // GET /L restarts the device
          esp_restart();
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
void startCameraServer();
void wifiIntManagement() {
    // STA connection and disconnection management
// WIFI DEBUG AND SERVICING SECTION START
  if (wifiDebugOn == 1) {
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
    
      Serial.println("WiFi not connected yet");
    }
    if (WiFi.status() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
    
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
    }
  if (wifiConnectionAttempts >= 32) { // turning off wifi, there is no point in trying anymore, if past 32 attempts.
    WiFi.mode(WIFI_OFF); // turning off wifi, then we go to deep sleep for a certain number of seconds.
    
    esp_err_t err = esp_camera_deinit();
    esp_deep_sleep_start();  // going to deep sleep
    
  if ((wifiConnFlag == 0) && (wifiConnectionAttempts < 32)) {  // wifiConnectionAttempts must be < 32 
    wifiConnectionAttempts++; // increasing the connection attempts counter
    
    if (wifiMulti.run() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
      Serial2.print("WiFi up and running: ");
      Serial2.print(WiFi.localIP());
      Serial2.println("' to connect");
      wifiConnFlag = 1;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
    if ((WiFi.status() != WL_CONNECTED) && (wifiBeginFlag == 0)) {
    
      Serial.println("WiFi restarting");
      WiFi.begin(ssid, password); 
      
      wifiBeginFlag = 1;
    }
  if (wifiConnFlag == 1) { // test if the wifi stays alive...
    if (WiFi.status() != WL_CONNECTED) {  // wifiMulti.run() == WL_CONNECTED // WiFi.status() != WL_CONNECTED
    
      Serial.println("WiFi disconnected");
      wifiConnFlag = 0;
      wifiBeginFlag = 0;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
  if (((wifiConnFlag == 1) && (wifiWebserverFlag == 0)) || (ESP.getFreeHeap() < 44000)) { // servicing the webserver on connection up for the first time
      // >>>>>>>> START SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      // >>>>>>>> END SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      
      wifiWebserverFlag = 1;
    
  // WIFI DEBUG AND SERVICING SECTION END 
// UDP - layer 5 control protocol
void UresetudpData() {
for(int i = 0; i < FIELDUA; i++){
  for(int j = 0; j < FIELDUB; j++) {
    UdataSplit[i][j] = 0;
for(int i = 0; i < FIELDUA; i++) {
  UfieldsLen[i] = 0;
UdataLen = 0;
} // end resetudpData()
int UfillinudpData(uint8_t *pktDataField, int pktLen) {
int i = 0;
int j = 0;
int k = 0;
UdataLen = pktLen;
for(i = 0; i < UdataLen; i++){
  if(pktDataField[i] == ',') {
    UfieldsLen[j] = k;
    Serial.print("received_udp_control_protocol_data:");
    Serial.print(UdataSplit[j]);
    Serial.print("; data_len:");
    Serial.print(k);
    Serial.print("; field_position:");
    Serial.println(j);
    j++;
    k = 0;
  if(j >= FIELDUA) {
    Serial.print("ERROR: too many commas in the udp layer 5 control protocol");
    return 100;
    
  UdataSplit[j][k] = pktDataField[i];
  k++; 
UfieldsLen[j] = k;
return 0;
} // end fillinudpData()
void UprocessudpCommand(AsyncUDPPacket packet) {
  Serial.print("processing udp layer 5 control protocol command directed to: ");
  Serial.print(UdataSplit[0]);
  Serial.print("; command is: ");
  Serial.println(UdataSplit[1]);
  // commands available at the moment, or planned, are: 
  // ACK (confirmed heartbeat reception, do nothing), TLGS (send picture to telegram), TLGC (configure telegram, field 2 = bot token, field 3 = chat id)
  // RST (reboot the device), DSLP (deep sleep)
  if(UdataSplit[0] == MY_NAME) {  // matched the field 0, the command is directed to me. 
      
      // processing the actual commands
      
      if(UdataSplit[1] == "ACK") {
        // do not reply with an ACK to an ACK, that would be ...disturbing
        UserverOK = 3;
      }
      if(UdataSplit[1] == "TLGS") {  // send picture via telegram
        //TBotToken
        //TChatId
        // technically speaking we should deinit and reinit with acceptable parameters. 
        
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
          if (cameraInitType != 0) {
            esp_camera_deinit();  // the camera needs a deinit from its current configuration.
          }
          delay(1000); // this might not really be necessary
          cameraInitConfig(); // and is setup for the correct motion capture configuration
          delay(3000);
        }
         // this might not really be necessary
        take_send_photo(TChatId);   
      }
      if(UdataSplit[1] == "TLGC") { // configure telegram bot token and chat id
        bool ok; 
        String sToken = convertToString(UdataSplit[2], UfieldsLen[2]); 
        String sChatId = convertToString(UdataSplit[3], UfieldsLen[3]); 
        ok = NVS.setString ("TLGToken", sToken); // Store the data value into the key named "TLGToken" on the NVS
        if(ok) {
          ok = NVS.setString ("TLGChatId", sChatId); // Store the data value into the key named "TLGChatId" on the NVS
          
        }
        if(ok) {
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        } else {
          Serial.println("ERROR saving data to nvs");
          packet.printf(ERRNVS_DATA, packet.length());
        }
        
        
      }
      if(UdataSplit[1] == "RST") {  // restart system
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        esp_restart();
      }
      if(UdataSplit[1] == "DSLP") { // start deep sleep
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        Serial.println("RECEIVED REQUEST TO DEEP SLEEP, STARTING TO SLEEP DEEP");
        esp_err_t err = esp_camera_deinit();
        esp_deep_sleep_start();  // going to deep sleep
      }
      if(UdataSplit[1] == "WCAM") { // init camera for the webserver
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
        }   
      }
      if(UdataSplit[1] == "SCAM") { // deinitialize the camera
        cameraInitType = 0;
        esp_camera_deinit();  // the camera needs a deinit from its current configuration.
      }
      
      
void udpCommandClient() {
  if( ! udp.connected()) {
    Serial.println("UDP connecting to server A");
    udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
    Serial.println("UDP connected to server A");
  if(udp.connected()) {
        Serial.println("UDP sending to server A");
        //Send unicast
        udp.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udp.onPacket([](AsyncUDPPacket packet) {
            Serial.print("UDP Packet Type: ");
            Serial.print(packet.isBroadcast()?"Broadcast":packet.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packet.remoteIP());
            Serial.print(":");
            Serial.print(packet.remotePort());
            Serial.print(", To: ");
            Serial.print(packet.localIP());
            Serial.print(":");
            Serial.print(packet.localPort());
            Serial.print(", Length: ");
            Serial.print(packet.length());
            Serial.print(", Data: ");
            Serial.write(packet.data(), packet.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packet.data() ,packet.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packet); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
// sending the heartbeat to the backup udp command server
void udpBCommandClient() {
  if( ! udpB.connected()) {
    Serial.println("UDP connecting to server B");
    udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
    Serial.println("UDP connected to server B");
  if(udpB.connected()) {
        Serial.println("UDP sending to server B");
        //Send unicast
        udpB.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udpB.onPacket([](AsyncUDPPacket packetB) {
            Serial.print("UDP B Packet Type: ");
            Serial.print(packetB.isBroadcast()?"Broadcast":packetB.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packetB.remoteIP());
            Serial.print(":");
            Serial.print(packetB.remotePort());
            Serial.print(", To: ");
            Serial.print(packetB.localIP());
            Serial.print(":");
            Serial.print(packetB.localPort());
            Serial.print(", Length: ");
            Serial.print(packetB.length());
            Serial.print(", Data: ");
            Serial.write(packetB.data(), packetB.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packetB.data() ,packetB.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packetB); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
void clientsManagement() {
  if ((wifiConnFlag == 1) && (wifiWebserverFlag == 1)) { // HANDLE CLIENT REQUESTS HERE
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
    clientServe();
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
  } // end handle client requests if
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
// wakeup and init part 
  // packet / payload buffer allocation
  payloadBuffer = (uint8_t *)malloc(256 * sizeof(uint8_t));  // the actual size is 224 (see in the declarations), the maximum payload size for ESP-NOW is 250.
  pinMode(LED_BUILTIN, OUTPUT);
  // deep sleep boots
  ++bootCount;
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  /*
  First we configure the wake up source
  We set our ESP32 to wake up every 5 seconds
  */
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
// camera init and config
  Serial.println("WARNING, NOT INITIALIZING THE CAMERA IN ORDER TO SAVE POWER. PLEASE DO IT MANUALLY VIA UDP COMMANDS OR VIA THE MANAGEMENT HTTP SERVER ON PORT 8080");
  //cameraInitConfig(); // we want the camera not initialized by default. This saver power.
  /*
 if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
  */
// WIFI SECTION
  Serial.println();
  Serial.println("Configuring access point...");
  WiFi.mode(WIFI_AP_STA); // added by me // selecting the AP+STA mode
  wifiMulti.addAP("e32ap001s01border", "giampippetto");  // the connection part is verified as follows: wifiMulti.run() == WL_CONNECTED
  wifiMulti.addAP("G5SE_7499", "pippopluto");
  wifiMulti.addAP("internet-gw.iw1gpe.it.ampr.o", "heisakuukanwohiraite");
  wifiMulti.addAP("inverse", "heisakuukanwohiraite");
  wifiMulti.addAP("e32ap002s01border", "giampippetto");
  wifiMulti.addAP("e32ap003s01border", "giampippetto");
  wifiMulti.addAP("e32ap004s01border", "giampippetto");
  wifiMulti.addAP("e32ap001s02border", "giampippetto");
  wifiMulti.addAP("e32ap002s02border", "giampippetto");
  wifiMulti.addAP("e32ap003s02border", "giampippetto");
  wifiMulti.addAP("e32ap004s02border", "giampippetto");
  // You can remove the password parameter if you want the AP to be open.
  WiFi.softAP(ssid, password);
  delay(200); // wait at least 100ms until the AP has started
  if(!WiFi.softAPConfig(SetAPIP, SetAPIP, IPAddress(255, 255, 255, 0))){
      Serial.println("AP Config Failed");
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  // the STA part is configured here and managed in loop()
// old wifi section
  //WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  Serial.println("");
  Serial.println("WiFi connected");
  startCameraServer();
  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  */
  // NVS storage init
  NVS.begin();
  // trying to load the bot configuration from NVS 
  //TBotToken
  //TChatId
  // load the telegram bot token if available from NVS
  String loadedstr = NVS.getString ("TLGToken"); // Read the value of the "TLGToken" key from the NVS 
  if(loadedstr.length() > 3) { // at least we make sure the result is not empty...
    TBotToken = {};
    loadedstr.toCharArray(TBotToken, loadedstr.length()); // loading TBotToken
    loadedstr = NVS.getString ("TLGChatId"); // Read the value of the "TLGChatId" key from the NVS 
    if(loadedstr.length() > 3) {
      loadedstr.toCharArray(TChatId, loadedstr.length()); // loading TChatId
      Serial.print("Loaded Telegram BotToken and ChatId from NVS storage with values: ");
      Serial.print(TBotToken);
      Serial.print(" and ");
      Serial.println(TChatId);
    }
} // END setup()
void loop() {
  // put your main code here, to run repeatedly:
 // loopCounter check
  if (loopCounter > 16) {
    loopCounter = 0;
  clientsManagement();  // web client requests are handled always 
  if(loopCounter == 1) {
    wifiIntManagement();
  if(loopCounter == 2) {
    routeTableUpdate();
  if(loopCounter == 3) {
    udpCommandClient();
    udp.broadcastTo(MY_NAME, udpServerPort);
  if(loopCounter == 5) {
  // position number 15, let the device stabilize its connections first...
  if(loopCounter == 15) { // MOTION DETECTOR SECTION
    if ((motionDetectON == 1) || ((UserverOK == 0) && (alarmEnabled == 1)) ){
       if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
      if (!capture_still()) {
        Serial.println("Motion Detector: Failed capture");
        delay(3000);
        return;
      }
      if (motion_detect()) {
        Serial.println("Motion detected");
    }
    update_frame();
    }
  // loopCounter increase
  loopCounter++;
  delay(1000);
# 1 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
// ESP32_cam_node, upgraded with una additional udp layer 5 control protocol and configurable telegram bot
// PLEASE ALSO INSTALL THE ArduinoJson library by Benoit Blanchon
# 6 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 7 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 9 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 12 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 13 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 14 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 15 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
// NVS includes, non volatile storage
# 18 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
// WIFI includes and variables section START
#define MY_NAME "e32cam001s01"
#define HEARTBEAT_DATA "e32cam001s01,HEARTBEAT,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/
#define ACK_DATA "e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/
#define ERR_DATA "e32cam001s01,ERR,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/
#define ERRNVS_DATA "e32cam001s01,ERR,ERROR saving data to NVS,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/
# 28 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
WiFiMulti wifiMulti; // this should support more different AP's // ToDo
// Non volatile storage - incorporated in the project folder
# 33 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
// CAMERA: camera configuration and initialization
camera_config_t config;
uint8_t cameraInitType = 0; // 0 = camera off, not initialized; 1 = default init, the main webserver; 2 = motion detector; 3 = color blob detector
#define ALARMS_ENABLED 1 /* by default, the device works as a motion detector in case the contact with the command and control server is lost. */
// WARNING!!! Make sure that you have either selected ESP32 Wrover Module,
//            or another board which has PSRAM enabled
// Select camera model
//#define CAMERA_MODEL_WROVER_KIT
//#define CAMERA_MODEL_ESP_EYE
//#define CAMERA_MODEL_M5STACK_PSRAM
//#define CAMERA_MODEL_M5STACK_WIDE
#define CAMERA_MODEL_AI_THINKER 
# 53 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
// of course this is the default and should be modified
void cameraInitConfig() {
  // camera part
  cameraInitType = 1;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != 0 /*!< esp_err_t value indicating success (no error) */) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == (0x36)) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
// MOTION DETECTION SPECIFIC CAMERA DEFINES and buffers
#define WIDTH 320
#define HEIGHT 240
#define BLOCK_SIZE 10
#define W (WIDTH / BLOCK_SIZE)
#define H (HEIGHT / BLOCK_SIZE)
#define BLOCK_DIFF_THRESHOLD 0.2
#define IMAGE_DIFF_THRESHOLD 0.1
#define DEBUG 1
bool capture_still(); // declare functions
bool motion_detect();
void update_frame();
void print_frame(uint16_t frame[(240 / 10)][(320 / 10)]);
uint16_t prev_frame[(240 / 10)][(320 / 10)] = { 0 }; // these are actually 32*24 * 16bit, more than acceptable, no problem.
uint16_t current_frame[(240 / 10)][(320 / 10)] = { 0 };
uint8_t motionDetectON = 0; // motion detection is normally kept off. The idea is to activate it in case the command & control servers do not respond, or to activate it on demand / on alarm.
uint8_t alarmEnabled = 1 /* by default, the device works as a motion detector in case the contact with the command and control server is lost. */; // motion detection activation is enabled by default to 1, some other kinds of usage may require this is off, for example the color blob detection mode and the webcam / telegram modes. 
// MOTION DETECTION SPECIFIC CAMERA CONFIG INIT FUNCTION (first, remember to do a deinit!!!)
void cameraInitConfigMotionDetect() {
  // camera part
  cameraInitType = 2;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_GRAYSCALE;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != 0 /*!< esp_err_t value indicating success (no error) */) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == (0x36)) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
// CAMERA MOTION DETECTION SPECIFIC FUNCTIONS
 * Capture image and do down-sampling
bool capture_still() {
    camera_fb_t *frame_buffer = esp_camera_fb_get();
    if (!frame_buffer)
        return false;
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != 
# 222 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                                  __null 
# 222 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                                       ? frame_buffer->len : 0);
    //sensor_t *sensor = esp_camera_sensor_get();
    //Serial.print("Switch to JPEG: ");
    //Serial.println(sensor->set_pixformat(sensor, PIXFORMAT_RGB565));
    config.pixel_format = PIXFORMAT_RGB565;
    Serial.print("Switch ok? ");
    Serial.println(esp_camera_init(&config) == 0 /*!< esp_err_t value indicating success (no error) */ ? "yes" : "no");
    frame_buffer = esp_camera_fb_get();
    Serial.print("JPEG len: ");
    Serial.println(frame_buffer != 
# 233 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                                  __null 
# 233 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                                       ? frame_buffer->len : 0);
    //sensor->set_pixformat(sensor, PIXFORMAT_GRAYSCALE);
    frame_buffer = esp_camera_fb_get();
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != 
# 237 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                                  __null 
# 237 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                                       ? frame_buffer->len : 0);
    while (1) delay(50000);
    // set all 0s in current frame
    for (int y = 0; y < (240 / 10); y++)
        for (int x = 0; x < (320 / 10); x++)
            current_frame[y][x] = 0;
    // down-sample image in blocks
    for (uint32_t i = 0; i < 320 * 240; i++) {
        const uint16_t x = i % 320;
        const uint16_t y = floor(i / 320);
        const uint8_t block_x = floor(x / 10);
        const uint8_t block_y = floor(y / 10);
        const uint8_t pixel = frame_buffer->buf[i];
        const uint16_t current = current_frame[block_y][block_x];
        // average pixels in block (accumulate)
        current_frame[block_y][block_x] += pixel;
    }
    // average pixels in block (rescale)
    for (int y = 0; y < (240 / 10); y++)
        for (int x = 0; x < (320 / 10); x++)
            current_frame[y][x] /= 10 * 10;
    Serial.println("Current frame:");
    print_frame(current_frame);
    Serial.println("---------------");
    return true;
 * Compute the number of different blocks
 * If there are enough, then motion happened
bool motion_detect() {
    uint16_t changes = 0;
    const uint16_t blocks = (320 * 240) / (10 * 10);
    for (int y = 0; y < (240 / 10); y++) {
        for (int x = 0; x < (320 / 10); x++) {
            float current = current_frame[y][x];
            float prev = prev_frame[y][x];
            float delta = abs(current - prev) / prev;
            if (delta >= 0.2) {
                Serial.print("diff\t");
                Serial.print(y);
                Serial.print('\t');
                Serial.println(x);
                changes += 1;
            }
        }
    }
    Serial.print("Changed ");
    Serial.print(changes);
    Serial.print(" out of ");
    Serial.println(blocks);
    return (1.0 * changes / blocks) > 0.1;
 * Copy current frame to previous
void update_frame() {
    for (int y = 0; y < (240 / 10); y++) {
        for (int x = 0; x < (320 / 10); x++) {
            prev_frame[y][x] = current_frame[y][x];
        }
    }
 * For serial debugging
 * @param frame
void print_frame(uint16_t frame[(240 / 10)][(320 / 10)]) {
    for (int y = 0; y < (240 / 10); y++) {
        for (int x = 0; x < (320 / 10); x++) {
            Serial.print(frame[y][x]);
            Serial.print('\t');
        }
        Serial.println();
    }
// CAMERA COLOR BLOB DETECTOR, INIT FUNCTION
// color-based blob detection - I plan to use this as part of a larger project, the idea is to help detect certain insects and pests in agricultural settings
// this camera will then become an additional sensor communicating with a robot designed to remove pests from invaded plants. 
void cameraInitConfigColorDetector() { // specific for color-based target recognition, remember to do a deinit first!!!
  // camera part
  cameraInitType = 3;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_RGB888;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != 0 /*!< esp_err_t value indicating success (no error) */) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == (0x36)) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
// Telegram section
# 414 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 415 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
char* TBotToken = "810218086:AAFPJNDbolU0tzj_Xx6lXOsatDlYnWYaa80";
char* TChatId = "537093554";
WiFiClientSecure client;
UniversalTelegramBot TBotCambot(TBotToken, client);
int Bot_mtbs = 3000; //mean time between scan messages
long Bot_lasttime; //last time messages' scan has been done
// specific camera variables for the telegram bot
//camera_fb_t * TBotCamfb; // moved intra-function
uint8_t* TBotCamfb_buffer;
size_t TBotCamfb_length;
int TBotCamcurrentByte;
// camera functions specific for the telegram bot
bool isMoreDataAvailable() {
  return (TBotCamfb_length - TBotCamcurrentByte);
uint8_t photoNextByte() {
  TBotCamcurrentByte++;
  return (TBotCamfb_buffer[TBotCamcurrentByte - 1]);
void take_send_photo(String TChatId)
  camera_fb_t * TBotCamfb = 
# 444 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                           __null
# 444 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                               ;
  TBotCamfb = esp_camera_fb_get();
  TBotCamcurrentByte = 0;
  TBotCamfb_length = TBotCamfb->len;
  TBotCamfb_buffer = TBotCamfb->buf;
  TBotCambot.sendPhotoByBinary(TChatId, "image/jpeg", TBotCamfb->len, isMoreDataAvailable, photoNextByte, nullptr, nullptr);
  esp_camera_fb_return(TBotCamfb);
  TBotCamfb_length = 
# 451 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                    __null
# 451 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                        ;
  TBotCamfb_buffer = 
# 452 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                    __null
# 452 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                        ;
// UDP Async client, sends keep heartbeat messages to the server and retrieves commands
AsyncUDP udp; // for server A  // udp layer 5 control protocol
AsyncUDP udpB; // for server B
// command and control IP addresses for server A and server B (redundant server), the exchange is done via udp ( the port is defined by int udpServerPort) and the layer 5 transfers commands and status info as comma separated variables
int IPudpServerAa = 192;
int IPudpServerAb = 168;
int IPudpServerAc = 88;
int IPudpServerAd = 32;
int IPudpServerBa = 192;
int IPudpServerBb = 168;
int IPudpServerBc = 88;
int IPudpServerBd = 33;
int udpServerPort = 8443; // UDP/443 because, well, we can
// udp - layer 5 control protocol processing, the layer 5 control protocol consists of 8 CSV fields. The protocol structure is simple: client_name,requested_operation,field1,field2,field3,field4,field5,field6  all unused fields are set to ascii character 0
#define FIELDUA 8
#define FIELDUB 64
char UdataSplit[8][64];
int UfieldsLen[8];
int UdataLen = 0;
int UserverOK = 0; // contact with the server attempted for 3 times in a row, failing. Say, the idea is: ACK from server received: set to 3, send HEARTBEAT: decrease by 1 until zero is reached, then stop decreasing.
static uint8_t wifiDebugOn = 0;
static uint8_t wifiConnFlag = 0;
static uint8_t wifiWebserverFlag = 0;
static uint8_t wifiBeginFlag = 0;
static uint8_t wifiConnectionAttempts = 0;
// Set the local access point IP address, the netmask is assumed to be /24
IPAddress SetAPIP = {192,168,5,1}; // REMEMBER TO CHANGE THIS FOR EVERY AP YOU PLAN TO INTRODUCE TO THE NETWORK
// Set these to your desired credentials.
const char *ssid = "e32cam001s01"; // for the local AP  // REMEMBER TO CHANGE THE SSID AS WELL, THE NET PART CONTAINS THE THIRD BYTE OF THE AP IP ADDRESS (the network LSByte)
const char *password = "giampippetto";
WiFiServer serverSTA(8080); // adding a second server on the STA interface? Let's try
// loop() control section
uint32_t loopCounter = 0;
// NETWORK section
// processing variables subsection
uint8_t payloadCurrContent[128] = {0};
uint8_t hashCurrContent[64] = {0};
uint8_t payHeaderCurrContent[32] = {0};
// NAt processing subsection
uint32_t payloadTypeF = 0;
uint32_t srcIPext = 0; // STA side
uint32_t dstIPext = 0;
uint32_t srcIPint = 0; // AP side
uint32_t dstIPint = 0;
uint32_t srcIPpay = 0; // payload side
uint32_t dstIPpay = 0;
// in the NAT table, the folloving are converted to uint32_t 
uint16_t srcPortext = 0; // STA side
uint16_t dstPortext = 0;
uint16_t srcPortint = 0; // AP side
uint16_t dstPortint = 0;
uint16_t srcPortpay = 0; // payload side
uint16_t dstPortpay = 0;
uint16_t expiryCounter = 0;
// NAT table subsection
uint32_t NATline[16] = {0}; // there are 14 fields actually, as per the above list, plus 2 reserved fields
uint32_t NATtable[256][16] = {0};
uint16_t NATlinePointer = 0; // do we allow up to 256 flows only?
// routing table subsection
uint16_t RoutelinePointer = 0; // do we allow up to 16 routes only?
uint32_t routetable[16][8] = {0}; // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
//packet buffer sub-section
uint8_t payloadToProcessFlag = 0; // if the LSB bit0 == 1, there is a payload that needs processing, other values / bits set may mean other operations.
uint8_t * payloadBuffer = 
# 557 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                         __null
# 557 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                             ;
//structure of the packet buffer:
Size = 224Bytes = 32B header + 128B payload + 64B hash
4B = Type Field( 4 bytes ) = reqtype(1B), protocolNum(1B), Reserved(1B), Reserved(1B)
4B = DST IP
4B = SRC IP 
2B = DST PORT
2B = SRC PORT
2B = PayloadLen
2B = Reserved
4B = Reserved
4B = Reserved
4B = Reserved
128B = actual payload
64B = sha256Hash_reserved(32B raw or 64B hex)
// LED section
#define LED_BUILTIN 2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/
// string section 
// converts character array 
// to string and returns it 
String convertToString(char* a, int size)
    int i;
    String s = "";
    for (i = 0; i < size; i++) {
        s = s + a[i];
    }
    return s;
// deep sleep section
#define uS_TO_S_FACTOR 1000000ULL /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP 60 /* Time ESP32 will go to sleep (in seconds) */
__attribute__((section(".rtc.data"))) int bootCount = 0;
Method to print the reason by which ESP32
has been awaken from sleep
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch(wakeup_reason)
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
// update the routing table
void routeTableUpdate() {
// RoutelinePointer // do we allow up to 16 routes only?
//uint32_t *routetable[16][8] // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
uint32_t ImyLocalIP = 0;
uint32_t ImyLocalSubnet = 0;
uint32_t ImyAPIP = 0;
uint32_t ImyAPSubnet = 0;
uint32_t ImyLocalSubnetMask = 0;
uint32_t ImyAPSubnetMask = (255 >> 24) + (255 >> 16) + (255 >> 8);
uint32_t ImyLocalGateway = 0;
IPAddress myLocalIP = {0,0,0,0};
IPAddress myLocalSubnet = {0,0,0,0};
IPAddress myLocalSubnetMask = {0,0,0,0};
IPAddress myLocalGateway = {0,0,0,0};
IPAddress myAPIP = WiFi.softAPIP();
ImyAPIP = (uint32_t)((myAPIP[0] << 24) + (myAPIP[1] << 24) + (myAPIP[2] << 24) + myAPIP[3]);
ImyAPSubnet = ImyAPIP & ImyAPSubnetMask;
// the first lines
// line 0 local AP  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
routetable[0][0] = ImyAPSubnet;
routetable[0][1] = ImyAPSubnetMask;
routetable[0][2] = ImyAPIP;
routetable[0][3] = 0; // gateway of course set to 0 for the AP side
routetable[0][4] = 0; // interface ID set to zero, for the moment.
routetable[0][5] = 0;
routetable[0][6] = 0;
routetable[0][7] = 0;
if (wifiConnFlag == 1) {
  myLocalIP = WiFi.localIP();
  myLocalSubnet = WiFi.subnetMask();
  myLocalGateway = WiFi.gatewayIP();
  ImyLocalIP = (myLocalIP[0] << 24) + (myLocalIP[1] << 24) + (myLocalIP[2] << 24) + myLocalIP[3];
  ImyLocalSubnetMask = (myLocalSubnetMask[0] << 24) + (myLocalSubnetMask[1] << 24) + (myLocalSubnetMask[2] << 24) + myLocalSubnetMask[3];
  ImyLocalGateway = (myLocalGateway[0] << 24) + (myLocalGateway[1] << 24) + (myLocalGateway[2] << 24) + myLocalGateway[3];
  ImyLocalSubnet = ImyLocalIP & ImyLocalSubnetMask;
  // line 1 STA  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
  routetable[1][0] = ImyLocalSubnet;
  routetable[1][1] = ImyLocalSubnetMask;
  routetable[1][2] = ImyLocalIP;
  routetable[1][3] = ImyLocalGateway;
  routetable[1][4] = 1; // interface ID set to 1, for the moment.
  routetable[1][5] = 0;
  routetable[1][6] = 0;
  routetable[1][7] = 0;
} else {
  routetable[1][0] = 0; // nullifying the STA route
  routetable[1][1] = 0; // nullifying the STA route
  routetable[1][2] = 0; // nullifying the STA route
  routetable[1][3] = 0; // nullifying the STA route
  routetable[1][4] = 0; // nullifying the STA route
  routetable[1][5] = 0; // nullifying the STA route
  routetable[1][6] = 0; // nullifying the STA route
  routetable[1][7] = 0; // nullifying the STA route
} // end void routetableupdate()
// handle client requests
void clientServe() {
  WiFiClient client = serverSTA.available(); // listen for incoming clients
  if (client) { // if you get a client,
    Serial.println("New Client."); // print a message out the serial port
    String currentLine = ""; // make a String to hold incoming data from the client
    while (client.connected()) { // loop while the client's connected
      if (client.available()) { // if there's bytes to read from the client,
        char c = client.read(); // read a byte, then
        Serial.write(c); // print it out the serial monitor
        if (c == '\n') { // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to take a picture and send it via telegram (configure via udp layer 5 control protocol).<br>");
            client.print("Click <a href=\"/L\">here</a> to restart the device.<br>");
            client.print("Click <a href=\"/W\">here</a> to initialize the camera hardware for the integrated camera webserver.<br>");
            client.print("Click <a href=\"/S\">here</a> to deinitialize the camera hardware and save power.<br>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else { // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') { // if you got anything else but a carriage return character,
          currentLine += c; // add it to the end of the currentLine
        }
        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          //digitalWrite(LED_BUILTIN, HIGH);               // GET /H takes a picture and sends it via telegram
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          }
          take_send_photo(TChatId);
          digitalWrite(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x0);
        }
        if (currentLine.endsWith("GET /W")) { // init camera for the main camera webserver
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          }
        }
        if (currentLine.endsWith("GET /S")) { // deinitialize the camera
          cameraInitType = 0;
          esp_camera_deinit(); // the camera needs a deinit from its current configuration.
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x0); // GET /L restarts the device
          esp_restart();
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
void startCameraServer();
void wifiIntManagement() {
    // STA connection and disconnection management
// WIFI DEBUG AND SERVICING SECTION START
  if (wifiDebugOn == 1) {
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("WiFi not connected yet");
    }
    if (WiFi.status() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer(); // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
    }
  if (wifiConnectionAttempts >= 32) { // turning off wifi, there is no point in trying anymore, if past 32 attempts.
    WiFi.mode(WIFI_MODE_NULL); // turning off wifi, then we go to deep sleep for a certain number of seconds.
    esp_err_t err = esp_camera_deinit();
    esp_deep_sleep_start(); // going to deep sleep
  if ((wifiConnFlag == 0) && (wifiConnectionAttempts < 32)) { // wifiConnectionAttempts must be < 32 
    wifiConnectionAttempts++; // increasing the connection attempts counter
    if (wifiMulti.run() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer(); // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
      Serial2.print("WiFi up and running: ");
      Serial2.print(WiFi.localIP());
      Serial2.println("' to connect");
      wifiConnFlag = 1;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
    if ((WiFi.status() != WL_CONNECTED) && (wifiBeginFlag == 0)) {
      Serial.println("WiFi restarting");
      WiFi.begin(ssid, password);
      wifiBeginFlag = 1;
    }
  if (wifiConnFlag == 1) { // test if the wifi stays alive...
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() != WL_CONNECTED
      Serial.println("WiFi disconnected");
      wifiConnFlag = 0;
      wifiBeginFlag = 0;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
  if (((wifiConnFlag == 1) && (wifiWebserverFlag == 0)) || (ESP.getFreeHeap() < 44000)) { // servicing the webserver on connection up for the first time
      // >>>>>>>> START SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      // >>>>>>>> END SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      wifiWebserverFlag = 1;
  // WIFI DEBUG AND SERVICING SECTION END 
// UDP - layer 5 control protocol
void UresetudpData() {
for(int i = 0; i < 8; i++){
  for(int j = 0; j < 64; j++) {
    UdataSplit[i][j] = 0;
for(int i = 0; i < 8; i++) {
  UfieldsLen[i] = 0;
UdataLen = 0;
} // end resetudpData()
int UfillinudpData(uint8_t *pktDataField, int pktLen) {
int i = 0;
int j = 0;
int k = 0;
UdataLen = pktLen;
for(i = 0; i < UdataLen; i++){
  if(pktDataField[i] == ',') {
    UfieldsLen[j] = k;
    Serial.print("received_udp_control_protocol_data:");
    Serial.print(UdataSplit[j]);
    Serial.print("; data_len:");
    Serial.print(k);
    Serial.print("; field_position:");
    Serial.println(j);
    j++;
    k = 0;
  if(j >= 8) {
    Serial.print("ERROR: too many commas in the udp layer 5 control protocol");
    return 100;
  UdataSplit[j][k] = pktDataField[i];
  k++;
UfieldsLen[j] = k;
return 0;
} // end fillinudpData()
void UprocessudpCommand(AsyncUDPPacket packet) {
  Serial.print("processing udp layer 5 control protocol command directed to: ");
  Serial.print(UdataSplit[0]);
  Serial.print("; command is: ");
  Serial.println(UdataSplit[1]);
  // commands available at the moment, or planned, are: 
  // ACK (confirmed heartbeat reception, do nothing), TLGS (send picture to telegram), TLGC (configure telegram, field 2 = bot token, field 3 = chat id)
  // RST (reboot the device), DSLP (deep sleep)
  if(UdataSplit[0] == "e32cam001s01") { // matched the field 0, the command is directed to me. 
      // processing the actual commands
      if(UdataSplit[1] == "ACK") {
        // do not reply with an ACK to an ACK, that would be ...disturbing
        UserverOK = 3;
      }
      if(UdataSplit[1] == "TLGS") { // send picture via telegram
        //TBotToken
        //TChatId
        // technically speaking we should deinit and reinit with acceptable parameters. 
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
          if (cameraInitType != 0) {
            esp_camera_deinit(); // the camera needs a deinit from its current configuration.
          }
          delay(1000); // this might not really be necessary
          cameraInitConfig(); // and is setup for the correct motion capture configuration
          delay(3000);
        }
         // this might not really be necessary
        take_send_photo(TChatId);
      }
      if(UdataSplit[1] == "TLGC") { // configure telegram bot token and chat id
        bool ok;
        String sToken = convertToString(UdataSplit[2], UfieldsLen[2]);
        String sChatId = convertToString(UdataSplit[3], UfieldsLen[3]);
        ok = NVS.setString ("TLGToken", sToken); // Store the data value into the key named "TLGToken" on the NVS
        if(ok) {
          ok = NVS.setString ("TLGChatId", sChatId); // Store the data value into the key named "TLGChatId" on the NVS
        }
        if(ok) {
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf("e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        } else {
          Serial.println("ERROR saving data to nvs");
          packet.printf("e32cam001s01,ERR,ERROR saving data to NVS,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        }
      }
      if(UdataSplit[1] == "RST") { // restart system
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf("e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        esp_restart();
      }
      if(UdataSplit[1] == "DSLP") { // start deep sleep
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf("e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        Serial.println("RECEIVED REQUEST TO DEEP SLEEP, STARTING TO SLEEP DEEP");
        esp_err_t err = esp_camera_deinit();
        esp_deep_sleep_start(); // going to deep sleep
      }
      if(UdataSplit[1] == "WCAM") { // init camera for the webserver
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
        }
      }
      if(UdataSplit[1] == "SCAM") { // deinitialize the camera
        cameraInitType = 0;
        esp_camera_deinit(); // the camera needs a deinit from its current configuration.
      }
void udpCommandClient() {
  if( ! udp.connected()) {
    Serial.println("UDP connecting to server A");
    udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
    Serial.println("UDP connected to server A");
  if(udp.connected()) {
        Serial.println("UDP sending to server A");
        //Send unicast
        udp.print("e32cam001s01,HEARTBEAT,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/); // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
          }
        }
        udp.onPacket([](AsyncUDPPacket packet) {
            Serial.print("UDP Packet Type: ");
            Serial.print(packet.isBroadcast()?"Broadcast":packet.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packet.remoteIP());
            Serial.print(":");
            Serial.print(packet.remotePort());
            Serial.print(", To: ");
            Serial.print(packet.localIP());
            Serial.print(":");
            Serial.print(packet.localPort());
            Serial.print(", Length: ");
            Serial.print(packet.length());
            Serial.print(", Data: ");
            Serial.write(packet.data(), packet.length());
            Serial.println();
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packet.data() ,packet.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packet); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            // packet response processing END
        });
    }
// sending the heartbeat to the backup udp command server
void udpBCommandClient() {
  if( ! udpB.connected()) {
    Serial.println("UDP connecting to server B");
    udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
    Serial.println("UDP connected to server B");
  if(udpB.connected()) {
        Serial.println("UDP sending to server B");
        //Send unicast
        udpB.print("e32cam001s01,HEARTBEAT,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/); // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
          }
        }
        udpB.onPacket([](AsyncUDPPacket packetB) {
            Serial.print("UDP B Packet Type: ");
            Serial.print(packetB.isBroadcast()?"Broadcast":packetB.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packetB.remoteIP());
            Serial.print(":");
            Serial.print(packetB.remotePort());
            Serial.print(", To: ");
            Serial.print(packetB.localIP());
            Serial.print(":");
            Serial.print(packetB.localPort());
            Serial.print(", Length: ");
            Serial.print(packetB.length());
            Serial.print(", Data: ");
            Serial.write(packetB.data(), packetB.length());
            Serial.println();
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packetB.data() ,packetB.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packetB); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            // packet response processing END
        });
    }
void clientsManagement() {
  if ((wifiConnFlag == 1) && (wifiWebserverFlag == 1)) { // HANDLE CLIENT REQUESTS HERE
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    clientServe();
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
  } // end handle client requests if
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
// wakeup and init part 
  // packet / payload buffer allocation
  payloadBuffer = (uint8_t *)malloc(256 * sizeof(uint8_t)); // the actual size is 224 (see in the declarations), the maximum payload size for ESP-NOW is 250.
  pinMode(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x02);
  // deep sleep boots
  ++bootCount;
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  /*
  First we configure the wake up source
  We set our ESP32 to wake up every 5 seconds
  */
  esp_sleep_enable_timer_wakeup(60 /* Time ESP32 will go to sleep (in seconds) */ * 1000000ULL /* Conversion factor for micro seconds to seconds */);
// camera init and config
  Serial.println("WARNING, NOT INITIALIZING THE CAMERA IN ORDER TO SAVE POWER. PLEASE DO IT MANUALLY VIA UDP COMMANDS OR VIA THE MANAGEMENT HTTP SERVER ON PORT 8080");
  //cameraInitConfig(); // we want the camera not initialized by default. This saver power.
  /*
 if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
  */
// WIFI SECTION
  Serial.println();
  Serial.println("Configuring access point...");
  WiFi.mode(WIFI_MODE_APSTA); // added by me // selecting the AP+STA mode
  wifiMulti.addAP("e32ap001s01border", "giampippetto"); // the connection part is verified as follows: wifiMulti.run() == WL_CONNECTED
  wifiMulti.addAP("G5SE_7499", "pippopluto");
  wifiMulti.addAP("internet-gw.iw1gpe.it.ampr.o", "heisakuukanwohiraite");
  wifiMulti.addAP("inverse", "heisakuukanwohiraite");
  wifiMulti.addAP("e32ap002s01border", "giampippetto");
  wifiMulti.addAP("e32ap003s01border", "giampippetto");
  wifiMulti.addAP("e32ap004s01border", "giampippetto");
  wifiMulti.addAP("e32ap001s02border", "giampippetto");
  wifiMulti.addAP("e32ap002s02border", "giampippetto");
  wifiMulti.addAP("e32ap003s02border", "giampippetto");
  wifiMulti.addAP("e32ap004s02border", "giampippetto");
  // You can remove the password parameter if you want the AP to be open.
  WiFi.softAP(ssid, password);
  delay(200); // wait at least 100ms until the AP has started
  if(!WiFi.softAPConfig(SetAPIP, SetAPIP, IPAddress(255, 255, 255, 0))){
      Serial.println("AP Config Failed");
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  // the STA part is configured here and managed in loop()
// old wifi section
  //WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  Serial.println("");
  Serial.println("WiFi connected");
  startCameraServer();
  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  */
  // NVS storage init
  NVS.begin();
  // trying to load the bot configuration from NVS 
  //TBotToken
  //TChatId
  // load the telegram bot token if available from NVS
  String loadedstr = NVS.getString ("TLGToken"); // Read the value of the "TLGToken" key from the NVS 
  if(loadedstr.length() > 3) { // at least we make sure the result is not empty...
    TBotToken = {};
    loadedstr.toCharArray(TBotToken, loadedstr.length()); // loading TBotToken
    loadedstr = NVS.getString ("TLGChatId"); // Read the value of the "TLGChatId" key from the NVS 
    if(loadedstr.length() > 3) {
      loadedstr.toCharArray(TChatId, loadedstr.length()); // loading TChatId
      Serial.print("Loaded Telegram BotToken and ChatId from NVS storage with values: ");
      Serial.print(TBotToken);
      Serial.print(" and ");
      Serial.println(TChatId);
    }
} // END setup()
void loop() {
  // put your main code here, to run repeatedly:
 // loopCounter check
  if (loopCounter > 16) {
    loopCounter = 0;
  clientsManagement(); // web client requests are handled always 
  if(loopCounter == 1) {
    wifiIntManagement();
  if(loopCounter == 2) {
    routeTableUpdate();
  if(loopCounter == 3) {
    udpCommandClient();
    udp.broadcastTo("e32cam001s01", udpServerPort);
  if(loopCounter == 5) {
  // position number 15, let the device stabilize its connections first...
  if(loopCounter == 15) { // MOTION DETECTOR SECTION
    if ((motionDetectON == 1) || ((UserverOK == 0) && (alarmEnabled == 1)) ){
       if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
      if (!capture_still()) {
        Serial.println("Motion Detector: Failed capture");
        delay(3000);
        return;
      }
      if (motion_detect()) {
        Serial.println("Motion detected");
    }
    update_frame();
    }
  // loopCounter increase
  loopCounter++;
  delay(1000);
"3DUfw`Lx;
_CONSOLE
R	VL
U$(?
#\t\
?^*+
CbrL@
L;>+I
H^P;@l4R
jA9D
|\Z+
B3Fq
sm/0
)TzV
>\lo7r
4bqg
dEE(
q"@|
_sXa
`rc'
M@dk
o!z3Gz
`gm"
sGTv
!3xj
,?_s
7n(t
	/wE
(hk`
;Rg1
KHOZi
QDtY
Oz).
p'k]\
8hG;
Srtd
r^sA5
	p"\R
2vuMJb
zW`2
+`E$
0Na:
8*Wy
,ybr
5k1Y
j H\
^fbq
\5Q,Y
XPHO5s-taC
p_;sn
0U7R
6Otrt
#kwCs_
{Vx{
XUJK 
j0\y,
`D=W@Q
HYa>
Rv\."I
	!:^
J:cV
k :H$
 *1K(
,~>Eni
X?t)
6yPN:e
8=!g%
),^2
1(Zc
7$7g
|Y}<,
sG7o
;c}|
l;!Yq
"~6;
{_p+
:+>Z
;Q|P
4-5~v
#5BIG
NeS=
'Y|c
Ht/~;2
eN$>
k3/[/
W+$n
ylSsh
#Him-V
9zgZ#r*
rVN\
[D"K
%isQ
%"G;;
F?&V
!}K[
rw@[
ee$n
x[gK
!}o	
g^uu2
3jD\$
,v=i5
	dD@
vR+K
9W)`>
[;ru
~SZy
&lD+
G8|3
ke2#
>?0]/xB
XF!x
Q)^J
#wse*
0=7&
Qp.~
Zr9f
`Q&6
`n(7
VVm|
{v%N
.f_\
<}A'W
5Fab)
z@:ZW
drX]
Cj)#;
B4}q
8G_K?k
knl`
`Y-"P
;LCj
b)B2
[%;%
QC@s
uTcE
F$qa/
_?ZE
9\9P
<iitR
<>1JY
va,w
d{w2
p9DI
AtS5
3]z;X
*C*~
-u%m
dy*~3
)C3<
TXR2
%WyLj
4	0G^%>c||
H	iQ
H9{d,
>PdXs
VHNKY
!&1u
yyc?
&qJg
.ckN
#Qs!
1vfw
I]]j
V	+Tn
U}K^F
8qCJo
 \t-
%W/|
^pwi
H<p 'v
RW1&S
7pXT
	|l+
4pT^
o|l[" 
|VZ$
O.}9gR|3I
VaIX
NJgw0
)7:aO:
_LJmh
:2C%
9LX\Z
c?5V
?m!l
/hO~K
U&E?P#
YrcN
+=Dt3
e"GB
pF)?
mC=^M
om/1
XTpw
<@Cc6'
19Rw!
5,iw
U	Tu<@
z8gh
T"6xb
@_~g
3JfP
zZ_!
 mm	
Dch*c"
g0V]n
n@U57b8
x6dTY
;Pq#SP|E
o<jG
	&Fa
OKD:
+cI^
Do @l
ZoLm
%,#u
]Tm!
v_,^t
u%FC
D68u
"zD'
qy,EP
g_~b
sOJ1
~"Fu
GCC9Q
s<p5H
`T;p
~/.nn
{u>c#
pvkP=
Xi$^
v]Wx
|y)"
}-]$U
R:x9A
ySoQH
dr+i
PIk"r
%vehF
STZ5|^
~-N&
5tXP
@cr/
[jNX\a
`./M
w7#~
F.K(	
a!5[
RDv{
Wv;	
8Qmg
j8+u
jtzv
9zm$
oFQa
G$X.
5'=6
Rd<G
n2MG
J|YU!
98+I
'aeK
$?`1
Sz~+{
>b?5
EA8"
"1pB
(JDW
oy&GdB
>JRQ*
w&p7
0>oq
G a>r;(\
L}RO
5b`e
JVv!
jbn_}
!S;_
G9b	
WN8#
csG:
rOu`\
$f'F
J.rU|hu^
(;pb
<eDMQ5
e	ly
_S|1
c"bo
	0[|t
*@j*1
l-Br
E0r1
=J`?
`%0/
jF<f
z<Ni
15cKW
4"e}
 p2+
sW<h
`b1G-
<p(e
"3DUfw`
_CONSOLE
	"	*"1
NN2\
p|Mp
~90y
D >H
GrSA|
Y9}X
-_m4
%:'J{lq
0')H:_S
~)h'
w^I"
?	<a
,hwz
&fOsg!H
_@.zVqxG
|^c.
CyBC
xG<H
;5v"8
Q)5hZC
+`hh
ATll,
@UE0	
 KbM
Qd|)
h5^]
\.h2r
7P5,
0/4'C
CI|y
9P=(19
PjfD
^!&q
Wfop
OBho
tWQd
y(N`
-}nX
W:@c)
Er"0
$v<<*;
~5RK
\i0Xt
c#vw
(GTkU
E$`r
z~r$L
	r*t
Nbg~
0GEn
)}Sx
r4(y
AW$*
m{]&
vyV?j
Cv4s@
]<c$
E"x1
[\8FW
c]JJ
]!a 
5x'$l
pjJz
M)=F
X8RYjz<
Q[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585305626
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
24c527cd-734b-462b-bca9-faecd9e3feeb=1585305626
"3DUfw`
_CONSOLE
.9%?
\wv[
CipU
fx2-
t*oK"
=<0"
q mc
vS&h
t/)}
^I*6:
K/K#1
kFm5
)x:*
[TaALW_+(
IO!W
_cu{
H:j3
=/(Z
JLmXl
[!~^
,rrY
yzT}vW`
p<>n&b4
9MF+
]NXe
Es%?9
9+j,^
*{B^
Ml} 
%`e|
]dba
tUsq
|U|m
SyaK
rWbt
\_>fIo'
c}bi
4_zPoC`Ig
F\pW
O)]6;!
44l=
aZm)
4L\2eLp
D\uU
tE16
J/_5#r
56gH
ch.-
#;Rl
OW%sM]
fq(4T
uJ]Hb
"Jzp
{Gr;Y
w%`h
Fxqb
ZUW[8
qJr'5
7>I#
a_r1
`	c~N
3,^K@
||V!
	<A!Lb\
?}B\
,<BTT
~+YiJ\
-.e$
=BO5:
/~E(Kc{7
8B3)
d#"`[\t
ZN=e
5>bXP
N%Ve
Wla1
(_=Q
!%Kz
tjA)
Z1!j
SuBRiiS
Y0/*
<3b2
ZrbS
+k"m
]}7?s
t&:1
.!(>
8~#V
P2n^
}iEC
4P_K6
VP*ne
<Ks4-
1XW6O
3YR-Y
{[K6
*3:T
0x,g
3fz\
	isnFh
7uwS
NtXK
Y~pr
U}il
=HARI
*+p	l
N6h&_
keM?q
}r	B
9p~*
&MB`SM
M2jX
gpDgJ
OJ6~
BG^4
;n	z
A6M	'q
Q1cR
Ah\b
`FPT
\A6Q
f`I3
^)yI
EH5\$
KuN$
ddvm
=&xt
w&M@,
N6S_<I
8{(@
;YOc
"&P'
iyIC4
%=hZ
>t2\
D(k1)
xa"\
CTZfn
$m)!
kMHDS=u
&%,hG
(FV2
)9}L
saYp
(1+t
n\L6
l76M
Mp9@
qE]w
{'wP@
n3>4
ZtGp
\1N4
hSJK
]R4ZO
!/I1D
&O}bh
]{g 
al)*
09ggJ
0<L_
u9r/
@GZP
IHFF
!/=b
7jIpAt
H~J.s
^q0?$
Hk;g
6+JD
k=u:
9p-v
:AP-Z
}6;y
*)gX	
0:wZ
%::9te(
qGjZ
`J7_
Qm{+u
CEH[
j-<9
ZC9XUv
9Pu@
FW@,@
Wl+^
E.U2m=
<o@d
]YEA(
@"<h
m-M-
X[=D
5]K^IZ
K]B~
YV,v
$B\1NLv
0%3}s"
7XD|
9'l8
 D"&
t&Wb
e{~(
L*Y,
MO2z
j@BrP*1
A(~>
5Un%
/V+-
#IH&
)%$M
igtg
He!'
7$wgN
)G*>
a0V:O
C7`&t3
517M
l"0n
Uo/M
F%G5W(
p*s)H\j,
erWW
>W)0?>jvq
#.v*
0GZ*p
`rj^
C)9Wa
Pi7&
 /{3
$Fjps
MxsN
)/p_
%o8A
A[naK
x6`d
$$Zo!9`:
wc!4p
8D6l
t0/m
UgKJ\}
7X05
&-Kk
d"Y:
oIB,
6=}p
|}`M
} j?
y}Bj
TuDA
ZxW@
82}:
!|	 
M8WWn.
I.p5k
:>5}
WYAJ
t2; 6
v $A
tXAQ
=/z$"
-wX.t
Gb%b$-
qO+8
~I1S
@Zj$
"h5t
iip~
/xvTh
2Yr|k
 L)u
YoRBP
ooQH
WvPf7]E
BnbU5
DE7Q
=B.kN
#*]r;
mn"K^KqH
n[kK
&#g!]
y>!B
t34#
7W#h
9YQG$Dp
#ZB!
Y5~(
^"	O
+&7f
"7syD
oq<;
rHV\
4zIR
hm2[
'['5^d
ZQjr
+EDZ
nScSZ>O
]8mM
-(l 
|6Qu
A;l>n
B&;T
6MCR$
VFT{tC
b{3S
U_=!
'v&QK
$qVr7
(JO)
SF}kqUT.
Rp~jXb0
Lwqf
$B<'
X+BF
zkg&"{
./r\"y<
<v3C
E-"d]
20	"
"3DUfw`
_CONSOLE
k-.l
6xIX
%u^O
|^* 
viUbM
Dui~d
CCAjJ
o]|W
7J=u
/go0
oO/l|G1
Z238m
{Q.1J!
TmK9
G.mF
[.?K
mIq[t
mWja
~[PX
u5oA
}#*b
	B#P
l:+%
9g2o
\nH	Vx
F0ur
o^J-+
>li9VH
>x1*
c/LL
$muC
[J+I{u
ub4~SH3jQ
bWG5p
rK)B" L
T+_ 
mcO}d
[uut
xWbIs
Pu~,
O.5:
'4f2)=(
4jMm+$
:p>\
{-a{
"3DUfw`
_CONSOLE
B{I@
%pKo
3u8=
VHg-j-j
[rHxw7
ZVD;b
(MO5
<#]w
0)*m
t%"F
Hi>]i
$QJN
c,xaN
.-WQ
ne/o
9dR9d#
iu=g
?)0?
n	qC4k
Im!E
[aB:@
sWi,
c@'ol
|N<S
dppw
6^<:
H0F-hfX
<5uT	fW
=<UP
QZQ`
QzA1
@.BF
P[f\Z
0$Tv:
f:s]
~,=K
P%2jIj
F52	/
ac-Pm*
AH}b
,Ci,
#/B(
d$^S
AR]qb
.Ri;,c
!7NP
J\zn
]n1q
Sju!
,v=H
NZ	B
1O_i
$k8 
HKAg
}SW1
4)zg
uWy8
WuPE
dw]K4}
+Zx	!
WUMi
ADOk 
1zlN
{=ly
wg{yvJZH
ALLk
Z<$f5n
^cJ*"
#Eb9}
v_`+
+L+n
Y-YzJ4Kr/
`S$a
cU+L
:Cp2
zd9\
],psG2
BVQg
xA+\-0
&' -Q
:6d>%7A
Tw6S
=HN'
3X=`
^I%ai
_Gfc
DG;!J'
{d9Q
J3##h
;hD{
`'M<
{Tt!/6
%n"B
0ZZ:
.i}|
U&!Q
+^JF
MNc+
F;ip0
vlmd
E6H6!
iA"4
]>a@06
age>
rS3r
Ixm,j
?By>I
dO}mm^
SlsP
 f).
/Dl#I
;jmp
N.O)H
_YM"A
E8!Gq
?Ic(
s&lr&I
[7I=
;qB%
6kAh
M+#0
V*	\]m
.`f{
4ps^
[k@1
+mC'C
_wVj
e'AwY
^^L?
=L{^
[gA6V.
 mSP9
y}3q
a}N&B
J]|!
P\! 
zv&V
?@BxVi{
	s}M
WWyco
8q_uK
yxTf
ao,L
IU*y
vM H7e
DKed
$fEj
heZu
j+*0
_-U~
rD/y
?8TN{
Q4).?
WTl>
rfz|
A49y
J`2t
'bht
$3S?
u[(g@g
J*-3k
g>@m
JR5da
Yder
~B$h
LA0+[
q Ac
q;c	3
VZ03r
`N/#
N/ox
NboH
_,3W
fnT,
xD}4
v7Jp
AaZEma
y{$,
=Fa{3<D,g
Lz^aZ
Xj;-
3"%8@C
oGdq
#(<<
 Kc=Fs
Z43,
%)AGu
1lC6
1PtK
*Y5bv
l4t]
T1/i
r=^a5
q=*o
1yB+3
i@)n
L	2-
&yV^X
<N	P
9t^Q
|U4qE6
-I!b"-
f%}b
tQ-]
*+Q\
5H26Z
gqO	
pMBnM
lJnE
y{G{
Ayoxz
1TE"t`
	Cqw
cH^<
}!*0
g)U?
2n_Sl#
|gCq
OnM[
[8`Z]}
*.N=
9-pmO
b(Npq
jwq0
RsYp\
2R,K
#yiA\Ol
!f#wL
b4eBY
5drldR4
B84tK
8GG>
P#1G
?K<|\xS
%0K	n
bmGU
F_,#
^WiC
X-"Q
jqsK;P
k[K+
(')F
	L;S
'Wl<
]0z:)
3']nmb
{mtUo
m5IG
sac[
MW`A
m!/g
l[g-AL
yJS@
kNJy
(rk'IH
ug"!
BYl]
yIpE
|`K9u
PPr<i
)aMXx
0\j!5@
C+CO
~^L!
=ZCA<OU
4\nr
}Y/2^
^gFX
\|;0}v
8w%{@dv
~Sf{
RR)M
yl?J
iM6j
	Dq4
K:PF
;_%>!M
)N?9
w3ED	
Z'F2o
_6H,
P"sp
oy:T,)
<Z}C
<1y>
KE}rD_
oJ(>
<S6h
cPv>
$	`"
vv/?;
t#p,pn
6m:*8C
h5i!WdG?
FCsW
0RR%
'8]G
L|'B
=w^}
"<r=+OAiHr
K2[K_
9\~0
Bv)6
yLy~_z)<K
Wbls
"3DUfw`I
_CONSOLE
s-X/Ry$
$<OA
yemG
dMi46
2U(0
E3Zp
:QI!Q
ahY_
O{,@S5
Yb%)
4cU?
t>7&*
|?.P
eO~xj*
;Bx`v
,|^Y
 aS;E
rQA$
0N['
KN@I	rx_i
F|e{
=:_]
&<-{
KGI+L
<K\7`o
#paD
jREbb
+z*-
Rga3
ccWH
JPKlG
gY^cd
mOO@>=dZ
-h>^Js<
8J:m
O`$4
'k'8
mQ~[
z*RFx
PWE((
uGm~
W++q
!nYI
p|8	
@^;|
^5/K"
fa]w
TX	"HX
!5T.
#x$j\-zZ
fKju
gD8!GC
29^k
3H(,
v4AI|
]{y^
$d;_
y=l	2
,`wO
+M2%
>S}T
XJS9t
LA?/
DrMJj3
p{Os
k#|6F[
&P+ 
]k_N
x05f
=i&U
mb.%
0$|]
hRpAT
wFwJ
"j.9%S
6Vt}
p`s*
 @Yc
X!$t
Q6)e
"bBj
o4NT@ tP
O-S `
BQR:
0E(!
Hkl|
KlAC{#
Oz4T
.@o~
C5f(
k'>RF
;T-m
|g^f
c>|+
svS"	
ynO=<
9W l
2g'+
rv;<o
*#&86
:QRVJ
TRNFc
 dS^i
r<0=X
[x,&
/LRp
[38l
Qb[1$
8JR6G
	2RL(
Uby=
7S5@WDFY
~GG{
aw]Cdz
ofId
+`E	4
|Je$
*W0a=Iu
PNAPq'
JUR<,
!\nE
Zv+}
 bkm0
X4xY
OrK;
GkN37b
NG;4N&t
D<|T
z[?FG
[=[k
'H%j
HS1#
mLjD
Hq$	
BNiZ
Be}	
j<3ry
i*_V
3Bw	
"!z.
rA11
Lk(Hw
}U2j
^<fG
&1HU
d}+E
"3DUfw`
_CONSOLE
n|{&K
6QgL
nspp1
CZ"sY
*{Tu
!8T(
AbN/
7u{d
@-O!
\Rh.
 E jt
uZeD
yMM]1
3}:	
"O5X{
$tsWLh
3B C	
9f5<Ico
;5<l
]+UL
AZ;a
dQv@
1ny'|
aKA!3
e~L^
s"etkG
l!xlc$
UAbY
gLtg
OLD5
)UqpH
&(.U
BU\e7:u
%	nvXd
1;)T
Y.dO
"Qs#>
zTA:
C|t+"
vvJ"y
aInMW
nmd"
]-j&
YV#x$:
f'`._
+tM9
4QRf
T/qe
S<K[
EC#6hR!
M&gA
QS1K
,{)x
@k_q
<z<K
p7Qe
nlsT
D$mh
,4O/
<[w<
/LmZ1
FqCb
ome?/Y%
 *%!
3?Ge
+P|2DtS-<jW
Fh+X
K i3
;j=9SH#z
"LWm
=~z{
m835g
i/Fu{
=N(P?u
b+6]
RmU6
i`"eA
yp`!R
=hVJ,MgCI
*',k
!QVl
 p6u
Srezi
gip"x:
})eZ
OF e
H	_'
#2[h
/I9>
/l[2
N{G	
;4u"X
]3b	
YDQ2)
Fq'Vh
-4}*
$L%|T
9*C|
-Kpr_
^uwp
Yv$<o
p&Wt
OqqZ
K[q<
%[+-
wmWc
7"#o9G
0O^(	_
^o}]*
c	CL
4 Xi
]kSW
bk!s
exBO)
gQW)p
H	-X`
~qwP
s^Zq
X<sjyp
5bz 
UMzJ
B1O[YW
HUaH
GLXI
hOoU
:wx$l
pvkG
P]py
zT>x=.r
MYJ7Lqbv4
&P[r
(/S3-EL3+
L3>d
bn?DA;
cOfp
B|k H
[^1g
>"K)
gsZX[
#Zx{q
Bkf-
dX#1
5sz8
5jzR
nw9t~
9r8|
hM|B
: Pi
w?6K
$-jK
'o[|5
X?cl
^G{:X
1d`amGk
:	W%b
g2% e
}0x=
PeE'RX<Q
p	9`
zJJS
J*k<
l(.-
'AoC
/qN 
b/LK
yJlM
\K2~
W0']
9Zqs7Nn
ZX="
im^%
iPr(
n4~{
m5eZ
Xu]w|q
t]sP
>rB?
2,E=
?36)8
\men=
1g_^~g
0Nc#
hE;@
aH#'3
Lm[?
7X2h
g/hFs 
k~k$JE	y
m)zhx	
btnk$
NJ!<D5{{
yZ+6s
BD|q)
@hf6b*_
'&7&
*v:*
b1$T
7Lcqx
riED
:6W3
:kQ>
n"4!
hBsD
P[`uu2_
_x<=
/j uP
dP`bN
Ua 1,
ONRIT
v`V@>
!(sW
?Lvs
iq:.
4HV(
6ua:
(sLA4;
d'|n
:a6%Lx
{k7]
!l.h
5mwd
 +Im
QMNH
S557
"3DUfw`
w@K2G
_CONSOLE
k@27
--m\[
SNOv
6lw WV
aLsVU
utJoI
)XEq
>r/N
l)|O
aOv3W
J{+G
sOwBE
J2x/
ye/Wn
+DfP
>"uW
H-</<	
tkE=
s!<!
HY?s
~;S}
o38'
$oT3
&zi:
+	"H
"+}0H
>,kr
)(Eu
^@	a
Th@A
o}]xe
{gXW~
yejp(
=. S
tnf_
&+AMP
m_uJ
+&g8
_`mv
_[C0a
\FI2&
] v.
ERaA%;
1N]si
MAbiR&
mkU8f_
/eGr
"3DUfw`.
_CONSOLE
J_g%L2
yk/|
+WNVn
j-;)7
!Sql
I{O_\
oh]h
bAyaR
SbNl
V&IT
(15V#
#2{L
KUPJ
<,}]
,R>+}S0
vln^
`xS!
GNDCu
_Jx.
W)$4
O`*\
sa7c
/d-z
,B;E
XQv8
DEk:
0A|j
v9{Lu
"1'b#
`]F,
s<kZU0
L/!H1
Z([3
#;cf
/UTO
Ba\cB
=@bFt7
.W!B_
tV28
B8w; 
y%\e
!)'-
JnKf'
Ah)h
pU&n
u[euR
"3DUfw`z
_CONSOLE
=4DB
BLZ=
%$_R
><A	
vSFm
TF{	~
	yvC
Wa#S
%Tt5
q;p3
YR+=
{d_Z[
3uhl
5I4u#
ty*J
B}>t
0(~~h
]pOd
^@0fqc`
<g)&
JR+Ao
z4k$
}*^#q
[p=G
 99.
Xes5
'<7G
C28/
1"M8
5(F	
kel<8
B!+]a
g1lJ!!
$KYm
ub|@'
R3"#
6@d6
b?Xz
oyn8P
*\]*
cr6M
N6L%
6Z	Pe
cog$
 h!]
fzk>
*~e,q
!s_D
i#wdOX	
m_gj
P4D+
fbQm%G"2^
<LUq
=3+<$3
jqnJ
~,O[
5~):d
4'2Z3K
n#n2BKzV
O//:
	OwV
rNhA
*0"$
ga|y
5!o7
4oR	
,^l5
D(XrE|Jd2
M@M=
<]{m
$i[M
bso 
 %{Qk
Olw|
6Ufv
G@S^
@GI3=
U+/5
$KZpo
TLMZ
x{cC
F`.9
nlmJ
v&61(
_-<D
wq,2
|?>I
MMVB
h@Q4
*""g5
UB=l
:Du8
pIxZ/
)#?A
sL(c
T[7Tm
Se0t
.y3!
U#AE
q`&W
>CN3_
z|b@ p9Q
Sx:$
	6n<
Y% W
eJ<Z
J,Y,
_,UT
%z70
=1^T
*dny
(F!8
5#?W
>ZF|
akpt
;e9 
/qUf
4aH?_
2EON
enS:8
Q~+"
V$Nx
%7b\
h	ZZ(i
(Z|j
Zs~D
ESC'
X?li
b_.jN
<}4	
9c\j
51Xq
{93-
_uUj
IEqFv
Fm{4
D_ JMK
]Lvx
K97F
^,$=$%
RlO|
s_#?3
xOFx
>	Dr]`>
kx+~&
Zm_v$"
L]Cx#
Bu@-
)S|$
"3DUfw`
`wrj
_CONSOLE
7WsgU
V]Wm
264G
&d]"w1A
2]RBLl
K 0:
lQY_
uM8#7
qv~w
 uk4
JT&7
,?QJ
7;gT
A$6wm
*f_8
r9)$a
=QV?
<11	
|nA*A2
>5ZV
mN\BD
61OwlJ<
v+B\
j"J+wT
B]!n[
Y4Ifq9(}
0Yem{~w
kr7n
Er)@
lY0FFu.
 R~&
s,isu
Y}L:
xC=1d+Dv
a}q.
6=Ga
*;MDq
BsH(i
Y%k3
Vjdm
|Ki`
fRI-
km$2B
ngqtf
.r0^
Xl*8
[(9y
9ch+)
z'qE
,Cpe
]c<K
s*n@Z
Sbaz
Cf=<
rl70&
F8g~Z
J!Qii
Opgj5
$_+%
0=''
QDeD
\3;i
r1	EVG3X
=|&CQ:
D0za)
:NTu
w^m)
q4Hn
xm+~
R*,Z
%q[	T
iF]h
lv\O
/op<d4
w2uMu.
FS9g
`=:9a
.s #W
,mp^B
%ih|%
 4i0
bgpG
:u)[
O|[Q
r(5n
wi0r
AN?r
)Kn(D
*@g%]
)Zi3}
ZwWJ
YJlp
K-fbk
NT_Z
V9X7
3p4i
?~"LC
|h1#,l
DL0JK)
K2GTPR
~^C|A
]OamNcJ
mN>t
2c$I
QS,z
6DRmwb
;85M
fNa8
vaEP
hH*k
HWiZ
@[ju
*Qgz
Ns_AF
Gp#=
I[-/
2C|E`VG
UxA*
RF'c
S >,Ymt
B0hCD
N	{fxn|	
lSgJ
rFa`
W[P+"'gE
+2*,
E?@,[
BB:m
-+Od
kW&a
YGW'
^1bOd
WwN9
RN&l
F	9~
93TIMrk
-{as c
(<Nk
-3:P
j!}$K
)2xt
4Xbk+
X"y2b@&U
DJfv
oN'+ ~
_2,Y!
jyA2W
_3p5X
z:BN'|
se~]!
?>,t
rxVq7
X[cT
8z0/QU
].A0:
u]tH
NjGyja
5qsY
"9$:zMW
k{3Xf4
1L8.ao
|)fC^
u8EW
lb#n
?qK]J7
qDeHm
o'|@?
v0;0
W.DG
88L`F
g3q(
*ZC+
Tew-x
%>=%
ejq3
7 >%1
$n-Hn
.;c9[L
lC+D(x
8\X:
@iv4
fF"Hv
*o(k
3&<W
x"O-
qT;f*&
u&sIQ
1]A[
>feQ
tMEf
fI&5
rsh/
}}3<
}	fH
oe1M
aZSk83
9yU8
xW1\)
E4e?i
x`A,
Xd*6%"H
jp`J
ck*T
IdP,\
stq%2
f7J`
H1DuD[
l7d|6
^[k8
1^:nc
6#R+
v >n
;pzo#
|mhR
G.[0
G*H#\
#qm+
!eo0
~4Tt
3Vq<=
L_>a
\ gg
,"S|
|+Q{
Qa%^l
?DB.Wm
&Y.F1
.ftx~
Bm[E,
}$Z8
cIR$p
}bnj
4z=z
\#8Jcb
 L\mn
!rb~'
NZra
2mT_
?4Vq
ITDZ?
nk[FD
 }b	
;v]L
K$`U>
JcA<
z9E?
lKz<
=8	'
X?ZVy]
|`7A
^H[]
L@f*.
Cek	
?t%z
E|>9/(
tGq9
1jBm
'`dqY
34-6
1 f^$
6JO|
#[KMY
RmJw
 Fhr-
tf,y
:#`'
lUr*
c[AJ
m KaAT
[+i<
\4v=w
%?d<&
E|<w
FFr.|>
'Gi|
&yFr
/v|)j
}DxpT
CRjg
qHjtH
(xv6*L
tH)[
*|vO
Y=gX
ilT`
&Pm9
h4OQeA
XYA2
v<>$
E\Gc
U"bwI
<9x2
c*Tr
]'W 
}rpO
x}oE
"3DUfw`
_CONSOLE
x-I.?
}'ea
0f,o
{uS$
VLs_
]iP(2
,J~t
TUph
*TOU
eTt\
}Y}kS
XIdZX
Q.6E$
?2 l
g{S#1
MlEP
.>" 
6;{:
^xhb
cf}A
88	$(
;ywho
,0Rg
`4vY
'@M8c>
MBP}
aB/U
zG;Y
:gNq
8Kp5
AdgaN
!~pH
B:}?
4PVZ
UX:q
D&.X
qRy/
,8iKUh!
P:nd$(
60e|
!s1jg
l9oq
95(`
YbGa
+lBj
Kr1\
,*=$k;
mt$'
4BYoU
:}XQ
QFk:
ty?#
	FOac
z#s6
}vH=CN
[<%8
%	rK
,WihL
|z^!
o#~'
]pO2
;V~**'
E"x+
/7^0q
	uQz
6/}p?
 -!=(
%dB79
$>CD
JipN
PNFwN
Bl,=>
PyDM
piu4
k<{8
UBA~
/I'G
?X+L>
1.mvh
s9R+
hE{ivP
Ra?O>
Sf:)
P(KCv`"
Pgxq
	Yr}
(Cpt@
ZtA#
E<;"+
[o]Q
p>i	
~	Mxxe
Kr)m
|Nh[3
EX"G
md}<
Jws7
,R8{r
8iXoj
iok(
Mh"bl
B1pr
vQ	p
W#i+{
=A7'
16zc
VY_C
g}(i
TeRp
=Jyi&'
A	,}
Gq+@
>1vA,
16$x+
J"kE
zI8S
ODg^N
Y2e3
|iZ	
LUG!
K`<#
Vv9&
XX<v
kI'=
RQ//
)Ls4
3%lcLLD
fcgH
ogg<
05'B
C$t&
3&{O
f%92
(B{=
9b|-
@VUl
Kdbf
FB10
_[6o
.C<n
vK5s
Dz%{
NUM@
VdXz?
'%eA
j_cI
!j"E
AIQf?R
kS}P
A3tk
N"%Og
FsmX
[Al!!
)Kavx
?,Fc
7Xef\0
:*\9b
rXhl
M're
wujD
O=rN
j<TP
313C
r XKZ
&J$_
CzG5
n>/V
]bJ1q
w-m~,
RD*,
~Yv6
]<2U
s\3}i
1-6D
&W*ua
ay,v
6x]3
!}w`
pri)@C%s
}D{l{
>$\[
0q~O
ZZo;
yE0o\
ncG(o-,
uf|[
b9	g
"2-M
|txv
#Lv_
M/L	5z
.C$f
4:QsR^
;R{^
>3B=
''('B
oorL
LkBK
zWBj
:e}-
ZFYq4*
=0ol'n
T2nX
sp\:l'
;qe4
(8-c
yiL:
f_Wz
l\x2
$k>6
#[uS
k/x'
6B14
n0l?
T`b<
9a@6
}c_>
:wH<
9j$V
1u{(
$S/>L
/.6hx
cc,E
b]//
Cxmq`.#
4	(Ef
SWl*E
Kg@F
c-#3
N@6f
nMv{
Y{J`r
(QUa
HH)AD
mZZ2
H63A
tb2A
Vy~[
LDFB
*3!y
Wids%
_cuX
J>}&y
fwd!g
	 MD
M!!f
@NrRM
@G$\
J#lB-
|;{g
J3,n
sar}
ry[kT/
.86,
_9v4
Ncy0,g
{/m9e
yE(?
@}9YnA
Z-5ivS
JKO3
-X4s!
`B|D
(C33
85AH1
xkvI
d*qOh
S)U*7
xiAn
K{1z{
`|y9
!	9c
	F[3
$^4:
+^<4y2
Ztc.
|Ge$S*
B(Qt
pX%'
%z,y
KH_j
J'(Lp
aNNG
<IEx
'~O`
,lA+:
[K<q
	?.OPv0
<KLMQ
iE$PE^
Sn!HYY
3#,*
.C l
FJC\W
Q<Qr)NE
0Uah
"3DUfw`
_CONSOLE
$}=-
YF b
`( 5
EV>N
3o#0
/+>Q
d-<X
>geUl
y2x>Y3
9B,0
AN_f5
"1]{
 P=x
dd?p]
! e(
em\0ITR
IsEc
X")s3!=_
[)9mI
k+5z
h&AJ
C=GT
f,IB
V_0h
.t	$
5lg/
Go6 
(_fk
M31kZ
Phy`
RP,S
A{)6-~f
>2&JN
28I!
Vl=rb
nS3Y2
So;-
_Huz
%u^~M
vbI'
QC(N,Br0H
}wL@
q+kD,
"g*`)
;g6B
1Q&s
X'SE
_zG5
WlAA0
|'2S
z8ztT
J<'D"
?]z#U
~&j8~
,uqR*@Q
Ri-A
Q!-y
A'FQB:
q0}4
,yj\
eGQ"
[8mX
egmL
ewR5
H9P{
^cT>
2!Wd
o9#& 
2nVh
v[Ss
!vb@
0E|p
A\aZB
NX`5
2mB/
MH"Z
>$8]V
<uC6
Mu\&jXe
>	//8
+bGMuh
=`D,'
C1%e
M&Ho
k,EL1
5J]r
|O[3b
$'(58}
-.,y
B0yt6
D8Z_
V hg
WRr6$N
s*#6*#I?r
uo+;T
m|+0BG
-5,=
]As4
G@3vRd@d_
~EHz
ql)b&=
ucx55
CpGy
]m8da
1M}Ie
NBIV*:
=#A|
Scbi
q"}y
x~3h0i
#waS
@fC{
/>8)
,A$B_3
mtF\*
x E%]
}By=
c?8/
>PZ5;.
qXo)2[b
*$k	
AIY0e&9
u<$8
J4)'
&]9(r
=&HS
-Wm;
I/bz7&
g/*A
taz	
,H=B
9^&`n
7#-/
}L(9TF
r$%h
M2))Y
W2@Q
"s_G
/OiR=
ZxY:
~ \w*
"bk_~r
r+:^0
TpYI=KCX7
yaFA
	gjr@
qU*i}t
8ZLF
XX(G
5LkzAUM
C3H9
%.<J
HMnO
T^"l$
V	bB
Ll,"
u@>!
:og`
]7gG
t>y>
3sf<
$gjJ
 pfB
7Szp;w
hWp=
W*0G
R6bQ
eV{VFP
3dHR
j/-Z
*6||
u&Qi
h7ff
R~D&
aD2L3
5I:X
W4&ej
}xw\O
!	r;\(
H	K{x[7,e
!R1O
qjB9
mkzM
yD@BH
W~~^
 L<$
kHe%
T{j2
%inatJ
-WXR
yvm9_2s
(]lD
yle0O
O-Ns
SZ#*y
@.}i
r_|W
wWl'
wuqHL,
{6h"
-$ 5U~^
nhwr
esd8
4*kTW
9sqO
CpR8i3
Uokw
}Z'&~
Jv1L
)f]n
j \G
(#`g
QR"2
e9Su
2H|^
]GAq
jX.>
ze\-}
9A"H
G?_!
@zN1
`@5%cB[!b
{/ef
(!&t
^3W>
ww=k
|=#BY
%OMuQ
Mz9W
7sy7
?_1	0
rFg9
+M]]
VZVw
fBzE
3aJ;
C E;.'
e6Xf
DEIL0
*f^*
1W{pr
>+>/
?{	4
;82rn
[^x]
E$G(
]>duq
NP,l
E|LC
,=o?N
@D	l3
HeO7d%
tC]L
,s9Z
B90k{N)j
ed,N
bLwh
6n&|)
6Kib
10SUl
Yw8a
AIpY
HCj	
"B&we
3;k	'
0!{t
TgFD
S8.?
*d>#<
eo&*
,H8&
I@b6
MW3I)
tU.lF
zV}S
"8~ALx
Mdt>f
wJ%5
v>>|p
	)TI
;,y{
XP-[l
0zF{
W35?
=nNv
bM$'L
	DeP
s#wV"*
F!4*"0#4*
-%uM
b&q\
c	6!	x
9&b9
5f@<
HY=?
 Deq+
 |I:9
9`UT/
6$]R
Eg]n
g`Y^
]!fP"
dnSh~
?\/>
 o5%h
b,2J
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585306226
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
24c527cd-734b-462b-bca9-faecd9e3feeb=1585306226
"3DUfw`
_CONSOLE
R;@t
!{bk"
/e=U
C@Q'
l	N^
+#/,
7w5?<
3xhO
m`IX 
6Y1P
.gPCY
Pt^c
0Qc[
75CZ
3z}1
!?o:
FiWQ
L"ahU
@m-u
c+b,
;WK#
VRC/
iUC{
X$KR`
#7>e
.#Bg
c]?N
.dQt
%'4v&N
[Xk=S
5D$-
`vJL
3Uuz
=''0
j,3	I
'O1o{R
:4:b
cD}zSV
&5ub
KO,1k
IT::
J0I?g
oz!73
2c	b
1k|d		
J=W8C
 K9z!C?
Wsf$<
qb^u
D[)/M
neb6
'rb5
SC`pX
@p UBF
&>@1
CBNL
@3-.
p<{i
X<qT
i<~rU
1	5[
|Q\e
kDUs
Q}RPa
:s7kd;
h|0.
:"PiI
Bm}p~
)*TZ
0g]^
/xLZ
Yj<f2
.-Qi
}I2-
|BQ>
-a#y
[9Hx
)REj
Zr63c
.EEj{Jim
8v;;
T1L/0
6DVLe
}Jvlm
bi?E
yy\dQ
6]e9
-H9;
7Y)c
PO?=8p
HCXu
+xn4
-1$S
*XWs
F5`BPR
[h\uEE
Q@ta5Z
b~IL
IVMI8
<_lT
I..&
hYI%
9 Wb
)75R
AdY+]
. )-
^Y7k
NcUe
fTK]
|;by u
|tAxZ
qP:=
-pR9
3EcL
+v\k8[Ay
jb~<
NS=\f:*
9B7Q
*OkLXcO~
nJjB
<E@t
R9z9@
hKH<
evTl
 g~l
lp_QL
^APbk
.l9%
}`0:
gV)N
)wKeG
>Nx2.
*57^lE
w)Pq
AV=#
}VYf		
.[#g
3U~;
} Z6
h:e	o
%sbdo
(lp~
!L<u
TG_+T
M^joF
Q=:m
-sB3
Eus r_
19'Uo
F/dL
1v>|
i-wTr
O}	&
~	wX2
zETe
4QEb
q'_vu7
5?K!
msR$
.M/2
o6@q
d<)6
ry~{u3
E^u 
+=h3
7~lC
W~\:
ZQNb
l@x	
_!j<
_h?_}
d:A,
J:2|
bTnQ
/~95
N:;DPV~
D1.xb
bd=\
7m?NdV
vTy1E,
8/>XOX
ugN6
CyAj;
*QDb$
Fx5 w
cGr?q
)D|]R lO
/%F0~
H7G\{
9;A +
S6Q_
4k@*
&1Blm
vc"[
lq|u
|=BP
v=|8
Aq|!	35zT	
9~DS%
"\3]
VR{9
N-XN
g$jq
.K~	
="AHq
'aBV
{au.
;{T8=0
27:I
j#0f
Q6"T
#H:A%
nA{J"1M
zq;_H
xz>r
VgdC
).a.	XJm
Tk{!y
n>5>
\#tHh
C{Y[
1plB
vK,p
()76
1'sz
,H%s"
r[pb
<&xmz%h>&
JL,^
?n**
7(nx'f+
"{{Nv
rHn+
>9rx
X|\,;
qv"D
wqzH<
m);Et
$)J_l
.MFz
x:/xM
$i\z5
~ R@
eTn#x
K[|qf
5|qGlO//
j/ =z
+27J
%|^z
88@8
,H	e 
_F8`
vG{J
-)(\R>
sap2a
OgoH
u%'`p
Vp;'
k}bK8
CoGh
'.xi7
L(BSB
pMrs
L1U>
kIAP
-<U"^(=
`-:P
sag@
3XHE
c$Mn
s!Zp
[P+)U3>K
cx$U
0LID
,YH1
\Q#7fMT
?pZG
VgBi4
ew6:
Z4nr
{@:=
c{b<
X0T/
&n<qq
%QK8
|3@B
Y>u9?
KI=S
p8o,
NwstSI
0I&U
<p@tx
,ZCM
}g=q
6%J10!up
IB*.<
hB{OCh`*
,BIY
yT~Q@t
c=X',h
ol1N7
'Mq|i
:VHI^
q@h<
Pzmz
md\V
#U-"
2 l=*
'9*uQ
#XCG3
nICQ
7JIm
$fE+
	VR]
Jh;4
"3DUfw`
_CONSOLE
Cg5|F
1639A
X9X[v
tVY`
he|/
w4S~
!xK(=
&3BA4
<pv+$ T#}0.F
W(w3.
1?jv%{'
,.Xc-#
Yp~O
+qYd
_@l"A
<8FNZ6
eQQ/
dW,+
:3~&E5
or#]
i,`2
B&5<
qcn}
mhVs
2zXz
*ncl
.=O8s
NEJ/
Iqk#
k|^	.}
}Af#
/;2*
fF$g
/m>{
Z@Xil4w
--	-dk	+
	(	<
iyD&
2GG<X
MB.K
j KM
F{s)
FZww
qMb5
+40W
	~Ocl
u|%Z
^r @E
p77/
h_rm
	aN,
z.,#
Qd+[
?J:e
ZeC3`
lmgd
kxV2
9Z[h
xiS8A
ce )
w<f#
1-*9
`+t>	'm
XFUS^
*T,L
8<-3
#M,V2
	8c&
a3D;tx
|r3;>
)`}jtW
Ki	'b
x:2rc
}+(@:UI
#^B7
SF:1
vytg
vwba
Ek(Q
WTUT
rG8>>c
G%,u~
hv34
/(qK`
yn:X
7<m2
'#Ko$
ZsQ9
AZ[w5
'L!oiS
r72N
5[OEU
6_(ey
vE2p-U
qxvm
]<nj&
mY<$^
pz-<
MH:#H]
uK$Z
f}0w
wn2(
{pIC
K|^V
oe.[
*5Xg
|$I\
4m`I
IAWfq
v,*7O
 fg_
7i>u
=ZcO
)zmt
:lmf
[9:^A
.Q[g
~,.E0
Z1 v
vLgd
WJRM+v
p,Ln
YRAe
r,(T
IBw)
?f s
Jh@P
d|@#
mM'0
=YzUQ#
NQ	O
J[wk
+k3_
y-\\
DyA[D
98RXS.
o|nI
3)'(:
=Y;'
VQQ(
7$	I
Psl:
+[H3
']T<
Ao=CX
#EX}
^X't
B`2M
?ye/
W_Sv
|=TZ
qP+P
 E<\
k+$B
PE]!1&
XO-4%
/ScK
-y,2(
C~k$
RJGm
|1Tq
VMgz
!4`i
';|[L
xN, 
qCi0/H
^<SqGf
A7/ `?
E2-Y
TuVA,K
g;{+
Ycg#
'{Z+k
WnR5N
9f.5
,4x ,
<L(b
EnC/'9[
>n[x
f[P}
W!V*
#qS2
CElD
Lp]T*v
n|>u
3`Ig
q'J6m
rmq>
ok>eY
G7{b0
yyZV
YC^&
;zl7eGC0
$T*n
Jm2:
8--_V
,W=R
pIUGn
8HiP
uSC|kl
hN6t;
F*@\O>
G5{F
fg{v
\(NB"
<s}Y1U6?x
7V{'
_1>P
lMrK
(y/(
c]~S
acqx
9wf`
?*mZ
hQ~F
vGCi{
)`N[
]\a{
^g$;
`~.N
B+:U
t|NM
$%oY
s?,L?
#!'H
m=K,
''~i
"Q;y
E:dN
Y@tu
M%]2
E4xa^
PEX]J^/
Y|{=
S:$X
>_Is
t_[lr
o}_8C
*J5cA
,O6H
BJHu{
.<46
LL#e(;B
&\$.
Lii\
&QN4@
THG0
#n+VGDk(
I&tf%X
j5^:
Z=Kp5
J{r.
CWL7
XugJC
#Xtv
Fu5v)
$E)la
O	qj
,q+;
oU'U
6s!%
+:Bp
<=_;n
*ED 
y}n:Wo
AD+3
4Mi6*
o?Q(sy
SS`t
gj8BM}(da
wC{e
0:m%
.NH3v
gkbj
}_z+*
!3Ak
g 3x
XS"W
,Kd9&c
448nY
2w$)
CL,I
$n[+.A}
nFX1
RCCIq
tdkea
f?6`w
VN	tcLjf
uMY'
TO?`
|L*#u
>=Mb
Mf;x
<dx0\
	@Yg3
f}G('6
;D44
Pfz,
K|54Kz
&\mIWL
R((kP
"3DUfw`l
_CONSOLE
}^88
M]4kh
jO*U
pmE;
ovBj
Sb%u
IEv<
cJac
qhSr
(9,4
O~ )@
,<P&C9
,[W>b
!=;y
ExPz
!n]@
	Qn!
?1O6;
*P1	*.
 p][p
O{RF
X#JpS
"gr4
z>],
;1*x
#`Lju
@RP7
 BtO
y+w+|yN
D,rj
>?1g
UFbm
#2^b'
8%9s
\uH1
v'x$+
OI1 
T_R_j
#)>y
!1kV
!$5hOE
yJ"g
PHd_
o<3Di
<FgX
Z+o>+
Z\$s
:8"z!
DUQz4
#[%_
:Fia
:%;e
q'sT'
P`@W
.4GW]
|_[k
fWtg
^Fpx/
IHY(
w1^5
up5>
67P6
"0 p
"|yHd
W7ex
)pm,
TV{s7
,z:*
=q17\
6[Ch0
SQ-p
/=^.
,CIm
Pt`D
v+~Im_
tgtSxl
?wV{
}+.}/`
`Gw`W
&SIf
Xif~e
M)wWJ
nUK8zK
)!Ld
+(Z/
{sYN
mZw^
37b5
>YP\
Ddr;
qKNu8J
LPmIVQ
tkya1:
[O"X
XUV\
.~rE
LgL*
,5(vp
EF1D
29A<
SS{S
->l5
	=k}
?EUg
#3zdHc|i
AY +@
D!}'
$Mzo
R}f{H
>a0l
sib_
!=HK
<rY!
Aqx\KV
M yg
[HxL
*mOn
`	_W
Jzd?
Km/<
RMzW
xC2c
-jx7
s*El
v3FH
)P'Wm
7F	6
!p|$
Cx}0N
:-JG/
3Mbqe
IKw\
	K~]:
L;sy
R2ISRR
lVT9
:(;K4
iXnb
NU9Ma
6%28A
b%w`
AxjC
xu,k9
jubtq
)B{m
ct:-7
(W@b
M7Dz
C{ZdPo
c>hHA
+	7=
JYk8
F4jRf
8pBA0
_Q=8n}
f,k)
8OJv
6C(k
:{@>
|AY`^
zG~F
O=n2
xO^N
0yGW;:
,/i 
2|d&
Y~;b
 yB$l9
u'}V
F$73#X
t3!=
Zo&_
IGnbyM8
<tVE
uIK\
;@)Y4A
Dgb|0
8Hai[6:
wVxppb
xYDW
|ohf5OW
~xGd
25Qxl
`i@F
DxGC
}Q!8
('(xV
}N@{#
q!v[
eZ<"
EUx_
bL<q
EMf*
i!<h:
RUL<`j
+5tu
|"a.
bz3>;
5TIrN
97V4
f,m^w}
[7prt
b8Afvu:
^dV@g
WQ&yRGK,1U+
kvjN
'*&c<
g`Tm
O92d|
%q2u_
oXP\q|
EmW`
?$BAE
w?Qf]%
1 N_
~:Q_LPVj[
&t96
:$*9
P4Bv
3%%6yY
Z7Lo
:OsD
r<e>?
k/5!
 tBq
vTCJhb)
 l5^0
;U#^
A+ZAQ3?X
C(!xBb
#wcu5
ZstV7
E %zx
w54kP
-4G@y
/Is6
$"y{
?8xC
,.r>
pyW`
_Vsz
2o(F
9sT~
S>'1
+t^U
;dEA
E 3i
97&K
%=7~
Z$%C^
zLp2d.
qC}J
Pr]Y
!KX) 
a&dd
p4+SJ
nZpz
B[t9f
S+GG
i=_]
\"1<@
Fo]}
2ML<
3k!LS+
g5NN
L[k/
B*BM
}:/^?
2>xhP`
nO0w
{BM2
D[~-0s
q!FH
r*@hz
EjrW,
yc*Uy6+
#_j[
53^>Q
R80[
B~(~cD
b|'k
w*<0
%Q^{
9RQ/
5fA[
:c_l
-j&6
_g}+E
{28X
-{wm
@8~d
UX3A
3HMby
@#7G
0[L`X-
r5T}
n'Z6l
]wZi
<T7}5
`}/k
['V~
;[AR_
]_j#1x
3e~To
>dru
,h1,
fESN
D$\[P
 &[*D
6nG5
3/;v]
h<P&
"3DUfw`
8H>Q{
_CONSOLE
+?y.
pA\;
I&-h
	11I
W=K=
C_m!t_
kO>)N
P2!`
1;G5b
BB)7
	 2M
Z,6%
QX?6
ZMby
Y%2{
\SbGr
2C:*
^m/DZ
]nf6
\:Rx
zUMC
r:-7
/g0"]
 ?xT
y}f8
	~M^W
|V$E
N.iF
@VQ;
p|@v
>DAsm
9YOh{s
<I`cq
G-838
(BZX[)O
V;@o
~D'4
CXK?Owv
{F={p
>;Y1
_}9+
>!V>
?;HJ
^')8
1:1o
'nnOh
z:	X
}8bA
uJqPb
T|u5
U<!%
%ZYu
.j~,5
V.ZR-
!='6C8t:
Fa3e3
;XeB
Q8n*
2 b/
kTgA
)rB6
 #DN
%.12
_hC_
3@W)1c
S"=f
vUCk
,xK3^q`
yyFU
`VVr
0*cdB[
eF>tP
k-u]n
B]@_
+M-B
NP#k
0uqg
=kDW
B9OQ
KfvI~S
SgxV
d+1V
f#?I
fbEfz &
0oUK
L\Zm
:inp
w$#f
J2ve
&wA:{c
	CFv
J)@n#?
9q>L
Nmle$*b-
7+O<
[v[l8
%'/x
sqCB
%T2V
QI@b/
GmWN
raI?
?C	;
.Lr3F))o
bAUPDi
G&dJ7
gpeB
MQC<
y\2T.,
+12A)
um(D
osrmA
bz^X
c<\a
21]^@
n_YF
8h3_
]w*k
J6?9z
MOtT
B:;V
yy GY
GT|	p
S|'<u
l[7icl
G`3@
b_;S
EW%Q
P |3
LcvA#j
,HcX
KfS1s
0+Xx/9
Um(3N0
!>]m
S#|E
dLy{
8t:lR
O&ytuA
EM5/
&;hI
B%M&
r2q4
-e[O
<(m[J$
~#Xo
8!` 
zMQ#
9Ah5bF1ny
XAFI
fREY
/n<t
M6c;
OZ[p
6|i7
2j*>y
/Jl7 
m;<8~]j
-sz[
<=Z~,d
'&2C
P#Q z
3[d'
L%W:
wL5\fJ
'1ct`
.L#o
oqR{`
\E94
hcU6
XMDl{
6d1n
?\D}
-w?!
0	^'
558j
W-v{
`-/g
j@A1m
\%Oh
l:-a
`7U;
`(lR
z8XAH
lF6p
MI>,>
i]LU$
6BTVE
(t&/
uk}@
2]zDC
<X4z
+eMo~
Mhp=
}]HWZ/g
.)VSr
FB4Z
}wV>
WE-w
.^3vV{
!Lq+
s?w*
a='"
k[I\
m!0H9Y
;N:M
A4N"[,
 4kf
KtYY
(6Rv
iGh%
Iv|k
*HQN&{
t'|<
 tkC
g(-WG
Oiwt
q#	k
o4Ar
*o)-
LNhV
Fz$h
F314
;8Vj
$zgjY
 -[f
I~Em
y5y`
k6cv
:$vj	@wl
QQ`,
Ldo}
.	0zw
t66#
vw[]
@QTY6
<OPh`)#z
<@~h{
[3Hn
[UI"
)L-U
X"x^
{P-,
hj)N8
W-^[%
PG4bR
TGTnU
$a1e2}
[/Q 
/ Vu
-5}"U
d6P6
R2QK
S:X	
*9G#
ivh!
/9=4
}	7=
Xyrk
P3|Wx
Sw5`9;NV
r/,~~
>uWh<
J	aA&
+^G:I
15+[
@CJ iL
G~hZ]
	9qJO
LVy.
Yv~L
DNwt
C%TP<
f":N
	Hi^
x6]n
$$i5
'D/~c
Ry00
p,EIX
DeQ,
	{8]C
e`{|
o.wPBf
J66([
}jwf
qk	Q
ydna
u>T;
<|U3
dAnw
EyQU
*`}F
_[Be
b&gM
n&>i
 ,5;
eu;vB
mBwX
8MQ\
rsTf
%3+k){
$WwUX
4<Ds
"l`s
5!2Z
[agFn
C@f3r
1v;<*
]IFdi
m_Pd
q7(C&
I+/No
+Q;@d
R0<B
U@/.
[Xa@
f{`y
bh(	
yT60
[T`8
u`f3J<
S7%}-
"3DUfw`W
_CONSOLE
f@d`
+k5Nh
I~D{
de<[
&BLr
{Y.|~ot
0kyS5
GZ&0
Fc^Q
c$wM
?lD"
MpQa
Sv^&B
 ^B#
fyOo
lZ]O
em,)
-|Iw
y|qh
J_T!
#VH\	
x@xN
g/Sz
H:v#
!vQx
nP!r
nh!=
Q~k)
sppW
, TF
pm#F
T;;{
zY*T
*mIo
Ma9*
tI@+
`^yx
])2k
Y=MHs
OMy#
Ar_5
h>d~
?~{Z
B`yDS
!Cmu
)e4(wG
,VbM
4*B(l7
=<MW
	{e%
zu~Fo
`Hr\
?.g4
	2DX
	ic_:
H&'JTV
l9"0uv
oHw$
@!iPvkF
qM<1
9[+ K
T>PQ\?K
x{/B
KhL-R
x"Kr
:;Gk
]1r}]
yp+0
\X4<
y?m;[+Na
+<}>"
fh:=r;,y
#Tp.
Wzs7
jxC`~
I#BJ
S.H]:
C29ZL"+k
2uP'L
pFFk\
IQY3
1+f.
@>&t
t qv
bh(A
Q4&]
j0[5f
zf*o<f
WswM
rZ7-
AG+C0
"\`U
L_)}
lua#E
qfxK
APnl
qRd(
Pf6v
!FMk
GJ<`
K;&qX
:SIC>
.#rag
G$\=
+!	wr
@;r$
#7;s^
^kvS
R*o;.
`0{)
FxDW
[qi$
	aw(.
~MKA
^0g,
LvUj
cKb 
N>6ZK
rBJ1t
 em_D>
$ cj
vY6qV
:)':|
15<C
C>4\]
S[a]
0kv]4
NT2hH#
5ygB\
95lEAh
>iQ]
!	pX
?G0o
xN.fU}
{K:pt
0J~!#;
>BPh5}+a
'LLB
jDXm
4Z"E
$f,_
||Y)
75iz
6,WXe
q,i%f<
	`+5
k=bxf
vyNJ3?
3f)~
}gkQ
s:Gq<
a^I~
[j}a
%sG"v
=Gra
Fy8]uSwt`
XS`"6
$`8qV
[8Fb
[&( 
}PK7
&$qX
Mk'&
f=[p
.D&!
eigJ
*<hn%S
)*:'
vuxq
ZE0{,
2BB7
IoZ}-y1
1vaSR
bB:+
VAQ~f{a
D_ufm
:I|?
N2}'
08.}
u7\{B
&;iK
q+K_
 5EJ!
4;ph
I{w&4	I
Wf=-7}
=C7O?
%1y3
$l_W^
a(^1
xZTr
!Y}8'D2
}y%0t
G2Qs
!U%f9
gO&y
	<)C
`6S	
YIa.
|vl(
`:<W
YM	%
7@(f
XhF\
aD6:
5D=$
97?;	
`vxj
0M@./y
e=is
?9<x
&@o0
aSRY
!P;o
RJb[8p
B~v.
215L,
&H8V
+n o
sf&8
`%v(
i,)	
rnWt
\nuq
rs@Ma
!e~v
lb=s
ciQ"
+P.$Z
$MklI
r6Z.
 ML!fY
@!\<
H,h2d
S(:nMt1
WIG@
89~J
0r+;
v#p*
?,Ei_X
BrW\@
WZs/V)
E-mL#&
8]Fr
E`gp
%heG_
vk7%]1
Q8k%uU
d"%P
)|l#S
j8snW
-MZg
^7 f
$x6@
#YA9""
8n6K>
{B4t
ghiU
V2DC
Y_O7
X0wfBI
M>[#0
Kx{v
#&QwH
~y0z
'P<<x
87,OJa}&
e+06
G% n
=j%-
3dN.2
1rC#Ln
_`rh|pS
;MnD'
!Xk\
9p9s
l'Oa
m`E`
i/M|^
}oWT
NWcX
1{n>
JJ4s
TO2,TP
Jv.4
s_3A(
zdTq
Mc5I
7Z^n
MP81lY'
k<%Z^
xB]T
ZZT3
A#(+
4cve=@"
KWL1z
X~HyQ
I}u1
'.B^
@$MKG{;LW
g0iz
[BM>m
%"uuu)'
j=l}
9747
lVI5
)&`lY
U?(*>
4 WJ4.
9@>'
.6>9
]3TB
w(D[
j5J*
a^%/
jQI*R
W{nK
/-JF>
93Ie
FcDi$
2uoO{
peyL>
U|y{Z
"b	BSL
s+U6
6,	/
e7emF__
D<Yi
:|7;-
?{op
~<7f&
	Ni9|V
$*W&:
r=MW
["D+DB(
f/&I
@P(PA?
U{5U
L&Q;~
=jJ[
|7`Y{
N4C}
5"	{W
ch2Y
SuBn&8
b<+t
bs-@
&KTl2
E&e#
f=8y
YcFG
]0CC;
M"t+
Z/f%/
sonS0F
hP6eF\6
/OnM
oJQT
>i(|t
>F@=
+I!w
0>R"Y
> Il
eClK
45|Ui
E]XB
K4Fy
}us`1
q8mg
|'58
|X(T
`o 9
syAr
E"=|
oH($
Yy*	U
OYC4
KY]{
e*%>
$96VZ
VV6>
xO_D
:D\0
E*z:
wn6"
c4{$
*PE4
nFyV
cy!/
L;$!
K(??i?&W
O@iM{
@Cx(~
%r^!
]DIH
\'$F-
Mv1p
a1Y(=G
\}`:\
</N0<L[
I9aX
xNw_Z
N$uA
* b2	
%;u*
pS6V6
r#@M
xFD5
AT	H
2wx@
W@t:
]TWR1
*Ssy
?f4H
-jG%j
lK,R
sZ"6
jtxI
O!pH
dS[>
>4v*w
Ae]y
p?)4e
,C="
iUW6p?8b
O6R$
'-I.%
kZwx+1o\
<<|aB
blAp
J0<^1~
+24S
2.H	N;
$a;Q
23._V
>oNpIN<P
wJ&"
"h4Y
.HJF:Z
~#A}
l65K
DV=~
[< A`7o
l}\<Ut
%/=;?
	E<2
mA`v
bt5zO
lH<AA
O;_]'<oy^
=*|/Y
d>>YQ
SHrF
Xp>w].
J"3*
+$	 ~:
?gqKI
L;/aN
p=tv
RYQY
))	l
N74N\
XE$:z
PTV:
u@e<
 M[/G(
&T1"HF
Xl;g`
^JC)"
n7\M
KVKK
^|x=2Ag
vUy^
rz59
JWuwM
G7tZ
S}:H
bP[-
myGP
+K2Z
{i0u#A
xp\C
\}vH.
YW~j
BooX
~I5R
\64k
b+4)Ah%
;>!0k
6h{U
Fr8u
LtG4
k^~;
zF?l
ztG6
M"?l
`G"4
%qg;
7-{/OX
U{t2,
CJ1|
G\27l
XL}y
Vpyv5
LCb;
UooW
oa8pn"
I<;^
u6x	u
rz\%
$/sb
?p[Q
n|&Twi
J0JO
&E'<
GEN>
 `* h
kdsG
XZ]~01
.1jF
+qx)2
X*'b
w5Ugw_
xI_1
~/7]
=d_4
Y%Vw
~[y86
]|R*
'98XF
J7,d6
#+(N
xV-3
{I!9
rDzX/l
0t#A$[b
3%D0
3WZT
	gb~
aFN/
y$NIsz
L4tD}G\
KqGP
]^u!	!
n:%A
AP>W3oe
<P(5
2<p)
&-gZ
QTqKW
xt'r/
N=2`d|3
z)jIA
Mk9z
@8h	
%j{b
-_-F
zT&7
g){}
"3DUfw`
_CONSOLE
WS4H
Ch:a
Q3VJ
1sDp
%XYvb
/?F#X]
`ycb
'zqU
V7|ek
YqsL
*=.+
5>v.
<p%t
;K="]b*jd%9@
' W$#L
70+-i
M%~s5a*N
Jw%_
:b@"}
,APT1f
eJ|3G
}}wi0^
=t.kcoQ
/eD'+
h-PO*9(G
Fw>c
1@ s
23bU
 [cM)
&u#c%,k$
kmBS
hmdZ
	n0<
LK[X
Bu((
0%N@
N=OV!
4"'N
CN)P;
jUSf
Sx+]
~vI)
6^+Y
)(wq
9Uj73
il`3
T{ZK
i8ZL
dXGU
MAU.-
,A%v2
%&Fd
(AwN
q56$
.vG/;
-#?1K
sG>Xm:
l	$o
FoWV
eGoF
HNH+
jA5l
6`cU
wW8k
*tA^
RHc5h
TD?K
@z9:v
XcMQ$
/cY`8
lzaa
|iQ?
@Pw@
H'"t5
SD5S
&7To
Tuxb`FA
?:/NFo
[4;Y
|FO,
=S>a
E<*Q
||LW
#)7L7&
RN7bl
eDG{
C	Zk
?#T#>&
L.Fd
fG=4
xexa
$$k_
6oW]
chsM}
MyRB
mpN>&X
Uer|>T
p.y2
4{n,
/lp_
O(SS
E_a)S
#9<P
!G*3
,=l<
em.2
y5in%
)5Hor
#J{[
O(yS
URlL
UNou
n|oU;
*(4%
`Rol9_
ip{\
ajX^
>+:{B1^XA
ycQ-tW
:/G@
?QmN
"WvY
#xUa
S:fG
DErU
/\qpO
o]K}
c*	S
-X.F=?
kwmH
kvj&
6ZGs
Uq}l
"]?_
_Ib>p
$B43
a${s
"/dZm
e]Fo;
6q0h
FhU=
^>A\
ZN$7
<N`)
RFx]t
\gml(
zvAa
pQqb
)?mn
SBWa
44nFD
n_1_
gj>Y,w
H*Zg
an7t^0
}m7t
tC/A
(x"A
IW[ .3
	b6u%N
#"VK
J~G6	 
Q9%b
tr	^'
>]cm
/r5n6
m*E_
BA4,
,Z):F9
Q(4gD
db0U
\sCs
1>Bjy
0Uub^
~341
5	jd
ud<4 
%]F#
E0|5ib
}`l0
EAcKu
uKCzQ
{VzI
,Fj?
5L|V
?yBc
Y%]=
`fp9
8<9OD
6=_{
i;4w
6J}A+nD
;I/J.[
cC!G
Uw lt
fb"\?
t2x/
|,"eW
8hM+
rMuU
B2E9+(
6Kff
 T0+
#9pj/
m5n:
r3km
2/SJ
ILeQr
N3|@
ePIF
jZH@e
ek6C*
6"fT
3374Hj
;	E{
v:hn
"w0f
B=+R4&A
+;)x
%pDZ$
ef=`
SzS}
-MQY
Cr>t|;1
ORn,G_
8JEV
7=Wi@6{[4
{||u
^zNm
>y?]
2@^9
3u7}
siq|
TqNT-
JA9z
o`O$
[r	_
\M>'
2jq 
s42,
B>,+7
;ossG9
'P:u8
pI#]
y(`j
 2s=
PZ^N
3J"k
q0`J
iLYw
)3Mq
j1j%
?a#3xn
$LH^G
FU>f}
Zz;{
:Fnf
x*&W{
SfG~
d,j9
:6%m
IxoTN
;DQ0
D7~3^g
zs)O
ww !
)C!I7
o <a
KZ<B
wxpfJ^
08LJ"
>vHh
)QOn
20zS
yRg[M
IM\I
2d_C
yD7]u
}F"e
jf"2
g[s-"\
3V?v8
{i~Z
$<$Be
`vI5'
R^xz&
Qoai
UCp(V;
J8r6
`X/%
?s{,S
Kl-xc
@7@io
oIap 
hti/
xHNS
S6#7
)R{f@
(riy
0w4$
jk+{
KJSf
s(bk
K@	f
.5SB
3r"_
EB@H
\wdL
7w-T
R>"A
	;@x
}#xY
=C&/l,I
@${e
EVGRS
!J\B
\*2N
7+6Nik6
"3DUfw`
_CONSOLE
s`M^V
A)\9
{,I^
ERdWg
eUS<E(
Y|LJ
niNI
c%S5
zpaCe
:=z$
#Lme
KLwAa
Fz/E
LuF$
6')fFm
n2E7
D	@.
A\v>H
rev 
%Zq4M
W)]9
A5w&$r
hVs)
fkKT
G%[a
QH=0
LuKE
.9O5
ne(a
e&7%
1x%Bs
(qua
3	9_?
89l0K8n
c;rU
^DN2
	)Zj
2eO@
P0q)[&U
)K6/
90V]
\WpU
^;[ 
<]U	-
 /L'
5Z#e
/7T 
[|)[
~$m^g
`?<N
x>R_
{m3%!	0
!2{;	Y
++E,EZC
X,-~
 S]~
HIf68
F&j+
`}=8
lwrK
QbM^
Df$l
mf.R
`ZVR|Y
JTmXs
59`uW
<`ygS
z`'	
?VNK
.4e#o
'&/:
L]rB	Wl<m
E9}]y2
{Ul+
N',%
RkO`
IY10E
-GZ]
\Mdk
Se`P
~D%91
LP7g
_?q0j
i+=H
_,x,;6
1RLz>
Er(7!
4P Q
'uqv
T<Ur!
)6^Mi
,J!vr
/JB!
o%f]
+l]f^
l"7L
+znM
*xVrc
E#oq
PLt'
LKe43
;D`1{
+fav
h,Z9p
`JA	X
>Jy$
rvX.\
Mz{2
Jb&Ut1
MDNY
hirB'+
i$ \
[e-:
pSAH	
nG`%
Kyb[
(dbA68
yE'v
@[=,
-a`5
GM}*
3`Nk
lP(9
Q>)[*
Mia"
F[3!e
j(Yh
l>Yc6
OBC<
J>X!
tC{f
_x;r
(<uR;
0,Mewjb
OUAZ
21>:o>
j3,>r
@rgm6U0
@4HQ
;%Yx
?iJR
nDd9
	?$a
nSf!@@
WhfG
vxR}O
u|Mo
A"9>
:?^M;E
=0([
W;"jQj
hbKb
ls>Q
wLg_
Q(J8
[x-$
RBiza
fk[^G
^DB::~n
TX9s
{R@&
].B%
g(2\
@@^.Gr
;J\M
$#3e
PYYa
Lt4h:
aD9xZb
r3'Z
{fz(
`S8q
ex@i
"	V`
Y3Dr
R8<.
pIGm
U8$+
c>B!
vD)f
7xkm
-hk?
Gs|i
a{D9
7q;1
OwO'H
I/b"
 ]?.
v"p5,,m
bDnk
Z6zp
qD*7
^nF0o
Yx}Xt
\~7_
vtJ:
I?vE
65M,1/Mfz,
O_EQ
!YdO
/qhy_2
od'K
kP?6
5"XT
7o(h<
x7^u%
z&bxlf
:M)DOh
{IsG
]3H6Ham
j,g-K
DU@a
&byd	
@2]E"n /mHK
5z	,A
'%[P
3JHOH
k"vd
Sd{E?
gR1e
93sB
/-%RU~H_
s|QP9e
k^{*_
Dqy;
[=Y	>
uc&{L#
NZD.
f X6
db72
pK9+
1~K2
E+](
3PPg
r:!;<)
4s[l
x`Jt%
4.$G
E\+i
Zg$:
__AA
 6,)
"g]h
)cv'e.
G6k&
niP%G
CZ/m
y;Gs
F01D
iG9/
{q.q
bV9!I
<RsOfW2
nf15
?z"O
%V7U
ovLM
#q6k
B,O[
iXnn
&CuP/
	#yHl
K5.\T
nFc~
tcn~B
4,.Y
Yg$Ve
h3U4
beoM#
,P]L
?$}2
$ =E
Rn0Frw
3) ;#
EQAT
'i`s
"3DUfw`
_CONSOLE
ClTL
~wsV&
JsWw6o":
!(NI?
(nw8
H]%=R])
x@CE
 K1t
=6cK|L4f
A^R{
	A06aDy
m_`5
5'a<	
^9-l
LOKq
o"(kV
FK-m
v'S!d
+Dq8
bPK0
1QPdO(
N*fy
imGS
.=B-
:N^U
7=zL
!lW	
HF]1
}o3w7
+z`k
?af*K
b1>l
>+2	
wB?o
"*&L
VAes
G?\'
-]4"
]#:G
;r35E{
K-sP=
l*WY
i^ue1
XefsW
 x6}
|,Nh
rW)X#
OtDI
RJ>E
pv_*
\x<'
IO0U
vm<-
ZTz}`
>_Vu
{9/"h
`p9(M
4m|H
ow, ,
3zWd
$;;)
K5?q
IW>I
x!>{J
jXP>^2
Bui`
PD2}I
/(%^
QlN	
p&8n
\mGzYYe{J
d&Aa
CSp/
tLjsQvS
WF(8;
6qkv
)gA\
(VBi
5#6_
gU Ep
y{rzt
2KTy
%\ !k
{iL	
]wc~~
 |qc
{[Hms
N%i'
L)&A
jr3/
/(dF'
P	IOx}
F4|+
b`v	
@Bo!IG}g
'Z`]8N
/so-[6
%&r)
<6+MM
X[J}
9lAl
b-\p
D!x/
V(Tu
O)Tl
8h#t
zhRC<
 +SHykt
v^[g
)?k=mO
_4yW
-%<T$[
k@t8
f	CR(y
9yaZ
?N7-
cOd:
J}	S
e)wH
'e	;
g?-k'
X8un>@
3*lv|
%u`I
I$$=P
/gdl
:Ul<
h{;`
}56~)
dDJI
fy.]j9
p8H-W
D]|PFl
uB@9
K5IJ
2#O4
fj"t
|De^
fKk?"
a?.&
r*#r4
m,_+
{"4&-
s;|b
~61{'
);bwKn7
i,q]&
ak`1
O83x
%5w%
*EYnU`w
ID~ 
uE<m
UuB=
e.R#cY4
uM]K
GX]5R&
n%g;
W[$u
~h'Sw l|`
XTd'
<OU T<]/|
hX0!
b0#X
f?^6
'WS>
801bF
Q}i	
?xU1=
$(6>
gF*w
gJh4H
JnM:
B45(6yL
hYa/
O7NN
/a>>N[-
,v|O
M6u {
iss$
LPU&4=
aV#f7
\>uq)
KC}I
qUmN
nu!!
Z"Z7
y&q*
7d,;"
1&s]
CYA1,
Av|n#Q^	
EYD<V
EI1W
.:n'
	Jaq
!H3eQ
zPHHa
IB%jc
D^03
$]{`
xsAk
<fM4^
#mt?]
M K8g
Qio`
'tE^
K?`m2o`
vDVV"
6fI)~
>lNT'
g/Gj
NTs(_	
u_^G
hPE&O
5sjZLE
Rs\e-|
vo`H
Mt[-
a/<(
s7f|$ 18V
}:i.
xW.[n
joWo%
(iw'
9ueC
Ap.:
zIX23r
^xm4
prq<,s/
mYD{p;
MX([
aCNWJ0sq
)A	!(9
lU[F
9#D"
G!VtAMI
yXi]
S?hv
<EQJ
WIy^n
v#63
- JH
(c<a92
luXb4?
!cv!
i5|E
m%^;
K{=<A
W+,0
%rCm"o
Jz{n
vG8]}
BrGR
[:*M
$z7D
z{L:
8["7
's~c
(!c|
CoP,I
FPh>
')~/'3
|QHO>;
Tt1z
^O,Z
#VR2	
@#Jt
Z_=5
	9`'
~HLi:
:@=-b
`%7"
_]"x
ELT=
uy"Um
jDX:	
46y\Y
z UgF
7J}d5
y{|5
sMIL
!z.u
EK}C6
B~t!
7uD$
+QO<Hg
2yl>e)Mp
[aZ%
~P>;
gFlvOd
bNT|)
T)"q
fl5-
X04Z
?o7]
Ye%4
`yH+
^i%z
-Vb/
*915
4|B}
`..=
|)\a
p"I'
'(Q/
d|WA7
<1:x
{(:-
@jrC
m<Sj
,N=T
S\nL
@:~P^
bCnV
d{T 
PwBt
i_#M
	o$t
cA',y
3 g(
;- l
6gjW
[8vl3
bif}
FHU`
D-RJ
`|KzX
J.3-Z
YtL7/
Z/6nfI-
cD~<WA
+[L*
S1(.
e{!4g\
HnnxDh
g\Z-
f67ie
X[^PsG
.uQ/U
 h3#
'&d^
Zod{
LZ'my|"
)~"L`
4dEo
HQe5M
{=iU
:rm(p*;
ia=B7#
(kjG
}LGV
W2QXm
Ts*s
]gMR
I#jz
Ix0Y]
|&dr
4f:O'
)Who
X!XX
A6bt
3A/_
`dpa^
7r:q
6R-1
.4qi
GxNB
}\JR2c
T#:g
'=?o
9}t/
x-!	
BukT
:Mt!MA
;ko94
d@nk
HWor
5uP7
|lPN
+vrP
D}2+
tJ_m~H
}Cmm
-1Cf
m+akx+V~J
 2?;
<G84
C~RK
PUH1f
A1h;
\rf"TY+{
x,4Y
E?{*
m+;r
v3A#
wJC//>
}E}k
(pM3
 =O%U
$(0P
A_D^8\
D|&v
{6muA%
0B*R
L>XK
!tm>2
ofv0
P|<l
2l+#
L(ef!
b7/^<
Q4k=u2
a](k
4kA$
Y.{yp
)|^:
>H(p
3I6=
z#&X
gVLt
Au(Y
{6%Y
KZ*X}w
TiXB*0
C-'?
"sdd5
6]{D
:r.;@
e:x~
V!yX
^hw)fe	
`f f
%L8 
{SQU
 Tr]4
_]]h
V:)/
_T;W`
z;>e
%>5ngb
ci*Su
NfFE
5\g.G
5%N:
6~UB]
#FA&v
Wpd;
0gDb}0,
[1~PN
J4k~R
9j%Wc#w
5.t`
~l/~
M<^bv
z!FbeK
 Y9?
`QYsq|
4QR_
HV9n
<Zh>
?7qh
/-Sit6)
 cs[@
jKD$
v`,b
B0Eo
Iwrr
-Xb*
LntX[
w	kZ
KjIh
@<?w
kK/T/u
^2l&
D2bd$
=-&Ln/
r65^
e8rl
`^{4
<6YMI
4[B,
}Y&c3
P+E0
(xC:
+>]%
HF?_Z
?J&l3
bb 6
NoaA
Q]00
S3$c1
!F{/
]uI/
:Z0s]
dL$~
l5zZ
Xl"2]3
:*=W`
&VU!
Rei`
hCOq0V
fCkfi
-LK;
?=[>\
nj6m
kM+E9a`
SUE9kJ
;*l}{\|9Z\a
f*tB
8UAL
m~dokv
!5f(jE
[Wm*^
6*-:
Eh<{
^^-x
DN68
Od%G
wi28
nqV`
53j]
G/'C
h1Cr
<s@k
CNk:m$
od-o
\?pZ
z]"&wS
F8v6Cp
h Nm
]Jh("[
0vtL
MX];
^	-F;Yq
0(SF
W'wAy0
BqL)
eN%01
bzuH
}hTD
X-@V?
L~ir<
X3$~
e]6+5J
YQ^Y
Z\|b
v"[5
A]D9{
Eqd{x
4S&V
DX'w
=_36
cQ1X71
R[;SYH
X`wC
i__xR60<2
@#~}
h;t$
4\vj
K^Ywf
t+F@
NTkU
\<Aa
 \$ 
d@<F
Lsx\'p
	%xPu
c uj
E@k:
lJwY
+Z$n
nxI	qet
'R?D
G"U!R
lgPP
+_4]
ta(a
'ofC
uu#9H
!{V_
]nFu
-W48<
XYDS)
_W|b
JVi3
s	JR
1cj,
"Ga"
6"8U
HZW	d
#d$R]U_
0d:V
jeNf
lfr=40
!bsA
&Xei
oh}(
 ;c4p
1J;!1
*~w+
O!&<~
SxU>
Z`DJ
^Q"tg
nzRs
Lq4_
)rFP
;j]3
>y=O
I{R/F_
1?toFu!V
TOnrV
l3&5
c}jZl
wZts
GRM<
-Ed0
<KO*/
 D_hB
wEFnO
7h>P
-dr9
t}Z8
wX@y
Y[-/6E
vky*C#Y	
sblI^
)V/k
B)MzyRI
c6T]
l6L6
UEqcmY
-/'\
T[CJ2
KOjw
*X`M
*/P~
YUn&
nCnH
n9Z7
"NgH73|
Az0|
Y>b6
c'vrH
-T]v
h!$V
;d8#lB
xd*+
Olay
I=CNw?z
\q/v
HNo6F.V
-GMI
-+5g
xZ,+
&|6sF
BM$+
KsWV
$By]h
6>f_
$(Zm
9r.o
iM} 
W$dQ
&LlG
@=(oS
Yr}C
gp}h
"Q(^
LqZg
shGSku
~h|k
D	UK
F.^5
TmcD
TkSU
txH^
WM_n
Wt wO
IFIm
C:H!
=\XB}
*n=F
AjzdV
QG,P
uMBB
mn:p
'Z~Y
H} 	
;P]#S
A~4.
='rf
#Mpl"
+:'A%
=3Q{5iX'
^(Z*
oRWN
298G
U-8"
1p7"T
@A	r
iQFG
W	:X
$}5r
\waT
,)Yy
1`ysu
3EHw
$9:E
@5%aK)
H`"$
 vl@X~
A#[ 
<m.Zo
2x!HP
!UC1#@(
'	7KCTRt
,357Z
8[.(
+yt.e
XYCv7
[q,J
N%uD
"3DUfw`~
_CONSOLE
CSI<
.2,$}
@\h@<`A
'<vVU
	k6Z
M[[R
VBbv
7leFF9
[a'%
)4IjEp
@(2uo
^K_q
B_3 
j$B[
"w9N
-z	_?
x+y!
0JdeY
M/6_
!Zo<k
7q'>G
D0w K
o^~7
-")+
Q@;g
eJmIt-
C3~uy
6/22
/}g">
gw- 
u}";I&
o$7j
nK!G:.
F2P/
%Uyt	`
Pb\8
VrGTCd
	c:.
=fpC
_]j#
v=4N
~G8E`fV
BhGV
ulj+
yY^c
VC48
P1gQ
V.S2.
LPKc6
|	pFx
f<$,
6:^s
}vua
cps/
$w7g
dZ %
2Qqbf
7]!f
dt]{
7vf.2s
oqsL
J-:r
g6,e
dn5k1
K_,{
#G'4
9<yg
OOudM
JGqL
[-@sC
IC?<
qnM9
]Tvp
&*,8s
,:rv
C)sA"*
Cia`
9*IpE
i},9
*fHP
a%&-
RQ*q
@	xKNoy 2
PtUa@
X*Qj
$g XN
B0R(
:u"W
hsLP&
*K+H
ld:1J
,/+"
:K$k
KfFK
&brWhP
(C<*
!n,.
M=_~
5J2%
~II>
Gj5r4
}Vg4
x'1j
ROGe!11
!	5h
=&~FK
T. ^;+
'v.t
~Pos7
]"T:
+xgRg"
`ekr=N
\ ~K
+`K.
/S&F
PKK1$
bRE_
(";;
<\AB
<yu6JP
Oc	/
zBj+2
R">A
BAeA
0^cE8VA
KOAh
}x+B
QXzi+
Z4%]
qWYVD
IwZB
2Cr>Bo
zz=:BKE
:\'S1VJ
$B>w
sG7y
-FjM
e.lH
TVW(
(ohr
t<]m
*t>JV
+s+f
|%6Beg
rnWN
k<9}8U
qyBfX
yfZu
%g\{
_kp}
i	D\
0R&C
11"fk
v4vO
?m{f
XXrP[
NM-~
ejX}
=i!X
N_w`
4_oz
7qkH|f
QB;4|D
%8m@
"EyV
tn_OYX'
a5#"
	W4h
e=Oj>
c;"$+-S
G>Ur~
|ZW+YC
])A7
U!fz
Z,T.
Cv;=1
XqV=
?saa
e2'j 
<iRV
Ppkz
dw+P
~VlE&<
g)'x^
j<q@'
qiy8
c|3-
(3mH-
.%4W
<P=MS
|kT 
Dq9M'
 2Z,0
Qn,Cx
$*o[8
WP*@	
(^SQ
,Ul0U
t83i
 Mkb>
Fg'8!}
{Qg/Z"d
2_P0\
Vbo/2/1
8k}`
5sk-
#Ex]
A;}*
od@WT|
D65V
;$NjA
( !v
NzevH
R_DQ
4$zCR{
GHZU?
_<pe
	yp]&
D~ 6i
yPmP
?dsYX
~&H;
wD_ ~
]|#^
)1F[
+k35
aB&A
y:%?
@Zo2*?Ay
QwyS
pCkG(
K!1A	
gk?k
nS97
W8Kd
%9/%
cDP,
3p@WR
Ph0N
T vT
x.D6
JVX?A>
s0+nn?6
me1jV
a>7!
R&'q
Rdaj~
.EsnL
j8m>
noWx
S`-%}
MRo#
@f\RQ
49 C/^
oNe,X
j#&?
Ivpe
wYGw
309&.H
m-+^T
X5gE
',M+
4JR:
=@Im
UEk|
s[|}
zc^Z]Dg
P<N&.s
$+0r
@G8{
"&n,e
	nQ&
Wilp
QJJ>(
Bglq
wF5I"`oy
	qHl
pP&Y
)oXo
.*gt
">:G
V!u4
aIU$
(rL/NO`
|2mJP:5
	Du[
S>^~
-q%5/
NY%7_
g~qS
c]zV
PYTW
eH0r
RVEX
)Lu?
,/IS
[h`L
/sz8X
uU@`
S<aD
Z7N@
D}X-
sEO+
*O8>
*M,.l
[le[:&i
P]!S
%Dfw'S
JH.?W
@UZF
$<Y9x
lN7Z
i<	5
K9xr
e Zd.
F6i.$v
Z&B\
hw$*
+`aIdQ
bH{	
daS4{
$k B
"3DUfw`&S
_CONSOLE
MeBCM
 I\E
wTBS
x;j[CJT*
I,KB$9
l}N]
IS2j
,[E!A
0075D,
NPF'
562+<
!;g)
=7f~*
6e&i
UC;.
nZNG
Lx7T
gS "
=-2,
:N&>
*zQyzf*q
nw.K
I~|#
[r	a'
7q=Ge
oseu
SC`{\ox^mL
doN]'
K\]`
3*n+
qpd<
Ir.g
6V)2
14ss:
~;/~
R+.ok
3.jC
	:-27
U<(#"
+X+-
^cX	
g0*3D
~OPgY:
iUHD@
e9o{
(V>\
l;a*
3(=tO
0si	tg
[=	Z
\$H,
%;6T
~c8?&
E\YF
_SkX
x/grv#
N\<K
,NapI
9YnC
(!F4|
Ur\a
CBb8
~Fb3@
K6:Y
^+Tf
q,~nt=&
x;T=
"DvQ+
HV2o
$za9
FUSb
\RKZ
/-3L
;;0k
zTNC
Kv|MP
zt=x
`vz,
p]4B
.KSM
YI\0
chpE
DvBj
Rm<}D
	<<%n
`bB 
)HIU {~>
;[?j
Pr]it
1P9PZ
WN.0
[/S8
vc4j
>.S|dT.bD
<H"ye
>w'KJF
cjGW
Cj:v
RP&r
nBh	Y
66Iv
YX k
 3.f9DU
nqjI
M[el
$X47`|/f
"-:V
tO:oA
?$Ws
1- x
G*v1?
n_kkd
'ojZ
(G1WM>
^V$a
:}+.Qn
+<`W
/3m#
4w.G
Ke(J
wVg&
lLsd{p
u"bd
DE9K
TFB<
B	|3	
#5lI
T&bz
B&.u
;8pg
hy[1
i'@J
!jVO/g
0|D,Y
4!L+
0s_0
%D_/u
AAq"P
k+.+
?<JT
*6jmz
r6k/
6cxc
K xLk
#A+@
z[,w
582y
Vu9m
		p3(]T
k|-|
[rE0
#{7[
V)AlQ
X'VT
Ad%	mc
3,sA
b6Zq
TZz`
Eam*F
t5xcz
JF'r
^Xf%
)$rU
N(W	
JVN0
@Q`x
w"q_q
$*:W
V2`*X']
/7$9l
vg8jEM1
)1!h
PU[#
uLS6o
I7qR
4wa8&
\:*L8U
1FA%
jO{`
Ol:*
HM@w
C&bo,j
@*]P
Z$V46
>|/}
]@Wb{}
>1q/|J d
{?<s
#T(m
aPP-K"m|_
-(+%
2	x37Q~
S;qC
	O0>
v~.8
PiVN
"o3nMM
S>^i
4L3*
+87#fx
]\%!
`Di[
ka /
S&MZ
 .D$
Kx1Z=
} /T
8.lc
ao8g
=lN?9
W?c-
c&h<
4`;F
:XY#}
JR"?
nzC/
" I%
T)zQ
(5DV%=
!	x~p 
Ir:x
|H#e
`fXy
("oJ
O%2t/|
}a]!
_aJYk>
%]!`
V}d7
#PiZ/{
mZJ<
fj<N>
`*_@t
e#6G
}$73N
g[GA
:sP,
I+q-ON
niLMUz
	Yi.
#46)
HRBu
q"{)
	X%M
!O6t
R5l	2
0:MD
I	t/
F dj
r32n|8
C/3T
Z0J@
|43:
fcnj
:oH)*
+;$~
^C3m
1@m=Q
QMAA
R,Gx?
Ol*;
	~<_
7!q!i
LumB
C2Z,<?`
tfD]FB
FTu75
OjGh
,DAG
RiX>
48~D
1LSa
#O>rLa
mG,\
QoS@
u,bw
sIvz
 ef}L
E"ii
jjnrQ\
f#ug
l<:P
HuUI
=}gf
d)i2
OF f
:gra&?AK
oE, 
FBv]
9yXG.H
`j>@h
d-Tv
Hm9W
##z;4!
?:~&i
]xF,
6g)OK.
ZGOI
8x5jnX
I~{b~q
kpe@
;1W5
5Cihr
"3DUfw`
_CONSOLE
$#ZE
tOB,k
Xb~*
Z4+H#
<b2T
$5i85\
HKMxs
C_^K 
O(zxY
rET)b[
sT::
)'E2&
*'j_5
	<?m
soQM
9Dl=
&'S/
6 ,O
2r&,
[R*!
y#HR
X0 G
Az{B
(+%v
OJ":
E!DIe
85:6
r]{P
.7qx
Y;q&
-&>9
?[Ig
.8zl
A{a:
XUY7
L\>,
{hg7
RTq\Sw
YOk:A
1!d7
4AT*
d_;hk
g738x
b'HL
{R68]|s
OB;N
A$GO9y
g?=Er`
Ux,TH
!]L'?
A)0G
;IlZ0
DtI)
c<1{
d	Fg
KDpl
LMXT~c
T"ur>
N"6n
~*WM
&=5.
my(z
O	~%
pK8"2=
H+\h
6H @}
|4G2g
*t&5
g46@
gb<.J|
'}@s_
yP,$
s5U#-
7?f=
c'+r
MVXRp
S8 2:G(
	iq9
M[\.|V
X:q=
CXWvs
kO-nN
hqc+
p*:N
l2R'p
OJh7k
9/OzfC
2MrJ
"|;dc
kjHmW
/K}C
Cd.-
 uIPe
M;%&
=^t'
IDcA
]j[M
j4v=
*UpQ\
]3!D}#
j	CW
,6s,
7|m9	
]MRmvv
G)ePN"
Qi.T
Nj@Mj
\K":Y*
PVh2%R+
{0%>
I)<!JJI#
)74X
H!+\U`
K51[V#
0777
\d59^8
@K:-
5u_n
#[WX
Xhm\
x{C_
8[<X
rESBS*Q
=Y;l
| B+
qA;-
2T]$
)zQd
`G:-
1e*A
[<8b
n6 Fv
%b:=
nuak
-}}Y
8=|2
bB4;
rNuj
XsD8}
%r'r&/
sV`B)
}o6d
JfnKJ
!]fYg
ir-<<
n,.z3
"~RT
L}u3\
JyoN
5[Pkg
.]}LXlo]
Xy?Al
/U`{
MLjDG
Fi,	
46v#r
{PLA;
j6y})6
&d4NJo
$!1W
r; AHJ
OIm&
bOWb
?*%\
'1)x
&<]}
9_PGW#{P
E4X.
8}i$
'Uu{
]~6_
8{1L
v<Us
b/a9)
1c:Y
}#q&
@{\e;
Y5IgK
wTZ3
g	IC
:Fm]S
\fPr
,bN(
-JZK
B;P3
dU0@
b$T0
mA+`(UR
AVY@D
A#W"
.m"J}
]gm(u
='/^Mmj
9j0S
H-1,
e>U!
tW>|.
E8y>Z
u G5
%e8Fx
ddAK
b @OvKw
Y`/9w+>@xu
onc8
b"Rl
_CdY0"
:=}f
78Z>
i^M7
i:Ayag
tM3'C
SZtR*
wi[N
2v[Y
?6xKb
hH	`
+*J-
 D*7
Vig!my
B~ 2
\vxj
8fW+
ClQoI
:	gyO
SKds
sv^Y
lHgW
$Y.)
q]9f
m}I+I
jh`4
Ml&E
WnVj
43"<\:
%KXM	
fH}+
>1	<5
$DEC
g]Ry
	p(%
z}tk
_h4"x
(Z|6TX
zT_hGw
YO1EH[
BLY[~
tn\W
siYH
XlZaj
(wb;
>lo.w:
_G'r
^ 1 
/T8M
>#)u
 c3l
2p;:
_#&f
wd#6
31[d_
=El_f':
Ks$ K
|oAl&
o'fodX
[~jg
ww-u
gt|m@k
?1SwV#
~OFd
Rrm?l
b:g{
E.{`
69_M
?cc6
;{eq
g`qa
MZ	=
<J3p3-
/p5f<
1WSG
!ub{
J^f%
y+#	1
#d'B
Z|cC
:_6@"
<r}g
b3((zNU
T"S/4
OLW2
I`tKt
 \De!
D5Y(
%4	Q
#M	1W
qyt6G
0'~tf
o<S.
k9qJ
_H:!
3'-ZA
J@7"
"YQ	
Rr,i
2&/xU
#IaD
s7|B
*KYp
@57P
QA0H
`)m|
u6_<v
IHS+
+;7ax
I?QR
S_"t
,f5W
@2xk
Y%zGxkQV
Dd%O^u><gf
PuTlwR,U
azp@
UwR#
?:rB
'b9j
k`]?
"3DUfw`]&
_CONSOLE
RLvm
*? <
mA*=o^
C.ZY6_I
 +]e
%'XS
?REd
()f5
3-'&@
(7>t
_YbG
H2R 
)uRv
 js|
)_!;={
i+!}
1g8p
-FDbk
(9mB1K
n9C?
r/R:/^
:>o*
({)@
zOq#'
mrAi
Lt<|9+
jDD2;/
YLoi
BG.P)
tCt$
;qZ0
C)B)B[CAY
@]	Tt
Q>jT
yc!b
WF$z
x{Z(
I`QXd
SU	C
cMXC
&<g8
j	@+#_
9*eVaY
(X6n
QQ6T
Z'&b
5/H6y-S
T%XV*
Yw( 5X
OA\!
x6W'
SV@H
qH^`
c*^P
45\F
8D)F
_|C}
il%Q
z_Xj
doGk
\Tz(
mvr/: 
H_Ox
YTo?
,~k0
s]a"
P5>H+
go62
7=s3
c11"{
LC'Z
r249
^^uq
bP!R
d5X\
<Jn^7
)87e
MEQPC
b7/M<
usWH
i0b91
#,$7d
:T5c3W
yWTb
XG%^PK
FTs-.c
"|@(
RH,;
i+mo
`wA?
[57;
1#AB
9`v*][
;#yI}W
p$hl
|[6k
~6V#
adSF
0fki
or=<
B`SL
a7yI
K#K$M\1
%;y#H
2i9$
;FN1("{pb
U'k|
1l"^=
{$.<
ol,U
4^rv
Pps:
6Ano
/b&C
@KE%J
g%)nF
96UH
,9Ka
--L6Y1
GLw&
{/,(
gR-1
.A&#
x%2K
Im1N
r-w>
n(/n
Iv21jd
ESdj
/#	0`S
KsQb
#nXG
264v:92_
% PgWj
0PJ^
HyShK
 4>T
1IQV
YTBY?
|zaji
Hrca
p:|^#
gs]!s
HP.^
5Va[
?t-=
n<'Dyn
bdl ;
m]}Z
E.aK
~>]\%
90H}[
!gHd
4t`$j
>dLL:
}>7awN=
Q69DQX
x]TD[0
Bk/]
eH!Z
0V;m-
:mLx`
'g0'	f
4dsH
||H?
05l%
1=&A
A (,]
ca*a
FM#vi
ud!T
=}xY
qF+?
UC#O
	m<-
 n*J
J]y|
O;I 
6bB	,
bg:-Z&
lU:bf[`
rMziQ
q,Pf
N*CSl~vb
Wpx^
x9R\
>n<Ic
<*D*
kTHX
`&U1c_
Dt2w
UF(l&
MNy0
qO{[
w8	vvM
k5Pi/
z%j'
_cq-
R!9&
xD\f
{Nd5f
s_,|)
J@*+
@M*5P|g
6ZJL
h>/I-
7~dp	_Q;
JdLW
V5)~
Lk,Vs
!mS_
mQ;g2
z\qH
2EF/
DBvmC
%do"
7/0rMB
Ts\)L
jjJ=V*
f_=8~
_kbw$-
44q%za
JXiH
hVNaRj
q>j^
pWpU
.UC5
L;h-
2w1#
X%({Y
w|.RR
u%4@
3~cB
Tt0!
	g#lp
 176
E$#I
!wsO
|E P
?nSZ
S~1I
plBP
^62	{`vBK
r|"M8
]T\_
.dM0p
'g28 
DZ+,
vZV)
W{o0eI%
CVF_
*Xg	2
az8f
QN&u;
c`*(
lR 1
uoLe"
=t#)
!".w
aH61f
EXs@]3
pi^%
KM:]
G.5Bck 
d]Mz
@:1@6
O06^
1yMv
wA-7L
q[7`b
WHVj
ujHr
L; }
)pXX@
Z!Hti
V!	"
oQGq?B
UF>\
imZ8z
!p!U
HJ^j
vT7g
ug}%4
`:n9
?=Y.
C1=3*
B$RN
<[at
"3DUfw`
_CONSOLE
-::o
A?!k
"Nc9g
[edD@]
9fXI
W/,V
,oc*/
y9{y
-`N;y
7=8b
\CWLM
Q*`3
4=R<
ix_?;,
VTYx
s67J
o/*p
4m_z
p3l&
PiYa
DeQa
Pb*~
m^3{
p<r6^)
$n*Z
#EPc
6n>N
0x)?
EzF{
qzpIZ
x-s&
zM~p
N.Dr
?$&z
~l:1
Tge}
9^4pdLYl'\
m?ME
Y\@B
GUG"
<im8
z;;4
9SZ}
+e^fW
anRp\
GTeU%
t9(8,S
pBs/
:>E*h@(
"a9*
*]+U
T'!l
	=L"@
3mvxrk
j{OQ6
E''3
0Ibm
Ne`0W
,t$:xb9
}O6>
TbvH
S)d;O#b
ezwv
,\cpW
qHF[
!zZo]wQj0
7lN[H
"^\5
u[`-
"k9GzJ
taw_E
jkt/82,
oQN!
r6Rq
yEm_
>" Fc
G	Ao_)l
h5`R
Y{D[
%I8*E
dz[!
4X==
mtW?v4
v) |
$a&O
TEj/~
A)17
}cB6;
m7i%
yz$I
*n&fp
1gQ|
[Hp=>/Kg
e^]ExeZh
dfcilx
bGML
C;zJ
MOqQ
Of3+
Sh	5s
;AI*F
@Sgs
(kxd,
4>^:
)2)I
*U]j9
j4^\8
`tRJ
Aux+-
P#,`
|kvC
|=Bm[
KJWp
^b'j
	oJA~
n|R*O
4pY8sz
5=Ew
;K(#
|5%X
{wh}<
c7Jx?
In{4D36
I!e6
A"}j
^qoO
QdaEH
}u\/
wNTKeDXf
e\+A?
 pwg
$a5k
FV	QY
/Im7[p
MS8V
mD!Vs78n	
{YC|
*>KZ
z7Zu/
-D0^0
Whtz~
(!:X~JU
D|~zX
p2\VT
/y#1
^QZ:$]z
'_w@
F#?m$
zP#BD
e)=(:
z-sc
aaR\@9
u6}+
@=(e
\RLGG
!Nx@
0kTQ
!V[^
E7RJ
`'-v
{we|
$.e\<|
~-{Mq
~Ont
{"'M
jQmP
wxL!
IG-}
I)mK
3w$E<
$8ff
29N5v
0C\$O
M%^otr:
rif&
':D:
'K}n
s?kv
D["H
W#!|
o(}^
mg1m
u*9z:
{Z(p){
Ow*Ew
\/>s0
e:+jy
Y5~ 8t
Tu<c
=_AVR
#'cr
C^#s
R_H'
SpRa
}x:>
K i<
[XJ*
^xla
q=vN:
>46<|
:~-FP3
d+;~4
..k)
4Jl6eh
`ZHWJ
r;H?;
6#mg
bE//
)q9@|?
Me	l
l^P:;].
#q1/
])\	
~^Kgo
%pa{
 Xjh
~3%K
5LGu
)jG[
\q8IF
=TrQv
 b&e~
Vb`2
V%Bx
4	tJ
2f@[
o[|T
W\_4~<m
M2yr
B%;Y
!/@K
J8CXm
|8OSi
7wRY5
3Dl\
{S`.
AH4v
(ibq
MP5ks;
dRQFJ
3bn*
?X6h
dGHmvJr
,cY]
yP6F
LSkA
-5FZ
!@wi"Z
D	y)
Q%HS
{(L-
 (b-J
.1=N
q6Gi
s+uCdE
a 46
/Z~k
`1b1_
#RDC2
	Xv%I
ym]Bd
C2ix.
L};J
gy7`(
2^2u
s0 Nj\Z
-&rU
8V'V43
r~\+t
Fqwu
[zCjI
WP_R
X[hx 
OlAb
-$](
+O9i
`	i1
Pfv^
tvg9
6V`p
(t<-
KKX:
0Hc7
>QO^
WM.*
5gA;
0H|m
gbq/P`f
vf.FU
x[_K@
gFz7@
`oO?/
![k&
%{n_Q
`}"Wf
"3DUfw`6
_CONSOLE
yW|t9
[=;?
[)gWmg
5aUZ2
VS4F
H^4F
w.y~
kBuYY
&7?b
/! &}
NHZ'
#o(g*
G}}r
M.+b<
!u@T
bTD6
w2*_
|h_"LE
-COm
W5	GEI
lY4t
b~Cl
uhRuy
()/~
gD'qL
Xu.g
lISBS
3<{F
3\$0
$E(VN
?-+#
:#we
t/=Qf
^TG8r
rkT.
?(Ky
(wKN!
lio#SGQ
I%<c
D<hWU
ljopf
o7^i
Zn:i
FLpc
<]WD
-==`
V*#8O aA
2nLzN0&`)J51
2,UM;
1R{m!
r$|Y
W-kaiB
IXd*
4Cc%/eJ
-,rY
	U:<
&B^r[xY
&o^l}'
!@3A
)	,t
*7Va
H1d!
)>BE9
+V!=
9|yh
)^Yf
?n;?
q+h-
-g$u
l~oo
x w8
]V`g
^kxhX
Ze;\
U4Qf/K
4%sqz
J,nE
21([
XMmg
/"Qy
5i1F
YHM_
MKP_
ozou
37{/f
8VGD&
RW!6HW
J6S:'C=
+5!|
z"p*
fmMx
gRD*
Nl~Vcr0Q6,
+YDh
kl6w
<N!Ug
n[z 
MAce?C
W4F!si
jY .&
XgO|
	h8D
+qH`
AYW6
O}}V;
n 6g
.mA	
_+xe
.Epd
+R}!
s MF
c34	
-uB.
pb;AC
5fD3(
Bh0-
jz_X
K&7Hl
P"r}
s;*s
Cty;
0~c30d
)cnx
CQ_2
ATxiK
'}M3Z
S19J)>
q.r}
127O
#O3\W
)J$GZ}
b3,p
]V6X
H6YO,
tmW|
=jf<
\<%6
u=MB0w
	A78
 ?^N
y,Cerf5
`/ 3_
C6o-
2wTn
[F"a~g
hGp-
M>?C
[[](
0BC3
=2H-
ZH	4
H<IP
60x>
30<L
9Kf,1`q
7WSqG
6 CC
{fXNq
G}Cl
xQ;Q
B>S{|
5NPC
,LW=
H>B3
@yBa
	in|
!$<VA
0=iC
EqOZM|
`=\j
,MJN
bJtq{P
1E0[
aEX<'
p(#9
^=<0
^,ec
yo]%
K,`~]
_d_N
|vG/
#4T~
[NUQ
\00O
BvIbo
*rrI
$:)WK:W}4
L'O<
:fF%
bQ2j
.N+h
i$t/H
C8c!
46[Sx
G:8{
wd%N
#	x 
3Jv(L
V`pQ
`JX3
gvNW
=[1Y
:Prv
$lKB
T3si
VS;t]=
h-(5x
Zev%
]\oRuVz
x)LB
{`M/
(dN_
.:~Q> 
,aL`q.o
c9BF
p\b_
+cbT
>jtOL1p
$M h
SyU^
"1%7
%{*z>
WQEs
X;x&
K&d6
)	_tFD
oX;)
~\D1
%|(|&
4M>:o
}/vs
zd+]
hrP)h
+SL'B
7b`d
&>JO
n!"<F
op6I
dSYgS
@OjZ\
Q,xv
OQMu
essQ
L5zc3
s{d8
<{wB
>2z8
V8Dv.{
_p7W
o_5Ud
rS.O
{(L4r
$"JDi
Hg(Y
-^Lf
dW{~`-_
mv@O
R<a4
-Y"U3
oC>=
!@p|f
',-nQ(
pl~9'
V>P 
2NK+k
_wi2`s
QVut
oSIt
%sl`
"lO`k3
C 	2
+(g>
Pey=
\S~^
n/LC
R65u
d[;c
jtAZ
Bu6)
[}e 
pQqP
1Vj6
<^a5H
{Zzl
~qyN
GLyN
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585308626
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
24c527cd-734b-462b-bca9-faecd9e3feeb=1585308626
"3DUfw`
_CONSOLE
*xbld
d	G-
]Y~MApz
](X 
C3{A1),
tuD?u
DNQjq
2er-
v!fT
?@av
1A~W
kZ.`Z
x0f]
6>}TQ
%4)x%
W3a?
TVuB
]Ik=
Mdb}
_I0GV
U&en
KT~{rB
<--p
owdU 
=a6u%k:
BwMb
j+QP
G<j	L
Q?RW
SN;1{lv
Ihge
%QKap
B@L7
M-$1
E4`x
h#@Knr
=MyvNH
0<MZ5G
27}Q
F]D.
]F^t#l
/bH0
^2<)
cn~s7-n
6#mU4K[|
g/s8
MLl'
G_ds/F
:t$$
1 {?
 1<p
l<l	/
k@_v
	eTR
,xO%}V
,Wj#
UJ1d+
7Mb$
UJ/d4a
:i*w
1xGUpY'
6	r&
i1bA
-#+$
uX-!mH
rC^Tq
u0X%
'1)*
'z*q
2)}B6C
}0<%
T<oO
!	L@22
,@R5
gwqLa
|BwSU
\jo).
5ORoG]
?9@:
q>O p/
uZU;y/[r
m%`[F
zs&h
zLbkj
^ai`
CSKzd(
kgTM
^3Mm:
q/GB
.{{K
Gf?L
Bx<.
Y%aI
,;xm
G:qo7
%$1%~
= X"
YGpJ0o
Z3>Z
CJv~
:Z|K
&8..
d CY
no}j?
zr-h
w~pT
N~<E
Q GtNQf
*((	
zgg~
o#)v
[3V:D+iM
>[;/m
ax8"
fi1r#
h?Nk
3x5]
$:7}9%
GUgN
rFNk
5~0+)
FJ#&,oH
s/op
pg*u
waYa
}417
KP:Eb
4&V1f
_=d:2
D&>jC@KU,
vdjC
	yf_gi?
aOy s
J]A&
c^TMno
g%Z/
[KfC
+5\~
gyk6
JToT`
IJ}8
l@O|
DW7R
X?BF
}btc%
/_	wo
&a/X
D\i`
nI)_
vrl[r
YZzsJj
P_a#
k!1Ut
~w/7
ro0m
L1&A
;Q<-
=aE1
Wyzx
!jE2
*3oAw
;kn^
(l,M
i*:d
Pwl7H
7*aw
VN</O
*?{T
lQ9[
8Uif
eI%(zmX
ekRY$
kbOJ,
T%$1
GI^87_^
3Ds!
c~0>wJ[
D r`
9Ou_<
cMnkPm
;2~K&
*VQQ
>uT?U
b%nb
yona_
hscq
/c[d
x|/=C
P;hz,
!4G.
+*:r
#	T9-
/zM&
A?t-S
+tr!
*i)Q
s\X0
9:Id2
0$sJ
\I\g	6_
>zdI3
J/AH
v6RS4j
}hDt
_k3j
I%EJ
C<av
<*RH
o?[0m
S(h$?
gF&N
`8Q@
lQG8|
_P<Aw!
#SyG
Z@Ur9
`0~U*;/u
$<(d
`5N,
	lcO
.~A} 
@PM7
!9:h
6xz3-u
#vp{
PI*d0c
TOWJ.h)
cx@uz
xx*?=
D'}L
h<\5)
{8Z9
neO4
X:X0
d4(Z_U
@#gp
9qj	
y;pM
MwOx
ygJZ
`q(@iT	a
rO,E
`UtTF/
>[Ir
3DVA
``I+
hgY`k~
>~:R
^|n!-J
4#c@"
v 7q
"G|~Rz
Z-VCp
an14
d<ZR
#:Op
A]cH
8u5/d
1tj	
kQe!
=U83
0WGY
}0	`6w
MJ $
QYya
3D|yH/
a2h;\
=XRi	
sb0CU
\s9;
Hi[&7~9
4"d^
Y+uY
FJX5
bJP0*l
e[o@
eara
jgEw
C'xy
6KnM`
$3zgx*
VXbV
v:OO
nO<,U
g9[!
l1Uf
'w8w
T;T.
a;e=
PD|U
7&Pj3
j:6sj
H"om
!-Xh
Gq7M
"3DUfw`
_CONSOLE
%ix@
WCSl$[K
NKaT
t+gA
Id.P
H\T+
*Qxq
QEFHC
sG7{{u0
4cY7
c[I\
{7We
7|L4
8MZ=
j$hZ
R%T^
n@zb_}
`0dP
d)6>
BmHe
kw6k
#z(-
@jp4
M\P1
2YCoUy9
{n@4
d[:[
<GCR
.3~>W
$)x[n
9A\7
PTpx
V:v<
kysC
=,a[hq
oca*\bk
PnxZ,
qi	U
,<tc
h4=:
MAn4Hu
khg?
~jMJ
2hIbf
wdoY
Bs-^
1I>)
t0!AC
[X=~
]SGl
J!-~
4b}mh,?
GT9^
$W"bM
vmr@
%1Sr
nbv~
{k(V+
%K;&
B*Q=
_S-X
8+0+k
d`	&}
Vf8o
br$Wh
|gka
bDpp
JG[vx'C(VG
ciQ^
9g	q
NEC'
Rvy|
\}y(V
{NyKS
T=nN#
 ^_?v
m[v+,
nLk$
"{;[
%8Zu
;z wRg
C*y5
(U6po
ECf8
,q*o
zU}G
PA!Q
;r6O
^6Hduc
cr8Z
pe2[
41NE18
$Yc:
gUkX'qZ&
| ?c
g"4E
m$Hk
,}i_Y:
TXAd
P@ L
@YB1
@dg0
C)aD
1u;"
V&VD{)
hXA;
Yw99
-]4w
&~Gr(
bf#WO
?.rZ
uH9br67
J,1U
$yEybZ(
5tv%
J<ltGJ
d\:f
!iBw
Dm4s&
C]\J^D
&A1AF
>~xAoChoC
rcny
&Z<J$
p*/5'1
MM:{!uO
b&e+
ZZfZ
0_Gr
$*oF
<K^h
!(_;
'[R8
o[y1
PlBG+W
t%zq
k3>|
VY:\y
;+7W
CkcZ6Xu
3AWa}
>NfP}
)Bkc
5.?N
Xwg[4
YM+4
xDV$
0?S 
Y-'P
p336
!9:ad
Y"Q;
0%+PA@
%!$(b1`
9egpC
AT4'$
E-7(
HSh2
hM.~
*n5Y
.a=\\jR,^
8PuM
kH.~r
iVS+
K#]"
:g;p|9v6A
#HYLk@%?
bR_Eg
moN/
c`.TT'
y%0?
:[8lX
GLLP
/)}\
U4GT
a0K@
]];:
163z
>?^M
75Bh1Yr
aSD(
>]>E
0ZyM
DnI_
A,2	A
B%O>
)li4
`3B3!c
>9#u^-
 o$N
~FsY
F$a/%!
!,AREB
8nt|
"{{"
^dV5
Mose
{|-h
1S	s
ERh*
[AD[H
6+<NW
A2Yu
KQ}Sc
K{x8
qhu	
7W$tw
zqbp
X(RMCN
I-[Yz
)H|{
z=A|[k87
;G+P
#J W"y
5oMO
xem*Z0_jU
^]\\
nw(u
2j!|hL
4<Ve
T`,O
[M-2
Qc98
Q#vXx
X+x.
^/J{JI
LjYC>
p~O_i
>X~,
{Ki;DqK]
~-u_
!i@3
8[Ak8
rB5 
yBrS
TK.p
0RfB
IZA<V
;Zcz
8R5be
.>h!0
[od4A
}k U
De6%
dPQ"
sjK_
^s"I
4p%[
}7^X
rh4&
9=S*Fz"2veF
~iz>
?.33(p
BL}g<
n1C1
G72w)
KxsM
0lMPO
7MO'IX
a Bp`
YX{<
2vI<
x"L~e
2_pc
% bT4
m>N:Y
L!Sq[
$]u,N
wfI`
2-CW
u.u%T
LI6-4
!>;n
VdO-
i}>N
/7k.
%q?9
LtCg
ADGe
k*Da	5
[Z!I
TJ2I
JYjL
%T4)
?q8F
%0K(
#) r
8`*Af
F}4&
_EK;
KI78
	Ms>
G:CJ%yf
7p#l
t0w	eX
QJwU
sSJI
!c, L
v?'\CW
+7zk>
#DrN
Uwn%
 td"
q:7t	n
w|n"
Ca$G
:wtr
d<c@zZ^
^mWN
{M@K
7`f5
4@F@
]]_p
,voO
V:R6
E1nDo
u&R-
4gG`
	e?`
EGlY
h7E$
3oKC
;a:{:
,O0^_
qW;T
Tp%IX
FlfK
129D
B2gY
w~J9
1WN|
"3DUfw`
_CONSOLE
&9}a^0
FW0o:
 6w 
yqs(
ScG`
Bf4y
mZ;a
~cSh
|H-{V
%kmB5
x|)dm
,v!a
}jPd
V,zo
!D=-
DT	lC
7S!'
BQ`Sy
WRf=
-&6J@
HPr`
{W?*
;6Hm
s8j"L
yj!U
PdCS,
[RHy
J+`U
'(f1
n^heWC
#x#h
N|)#
ID!u
]7PF
>FOoq
8"Vi
~my?
	{D.u
1Ue=9
1v$Q]
:rSHZ<
{,%]
vpxB
<#?wG
YQPa
-};uy{~
%j i6f
8]~n 
qild
7#([
Kv6K
Ks`XL
 aO"
>Rtx
;s$S
<dFI
?=cJ
1d`F
?s7m4
m`QI* U
_hc<
eVu	
SPOf	.K
r"t}
aI9R:
"IcZ
F7xs
jS+F
C[pCWe
f#|Zn
v 6?5
~)A"cHQSZ
Vz"D$U X
FmP`
EMNV
PG_y
C3[:
m*(%$
Az%d
w)z7
fjjPz
/eU8
\h	T
-1:[
Rgsc
QnyB
2RJv
tmEk
+.c9Y
L3Bl
^$ I
2/kq*
o#,9A
]X6B6
J,[!h
eV--rh+
)f'5
8uyl
@_`r[Dm#'
ES@j
jg*'
<$z%.
c3i6
&%631E
Rs+ 
}rgJ
cuWO
./Ax8%
`	?-
vzma'
RwPb
pReU
qm0&V
Q/O9
J|o1
qy=sx
'`T8
(@Yp
<nu5K}
u`m*
 06V
#q~d
PM:M
b"0:
/Dgk
?*y7v
LO%?
A",vM
M$i{
Bd-:
h8C^
$\X<>
L?[2Azk
@\tc
}aRNW3
$#,y
(BRlb
P~$-A
Cz%A
f3M;
5@ZEu
Vtnf
s{[k4/5-R
aofF
cf.s
U\mF
}q{e
AIvV
)B}R
AIvx
N}/bW
?gqC
2#HjiWI
Cqd_
v%Pk
ZOfM
j;ad
D5wyjs
Utme
0|Zh
szi7
++|S
qpW/;<m
:sQ%
rxeqj
C^~&U
%cw`T
4#@t
"FL -
n^F$t
]\RdO
fY;i
I8xb
9lWe
mA#;"OA
;"y7
2tQr8
T"_S
huZa
5zw{
IDtY
(_VC
P3.R
rb4Z
/?fvH
yVLG
}f<D
bP$^}W
5W|}
1a;9p
]3DA
D[l+
)B&f
<xTpW^
Cz\\
(,wwr
J/TY1
$tuG\5
dg&<
dPwe
/!@l
sd.:
<@SGfl
n0U~
hZYK~
'(4C
YZ({!
L)m,2
KF11
1*f1\
ymN=
17w2JK~
	'nm$
b)$ 
hpxW
hFmb
f1"Z
Yb#~
F]~x
sSGqT
U{ML
&6sH
]o0n
2cu<
"@L2r
KF/(
>`29
v_Iq(>
%		;Ax
hLRn
9\^j
$?vs}
UVs~
:%K,&if
PQoG
#Rb_
2g@3;=
#|qYeo
=Q^M
X82H
gu9u
ic	Hf
:S$nn
oxg	
*X73h<
t@NK
>\lr
tTI*Pa
,4PY
a*Dc
dyc0
EEbz
Iss%
Ay:UI
-w=X
37-YFV
/PJhq
U&!'H
,^w2
As33
|$Vc
.=G1
b]$+2
Mv& 
G6f.
D#j\
uQ3DZ)
inix
Vmy]
bpTH
7j{-
c>a_
KViE
VWv;
%ZtB
UAg|
V<PV5
UDwA
!m%}
p[sX
5w=@
g. 'O
CO'rbJH
=<MW
uuYs
}+{@
)Y6G
&jzP
8=UW
lQrp
*UW%
Gr/N
]k)%
q(,/
m\s;I
{;`b
`X$B)
\(at
T7ch
}xXS
52:T
zWXE`
LV+.4
b4h?
R<+1P
W.J>
*atK
/#$~
0C:|
y\N)
i! ,_
[ax1N
([|Hy-}
#GxW
$*% 
vFS}
6zkrv
y["=
8[b9
E\ET
C!,S6
U%j,I
jlsn
?Ou 
9tOy
{w+Z(
Lt1Gi[
TrkM
^KVAYH
a]y5Y
Z<Ap
K;&qX
:SIC>
.#rag
G$\=
+!	wr
@;r$
#7;s^
^kvS
R*o;.
`0{)
FxDW
[qi$
	aw(.
~MKA
^0g,
LvUj
cKb 
N>6ZK
rBJ1t
 em_D>
$ cj
vY6qV
:)':|
15<C
C>4\]
0r>r
GWBa
,*yI
f(LqD	__
)5 $
WQBN
LZuq
I"utnA
{3K'
Vy]}
-mNLQ
(g [nbD
rEHh
)75>W
D8I}F7
Z[];
+9.D,
^lns
d7{QR
QYm"
(4tU
+:dpF	{_6
[9b;_
)t;xj
5b[UU
o{H4
r}3?
=S/5
	P,:
fU%q
^IZZ
)T*}
{@l9
=Gra
Fy8]uSwt`
:r%_
0<7y5OX
7w:V
?|5j
HRpL
.nE4>
 ~kZ
.jI,
0Uys
5g`O
e(un
QSMj#
Trg;QL
7::|
Ou'S
D`D+<
y$#F
SI|u
j aZ
RQ$G
R\~p
>+@?
lVVaG
~qX+
W`'bJ|
m`Ce{
5qWL(
+Xh]
X0$u
o4$zaq
'<$a~
mu1Ei
aH}=,
!Q9E
Y:5V|
JztZ
jzYb
yTb.y2bC
AF}h
K"%_
#w	S
=+#K
.8k]
IA6FF
.gD3
%(!	
(>)U
W,0R
.	FY
8`Kj
Aprj.
=T6F
!w#|
2L%&
Nj*|
}y%0t
G2Qs
!U%f9
gO&y
	<)C
`6S	
YIa.
|vl(
`:<W
YM	%
7@(f
XhF\
aD6:
5D=$
97?;	
`vxj
0M@./y
e=is
?9<x
&@o0
aSRY
!P;o
RJb[8p
B~v.
215L,
&H8V
+n o
sf&8
`%v(
i,)	
rnWt
\nuq
rs@Ma
!e~v
lb=s
ciQ"
+P.$Z
$MklI
r6Z.
 ML!fY
@!\<
H,h2d
S(:nMt1
WIG@
89~J
0r+;
v#p*
?,Ei_X
BrW\@
WZs/V)
E-mL#&
8]Fr
E`gp
%heG_
vk7%]1
m(	x
.>SO
MmY]
Ke8|3
5^GF
Fn8sH
.zW{
^cd,
|5Ea
*ohP!2
Y#dU
K8nz
3:Gf
R0U.
66yA
qa&+	
1.u+nN:
+A,G|m]
[K|/
Y;u&
wJ26?
`\4.
e/$P
KbsG
H9FJ
IiEM
4;U\
lNR#/
H(*j
DNW 7o!B
dH*\X
VB	sky
xB]T
ZZT3
A#(+
4cve=@"
KWL1z
X~HyQ
I}u1
'.B^
@$MKG{;LW
g0iz
[BM>m
%"uuu)'
j=l}
9747
lVI5
)&`lY
U?(*>
4 WJ4.
9@>'
.6>9
]3TB
w(D[
j5J*
a^%/
jQI*R
W{nK
/-JF>
93Ie
FcDi$
2uoO{
peyL>
U|y{Z
WXRu
A5z*
HZd|
@.5>
/l,2
\5b#
*;GG
wMAT
Tg|\
8F]P
U<md
hwrB0
P#SmY
pGk9
dU+YQ
hy	aFn
&Xqgif
Jb_`|
FDp[g
UFTV$~ma
EODZ
/sd{
Z'4g
y&W8@q
QT v`
V_byh
34an
6[^9
TO1*>	
X`'v
N4C}
5"	{W
ch2Y
SuBn&8
b<+t
bs-@
&KTl2
E&e#
f=8y
YcFG
]0CC;
M"t+
$Oz?
$6TVQ
!3Oo
!q8I
!XOi
GCs 
|{;7wI
j?}W
S6<rb
}P(ud
*7lo
zJt|WtE
$h$4\
:!gq
krXd>@
*kW&<zn
^cp6m
s>lRl*
P'Gr
?1Jd
97q;
xKLo
r_?B
rdo9
g~|Gu
**4[/t
blc0#
j,BW
)*jpT
BcZq
Fi}$
)^4,|'\+\o
7.I)id6
ix2R$
dOXv
%dHex
uxv,
688@T[0
,d!Q
RU h
Fl8:?7N
l6:\q]
A^I(	
NXAw
!L{"hr
-{,,q
Tev,-z
@%k$
RhY_
/@?$
p$Ypv
8OQ\
C<+aql
u/]v
LZUH
gR=8v
HB'J
d;#]
O@iM{
@Cx(~
%r^!
]DIH
\'$F-
Mv1p
PQ;,
F	\M
m#Vb
rL:!
LV~e
{|@Z
-m4V
ycNC
XrE$tA
]cs^
Nf5U
>RZ|3:
TAPI3>b
g,`D
#[=w
{t;/
.@dsf=Unp
#_ypHe
|@~	>
MP=/
64@.~
1{$z
C.C`
$rv;
N[X)0
8q"T
8bIZZ7
pWo6P
aB2/R
f	e9
jDHE
WK(A
WfTI F
toEM
ZOpx
$kh<
9JWy
	E<2
mA`v
bt5zO
lH<AA
O;_]'<oy^
=*|/Y
d>>YQ
SHrF
Xp>w].
J"3*
+$	 ~:
?gqKI
L;/aN
p=tv
RYQY
))	l
N74N\
XE$:z
PTV:
u@e<
 M[/G(
&T1"HF
Xl;g`
^JC)"
n7\M
KVKK
^|x=2Ag
vUy^
rz59
JWuwM
G7tZ
S}:H
bP[-
myGP
+K2Z
{i0u#A
xp\C
\}vH.
YW~j
BooX
~I5R
\64k
b+4)Ah%
;>!0k
6h{U
Fr8u
LtG4
k^~;
zF?l
ztG6
M"?l
`G"4
%qg;
7-{/OX
U{t2,
CJ1|
G\27l
XL}y
Vpyv5
LCb;
UooW
oa8pn"
I<;^
u6x	u
rz\%
$/sb
?p[Q
n|&Twi
J0JO
&E'<
GEN>
 `* h
kdsG
XZ]~01
iDLH(
,y*X
X21B
I(S-n 
<<WI
4$/1
'`!1f
ag}_`
Af(^g
20;A>
|Lm	
V`\O
bqHK
:0pR
A?H)]
"d]6
o\grk(
}@c)
%9=Z
^PDd
g~M4
D "qJ
)_&r/>z
,M7$
6LvG
7nY-
Z@rc
Iy<k
`l|N
VCeZ
y*9xGb
B9_"m?
T!obtPJ
|nAa5
NRWk
(*2r
,0Hh
0')Yd
:\5(z
\)~#
Cyi(0
"3DUfw`
>wS@(
_CONSOLE
'!$h
TA-JZW
Rd25p
-[MK
?7V|
S\J~
apss]
'<y}
]PCB
[{$(
[& r
t+"g
4T_Tk>;i
\CyyY
^Gcw9
8a/eG
VKv3
c[OzP}F
|6U`
:iNC
! =!-
n~j~
73(;
w'Fw
0[)L0Y
H/[1;
'OL[
jSAF
s?AO
o?7J
Qm$n
#]:T//
/`dmL
;nH'
:6F5:
1gn[D*
@CCD
Vpf,W
fH\R
91Ay$Q
b`uH;X
X'h*K
4#:y@
k	b>
#q_Rn
}}o`
e@Hn
8QdhV[
Io)=
*k}r
3	oO
x9-S.
_+UcK
QwmH
aaE>6
?A0x
cf'r@
0AP5
:hIL9
*	gtZ
w]g!`
lC^>
B3qw
A9Mu
OKFc
>SerbU
Yo@!
<s6yid;
_%bw
RT^&
KoAn
"Od-e
Voxq
	>v~=1Lf
`#OSz
`7+R
695 
{TX8
ap9ZM
k=	xe
i;a8ZXt
*K+te
`g[Y
f`S4t
$l-Q
/?UG
2(==
\T{+>c
gJ+Y
jwI]
#Uws
_2Jf
j?'<
*p_B
UdoI
sy48q
yMp,V 
T6iJBI
yXjQ
=d,)
mnDv
#K'>
X{n	a!
R{C@\
r|5dU
&MrJ
tdpBO'
;+qEh-o
gX3E,
@1Z.
KpB*8h
}@qh
N|JU
zh5I
65LUB
f/1]
2^+D
82	%0!
gkG-	y
mFR*Dl
@{;GRZ
~N=?
cv7(
5A1m
H}H#|&
t9P4
[.gH
&iWU)
?WU;
~;_.
CVOjYt5
IRg[
>{oe
|E!)
fyDO
O6LV
L$UV
\l;~
*o/f
RGcQk
OGVgg
ABPbv
CO-!
~JHA
,Zsa
cLM@iuo
c'Q!
OX2'
cORd
&{#=5
yTWy,F
02!X
,)TD
l|n~
hvkA
j7em
>k!'
4&L 
'i{.
;B7I
>RYTK
VeS6-O6
CL`}D?
YNlb
[/$!=B
\gyQ
y%3P8E~
jF!m
z1*X
SEgn
W5_1F
gQBVlt{
bQRc#
G'Pxn
`DN(|
[@]r:
{zwgQ
2)|+8
'9TCx
bJN&
|xS!H
%seE
!S,h|
!EH{R
'3Zn
6%!A
<=C%
D{cl
 i:fSN
4fMT
,v8v_
[e7 V
95K!
mLcF1n$
2Y}U
}Y,(
5SK0
(:;J,
k<:,
Ty{Ox
QaDr-
6FS'
y[!aZ
&IO9
S;HB
EChX
A35d<
_DGB
=.R(~
9QR1Y
{|J&k
l@(p
 T>]
TK@A<
"JfK
#^8.
kEsp	
v8jpH
N0"&
A}dU
5bsF
C185
8uF=
,.%Txc
VJ{$
8&N!
x9R4n3
T)Rs
9$8]
VNtsj
|Q17
]k{D
v"oa
"JYX
_gLm
J"c,
l"^2j
 tDdZ{;
G)6ML0
t1AY
*4L3t
OFlH
~6mQ
r}v\
^=V;
/9/q
-8#P
t<U<
pwY0
OY+C$
MQ>E
}Q<O
fa9!
-s]Gl
TV)^
oBVs
4^rvE+a
-*L)*
b\;	(x
*R8J
Lx!L
pRdb
qVfK
&Si`
PjsQ
jPyO
i%.;
}3;+
Au8c
m8*:
f?p+
<*za
|UwJ
|Pbn
sZ|l
(0^"{wF
vtrOT
a|?o
 :K07
Z	Q|q
a^)C[
6@c XY
nY]g
khk$
3R6p
dV,w"*
.RA;
5#-}_
<{uR
aRI[%
KBpb
cw^v
yaNx
E\""
tPg{
Y8-T
m5)kU
;m<	A
:-h8f
"3DUfw`
_CONSOLE
sm(u
r3}/
jiG*
:,2	
tm[a
y*z7
gAh=D
	K5nI#
t&G?
m2DV
0cD?o
NYAD
l`;4
cAA`?"
D`V$
y9Kd
.	[lXs
vK\u
 6v`
BD;F
7w"h)
R_~S:
yw&Z9
]y[I
%#rS
ha,J
}1AR
Z<~Yq
Jo7=Uw
\C{}QEM
7QX+
*T=0AUIQ
V!|TG
O#jG
z\Wt
ay}xB
:Y:C
s} +]
l]9pw
DSK(
J/y,&
nifV
e}x;
vmf!
b;}I
Hp\94
	&}s
;-Kx
cJ_)
xWyQ
)4ju
,kC-
LA_y](8m
7X{c
Bx^N
VieU
"E2O
	8J*bH
D	;ki
(R[O^a
FY>f,qX
"3DUfw`)
_CONSOLE
|S]K
TDd5_
f?RH7
uP%l
:D5]j<
"XQp
q{'`
xkNY4@
+oN/
B]R(j
s`27PE
H "h
:|wT~)
i*.s
-{d*(
wa3:
r ~8I
5&t60
/R?q!
Lk]SV
\	}3
ZuhP
[heA
-ie=
u} X
CXk-
9[,l7
WIpW
,<5@
.Yl|
fWCGHZ6
10"r
-c~K
DVAp
7$`1(
7N}vgl
-bdM
waV{
!=$)d
}9Dlh
Z}qB
mylr
=@x6
_WLu
KF~Z
y,!l
tT<^$
lH3?
 wq#H
URDg
Vl:R
b(/06
q]`j
bvc'z
$g715G&s
)vAu
spjD
&r4SJ
2a#\
)XRu
:2&wj:
HhR8
'y,xDAW
Zec\
O8:]
U9HW$
4qH_#1&v
zdbn
f<(ip
4+m<`8!j
I!	X
wv&@
&?5Y
/V/L
+ /2
M.hS
|V> 
??-Y
wg}>R
 $]/
3:jn
6;<u
FOO3e
]CAm\
hrE6
VB8)Vt]
('85D
Y8$/C
1]_2
VQkkK
kKcP1|
]U}c
Vk[}f
vPK2$
LZcF
<Ao:^
k-z<O
| k.
i6iFU'
6Gvi
340NC
s,b"#/?
%,FX
i35x
M$:SXc
On@qY
]<6!uc
'zY@N
WL^/%F
v7Oa>
|J1Qa
8.p/R
W;!U\:
gb.Ol
x%+E
:M!6
RO!x
tpo_{A
	 +O4ey
%Fbgf9
Wj#\
BO77
4{=+`
pMg:	
=xqZ%X
G?|	
6;&cr
H?!S
/#WR
zP~7
fOIk
:({Qgs`S
X`80
{R^e:
B7C/
<QS3
,^_5
<t1g
WB9J
qf8k<
Ti] 2t
\J\{=c
Ly?6
ij(_}k
@>3n~
qh15
t5:|
uubi
j7CaW
\b*	(.
[s+#
?d2:
99a[
A;hw
0M11
<K)4
	cZ\?q
ihpgv
il/Ru
,&P19O
4r:E
n/^=T
rep1
).BA
vB}`
@7eY
J{Fxr
Z+J!
0=YL
@br}yL
e\CL
+e["
!S,H
u01)
tql*
1,c&
f_Wc
]-8 Q'+
4S.,.
=j~"
a(xH
!D4%o
i9TMJ
c5Z=
XRvq\
'T_w+
A_22
7@\@$
j[\t
\zar
T7?Ze
|-M`
["fC
I2Ps
iVx4
S]1S
(X)`y
0Hh48
XrTL/4
$UnESg
{|1Ql
S&BI
"]%l
"((uO
f!BN
M	uE+
)R.B%
qJ%WNj
)bhi
,U46L
1lIl.:
&&Vr
@ZM`
t&+G
<i01
M2}Zl
K*M]
SoK(?
|jbH
^,gI
HIy~
zYe-
V":DR
].HCk
u6G)v?
97x]g
0@F]
FVju3
ikQi1
p4W/
<+wB]
@3l<
^zxb
}X}<
<d~6
o[bHUW
	<qU
O+t!0CX
2~RP
h,/6
90dg
vFZjc
Z,$D.
=q"N
ct)N+
:C2=
'aG)Y%[
TDZ,
y]jE
s%xT
we%1.
l2~c
,x`_
cKi	
s96t
B%Q?=R>)
'^oQ
R.'t
QK;A
h1MXfHP/
8nh,T
}tpW
!w{s
-3]]
oJ)7
m~l~
0hUho.
Ff;P
@<_@
	 ^ Hn
3w4vC
J8lN
nmn6#
&8H@
v:yG
Jip3P
--
SCaB
"?&0WZ
=grL
CI.n
3%+Q'J
b&84
kgsXK
e,~ 
L"Gz
:%wp!^
{-wY
Lq	J
=]e>
c),*
oF^<
7?x&^
J~<}
b%PG
\UzY
HF(R
jXD 
$AfX
Gfv}D:
.H&hJ
Zufa
vp)tx
PJd&
4VfsG>
5=Er
KmK=O
(r-3H
3wN}
P*$\
!Z*?*1
>-PF
.K}g8d}
cT%4
_dcy
vS+$0
A	Vi
B1PK
 20D
	Njj
#3JQa
sX/%
)[D{j
gtwG]9}B
;v kJ={hU*e
IAf;
l%l:
>mfI
ukl4)a
,d:.
$6%1
}oTa
7GLZ
oDA-
~Zb:`M
k*j<
	4YW
Bu3*
lL83
vo]^
uL D
T_|#/
e.f'
=St-
jW=_
-}]9
*%6!
&zl}
"H`c
SmJP
&G-`7
tEz]
N}Cr
#^gs
47T;ku=
o`g/~
{	H,DZ
Z&D_
W0Ri\
Ku*;
,4+`
0Q2(1
a\qM
wWo7)
0i$X
+pW4
'@@X9
6C)~
gc*7]
bIgA
.H64g3
Mv.:l
TFz?
=/T\t
-,::#
h"Y|
94C]Pz5
`	vcT$
.bJC
.:4@\
cI\S
Uz2|
Xg*t
[Y}	L`
R*w2b.{
Ld7.
9GL^
>W#`P
^+J	z
ta}^
@H1\
VTqU-.
LQ_J
ij9a
Az'2
g{	-p=
K*vy)
,v:I/
h"s9$
V99O
6<e"~?
@R@u
Al+R>
Gyi\
lt7A
gims6F
/{M6G
QR?s
=5(m
\eM7
O_;<4i]	
$Uv7.6
~ce+-
 ayQ*
Uv3h
-xT&
3@}k
OxZI
WEkj
Z`UM
oMX?g
R,,-
& )KYE
LrOQ
	YfU
9"~6.
nrrq
N	BE
SMXGU
GHP?
.?Ay!
R/:U
v1	C
UH	m
fV4_;P
P.h+
jM C
U.nQ4
n|jBhH
j8&T@
6aPx
Ckx1
W~#@
.}RxT(
Zn9C
i>13
Dn3?
9$tP%
K+&<W.
(b|?
&@;X
%gW*
K(%#*B
f*]Oj
NUnm
NVKx
v.g5?
VSN=
,0i:
J6&z
]cQ)
Ncd'
o,EN T
3q"K!x
ecIX
w7H'(
unno
tv^B
q]fm
ZQ4:
o[K3f
(waVv2%(
j(UL
qA+Ht
0aR)I
q,Y<*x)y
l?	g
):&j
*0ZiEY
Dk,x
 Ivz
n>9rC
N%7RWa
LB{(
T22TS
1d|X'bc
D8Q}o
d+{4
)-)~
iB+ y
;@a(
Lo!E\
p_bRHM
iC_`(
vZT9
rrja
d~/B
,4WR%K
?~w6
UxS3
%<4i
,l@f
H*m]g-
<MLK
|T! $ `
_b=4
e=59w=
k<~0m
Qd,O
.RlE `
|u{Ox~a
T(Ad
*c*=#g(
Q)g[
 g0S
I LQ
R~$H
pja<
fc|!
uQje 
|56b
hR'c
A*lD
IT"@d\
w*XK
}G6[b
\'=W}A
5TIh
'$srP
z%">
(vJ[H
|2btn,
;%NC
Qo5w
 9C]
(lE#
\kG0
PL?g
^QYJ
&pR?
fio'
RpN&
54tc
H@q6
\S'!
Pl6-
D@q3
1LK@
Z&%#
msm3
1}EtJ5
iw/M
GK`@
Wc{wo>
lMz3Rb
eUWC
6-'s
X=oe
-c-~
k*G)
X2T&
-DN1
BW/WL
*%o2
'%M:
b";1Kd4
gT.H
u<[@
Mq,d]
~zd33'
6'fhW
br\}
/7>W
$a%F
fhaa
3LcM2,
gf5X
>%Y-t
M&$g@
yFp!
FkN>n
)&>^
5qta
<h#1
(H>+
*rWd6
\`_H
v^Q9
*%{M
GH:D 
bzYr
<q _
9XdEJH
a(g/
Sm`1
&Bb1]
vZiJ
jlI?M
OQm!
|Tt0
0IxT
Zx}^?
	EGG
(vxt-
-^o%
	S	7h<t
<Bq#@
{y+U6
1:|R4
s$p`
qu1&
MbJ8
8{H&
96Wi
`xn6
'U7U_
%aB6
W({&j
a0k>
5BAv
L[~Q
FPY.
Q+Ll
{q6C{9
:s)y
70lp
}ZKR
9H "
IJ?A
|SuOh
we$C[!=
yq+Iw
u1+O
2K"j"
E/xr
G,aB
MtK/
ayt@
fL&%
g+S%
j		X
0(e}T< 
A!Zh!
_vyW
1J5T3
UJ6o^
S$A+
U\&}L
oJOv
@B_s,a
kle?_
qfQ-Z
=C;]L
TvbX
a0S`
NE`Vn
leZBb
T^lBG
l=Ys4,
gF{Ai
rUx)"
bfI2
#7y{
4&Uu
ebfsw`
	g[d
YB6e
yOmu
{MnQV
Z\uK
1$p#'E
UJN>
 I!2O
a@QPA
\?Y'
v;@h
&x'H
pY*%
*@yi
_MY"g
XBqlI
i,6z
b,3}
mbvGM
@h$@)
XYvGJ
2+~[
DADi
/65G
vJ=M%
ic-e
1U_'wU
{le'V
v/6%F
lNHB
jhAd
5%Ml
D3$Ct cH
9uzA
Xli,
r^>b
X91P
uvl5
t|V`{
WU\^
u4Q2|
w3sU
w~AJ
UQBi
RF(UVp
lp0ZJ
5&mgJ
(V6@l
NQqta4S
6AtH[f
t-bZ@
l|v{:z
SnMG7
h.6lx
`6`\#w
lM&\
~[dA
	>$*G1
#o&KT
zhF}9B
wwCd
oj3/<
oV7N
9e& 
H:3	
2G7P
$NwN
%e'p
.eZ5#
'-^_
~ZGW
N{p1
OXS1
o^JT
#a#v
h_\/
&7jr
STN*;
0)jt
IFa,
/=8=
cy0 
Nj3<u
T4hm
MUdy
-97G.
$2);1
6[tCc
6d$K
#v/8C
LVs|?
=T	NT
rP"T
Y%5>
o/d|
b;Bt]
PHqMHe
3mp9
Cp1i
tg0;[N
!^#%
/?U}
4-J*,z
trc!
#X]g
eMO7
+(-]
OZu+
7wxO
:%`M
(DoT
GGI)
#\:Rh
t0|z
|]~q
H;G1
.Y3pe
,Z8B
ughJR[|8>
cP<}
bkH#
X/iIp
%eI+
'm1P
K 34
8I'1h
L~MQ
H6\|
LRj$
`;{5
7%lW
n3nC
c!%{
Hi))
M:tYlo
NZy[
A]3I&
Wo)Tp
&,Knf
GX3i
'>7>
X7_vP
[T(j
`23|M
glb}
:JNs
M8>]
D(m>i
4c6$
l-1|
((tJT
=Cl<0
#CvHj
haOV
1!Yvf
^+1|
&]2lK
nSv#O`<D
=	u]k
SpKg
YlI9E
I	j0p
#r/O
DRHB'd
vZm*
#IQ	z1
r)i>
lhSa
ync"
S1h+.
5|4*W
t<$Z
	KIG
#nmY
E []
[Dto1
uyCC6Ia
D33.h
f=kM?
K1::&L
\|v-
"'F4
3UWI
yL"Ya
kPvUHO+
GaVN<
x:K:HmDH
*z&5
JhHm?
E:;@
8Im]
$jC~
khmC 
n{]OVL
}>$	;QG
%*uo
LNZxn$,
gX:'
PF7y
~Y4p
@#+N
T@}(
|Gc*p
0~UcZ7
@ynq$g$X
25 !
XR[lG
TH%j
-`RR
l-"B
,KN2
r,50}
W0"5
$:(#
37YSp
]?16
+H?D
}&bP
A+o$\9
szBeMGt
:|7=P
`sW1d
l=7E
tHFDx)f+p
TLqKIW`
Se(C
%>#x
Iit#
*;~+
Xdr"
nZo[
V)X!
x[yY
!a1wg
>ib8
RzQ}
$[9e
[/TG0B
`Gwom
 SsZ
O)%q
2d>a~5Pe
=#wG
RLKE
;"R	#-
4$aJI7@:
eIh`
{x@M
*!+VemzNd
)Yhc
EYR)
*}7a
1LF%
p/Pe
|ql@fLk
E	WM
o,;1
F/sR\
9~rz
~a<!
-&Al
B6SR
Tu#o
QYr]
3gH,
SZY,
D;Fg
Nq/x
@~5c=
J!KL`:
u3ItMZ
Ay+e
ocG;p
a{o_(s0	
lP@J
@Gp\itv8
q3|w
_}b\
Hz5u
E !r^
[>F	Y
_#%9
R@P&
<XoL
L9!G
>q%E
aFgyh
s'OB
r`9#
e.['
"bU1D
_K|9
P3&, 
2q=[
&E, Z
r2#>`
OGoJ
HJ'I
zOc<R
R.{f
sp;~
,SID
I	iF
Tw2W
ud_|	u7-
ZKV@
S>Q TWyBP}d
ihT#{^
['0\+
:V^(
d0djA
\p9I
${uu
D\EV1
d^fE
)+~@
Kb6X}
T}`oE1S
[=]t
3PY_}
]1(%,+
t(^Hxz
ut"9
}BLc
X_JM
q+vU
Gp-Wm
OLGL
\=F{K
lGCk
!?a)
<k25
CmZa
'5nR\
pC_HGv
#|!F
JtVu
M~?;>
TvjA
>u~\jn
_1ea
R/!M9
nlp.;
#	JQ7
mXR!
h!0g
WqoK
tQn}
&&5}
X""*
P;hE
+6r-k5
1K4Se
Ig}F
dhB$o
Vg4w
-?ya
U2c0u
e1-q
AVZ J
$.;F
2jIw}n4
_aQj
lv7[
hG/vZK
>MB]
PUJ#C
9|'U
SXf+
>Cw[
WYd8\
y8}R
.Dg[
6nDQ
`]C4
F9Y-
@_Q~
Y*e'x
Vho]
3?Ot
R7o^-V
HS	m
[]Nr
Ajc"
%eCp
p>mY
-'&Pt
xe	a
PNZ?vP
oFLQ 
UwpKH
z+0=
@N[)g
hQsX
}}[B%	Y
U-%Bj
>)U~j
?sca
atgt
582'
]3jR=
_}|fb
?.8.
$tiF
{Cm0Z*
`b@p
.n/m
OlL~
`1P}
TTfW7J
w9d@
||;l
	XC#Z'
yb+N
fZv;
}">]
$gxc8
&L>Etz?5M
y*#N
IC<b[
Vv=-
f^"O
\Qv>
wvlc<S<
3<c"
O$LM
3G $#hV
ML+z
:?z-1
~(i*{
[Uf=
xK:L
%~>j
;1B6
[Lvz
'`a{
I4ZS
UrsFC
|s{qx~-
MM$M"/
bO~%
UpWR`
`w8R
aXKA6
|T&z
Yw	v
u|f2
) 'rO
j4*j
aa5{j
7l|9
Rbk%
e{i5*
[	;b
	B^G
eg<>
7n	sH
 sue
+cX1w
>e7*
_olt
50,'
;22CJ
3nEg
EYBn
[Ns]i
Pkz&
^z7E
"WD}_;$
32Gm<I
+B(U
pz{1s
:!+{KN
b, =W
ih0~
?%{%
zK	n+
'L-	
m92q
(XP^t
]PCFh
u3vzu
_+D7
.$^f1
848y
O8Eh@q
;[&b
Q|je
-eKB
4OA2q
fiY3}c
aEYC
BLd|V
,B%dW
'<	Nd$
uE@@Dq2G I7`
aQ"=
^i9?
)<6L
cUe<.d
KXMs
z>6.4
nM28v+
xgQV
~C7[
!l9.
I,`]X	,G#
8/cC-Aa
:ZJU
"ul~
g*n)x
H"iWI
>P\J0I
&~|&
;TDq
yW$yL
RY(I
0m	-j
5#LT
fC+ci$
8*8*
'\$	
]IT{
4;\<e0
{?@c
~3J:
5*3`
7NOh
y}}_
q\QBX
)p]W{K
h8Zk
J;f?Uw8
qT*:j):
/+o!e
NFUH
`<0u
ZC&ok
^5W0U
S|/!
W"^+#
w~n&1
=fU5
PgUm'g
U5;N{
3=G2
w?qA
3IL:
i5=}
[|#*C,v
f_G?
%%9I
Ogs rtA
c"pmM
vW%q
hTKW
ueAw
5Iu_r
\b![,O
G6^@
Li9S-
R[2/
N&V*
G(/Si
MQ`Kd
7Zrv
BWBN\
`	cjH
BUL>+T[rF
Z\xn
_y2+
sG%uF
Pk5%
%J@9=K`ey
iqdM)
sL!v
z%y}
U5&_
!o`<
aZCY
t0XH
ZjkzX
ZA4G)
4th`?a^
Ld'u
}2?aB
;	,r
%irU
0LW=
;vm]
NI2VM
KnYU")
22g4
yX:w:
+wlw
Nk*g
S/A{w
q9em&
\H:X!
oc?F]
##V7
v[)+
!ZKa=mZ
P;Q +c
!Al	
Yui4
,h{>
/-P":
/\Ypa
t^E]
s4Ag
o6'|.{/
yu-Ba
Ai9T
4o}2!e
}/".z
&%l,.
%wdE
zb4rO
^Oh9
!%lo
4W9B
N-'rOdK
[|Y5
2zC;U
o;Ky
<H:r
4PDZ
XY+Qx:
l8oL
} #v
`M8Q
z(gwz3:l
VLDO
$uNY
/y55
,",M
E.\#0m
 UBVW
;PJf
<v=M6
^J?W
0N:J
PH4A
pLB"
G{&=
zk^Q
E<a?
@q~X&
o#J2
3<j&
L'@\
&CpR
2OA"
TD"T
!$o	
"3DUfw`
_CONSOLE
c_t`M
)__!
4D6ZW
i]lR
i%?k
,:pkY
SY*\V)*
iDKh
6AVT
 ~Co
"\[kw
<U\Q
?CQ$
DbQ.1
T"KpW
k^_Pd
<w4h
[&P 
+J$hS
UTRtY
/ZYf
TqpB\Q
	zwl.a
s(jm
BQKeev
9.Un
(%f^:
Gn,U
I:~n
v!N=
&[)af
VXbh
sNq{0G
_)Si,-
pDY4
^x'CK%Pw
/c}`
wj7!
9r>M
<Dgdq
l	Nbdb
Y	_V
Lb^S
gHo0
Lg<+*:
#msdE
5l3`
M,By
$[\K
D=0}
K[!qxzM
n(wD
2[_`
>`F	[
CedcE
)GY7
KZM7
/lkju
PX1R
$ja}
&laU
<;O$Vz
9u8|
}&w:V
u	l*@:}i
S-$`F
,zjcY
g2Qs
'$58P-
(P~P
E90r
VBfA
7)@s;
1&*0
i)5:
^Gu2
|=:G
-Tz y
	Kd	
9seJx
:e;^
u:u+
2g(U
$8[E
y>o6FUy
bvqb+
<vL:
o{*N~'&
6{u\q
vAlA
[b#*
irga'
Hzoq
xh8u
"TP`[Q
U$C^f
5s4P
&n3Op
lrCn9
*[:7
i5.>	
cFI1
H'|[aB
-)&~&
7DvkcJJ
{DcF
J<#%I
:TNfX
8 Bv
 V|U
>HDK
%Zaf
Vwwe
jQ=1
EYck
CJ9?
/:lh
iS>j
q%f]
7%+?9W
TS&N.`
7(0fb
WWO /
QaJZ
Yj9x
//@D
fG,MFGZ
;Z4=
Euo!
_DD*
^oZz0
KjWf
dRz%
yzAF
.,LZ^
3Pza
1H~)
R?X}
$.^g
H[l-
O?Z/
{UnP
GEZmF
/.(N:
`A0]
?3)aR
5P}fw
ux{Fv
(ZV[((
!f@"
X@=!a
'sV\
5		E.
hVzV
%a$*
p"1l
C/VGacT
c(mg
%/32
;=Y8
_V3B
>U;2
i 2k
dp7xC
9.GP
=VAmj
fcvwo
gLMu
|m8|
A[`?
9'rg
P+6z
i8~X
yK258
rB"t
qP_`
:uWl
thR\
[)7H
_9[F
sOqm
`/qF
obEap
$]Mj
yf04
|3Z<
KY?&
M$4N
aI$&
2e*N
O;0FQ_
sB7_
aRA>
!|yI
.l*+o
tnlT
2{=2
W]<D
=Q1|;pD
f3#<
BKKO
]L\6
Ka]5
JjSI
1Zy 
EWGY
fTb8)R
Kf#y)
64?{
fiT`K
$A:iu
':8F*
	SA`
Y	J 
$8~T
F"&Vm
,=:)>
h3}i
VMoogv
d~T4
W&lz
 a8o,A
!`4)>
p98..fT
g{q=
Yq? kpp
s>	f{	\f"
/E9;
1#s#
V"K3
imK\
eFP^
0Azs
v6BBB
xZEI
vI=|
U~$>
9gB*
-^2@L
WFenM
EG#u
	xl8
aWg#
+:Sb
	>4P
`Qx?
#FAx"
qP|{
$U0-A
/@b|
j{cF)T
sREs
'gl&
Xuq8Z;
}b]ol
>d/sz
B`3Ix
KJ/`
4D>tV	
_t8T
Str	
I/S#GX
0u!Q
OsIJ
iuOR
K?0)|
V>(D}
EIx$o
l4ZC
@nYB
}]m;
l~JZ
4oWv
cs[^
,)WT
WDk%
f82_'S
Is]mY
 `31
O%u|3
Q2In
*7~@
oOvs
mY3.
xAsu
B`#|
KT8j
IJoT
Mr`S?n|5
Wx`T
)vIPms
aWx}
0}"::
'FIcl.
'b9KR5m
M8&j
tPjL	
Zw;.a<
R3n)
B^*V
@8Yf
FhvI!:Qc
@YfT
:Cv9
9g(I
e65j
Uk^<
shP"OP~;
?E1-]
7dk.
,aKkIb!* <
hj6Eo`
Z68`w
hVs"
0ljW
~)Iz
}qD`/Ab/
C?NC*
7tt?I
#`W$
v7eIOM
(!CZ
"3DUfw`
_CONSOLE
&OFI2
~K93
-[VZ
8k|V
(3at
:h3v
0Ym6
=puB
'Z;h
^0>2
e|nZ
i2_v
5#0Q
[?A#
Oz3N
L'>w
d?3:
=zYn
WK&6?
!]1bK
4%;(P
YMC[$
h2W9O
S3~qK
JXin
#&Ud
K~dn),
jHlb
Q12$
7la_
JCy1|b]a
lkp[
]Lnw
e>ts
XT\)G
+j&\
(V+>
31T;s
"T<q
[Q+j
8	P:!
pIPd
S,,3
R7uKn
8K51
]-d*
)c%H
m~2X
Gxv 
^JcK
aOFzXo
e@k>
bg!S
<ab"
6m"D
^xH, nZ
`{H\
/gdk
|84T$l
*44$
)"Wn
yR0G
~hoy,
X_Z4
NEmX[
8ug|
cS'^
2aco
R>}8o
3snq
#xN>
1K{y
B_QQT
8D,W
]eK_
	IA))
{?p~
Fr6m
y]Lu
3TwRX
`'AgWJ
~Z]jV
P`!MI1
2mUD
JlqH
|"rI
phrhX
97Zb
^Op(
REOi
%R#@
FU:.xFw
H^{^"i
}I|O
|:`vK|$xZ
E67y
Q1@_X
GBL^
Sb-CU
L2dhGV
eTaY
qNV 
>a*l
r`H}
;Km/
"_6v
Z1zG
lzvN
/hns
QCg~
1V,&
g1X%
@iTS
+l[T
*XK.
bRq])
{gpq
gT{l
J|"| 
79Uy
k(	^
+/ZQ=2
}gkV
in]Y
Jcr1
K$ .J
=,/ 
SD/z
-9 n
@Iq@
%:NAAI
k?.J;s
C]MZ
dLA$vq[
!o!jy
|,M8z
?Wg3
@".`w
iL+ZJ
z)wk
3~R`
r40*
[6#s>k
]NnZ
P'0J
Ep{B
3&L@
44T!rb
#EnbHf
hN;P
g*M.
A5Dc?eK=sF
_a1e
#=a1
t--~:
/;|t
|-Nu
V/5'
!"1p
@)hXFr
:Gf{
4V8i
IHTF
g<<c
UOF=!&
U"!<
pzbJ]A
2/:h9
=R'1O'
MUWz
gvOX
Eh4t
N[km
Fgcj
kj%'$6m
u[hm
\BU]
MNN*
P$P}
R4Eh
f~c$
J_BfO
J<J#
F&@L
7"9d
8f;ntW
Wop\
hX.Q
qh`rr
:h'c
$Hd$
	]67
`	x]
l7Jg
r?_;*mI
R/ &
eS\M
Tsa{
T !N
;N3)H
0#Ah
}{+0
jM|`
m8	`
^R"jo
'N}^
V=E8
VhLA
q:?4
Z-{O17G
93rc!
vi;Id]
j?E.
Fo9d
Qf;;x
T$ar
-mP)
owI`V=
on4q
aW"+]
e&D4
EE;K#
(Q0N
X.WDFS
^PA|
.Vk!
]7x8
KPUGsFY
hrabI
,I|\
1X_V
Phc_
9	P=
ax(]
0X`&
<]p(
<eb1d\x
FLrR
FkJ"
H$FE
&M\3Q
z} _
a)F'
zW>;
Mure
byDi
MN5nJ
qk5$
n/xw(l
MMa)
A9RG
{4}_%B
!NA;
lB	l
SW8C_$
rqDt7
Dr/Nf
WLmxA
fn}Ir:o
yMN~
!Rrd
V)"{
+Qa1T~/5b
1G3A`
ZQYf
giYx
k8&a
~]>a
ECvL
GY:.Rlo
V=YY!]l
}qv`
G.q@y8
@O}2/
OC7J
zHuJ
9# foet_xLGm
Q|onC
p]()q
dQ_V
#p8f1
7!>Ih
/A,c!9
b%aG
]By|
&Q=Q)
b.+!
 )A/
g,iSu
	=}U1
q+6If
9DVa"
8:O|
M6l-
"3DUfw`
_CONSOLE
Al[P
r"C	
'aJy
XT;{
{|S\
I,Rf
8i~p 
Bn#Qy
Qi6t1
Iz<)
!i6d
$'A 
w-tQ
lna/%
qwkM?
w<mUG*
m|ErT1
zoJHXy
pebw
eN?~
ZIZ@0
1w(7
	p]P
@!+Ah
"JIr}^
i1<-
!BO.
g+E2
<eL#3
wP,o
	* w
8kT(
0XK3x
pQ6Z
k27D>
?Bhf
Z{ETM
[Pln
"gu\
5^:_
uznj
0%Ja
"<8j
iqJa
ZW?n
.4{|I
?~wp
$C+o
LGw6~1
 ]zyKmM
\;oP
v,lx`+
\4{]>
)@m:
Poj]
7hUv
Z <i@
V2``
s(<Q
?e:+
"Xs[
HM!D
)2KNG-
jS=4g
r<qy]VZ
"_"["t
Q?>c(B&>K
k.Iw
WooX
K"0T
#Cxyc
/m`+
#>6O|kB
|s\N
W>N@
RdNf]g
;B'`
0@L|
Lf_]
Cqdz
m*N.
b!,y
s+q_
G<")
=<~I
ez|i
?$My
_(4E
A6Fy}R
0zgc
d^"Y
%u[i
J>"x
<G8><B
V=|{#
'A'+
1e-C/y
8lO\
<xCH?
V):6
u=es
ZLO7
^FD4
p'B~
P!9e!n
~!3d,
Z0X0
ADWe
5j)h
	P[]
qV\H
uYVdi
XrF@
mjvqf?Bp7
,XX3:V
W(_O
&Er+K
X6m*
%Y`U
:lg7gV
[&}~$
n={a
CXY#z
z0"R
[r>I
 jFl
)MI;
$x8:
Yrl&H
FMZ5
9ev#
HX^w
tfw 
B+0_^
-p60
XC7X.?
]w[@[
(!n6
qkB+
u[\S
h7"|
uZ_"/o@
('s`_V
Yb)f
@T)H
{SO Lb
5aK8
I2bj
l|kz
+}gN.
BTW6
OVCB
I}d"
sP/TP
`xCn
W*2[
A+C|
tA	HRT
w!p0
w^~s
X'8=
 Zz#
yHmm
=} O
*08)
x}.y
F[u.
bhFw
{',+g
YR)B
d#2H
A`an
>2SmO
Ol1x
t8xGS
motj
`H+~u
s_c|w
bl"T.7Q
NMu@)
,FA5
bg'^
&x&K
cflG
Ze	=
,x@Z"
GmbZl
Xw"z
8zYM(
l_Q"
cLkh=WIUw
 %@ 
/MqWI
F=y6T
kQ@X
L!bm
ql&?
zb,2
(8G?Y
3y4#
pS&D
=6}hl
pjAS*#
niA@:
b4TZ
1s%<
\k#1
)AQ>
}\,d
cCxw
SYw/
_hv_
MC88
| t]
(G34r
v(/2
4tFCmo
w0A$
=#Z^
<EJ{
(_2)
i+d<;
/L03
hE^>L
8F;YI
;ZraV
Mr/]
F{1^K
	~dA
dD\&
%C :
~0x,
P`e@
Y,]*
otG9HL
hh&t
)Y9\
{rBi
{xS`
"e7<
x|=OXJ
.EN)=
_-qR
Bcc~
bcYu
rY|K 
hBX 
bugBI:
Dn@;
#_#h
!n4l
69LD
lt|Y
y1Q>8x
`_8t
BhR<
>.(@
Yt'0\
Yh+f'
CP1m
)"4<
l p$$F
 ).+
;3{<C
YK8*
W&^=
E];_
$n+c
db:`
eYcc
Jpbw
Zr$WP
.!6d
})wa
PguoW
,JXR
4DZ_
Ft}=
$I8@
jMm?
:z$1L
n,,e~
~LSi
`TVV
29P'
82L@e
?O;(
[,3w
x~Tn
8@0Jx
MzDmT
U}`7yNs
;!nG
/U!9
,&$t
"K$z!z|q
&~ 5
+Yh;
"3DUfw`
_CONSOLE
\Ms|
p(gL
IzXeg
}~nv(
7kk/
U3j2
!4N-$
@G>,
(=-TYQ
F(B6L
"$H	l
bQ-%^
A^#i
#+-=
{|K#
CMLo
mVCe/
FXY+H
SQ94
!r;~
;15Z
}?G<R
EJ/~
i;DaI
3'MA
N?A})
bGYZ
dlo%	U
5q,bx
9'^G`
*bs)
[6%"W
3EA"
k*DoP
=N%9
X:>;9
Xqs*
Wqwp
i 3U
P:`Om
q6!Y
fAJy
k!LW
z2Gfa
f?n;AC
h|JP
nEt+
!'@A
.N`+
;H%/
p$7R
OD3^YZ
,UJ2c
wh1g
!Iw}S
r$8~
4{g'
"9/n
\I|D
u:P7d
s5r~
/te<
N.=l?K
P	a*B#
>Fm`}
\I^_
&)C4
_\QK
VzPK
Z=(C
(|S$
Wg2O
q)ZY
".dh
{h!B>
{{#z
RFEf
]gYg
5eEal
#V6t 
a)6,n
-jL]5
T<<38
k+{YlT
d+^ 
uHX!
YB4y
n|fe)%V
}I,=
x"%$
mb44
~jbW
9+Zc7
N5tI
h0y|
1\+.
+']^+
:0@M)0"
j{qb
(8	,
F17i
-;C*
aD.'I
!i!)
yfj>oSy
]/CbZ
6FRy
cn8M#
.:^_
FjB=o
o%pM
)IL%7
_S@Qi.DZ
02k`/
EGw%~
J.}:-|
);T7.7
7p?m
,%Vo
}aLMH
kNhS2%
tkj4{
qNKp)
z{47
|u[0
L'\T
M(>K
!Z6Z.
\Qza
^	\V
?2HD
X6:M
~]{j
8IoBT
nl}M
}'hB
8#&p
jwf8p
@tj)
/L[:
>!6^
8F{VA
+{%y
LHC+%q
?:KnLJU
%G+)E6
m"J4
'E&x,
<}XL*
=^n$j
Kx6^
f@J/ 
.,@	rud
2FPSH
9UM?ca
GjjG
5f" 
9ZMP
<wLF L
Y1Ht
=w8=
ZF\-
G>lq
t(V!~S
p?I/
'"\'O
E[($WG
<l~N,
2%m?
9o9J
.+q!7
0^IZ
	mps
N}t;
 q&M
|5L7U
G&52
 ^UW
\=l7
W@g-<
\53\
(t1S
e`!	
f"?z5
jWDq
XNev
&s_G{"
RH6H
G;<M
xe?lIC
rAGc
,-@<
:3s,u
/ts5
=Kkd
qt|N
n.zV,w
o`R{C(J
"3DUfw`
_CONSOLE
'U4JZ
GK_2
<CP%
B8AxB
bl@E
3,xz
I1O{j0
j$n_|
9Nm=
?NnF
v`us
nJUAp@|k{y
.5,*
lrXm
q2hf
D'o2OF
8ZiQ
 OZL
lY7{
:rY$IZg^4
w=18
4?O:
'C1c~
OyCC
`0b5
:Fk<
.5{%
9([%zS
V.+k
c`#9
R,(<
O"XR@
h)1y
[_WN
C~bg;I
b0=<
59=Y
5HMmHW
t:\`
0dz_z
s~?o
/ t#
!|B:
K_	6
"+I>`X,
K$[ux
hLyY
:x	|
Xmoo
S1A!
S?.f=&H
7X.PF
U$ODj
prHNf
*ZQs
d\66
z,|k`
oH0c=
(1_k
$}}g
dM&?
1+6#
{cc`
Q04[
\tl,L
'<`s
&*Sj
X/'U
Telt
.x6lQ
dACO
~UX\
I9ge
3}aq
to#L
Y{C5c
V~-!%
gn'E
_1kz
.<Xl
RE`}
k;a:g^8
Et1SM
~HGt+
;3L(
n	cN(
s;6~
>oLt
-tsQf
GGjeN
2_-M
ifJ@~
!u(|;
f'oi
dQ%OX#^
8N1E.
W|;+
<<M*
Fod9
nl6 
/Pan
jvP0
V^Oj
/lbA
AKC*
'RF.,
A 2PL7
p?Rj
6FEi
X<V6
a)#jX
=$ZfWu
U2xM
0%R|
VWC>
05Z+
4Ys&
kGI+
p.I+R
a;D^
G~'S
MbJ4
a9D:
h9`.E
&43|
wA5F
FSH:
9kkr
s;,(
@H),>
=HMn)
xeELw
C}nlz+v
^(u\
a\7Uv
^Q(d
ipFh
W	pDt
[%G*
yW.b
&v}\
lvSI$
d8P)F
g* Z
+Bv3G
%$]_K
akg@ge.`
Z!t&
W&.p=
eB%m
X=_"
j)Bv
V!I7#
:L/79
FY3@
z6B.
u}m4
x+g$
(5^J
u8p7
fyg!
)v--
%/n9
;`?h
|m{"
6	|l
K$?Z
'3R>r
m$w?
qF! 
LAHjL
\V?O
7@nh]
n1zC
'7/t
/.GqKSiX?
eWir
$@MQ
Boq@
yp?H
qJ:;
u$9"
ur\D
qN[C
ITd!
M8.X1k
-IVo
_V"|
 ?RJonQ
oYd;c
^-Ys%
g}7qGl
*8F&IK
^rxFka
SYKO
~_="
,vsk
z9,b
d=i7
 drp
#.M&
q@j1
Cgfw
=Ku77
.&7^
n5G4
@q7@
TC$Lt
Weh{
)l:U4
4JJE(
k?|D
@>='
?OCI
'3 8OI
U1b18
*w]*
IW#-
(BX+el
M7}P
70C~
yIa@
Q1W0f_
JhB$
HZ=XKL
*"%=
cv2_
M!xE
GH,2OTCDv?
=:bB
BHVP*
gCKS
-R^ B*
|S[J;
w 2f
ZjGt
\~%]s
r{vW
PJaZk$
3Sz26k
]O&\
Ed@	
nDRo
l_HQ
h9xikv'
Y+_@>
5dKO
12_p
CxqY
*dTWGPn
Yak}
b.rA
_D3B$
W\%?
>c2>
c(]N
a1Kl
z?"TOM{
))pm
_^1!i@
[v#*
#^lK
#MBWB
Ygvf
(Y/7
?S\N
WP&<
Qr	J{]
;88D
Uirv
DvYz
\`.l
[cSv
B1\U_
j)1h
W6OH
G]])
Z]l]
or=~
QjG?6C
t/8PC
@X)y`%
D`.?
YL	`
g:>f
9F!g
2h+<-}
C3}o
"3DUfw`9b
_CONSOLE
vy}L
F)@I
r]`zx
8:Ugh0
Ukdq
$^eO
Eb{|
Krr#
%SBWk
$p&$
1("_0P
Xywp
zrW[
db8k
`&&V
K1LD
YP=KN
=!6[:-
r&Zu
4,H5a
>Fi8#EaWUqK+
jOF1
M#ML
-v_@m,B
'uaW
e!kdM9r
uv<^
cWa&
{[WK
|r|/
/Rw2
pE#Fy
7^ongn*
%DD9
'1*e^
>QY.-
nFrU
H!ql(!
E;jH
,4eDW
4mc	-i
J'|X
;AHF3
p}'lF-
s'|P7
ZU"0
:	#b
Zz/*
,Cas
}!*R
mI}s
DS5 
xjqm
LE~P
aCfi
SI;O
0}U%
"8_'
^\0H
LB#F
6[qZ
|u[Y
L QJ
n/t8
hXI)t
&&3X
f|FO
}B+8
~]9I
=CqH
@U.h
T-#.G
JV w?
=0^Nr
I@+^
IO<*k
MXnV
0s9%
E@^*
ANr~
4*nt
g9~2
D/,3
?vP:g
@9kV
}nNeh{e
gTWj
J"%.
Ec (
Qy4@g
~S <
-~*N7WT
}[]!
*p.uH'
h'Eb
JA^h;
&1aL
pVbK
FNv%
{+\j
'gx2
WQV R
n8f5
4{wM,
eJcn
q7M:
oZZn+
M\Q<
QTos
\2sue
]6i7
X)Zg
}C'r
3LIE
[Qz5
",V#
3x[I
xPU}
Tg{Q
k@KfX]
/ZL)
1S'5D
sAuD
B&-D
Akbv
UM a
^.VD
x@J)
\``G
 (:N
G=b%
U(XRU9
L4<{1
6vdo
esZf{
9+R(
j4$x5
,oc7
*_FAj
mbPj
7H?EI
X8(	
;s?;
.\?G
=]kMoX
o/H	mVZ
0L)<D
t>[Q
<o5l2
 RyP
|=O-
4{bVh
0EYQ
)Z.BM
%Rtd
g4 x
F55N
 zZ.
WtO(
gj8}M
3?Gi
LcA8q=
PC>&n
mNMK
jH<1
{~c,H
+|%#
rEdT
/zD8-
W8bG
=TJ>
#bM!Z
.,$~c
}1g`
s3xM
)P)p,H768WT
Q0Kg&
TT$S
lJt*
_i/j
+4NR
6F -
bJkI
PXn@0=
#Cd7	X
qp)\Z
JNNa
4D,D
-=DG
Y`=	}
~m6	[
%Vdg
KXFG
]D18
N ^rvd
1 GG
1)_@wk
{ _g
wtrc
"oY}DYEv8*
V@B7
8D:|
D!qM
.p/g
.dMeAC
>zzL
c]o%tG
E1-u
]A:9
5Pm*i:
+HMc
k'-Cp
WYH~
y=[;o;
K@2K
QcQ/
 ;2*
^5<;
}Fz5lV
\'1$dp
WC?|
g0D|
3d&\
	{nfJ
Jh`3
l{V2
}dSC
k~+j
*uM3
-oJW
z>3"
]pZwl'6
5D;g)
SYdGs7
Hp1q
5o{(v/b
}c6U
  TQ*
vY{Qh
-rY 
 XvAA-h
d*Mc
"EgM
^\r8Z
wu1Q
p;G?am
"aki\
Vg-]A
	r =*
h>Q%Q
pIhJ
%BhM!z
TlLd
D#Y.
1pnw
KU5O
G]7Q
R'\%n
KW^*
C8f\
~?3%
8oEC6NK
P[$m
9c])
!DFh
e!>#
\LZ!a
vIR8
)\&r
 B6>
twI<
MX-O
*w7<
EV:O
F5E/
cOd^E
3^C[
	Bliq
6Wf'	RrjAo!|<
\G77
;!!F87
!:0N
J\u}
RB6I7>
waDP
l	Is
apw'
!Dvn
n"Ze
BOa;
E:[l
`w('
d}~	
zih~Ja
GD__K3
}lr&
zKM#
y]zGA
LX:xv
Dlu5N
"i} 
-uqG
=da>2wJ
I2v\
V1'|
=6D;
<-Gq-
i6\QVa$
|l>_Zv*
!$-/V
^G%/
/z~}
VD$h
5YGl
D4)2l
#"ih
 tgdx
U<% 
tzM9
D`uA
R\%Ut
G/)%
"3DUfw`
_CONSOLE
(&k"
V'gB
_\bBI
YOE)0X
5\O,vwq
%j:nQ
Asp.
WCL]
wy?`I^
:~mj
!P,?
"tlV
[KgJ
H]38
!9vn
yW~e
MOi+
k6JV
Roa 
	;7;
IcYX
bONvL
o+fF
iCoi
.'$z 
n-(G
WMT)_
BhH~4
haA>
]Hy:
9`O&
pKuI
BB)S^o
plk>I
iV@3
8&YvP
^}o&lUQ
2B`z^
z"%5
\t~1r
CI9V
Y`SF~=+
V)hM
GfO}u
w~_HK
[:vXl`
I2bC
\Jzi
lBMl
?]6o
#,qT&
a('3
+MnPFv
+-V[,_
v8?;
kACW
Z$[<
M!xu
j} NL
)mqQ
nRik
	(E?
5;Eh${lc
p	%2j
>=w7
[^mnFF
?iqhN
	swGb
!zJrm
j}$P
/<	&
r|XN
B!5e61Dj
AT]#
}+z]
l2x"
{EV.
Q^{4
<bea
<_h8
CD=I
dv+2
Qh\o
L3Rii
j!T{
NJ/BiM
8X^9
Hp:iK
//Pbh	
vxHf3"
h)sJX
ryt|x
]l\K
u8Wl
E'+g
0yhA9
-01$
F^` 
	An]
TT;vx
9`t-
DG/1
NC~M
6*L&
6sIq
vt5G
'`3I
i{KD
?!\v(
}9a!
OO6W
@D"kq
hwl8
n~RB
>cMw
M}_b3
pCyA
+A^:
MV*I
C3v/c
+S@j
m2%}9[a
u0Sb`
ZW9:q9
P+3n
z72|E
z7E`
*_$F.
uWU?x
N<=\
%ycN
jw1J
DoO}
F=:U<
RWJ O[
	b}% 
\_Dc
?)P[
p* <
)^[$
%MGs
:WuFH
u)<F
?PMMLn
OHC&
\l+|bs
2n!vg
5h#v
H3BN
Z'SEB
O(#w
2cEV
(&^w4
"h3Q
ZSOpl
Xh%8
P[q}O
Rb|<
3lvG
tO[e
glH';A	Q
SMe`
HP`J
&._~
!p,k<A-
;,=f_
Ch:O^
-NRX
NaP_
t{%3
tW&3
Gt,OZ{P
)I$r
X!=D
*N}-
H t.!	|
dL B\m
e{c_
	Py'd
u*5ez
PH5Gq
8fMX9
~jT}{=@
AmE,N~
	WX^
{5g	
Q&TQ
ix"Z
Li*?
3u`2
.JD$	
nW]b
s5[C
uV:_
|G9Iq"pe
8$>K
32)1
Qfi1l
aa~N
6VaNx
AG^g
j2fdHQ
w:.<
jHB-R
f[wyn
\-.R
_v:1
j`hI
v}EE
[EF~@
@B?{gGC
	g(;
s"72
fNQ3
yBRO
Z7X%
X)Pv"n
\`,N
]h%z
cYf?
$8jND8
MnA7
#(jl
cu<1s
WH%S
i7l>
mYY8
2&1c
%m8[)
lw*A
oH O
KP`.
~GE_
AMO7
sbKP
0,Ya?]
]cDl
94_(
<sPM
]f~F
Sc!#
&W\-B(
Z?rZV
GxT!
kfSE
TcY8
<.|w3Y
|xnQ
T&cT
lg#8
s'/m
y~'#Cs
|]FJ
J:/.
(uvr
JO-O?S
@[@=>a'
M>ZL
y5ym
cU1I
Rn=	t
3*/Qyf
qW	D"
b$;3{|
%|mP
qV9@U
4'1]J
&'1?
cXik;
v`"gfV
Wg_Wh!
-33[
	t~#
PWOA
f9</g
eEon
E]kU
$,NuW
UzRPwb
9T>'
mTdA
&w|}
z0pv	@'&
(~z9
dbUK
1^DEt<+`
c+\p
f.JdA
|	J]
@heg3$t
a&yk
;t 	
wQ6?
ZKrBIJ(y
03lQ
q 'Du
~f4b
8W30
tOh2
G5,M
gtBC
!>7<0
	?Pc
i6o&
2!HoO
.EC~OK
"3DUfw`
l>JY
_CONSOLE
/aPM AR3
:(XQ
N?/,
{\sR>
eSmuc@
( rm
a8q}
&Z}k
JY B
 lL]
Hi5:
$'/~+
6\5w
x!Cl
5HBf
L!~:
;$qd
rQ$G
-Wct
kVy&A
*/i7b>9N
9yj"i
P,T9
3<Q=
kcojEs
	kqq
,gE?{
8W6O
/-6V
`B)h
\$8V
!w64
R\[kr
n3F/r
>%?k
&~Fys
:}Jk
Nb{1c
l1$s
y	CA+
#]}L-
/P?xq
v]pa7
3Vjkt
EZcj
20JE
IerJ'
-anz9
e!n|
s<Dp
Oc1UY
$Rk	b
t"iA
Vn%d
ue+1
e+&-
T2Vx
=	m?
{O^`
fj7k%+vm<
R*8g3
;kur
x[oE7'
UJU1
cItG
H!n2
37|=
5GnC
^(^[
Jxy<X
`x[y
vl0c&
<Qlm
Iwjn
Xixj
C3x_
[k(2
7ERA2
k\gV
Y~AC\#
tC_c?
z!q3w
f1Vq
/JzZ
!`)Rb
f7.Sl
DBFyBJJ
g=miJ
dHo"n
x1IV`w(
Ln|	
?STB
y[@-
1="i
qyDv
	w!]
(X	n
2k6q
_D0$
pSu;
0I*Jpw
S>(b
v*}NB
9L3c
b~AV\*
RMpv
se|"
pl@k
vmiS
]Hot
$Mhb
7m<_
35e^
ITKY
|d+[aQ
LRsL
-b!6
/*+,
<@cSeZ
.xtH
]f(+\9%%
bG4N
FozD
5QfA
C#lIg
?*Bm
P<A;
lGQJ
^@"p,q
6E)"
ObL"
:a<9-
v1`_+g
.UUZ
P<3},J
G6?A
J&j],
!\i$
-'+m;]
_KN\
KHA<N
RL'i
;TR:s
Lt<npw
`W"7z
9Yubb
0^`^
O2g(
WYOr!'
Y}gb^
DRl~
/eU\
eNT9F;
Oc[j
c|:s
FKL1ufU,
sR:(R
 )HN
0Ch9wKS@$<
Qw0u?
b~+0
m|=t
}RZX
Iz$%Q
6$lh
+ B%9
?@~LeRc\
[>^I
u0iM
/	hB7
^	3d
DS$w
#=),W'
8llI
=z*5
cxE7
-E#?X
#u/O
r"MY
>J+m
yVUm
gQ%m
SUH'
tBnl
}.;l!V
%bf!
+@>	
,vv4
*:AU;
]!5O
RCn%d/
/Ru/
iPckB
.YEj
1eiQ
})@W
JP'(
Oj"Af-
_]'q
o1ug
~H<Fa
@)/&
s+H6
[d)Vj
yh<F@7e2
E6hRj
'Cq]f
S$>h
p@oF~
K&sI
hu8_9
9\6M
m0hO
5JA3
p	TA
*q8,
}wPc
98OZ4y
sg,+
wef6
<E:~
A[{n
B~JF=y
E@41o
.:Ik
#nmU>B#
}yI?
tj*-c
	|6aMG
BK^E
0p	F
g+&'
KC4R
n]l;
1\nY
pVnzi
s<==
|xY~
nX$A
gfOS
>bjg
oj(gK
r.<,
gRv0i
FWx\6H!
9d~!
R\:`
I	Gi
&T^DCk1
.7= i
&a	T
q;W}n
c@s@
Zs%n
Kev0{
LXAZ[E
79Fk
hD5	x
Imk1
{k)n.d
KSg'H"M
0(YO
;vqK
Q3W_
i8;u
ps	V;&u
++xL
qRYz*
:k7pH!vy
9f|v
 VX,
-#eY/
"#KK
XJM}
u~&K
XRm'c
 2Gl
\uOM';
)>FS
u+(E
wdlZ
DZR<
5yA.
,7_5
=y 4
tu5#
]+y<
N7n&
e qj|
Zr>Ow
5"},~-
"P PX
6Sf+
8O \
-%rs
z5MG
xiWv\x
` EUy
a4?Rh
R.pB*
SX~1
VhZ=_
]-~_fG
MSQe
o'TaX
=+}%y*
(PaF
~=4]7!
|.I$o
l/0x
(f2D
Ocu`
3J$7
62	f
]MP(
3OT\fFA"
*&<e
<5I;
F;q8
S^~~>%
&R:H?}
f=8y/
gfpw
o uw~x~fB
AhZ"
3:l6u
e|M}
r_35
#gUc
14>|
_7UIB
}"o,
>axI
3dM}L
1?aS
.{v<
v5kUP
{iCYr
	Ybj^]}
I[	B
_otE
k, I
rIUr4G
sV2B
^p+^
RG1D
0! I
!&k&
X|yIN
Z+/f
}-]&q
WmK`
"Q-+
+j0r
 J/4
;9Xa
~?ODE
PtmV
k]<x
d$LM]us
!H{B
"3DUfw`w
_CONSOLE
vFG"
LGji{
qJ|G`<
P6L~
_m2%_a
jH5s
$8T%
qFn7
AY gC
\|p|
7{S2
4M~2
Nye 
4O`0
bsc]"
kGAu
=)&[m
0e>@h
=:,2
v8D^
NYWf
'S'4
n(Aq
5e:4
4#ua3m
|/Y 
9{Mv
krWY
!S:h6}
U..O;	
!cSk*}
P^)O(7
^o a
78\4a
s9I-
f+_9
@QoMd
^S6F
ah.:II
0:U-
bN,x9
hD4A`paU5
Z'p>?
R~C20i
8G$@
cH.G
XVRptT
c7_a
cQMs<
J9z~
M	<*\
`xiRS
<7y7
xdh<
2u;7
9HWM
W[-$/
@0Ax
BpCUY
II-Bf
(sg^
>;sZt
"}-3
wg_;
djCd
F{9j
FkoQ
zav-
\0dz
Y>	C98
kl}k
1f`u
eY1	
_{K:
H+\c
He9'
/'kG
4M =
1`(9
?rVs
nGpM
f)i|
-.zH
sSyK
*AXfSj#|y
LMx~
o!$<
 un@2
{k[.
-&tJU
IipM8
6,KU*
pV4/
nARt81
6x1:
<W}VK
 5p&
p~M=
%va0r~
m%o 
W2#+
?ZH[5A
J-e#i
Y8XW
gDo{:
>,] 
rBME
c?9-Z}Z
uZ6l
hqvB
opl'J
n)z^
+wxX
"!xOm
{QPwLj
M5`#k
q44~9
oKw4
!O D
K)[%~o
jv>RF
8E?#
hK<&
orB'
D>G&
:Wxk
/vHk
pyR\
rn+r
{&tH
%1^l
C	,:c;
#l,P
@>Qe
)kITT
]m o
1zt`vG
'v"M
 9dK
TYvQr
k0Oov
8)D	
@q*%V
"&""_7R
liWO
><=]O
*H.d
r+"c
C?19
2 { /
<sT2
Dd?d?
bp]0=
7&`\
,k0O
$|Zl
-*kn
x0sl
K@N^
97i:&
Pd<<
&,e<
[=\C
{ak<
	w@y
Vf`6
g\D+
)*\!P+
,LZp[}
JD/3\
(q+q
cZr-
\)k	O
.@n{
=v22
6qM"
J_'U
{q	q,3
c!cJ?1
:T+o
y!qY
obtE
GiPi
i`r	
!9[HQ
2&A=
Sp($
6Dq~w
9)KN
UD$S
:Di<
tNWE
:T3$
Oi_X
lK.G^
B=6$
+OVU
cvEX
m\Ku
)BjR0
2x:A
V5Or
^abT
^lgO
iK!X
HZBG
?G)hz
-W	B
m4=a
[[4e
YDjp
jK g0
g[I`{m
7xlV
6:3	
qC: 
&^J27
gwnh
Bj1s
 -Xv
X}{B
\=tOx
u1d}
 Ge"
H!bT
'|ik
t'F(
MlPx
N#$Y*-
G0]N
>i5rg$
T]97
W/T$
w=*+
jg3g
H}2'
,fo/
SOg'
	Y^E
k-e^ZR
i;)4
'B9Nb
\Aj{
c$b}
]Z#'
C_(F
>_f$
]'g<5
P=Zg
90N9
}!.PL
25fi43H7
J1r(
qL2X
SSQrjq$
gf(u
d'Uv
3W9;
te"sm
kRG"
av!$M
{LHp
3ZnV
|Ox$
RCY_>.
Ak6B
}8J`
/*jh
W'%x,
t4$*_	
~w>W
b,7i
i=	=.V
o4Ne
y y;
t?\B
3>9.ep
<99c
U6;Z
_wAk
b`y$
i8^A
#fJ!S
-nqGq
<j'a>A
{!E}m
z cld
x?ZY
D5dr@
%	R_
"\"*
sYxH
GHI(
73wE
1gv\
97Tn9
EB4%
~=x(
kI$.
0x$3=
@A@@4
mbLgQ
W{1S
"&__5m
3M}n
=:!zm
'ube
V5bkK
"3DUfw`
_CONSOLE
c&`N
l}^_p
gAtd
#2	p
'! }
g'=1)
i?m+;&'_j
{sa	G5
c8wGmC
fqRi
niS3
p?)K
_BbX
2E6^
oAfE
4Rt?58
2L`7X
DNnGz
vN95%
Dt,C
dLy)
/>44
IfY3`
W0v9
Pu\Z
Y%}q1
`>`K
2CW0}
5?C4\
g2Q^
U!b5
-n.$
7+X;J
"385mD}
CGO5
-Ed8
V=iA
C%.'
}GK_
yz$-"p+F
u1Ea
gD!9&
vy/*gQ
?`l?wN'W
ZqXJ~
/G:6
io\`>
_!sv]
Q>W6
D3IU
C{Swz
J<4; ]
Zq/c
\sA'
Mix]S
E 3g
dC%X
eF36
4814z
f({*@
!e7mDN
2S)|!
ZP{\
iAjU
~bCI"
[)yN
S9%@
<mwYC
"3DUfw`
_CONSOLE
%-n<
a.qd\
YX+L
/<QQb
s6ld4$
[Mp}rp
q|DZ
_?rT
UnEZ
&]>Y
g!{(
/W2*
V-c	j
1TXiWIi
YoTr9a
TxfJ
pXhN
DSJ~
p#`4
B|@=
jabQ
}b&ekx
ZbbO
x@V<
D^CQ
:i3LfG
0qM3
UN*A
[F%1
*Out
{v5F
0C9.
A>?/
0$jM
fC"{
D=(A
~\M%4
;O.sv
$d|!P
qGM-
@F3~
2.FF6
qy3m
V$E}hw%4t 
C &v`
9^n3
-AmO
tnSlmH
!fTu
/OR.
lU545)
Goy*
WY%K
E\k%9
^(SY
/W~{
-4p9
G+B-
g3I(
)@'Q
hb8M
So%S
t<'%
w?gI
4nBXy
LvbS4
~iYR
3	<@P
;%	6
 %wa
[BV{
02NP
`c`M
nm?~
pL6l
/>%c
},l#
	IxZ
S?n|
tc^&
_V `F
9o?2;
?hsp
sc#j
5+Bu
g97e`
X8	7
+]:J
P1=c
~	3K
]Y^c2
MhTAN
W8U>
M-+b
}v2n
ztp~c
vLx`
jcp(
	"\-(&
6{/O 
s~k{
S;Yz
f>&K
Njxs9
&K"}
z\>O
1]CJ
R}3j
!?-+
JZPZ~
8,G1
N K$
.1VN
aR"5 
w</m
Sk=|
`hU9]
~+xC
U5pU
oCY9\
kiRd
<HzP>
:(,x
m<=D
;`^=
)b\A
)|qsC0D<
^"GJ
R%&\
*wg*
7eA?
F9bY
Pe=o
frep
w@t?
PL^X\
=u[`s
OsW}
H}c,
Pou;
x-RcF
Xl6W
@[*='
5o7X
8ptG
Z$$-Qa
oLF^m
Q)ea
zy<]
'Gaop
Qq(#
+s!)0
Pzp[
FHP+W&
|#K2
>88<
J0#!
fqDXN
b'%7
f`T?r
?TZD
SmpS
?&)M
i%WaK$
dJZH_
zJ8u
9k C*$
.#Dk
i%P$
Yg1]
\4ml
Ch:x^	
/sET
t//*
hM+J4
jg,?WN
|oeO
39{X
-Ufr
U@\N
GnvM_	
6p?A	1F
,\y/cTX
S==E
IM3@G8
*fVM
OjLJ
n^rS.V&
1G	VuGc
+Z 1
6FcFd
V|h'X
%	fY
^vS#X
I4&hf
3`\(
Z(27
vGb5!ms
_HDB
"Tey</a
n,J;
hJMs
2m	:
q7M+
'k\p^D
%^fB
fX~p
'P,QF
kNf&^
FV@)v
3"d-
'RfS
5r_.
*X9'0
kagF
g&T|
	+\f
piG:
5rRx(
1Uu[
n6ijgW[
0~6*H
EvOc
qGlB-;]?
$vbUf
x7+j
q5Cl
*bW"
M	Lv]
[f&&
N6lu
{vSx]u
Ia!B
4++=
J:1D
"(5w
A!%(
)Pim
~QG}
-kp,{q
B*p@7/
[yavnf
|pn@
4./h
nvcB{
Y-<U
Hdn1
wZ}3	<m
5 Tax|
vBC'"
n1f/x
;983
vW	v}
V	2m^&
z>aC
pL HG
n3_^ .-
m}p&
u<wHE
6iv{
:z")
<f7	
+EFAR
BBT(
DZEXXDk
Iw'Z
x[Pkgx
4;^*
w2(~
aezAN=
^@dn+U}
5P[FC1
zE(:
N\Mz
V\db
QD'E
,};=7
4#F"
84chz
^Oqs
$ W>
o,(;
"^Xx
Aa!JAAg
;jt-
cragL:
/*:D=*q
4$&n
5gSj
 \'j
[Q94"
IQ	~
Q;X1@
uOXA
B1" H(r
y*bsqQI
=OR 
>fFr
;2NX]8P
)f6W
5lbp
Fso47
$LzZ
o0Yc
z{\$
KOvSO1W3
b-r 
BLq9
ssE@F
<F)1
-rl-
9rMz
X7HYuF
Z_X@
&"^}
HQzl
["/%
"3DUfw`?
_CONSOLE
I4o>
n)[Z
]M1gQ
fSh&
Kr5R
B>zb
J"j,^
	<M`L{
S(Va
~t.1@
|YrJ
x.(h
N*q"
+5h(
QPwFXKz
L%<8
1=p]
=h*+9U
~q_Xs`
x8*V
,('F
JRbar
s{Tc
D:~q~c
{q$0
ONVi+
_fdb
1	`7
/ EMe=
g3{C
7"o"
Kq[f
9zLms
n].m
M,.~
0D0M&
z}CEy
%LSx[
MKW#
4q.@
\@RP
|Ny^T
fdxRgg
[zaeU
'k%E AO=
9gUj
On`e
{9N>
P/z^
7"\g
}l[C
N%`H
{"|(L
`a[?
Uyn_*L
,al/
uJOKu
cVTx
zXsS
<|WR_%
5k:6
le0]
*"#fX
H:Y*q
ruzV
C'&/P
`G[*
Af}D
!BB 
]zvt
C0a]
ffo&
/cZOs
>Q*4
wJk_>
+cIO
I{3!6
IheA
sZK[
x5Ou
L=*6
PI[y
U:Crja
?@aT
{oy'
nDWW
.G52)
/W7[h
2Y#$
%9k[=
WCoQ
ASNN
5{6r
<g,[K
`\0-;
<pBp
~v%{j.
R]r3
/a~P{
[HhdH
Is|5*
}}V7
4	jd 
Ayb%
s97f
(D,`}
mw|/
rO-+i
9cv;
:4At
H=f.
IVT!m
g*xeY
Q>KW
l#<;
104nt
!|?c
:!`%
Bn:S
7qT]
1OJ(
;t="
(nnw
W(f2J
;Z#	
]7dSz6H
E{G4
O44(9~,
`)a]
bPWG
]Ux?
S0%L
&#0J,M;
[wJb\	
hY(>KO
U6x_
	oe%!
,4|+
k^&[
2TO\
=clA
y=R%
2	lA
*oXr
\'ODI
/c1^=++
SNg4
QpVNE
ZD[k
T$tl
(Fxi
y)z2
rw-&9
gR~{
RU%}@
?b>Ks
B61v
U.nL
YZl%
nB$'
14*Xe
N?o1
	)D6
@Usw9
L@Kre
+mH'^#
'1VH
K54>
,G%$S
Sx4&q
r74v:
^]5K
x@K+
]_ES
xrT$
@	cMG
|V?;
Tx\u
h=fk
<Dz,
LW-jp
!6qJ
#}*b
`oZ 
P8;) }n
F'bs
kc`	
l7<G
5n,e
At@i3
xB*q
J}%M>8{#lo
kEDHqvd
M9M3
9#FD
4&{S
?\!#
h~6_
<JT(
[K2]
c\8;j7x
Q	Hf
`bk;-
e?xn
wS	.."d
?i('
'i-$tG[
2{hJN
GUu5
zsmiB8
}qc,
vss.
0:t`
vZ`k
/X@9{!
GdG7S^
a; I=
|'|hK
i7g^
gu@)X
g;B)fk
+P>l
w+)Y
$qZK
g0`q
x-7xNj
q6Qj
/0QC
s-a$`
"M!Z
,s%U
n/dWc
MA_/
b{>j
ON*.t
S.qv
ed=M
J-l&y
f/S-
QJUw
b-	O
*4@RaYf9
AAG;
Sb2yl
*Uh9'
*hraW
w"t=
]kR3
:05i4
deJ2y"
DQ]Y
sxtZ
bKB4
/~mE
U5@nsy g7
#hB@
gbJ&.
P}l+_
K_9\
G)7{
bDKK
JV\9
IA=M
n%-{
P!:J
~}Dio
zo25
'>}M
<T<H=?`
zWU\m
h|vJF
n64a
2A|@8
7X1L
I~.7
[)&N
|_W1~
zW}EF:
tV5L	YPC:
R*k7
[EN>
K*\cL
4,(X
O F]
N?52
G:O#
a&}B
U|Z3
W+a+
$J/x82
hcUR"
H^gxx
e[zxWa
=`"c
=A$[T
qN{kb
n?[@
o.4t
uT_	&
?yS>
3/-A
g-+zJ
c^Te{e%L(8
O5z|`
",	|
Q0#S
CW0wO
dSos
g,Rj
VZ}~\
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585472726
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
"3DUfw`Z
_CONSOLE
&hnVVL
@ACR
||,Y
DtUu
nn	(B
56ui~
.1b$
0Z'CE
9`<:
e!$x
)PiW
D/=-\
nnu~&G
`P*GL
J8!s@?
E2%r
2s[YM
N~[	+nb
_Rls,q
s,20
RFmY
^Jf&
$kr+fq
"]p*!
L!Ga'
4hH>
<XArZa
*_U=
<g5G
G_.E
Weo2
/{c,
$P.~
kaAVYj
l>OL
U5X#
	cOl
=PqE
]+5~
|ck_CAw
 ,PE
5p	L
:'M	
\jADA
oOw73
\fk^
i_ l
+~C$V6
qB&p
bvw[o
h@	}
iZ/:
oKFP
M/1.
DtOQ
NQ{v
TcsU
E<:^
#>Se
.HjQ
CQh,
be$C
\kW/r
=8-Q
,3=*$c
X>'M
TS,.
GTDI
0q;@
8ZcS
cwde
<SF*xE23
LH5	!
[s_{
R;i	=
-'RL
RV*|
,%IV
HY|*
0'3,
1oB!n
Z[5Jg
}r&6
|)09
-#3D
*P)B@`
/E!@
IfeL
AR=s
"z+L
cn 8
\Q\z
VlU@D
|WBTN:
KV6K
%-2p
jkXp
]nc@
\nc0
nT(I
2"b4h^
+->\
 NjX^
5Ls?
K(@eR9
A1p&~Pg
5kKf
,;$v
}d.#
F3EZ
v12F
jnr\
=`vz
;jw.
=h9'>
FZ|?
|8>#&
-!<>
{LV.,
6M-1
t,D-
#_BK^J)
e)ZR
,#06
.W.[
'[y1W
$D`	
gJ-+
7a+OzT$
-^Ygw
_~P>WU
*Gr S
=HR$=
:X3z
N<?k
\4TH
':n?
af"@-
qQu@2
$D_*"
 pL0
j0g{
~Bn&h
c#Ts6
O,$<[
2Ssq
"`Z'	
wKHb
0WK]:
D`:~
^C4vAH
R6kp
2-n'6
!|J&f
GFj3
'34s
.pXxco
.h*EL
quW 
x/oR
d"T Z
7jP'V
~=>mps2Q+
W=?M
;8?'b
xlR>	
!`rY1
/P*a
/0kK
U0Be
%KBG
$9N/
VVml
IcnO
X7~G0
FJQ8v
n/*Q
Fr(|&l/;
F4U!=1
n^q>L
>!~k
\G6?
rMGc
QVJJ
Op/5.
N=49
o{ITMb
xfZH6
R\0c
z$HSo
Q>wd-E
n\K 
30Bb
N ]_ 
*]UdI
UhP*8
X?[d
,*1$
:4"2
In)[
H|PM
Jl%	
3<<=CA
bNDM
'Y]=
z4!,F
;`0L
'!+9
8Wm~
mwcfD
>=4k
3Im4;
u];'
*,EuvC5
TL $
M[cQ
yD0&
lmm32
S3'=
nY[k
8'1nuE
@B\W
[WU/4l
1iLO
t-0:
18G6
58TaV4B
>];>^
oz#t
-24>P
beC=
R'nb}"
(|gd
	2&zc
6_N-B
q+[&
{7L}
D?iE
CH8!
wp5=
J.T)2T
{Q;1
{GHW
BLVYMR)
4Z)A
u0!(
MsT?
8l/{
0lYwHF
Br ag
r_4/
^25q
Jr6j
[1oJ
v4zO
uO~v
XCUb
D~kb
|En)
8bI#
[F[u
it+jd
Tw.Zj_
f7_US=
i`Ny*
Zx#E5
:z4O
`ls_
:w:\
vH<3
v:JK
z]['"eW
j7mV
|6+2
wnSW
sGs%
XN';Es
VJXO
-EBO_
=oULoe"
PBnr
t)K0
y(ndR(
zmw,
S5!bYNFj0
,xO/
0}#j_
8\Y:
,z\U
X8aG
cxwa
`s?>2
/y@Xv
Uldv
9t8]
KzR\
SmZe
bD^T!@r`Q
{S^Lh
y+SX
j4de
renfo
&ydA
r L@
mv) i;c
+KA7
_]| $
*i3y
jO~I
Hhtg
c]!]@Kp
C:Ymb
X_)6@
8l,>#y
UL'J
?!LZ
-{Bv
"3DUfw`
_CONSOLE
C=Vll
|~FQM
=m~M
;7X|
DqD7z
^g;/!
'Elw
1/VI
yYzu=
#ng}T
%s_3
\+II
!!u]
bab:.
fXD~W
m	m?U
 zoY
)Fb	
G8;&
Q%mk
UU	X8
n5=y
00HqmI
S~Fhv
SEkT
9%k#
j#=2`J/
JsXi
5&8w
8!rS
;J)I-B
:bLP
'UZBB
MAhz\6
u@Xg
+\zew
;bJx
ugSJ
*wxMH
5LzT
	<w"O
hvm)g
!FB]
MY0y,
CA#g
.(;A
0lK#
f	S|-f
Dc6g
Nb-U
t( d
1"<a
h{$)>l
Js+@
$F?Y
m>r,
~j?p
g4Zf
SqF50
`Q, 
	aSGq
>TK}{
;J}Y@
Z`#3
aF=p?
d"~ 
]Bag
 tcV
1|Jh
BOA}R
]x+	
"~*F<
=dPzJ
PQqi*
z_G\
3I1j
a'VT
6Ap}
zcce
	+f P
L~Vf
VO/|
TU$M>E
zJ=zc
,S<[8n
]bO8
!"_um1
ESUQb
{u"#
a842Ik0
]u& 
\N8F
8&;4
/USs
kO,n|
?b0qSN<x
tCN-Y
PDB}
:z,q
f651sK(E
qncD"
FHE&tMC
LK?s
Qa"o
i@X,1d
h#Xk
l\hD}@
7|{"
hLGA
oDU.
@`-n
gujE
	_+	\
0&wK
}e##e
w[nk
#pA3
4o	~
{X\~?
Nl=n5
W[3q
Z62o4
(Z7Po
j4xx
wPBx
 =q"
  E6G
z*&VvT
I"8q
EWqdbe
WKer;
D[`@^
-Qf8`
^5`_4
x4\j
J5%\
JvhOZ
F	#)
V(Aw
Yu>!<
6rqs
Es`K8
1Smr
nEnp?5/
Cloi
8;7B
Qtu(
+H=y
+8kF
Z;q^7
y^uNe
O#/s
YeXD
PfgQ]1
^npO")
g/Zu
;oaw
VCF@
mzyh
p,3M
qws1
=~pI3|
E>-onvf
D9)2
Qk]D
&_r7"
=+53
#f|t
-x&w
JC(i*
G%|Oi
D`_s
/+t^
RR9&;
~ex\t
7y}]d
4R3:
wpY`t
\:R>
{g?w
\h{p
7@u 
HL^(C
7/%D
W2{l
RSW~
WT_[i+
iW`,
~#8"A
$EPIJ
%Ret
=R4-	
V\+|
S,E:
L0)E
2z7v
|x'5C
&ia$
1GW&
vnd_
jh?h
U0R}+
P%:L
unWQ
xS2#
Wy "K
bHXue
vx(}
F8Mr
2ETGO
)fqqu~
,&A&
w'c]0
JeQn
|A39
eU$o
(;oj
\\_F
c`1y
f1\T
n{)fZ
"vQmqX
Bv)B
h" j
VYii
_]W|
2\pw
g,Rz/
v@OaS
EcRz
l<&-1,Q
:lHB
M$vO
pG#nt3
>S!8k
n(G%
};ga
K1w#N
~4q0
yx:`
xk*>
1L*	=
AvtZ
Z\ ao
'c@Xd
 3vb#R
o77`,`-2=
E/_*
SgZ|
[!fn
@Kcz
v6DC
p4w}
\u(.t
	#;jE
t~?&
E41g
hPQc
N] b
c	a8aatnW
}ATf?rb
5cU/
)cMS
od|)u
ikZ*YJ
a_9c)
[4g`?.S
D=P;%
~*C4
noW+
6bW}
$[}2Kb
.acz
8+HW
@&nj
!3$U1
9b~/[
^eDJ
-8^Fg
hcm8+I#
2uKl
SC?,=
?IIu
jnsa
5pBX@
z@x	
w0-T
cex_
uM>HNI
f ;0Z
q&O4
;1"-
`Po`
_aR.
VqQ2
'Cn]
7S8F
,X4L,
=0b e\
MU?XW
B|kQ
*J==
bn`*
IBj 
F)M}
<2j[
$]co
m&`_#
$x`6
X}?tZ
3x0<
,,7$
![i`
f.S'[
IFg%3>
"3DUfw`
_CONSOLE
-=%V
0.Z7
([LT
Ozbl
8r0	
=wzy
`E;\M
:Nzcd{
xWMs
V	x<
F V>
XAHgw
7mYG
fbQ2and%
u5Gp
lF;/8`ws%-
>y*m
g!@?'
"VPIM
:sH^(
}}n9
<ttI
twn+z
T+Rf
#h.-
<A7;k
*AsrJ
]V%$
y1875
eTo	
;gZY@
/hUWZ
tS[Bp
KTN_
x`*r
CASZ6?
|~#y
%Hyf
vm}V
hj,EKO^
mv<'
\k:L
;3^(L'+yo
/Q'OO
Jh-A
)TFJu
DW5H
n{6d
XiU	^8D
rT~k
@;A9"P,
}d`~<
,lYf
)h{}vv
4fG_
}P[,'
Y%hy
/QkQ
3<+T
V$8#;
/3w7
29-VQ
6C1yE
dP"m
?=}f
eHs|
.7v`
/N%)n
uruZZ3E
7-~J
0(z4
@)cB
.f"+
0Y=R
zX~4
C=OB};]
CUfNz
C}	!
Uf\Y
*@3i
c:( 
Fz[p
Zi^e
it(2
5\82
s$CB9
L9vN>
Zm}Y
Ng"L
Y^,\
5+A*'"_
bLun	V
sPv-
^s_x
d73l
iZX\Kh
2w"8
(V{?s
9?Pa
lKj1Wwx
|1rt_
46~@E
M`v"
3/R<
zZRgoX
vz&*
y94 x
3Zij
sF3J
j;=N
TMZf
$mB]
OH6)"$
b(bBb
FGN+
5I@A
{QTq
\CWP
ZfsM)9=
Y@;b
s^.RV
M(hvT
K~r8H
:XZt9
J^G.QD
%R (?
)2BA
e{}_
JAiF
Wr8m
L9M4b
r}+)
qen1~
1MZ"
,y]azF
GbHPTo
wHt|mcp
h='C
lqql
$-2g_
IxkP
BZ){j
nT1J
^N0N
+a b
s2WH
;+~&
`q2_
	4Ta$
Yb	8
v/%K
ZWA_
q $&.
Q@@.
w~F|
';lU
g1&:
t'_^o=rB
z/ i
~6la
yv{8J
Fm_mk
Jb^.
5m!2NVQ
k50a
0WPU
&V<D
c+_G.~
<=6x?5
'w%{M
4c5j
h)lx
]R(_
nsoz
3pba
+~>Oa
_C}8
v%(@q
mIK@FjPzR
_*?w+
^Hrx
go	n
jm~?
Le&m
o#q+
Lv)x*
j WwFN
MoVW
\/U.
|gT#
|<t;
9Y0c
M)KN
MtRU
"sQG
"oCE
0<bz
j-*u
W&DE
C	h7
w8I	j
%xh6
(s}J;
m"W#
a"Yv4&
juLlw
9S4M
< hQA
v!w7z
TQi7@
46/=
Lfa3
{_\c9
9T@Sr
WMR#
j,$[FN'
2egj|
qcsI
H>@|x
N	V[0E
}.j|
U.ecs
D4wt
%;Wa
J>>?9V
udTQ?
Lsl	
xSvmw
4b7*{K#
9HKZ
`f),
R?@~
I;Ci~
#^Kg
8}?v
O;huE
!o	>
)Oc^
-9#t
xu$-
+9q+[
;82AS8T)
#p+j
RAj*E
g&^!
Ie{CjZ
-_FDy
yKM,
ONWH<D.
LLsk>
%:bG
{#uU
a&z+
?lD/|
v#|T&K
4oGH
N|VT
;@h6
[&:{
/fpM
aOM?
T~'4B
Odun
w\|o
n6ljW
/Dg$
6C}J
I<;+	
01H`
uW_#<
t$>?
 vvo7
%H=U
)15|
vd>I
cS[u>
0l(.A
p,Gw
0:<1a:
Z	R4J
br5m
,)[Y
:@Q$
St>>8ty
gk;5
IhBE
xuQ1
W<N|
O=ym
CeWk
)@="
"+uE
;jjyJ
]o*l
Ix</
N$"9-
o+cw+6
&9sQ#o
;xe/
)hSp^
b\xp*X
IIwkj
a]K~?-
OtMd&
:~3k1
DPV|
?Hx>
vu+A
^\ 0
g`>D)
|%u(Y
y^b-
n(b?
>X~s
qr-:
5RqS
9d[l2
NXBD,
z?HVUc
Aiu@
_BVS
fN6.3
3)0D
\f9xaq
(5#C~
@A:M
Za`"7
G/GC
"3DUfw`"
v,)N
_CONSOLE
`jPm
&T+`
=Z<d
U.&K
}ukx
V.}Ybs
%B{1wkc
l"+_C
1X*B
%:yJ
2d9B`
k\4cR
x(++
dz5bT}u#
@{2v
%-Cd^
9NQ2
>Sl@%~
u:E,
`0&[
=sB[
WaLf
m((q
S,e"W
ZG3++
_C(&
qyYx
2:f1A
(ar@Qz
eir8	
l(".0b
AB.|6
IkeT
J/`1
5<M<b
x\ui
M;kQ
GZf7
,@$H
gQw#O
H0.Pv
5I@=]
(2G{
FoVw
Q#fSO
aGTrH=
\QUr
EOSf)
*#--
F=jL
Cvfe$
6D^)OC
PcT6o
lQpYBl
k=CA
/	2-
0C#=Ox
SL7DOW
rlY&'!
/nD%
	jlR
XWO0
2Jpj
9':-
70^V
p#tbd
nqyg#E
>}l\
nZ0>
7B~o
uK\sa
e1>E
Z<]2
A%`O
]S0S
As_sO
9@C>
tVfq
#gz\U
k^At`U-
DW5X7LvU\
=x'[
BNh`
n5,$
T5`d
V2y}.
P% ^7
6UPvU
k\OUSF
qg=eI[
dlfg
A}M[c2sY
Rc`%N
7a0v
vvZ/
i=A^
	a'U
np-k
3"& 
WJ+.`
C_1W
wf^t
$&f6
{TL|q
@@|?3
%>,kp
!6LH
N/)2
[+/3
6MSC
>X-W*
`8Fs
itlgmA
47W;e
u5>b
MJ1	
+xsa
CX%=
L-fG
~9qr_m
\r5'
c#>L
mxP7
`j!q{
Z!ZC
xmSd
zy\Yi
]C({l
N"/.
H%OZ
CjOMJ
P	`#<
8"Up	?
FIip
!TT!
!Sw&mm3f
vtxy
{Qh%
 4bf
61b1'
TqvY3w
ic\f
/~F)'
XdnI
/Q~c
$bz-z
x5zc
&`BN
o+|]
p{6y
LEn;
a&Z\9
QX- 
`nkz=
yhkk
4d3AE
NbtW
C9W[@
hy7X7
z^M81;
:w'U	
56Mj
\dY^
iJeCf
5kMHM
zAIE5
$..P
L"Uxc}o
L!g^I
s_^&lM
"C9H}P
yWLe
lwp,
fb[i
 $M@
vr^&
\5YM
{I ,
vrJJ
}"uu
\evQ
83^*q
"Q"L
I6@F%
`?[w
(,%Z
{:1A@Kg
2Zl(
NZj^
KQrr
yoX@
%g/M
/w0V&
}^FH
	O|&
XLCaM$
#9[DG!
KpeI
r5 >
ZJ`5
PTx3!+]`(
6N62
Fg;P
5_!. 	
A/ d
:0Ad
d8[.
*AeaM:R
J5Ax|A
Wtn0
6$x%
7L/a
O)3bcHy@
NQJcvH
Pq52
&)Yf
9m'vMp
=XL8
5+?\Av
z$7p
Tdht+Bw
{5o(
lwrV
Zz//
>4\NVh9
\d4(F
8|G$
autm
LEam`'
h[u,~
<^4h
k@.Q@
\UF\JP
W}5!_
{eF=?
9_8?
a@^S
W-kS
/Ef!
^r,[2
0mG1A
';M\
	YTl
RpD=
7)au|
XPn/
FkCAUww
%(),
Z+Pn
]fgM
L~lG
$-kO
4kp3!HX
p)t%M
G q[
^hV8
UM&Xn
UGnr
`QlK
@ya|
{`%\
83;fw
ycrG
xPK+
3#_H
iYzr
7(*&.d<
Z,Ui
A(6A
Cjs%
H:.O
$<Dc:x
U|YR
UTnf
,qoap
1*Wr
,kCV;
Z]oU
D".=
>}Ye*Cn
1)^Y
.H1G
D"z,
oh%Kp
:rr/e!
%>3i
2mRjqfa
zQ^O
G0l3
$" Yq
9KO~P
RePg
,qiv8
iYChg
Ekuz
tV<<>r
"289
}5bt
+9 9
eAPO
4P,g]
%!H$
K4%%N
GlW|6
2!tx
bbkh6
=qn}
t|%&O
h-z]e
>U&$
azea
~y0	
=	urCN
V,J2
8.xmT
>tvN{[%D
U6Y2
'UDg
19:~
SRK$cq
x*6X
IbDQ
{oUt
VMCqo=
{}#$
*DG9k8
.[uu
+>s5
1i	Q
"3DUfw`
_CONSOLE
xoaI
i.')
B~1:
_3#q
6"X*
AH4	
+ s{
8-Ty
W<Y*N
e&.rP
JT/J
jhn%L
XSxb
uq;jL
i1Xl
%MZ:
6>B-
znF4
OS\&Y-
RvRJ
h.)u
C?y^s
BO~J
^&G_
LEd>	
Tpx"D
:(_8p
(K#p
Z8o3i%'
B#o+
*4;F
}rF_
p*V~EJ
 &4vY-U
pI^W
:69q
8`&@
gV)L
gcMZ
\(*y
FZ6B
wpg9j
+B}G3
 0/"
D'l2
Ut8ZG4CC
)A3I
u9H<
[217
Thj6>
e 'P
m1GO
[R0'K
~lf~
NCU8
$d5j
Xa|u1
8__g
ea\D
iET|
Elf7)
|8Hr
!CQ:V
T(6+n~'
T.4k
kCB*
	L"Y">x
jdn|
|)W>
''Q.r"b"
%  z
1NC~
v_^`
vvNE
G6 WA
F<=0
QEB5
5QZ2
U!fn
b)YS|F
_zn)
buHX
-^WwG
~|3Q8
x0=7
9IwK
q%YEn:B6
yG=T
KCtKc
n9[<
R	u>D
GEYks
fm:<
!7@p
MhD9
<]P%
iK3}
=i90
jrtan0
yj#h('
r:.a
cHZu
)gy<{|
$ik%
QJEvK
T/M-.
J}B)
FwxZ
t..k
l49H
oeb['g
'`)B
="""W
p*VWo
&!{W
E/fO
\VN#&
`e@dw
LL$Ulo
3@UI,1
iJ_BJ
]JFM
G3N9
jE=,[
d-IS
yKma
\(5{F
yJ5~*$
"uW&
Vaf 
}`[7
L~YRW
Q|#.
'b]b
cI:kp
2q/@
?5	,
-3*~	
]*@0!
#+G8
\ 0+
KK!KQw
Q;9]
=}A|
KeRa
IPhJE
aIb`
].Cq
3nlB6
RC:=
wx_E
EZy_
^v?v yQ
w*%'T:
VPV+
I	SA
jwc%
=0"	
ZL=:
"61|
A`|T
:98j^D
0}qa<
dO&5
?nIb
]WQ A~
u=!M
A&by
U1" 
%$@o
*'or
?\d'
^,,B
V#rg
eS_=
|HtI
'1Y3|
|L9f:
=:Rr
7<Kn
KHahW
+0H4
gHwOt
K3ZA
q1k#<
e(+^K
SQ`8
	GnJ
mp=Wx\V
38Rs
hB L
?_J[
o7y]
ts+@
ElYP
6lZrG
bZ.$
E)n_
[8B|
j!hd(.u
OlDuW
@t:=
{F#)
fv,	
_Ijy!%
#nA/
A(#s~yW
k-*9h
_{dQ
nA*y
9S!.
]\%-
t 4c;
ef`;
JT_a/
.ttE
p-EbY
i`OV
3i2h
qGBG%
cbDb
'(s.
Tk|S
bPWH
RNz=
se^[
a&bG4Uu,
TZ&8
?~=,L
mV i
t.@w
V(UE
D? t
)k(2)%3
w;2	C
i]ap
BaZt
~,<-
fKe$
gS,LWE
RFJ!	
8E"+
nwtI
\a TA}S
d5Ois
PR#.G>f
XH'2
u:^7
P9=UH>k>e
	ky+
=G-W'bLb
_D t
Br+=8
I.T"D
c=cw4
	|yT
g(0t
<.mj
n?Mz
z/|8
hY>=
}RaJ.!
#LXN
_LX'
ND#&
R$a<
q" R-
:RG9*
Ds<;
7-hz/eM
[S%kd
osM	
vOa8
M|5E
uT/c
C(K:
lETv^
"3DUfw`
_CONSOLE
^FXb
#:{#
()ihTE5-
>H]gd
rzsH
MKwaT9ra
+.5v
/R^+
_`=f7
'@xk)q_086
0GjF$
	-,#
Pgo 
n-PTd
vqR`
D#'D
nyZ+|}
IU%6
4|4`
Z\7g*
keF/[x
kG??
hc5/
S/[,
5F2@
!$^?5
QUun
A5%[d
MS4j9Z>
$pUMv
{1X&
Qxn2
I8[%0^l
wE[M
??Y:
2m3H
8`T+v
f@>a>
	I)n
1!Z"
6Q{G
/@e9
1g?"
~RZv
62D9
Vi'^MD
\01l#
SI~aY
"3DUfw`
f&r@
_CONSOLE
3fSq
%r{."
y*'L
BO}X
q<=1
U/Fh
Z'z'f
p@(d
%=2]
%94x
5_3C
,>Ung
	v'BL
mgi9cL${
 "J^
).E]
lVK%o
_Zq8i
Io)-
)<e`
8C9 7
9=*1_
Y=NC
#+`|3
:v(h
Hh4ID(
@!n7
l0E]1
ZgxX
kIPs
'KxfF
6hRU
1[tv
	*P:
+uIA
XQ!I
>Szu
h7$Oj
uu7~Ubi'
UfcR+/
	6YCX
sO_~
~6()[O
vzOB
EFS2ke
-|Ok
fdVg
jb!k
<W-S
fS_42
O>7k9
p'gE
i)}h
L^Oh
oj7x
a Ax
e;y}
[\a&
Q+Vxo
hlXbP=
Sk53'v
0#V4V
W5@~
M^]ru
 A2eZY
F9`;
\N B
]hsJ
4_z~
Go|t
8y|D
.aE2(
Yw_4
+JD'6
B|eM$
aoXD
!]qw{q!
64{X.
[#Dv
*4FgL+du
Nu@	pz
Msr}"
EY5z
_P$Q-
Rp'DVY
vv!u=
0x:c
q3Xi
2@"s
9kcWl
kawST0
JIGZ
oQ}zCxk
1%kZ;
Ui1[^z
;]sY
v),%
i|bp	.
/~w^
6O}(O
HDLO5s9
a~SO
{oJFq
$h"C
OFLcL
5"llS
J@=HF
P^BZ.
vG3~
a)Zt(
I`YT
m0-	 Lx
=k^|[W
:Xkm
|VCW
L*ld
Pl"P
d ~,
M~7?
 ^bni
?!+x
t	-{
)#=_
G1uVpq
x)PY{
,*Qh
yXx@
 .5W}
!R$taMPy$n8'x
"Aj}r
~iII
_Keh
E.Fj.N
+UDqI
^_Ae
_YC.
fV=/
W;65
:&{YO@
#PDi
I#Sx
~}AN?
tQlD;w)1
A9 d3
%!2E
ji<.
wPBb
6L4g
*N9M6
{d]p
,T@K<
b"g!
\sd?
<S)C+
]YO*
XF]Hb*>
X&RN
VRF*
}\%{
8-xF
h.m:(m
)5>H
D-.Aa
{QwG
es#+
h' g%
eth=
CZA*
IKjK
^|)e
;2l<
gx8R
%kX*
RS\'
&B8]
8>Xr
cG Z
V.Sy
R_;kb
5R:H
smk~kj
K"7}
Y_i=6
=%m 
3<P0W
I/@a
Ptja
P3hY
zVop
o5-#
4Jop]g
Gv.Q^
f5)O
%(s9g
Z^HD
`Y*C
c%c{=n
#:MT
;8Ja`
Z*Q^^
8U>(+&
/j7\
=u6?
s-C-7
m6P?
R(@	
K)Pg
]u>u
}#exB
 '4P<%
>7<M
s@a 
yiA#)
_*J)
xnE9
#1m_'1
bbyE
Of/z
Z&s!2
O?R=*`8
gnh,
RYlX
@bST9;
UtF5K
[hh`
"W1C
7~}<P
3$~T
xO*t
kKAh
p|kE
cc#q
,-yC
Oz76
ZU1.nP
7ixA]
}&04
~XNt
~%A-
`jY/
$\B[
`6On
<M5qJ
ar(g
e 6()
'qih
PuH5<
Y/AyK
BFnL
ci	9
GA'T
X>k4
U$)p
$@<1
4]!k
RBx$
jF	-EQ
;4-p4
cwe^z
"nO46Z
R=h{%
/ad9
LDJPNA:
~,wy
bdQ|
Ev%S@H
i]]$
J+6T
B4|j
WJD7q.:
X~;j
l2W-
\ydS)
|7qe
~w3a
@5ml58&
i/|3
E$an
M)5Y
6U3&
L)WM*
"3DUfw`
_CONSOLE
$R]'C5
NNN2
OQ9u0
g@>'
0k$(hX
G2x|G
c!IH
qkXk
Ks1,
i,@N
m7@8
cnb~EY
v+9m
FFS(7J
`E`MY
AW%vY
8~#M
Rcqq
(~ip
i]4D
`m3K
iq%.
FkS|
3RT-
mf2#
P9]1
X&Hu
6}j+
<"1D
;XB7
MxMn
'9[WNM
_S(S
!uor
&eH`.Uz
mz4C
L+jP
YwOW
/B92Z
MpV%u
BoY[
D2hX
9Y_H 
gGi\
!HG%Z
%('J
9	O*j
	'Yf
I"w@
u(@<
p<D7
to:j
S{'4
xn\v
	S? 
Z#pu
0Jge
4$ (0S
nQ:o
JZPE
~mfD
10"d1
1/~n
"')$
jfo9
`	>%-i
m W'
_lvZ;
Yn!w
mBjJ
N N9!u"
.EaW$
YU+G6
/'EhW
J4BB*Xub
s,ZV
%@_m
Uv*Jd
!,6x
Y.W4B
(Ux:
DT*nj
?g|^
#kE#p
aWdC
=^. m
8VtV
J}4Z
/:e`
"~72
]Z8x
<;luhuMyTK	
tGNs
*{@}
j:*j
h(NP
I_('
q#O3}|f
RVMZ
B p_
,%nx
)xoW
IWk+nB
FQ48g/
53sx
=ivl
lJ|l
XJm{LB
I`kxP:
2Fh.oj
 *PY1
w>7x`D
n; J
~aou
\`OS
Z/]l
`#/`
@`1~n
J]v#j
Ic&@
F#s*
S;B_{
,,A^
\!>CO
f.03
g_Z.
~4$W
m>74v
;b%E*K
SU0H
wQd7
Db	2
\.uiX
;0gw;
7!JM
l{))
aU H+B!.}
<>#Y
l7SG&?q>eN
Rtt2
e9Xu
=G.Rg
G:~W
:_K7
$f1{y
nCN(=
wj~R
y.6y<
{ G'
Z1Fsv=
VT1g
JZyp
;L6snC
s85a
2m$:
kuk&o
~!/G%N
{?0mD
4]	;	
<]ic
.F9!
RQnC*r-
5E^f
UkZX5x
cg4uT
ix)a
oc_l
.r,Jp
1/X,
y6[s
&A2!?
Fqj7>
fbD~
nZVR
'"Y\k
xK`C
/,${
05[F
tV7#
mFk"b/
&v4j
q,XAT
@ZT/V
L5b0!
y7[Qo
YS@)
ecW	}
0;/*Weu
`VXh
^Gj 
V#(4Z
vnrc
,nw-n
t*6]J
j78a@
+;Dt+
3"@H
{ty>_3
*2(K
F.Az
_D&l
'AWl
|F^;
6UqD
=&)V
"P&u
q3"5\ux
EzC.w
qCwA
` 2m
W nk
LuGB
H$]n
?}Af
zb+h	,Q
J^%&
\4SI>
lQ4K"}|
-!ta
NZ*L
1(#?
^V`FA
su4Th
	4<t2O
By!.
%OaE
1n.p
BF$"w
d?:E.
qb8ZE
FI(w{s
Jn-}'D
)7$6
.!q_F
	'u>
r0Gw
N?H{
=yLw
0TV8{Ef
#aqK
K}4$
i3b>
3?B2
3_a>U
VY	U
Vs,B
zf$A
^2r|
x9eoP)
FXicQ
Wrg|>
$y4|
#=HK
s2kz
(-gM
,Pjv
0#MH
4$a9
K0IW
472HU
;u0r
@z9B!pw_}
D`%Q<
igOQ
=%Nr
PC"]
Bn(<
[n,A
3{D+r
#Cpj
cBfp
FuIk
ZCyD
@i(b
h.V4
=m "
oe]]
;hM(5
_o(S
.h2T
Mh!G
dhnv|
snW|D
&$nH\F
c/o(:
I_\t1
vq.%
\"	d
L32-
#<b,AV>
\xS	A
~|4S
W[z^94
F^dl
PyqN
B[s;
@dId
ru%M
U?n4
RF/w
4(3Rq
k"ex3
n^~+
E7MAL\k
)2Gj
[|i=
sEHD
3XKc/
bg %
/c&X
~0d#
Slbt$
iclM
J.W 
^fU[X&
FG,"
z79r
'm9#
r:23
W3aJ
M~0|
i U=|+A
$^oS
I UDb
_2De
3Ii%
--MlY
MOa]
{,J-(
?+*b$
$_E>
"3DUfw`@
_CONSOLE
`n9i
Hbg	
v_b`
CphO
vI|'8V
dQ<U
nt%ab
/^'!
<SP1"
bUlo<
X$Vn
Y>.}]nevIkd
Fd\	
0~"C
,<D^(
;|{6xd
~FL!OB
Huyw
Cj3}(
K"gf
3iBU#=
W2%y;^
V ]\
(_m)pm0
(&4T
hlhq
_VN7
 )`|
jYvV!
OF{q
'|-/
9M%d&
jq5&
#SQHY
>+oo
[{<H
[CoA
DWkYm
V>g#
AJ*k
ic<sG<)
7M6I
|K)	
yh(z
f(5k
Vf-Y
-z#P\8
[\apj
YJ]N
&RnAg'r
r *]_
O$ S
n{p-
0@^(
&POl
@!QcB #
>X;m
A6dy
:>EanW
AJU&
SYJ[
L(IY
Ag	0n
ge)7b-hb
n#_'
/:fX
{%fr
@&@S
kn,{
^()I~
]vj/2':
Y{/S
o	V3
#Ck c
$R<QJ2
VUrB
XfNv4
$P_L
J<\O
#xEAe
7K7~G
Z@rX
=a]7X@>
T;ua
t@V}5
5\}F
dM--
//.%
c^/(
Xxe 
DK4\
,|WF
H@.Ob
4SdYw^zf
	9<M
2F)x
0".9;I
HqBj
]eiHc
b6\Jb
OJuI
N2]!S/
Hs{f
gzTf	
{c6\
Fw/^
)P42
}s]N~J
/X	w
&[JC
-?A'W
y-q6;p
#)'c
nC0Sh
ga$'O1z
5q@M
PL^k
gI%AWR
_:PF
AT_	
zo[x
Si$;
*bp6
Yf0t
Bi,K
03Qt
)`0a
CTq*-E
eIZE02
f&JJ
*<^J
{.eZ
-4edx
vkI(
!z'C
x9-r|
|SC=
t?4F
.k\?
|p!d.t
,)16
!bZ 
}3~qz
:PwN
	Oeh
E3lFp
7.SV
%xh6-
slI'i
~A+&
l)P_
aQ5w
?$ 4Z
sjP40
ccVA
g;S<22
R"MB
Pw-,
6vUe!,!
K/N1
sM8ZW
1P7<
`EE1
o..v
qm7q
Z~QW
\d~Z
UFvV?
!GcKY
{.{i
?~fA
A9Tr
;D<k
0_Y"
	@[#V8
J*@e
.-8R
kPkOH
7;\J
5{Vv
Ri4r
+>$^i
l:5F
l`L0
nSey
a'K>
dh O+Q
^wC~
>%lZ
[NuR_
0kBP
% U]
kpWm\
%B-3l
T^]E
m+~:
wY?X
B4'|=d
|xR9
"1=*
xs/1 5
:6"l
~-42
1e1)
#WyH[
@<53
#O:).
#\op3l
{PgX
E99g
)Uxg
D1)l6J
VaJE%
?ZjJ#
s%?DUok
L}"{6
-{fG
|PYu$M
3}UEE
>;f=
EVM9c
Jj=1
)Sfx
5~?zg
VNM9
Hf~"D3g
?]d)
~5>on
i_k/
;F.0
o%}?y4;U
iP[D
G}PK
^oMOWp
vi|{^
XCygF
F<Bc$
<882ek)B
7$|{WE7
UNx6
|'4Y
a<6-g
$F/4	F
Y^0,w&
m(']
xcvJ
+R=E
~<{)x
4k;B
r=<5!
M6'a.B[B
`nUq
nQw/F
M~kc
k6A9
-b*|
e47S6
P1'P6
xuR1
I ;`F
Mx93Y%
_~1]!
?VpBQ
C,8d
D)`g
GpWl%
EM#|
$);5
5Eaj
`jsF
R?wk0
Ez8;
j0)j
ar`R
{c{'
1UV<`
,o K
_/<\,
|V	B!p
/wzR
e[cdi;
@'u-
P'f-
h02Sa|
CZ4f
^H**
%iL@P
?dvU
Jn7Zz
G;:u.>]
7<vdX
_Kqr
Q,KW	
e3^v
$)AQ
o~gU
+h[4
)%Li
Z^/H]
PQg`
5^j<
~FX#B
"3DUfw`
_CONSOLE
9,A`_
m3@R
|p5jf
	{Tc
rC"i_=
t]l`S
6f)XRvCW
9HaW|
*ME<
(hdI
Df;'
C&+Fmv7
?8%_*
Z*U]
nrB8
*9t8
rnV*
dt		
;ot5,
uBLI
%X[[
vZ#k
`K@B
F!*,
JFtje
(acu
.=wo
\*\+
q.NI
.eoN
mLH|7m
6>Dva
"K.a
[ZV7uoX/
@.9|
6m$A
z#97
ri*5}
2zt4{
13vg
^[6sP
Wt8K R
KU|:D
@ORb
mt43
cD}0
\T=B
ZJU"
*YK8
4cd?
Vn{x
j("G
FfZQ
1Y2c
9c=76
*llp
,fKH
L>SMRW
~}@j
oSFD
v*C-~
}&o4
(rmy
316d
#R0~
}<Lk
`Os;
RL40A
KezS
>9_sm
&a"*
'`wE
FY?k
~3@X
qTt}
	)BFwA
_nvz
E[,@
l<?5
&,}[
LMsm;>
#h#6ym&
LW D
~Fdp
BZmz)
YoG*
)o6}
CUgZ
N-OT~
O|Crn
3E{I
4G{jq;
,0$=
!(l [
"]6C
UQ7+j
W|2t
:y"K
NJ^)bY9,
eC_O
ii(K
8)D!
gCMmz
il1,
i0Oe
 /x8
u-5G
98`z
")c+
4`..
i?^!E
~M] 
/vh_]7
r%kF'tB|!W
DB9r
\+ 1
|~;`
r$Np
yPNF
/)yD
"@YT1#
uG/0
u^ey282
H.Os3
F/-c
5$2,
M*M\f+
+02x
_`6Z
Fk2-=
0OId
1_!6 q
-@pq
?U*]
z.pt
btd0
ka+"
<V1/
o ^-
jHV`t-
gZ6m' *ER
4A&z
477sp
E-u>
gK&5R
5kZ:
`_R44
ZF'C
r<>RAA
Nz^4gz
!\p:
L-Yt!hT
VFO(
e-q/
A.Iw
boG1
llBN8
G@4L
\A% 
6J*|
-_47
#Plz
|q'[
P.8,
H$}P
>	^>d
kpRB
*R*2PW
^95*
j[:g"
bq4G+6
wjamY
/NYhG
E(b9
n[zQ9B>
)roQGp
RVu)
dhko
~p|w3R
`%Fp&k"Tob
P<}xkX:_
puB#
Cflz
{,>-
+O.q
/c	~u~S
R]Db
~EL.k
sw1X
i)p1
-i)s
 :"@F(
|XQ 
n]MJ@I_'
S`er
MhRN;
p7;=
[ZJ*
 ;c\
;SWf"
X(_C!QEK
s{ L
6I/3
fXs]Q
'Db8
E[N3
`7tGr_o
4$5?-D
0k'A
I`Uf*
.jclV
E(cuK;t
 2DM{}@R%L
$N~DQb
U+V]
1do,
Xz{f
~ |1,
KO43
]	'U6L
|Y[	
!Xd,H
Y.1?
{M8/
|}Q@M"98
grmQ
&bd\
&,zm
.Jo]
ot_Y
WRbN
^N|)
x9>h
58rLI
dK:^
1A{f
m2z@
aySNo
fRhu
g.q[O
t2<@
8n{9
Vw1(
oXO=uXN
)d48
iG)P
\<L|
4z  %o
I(l;
3~1J
u/PA
66~ri}`
vBt]DJ
whf 
@Q02+
S7kD
fIpV
eEk&q
Q ;8HE
B>%}
7CQ?	
&@hs
ocmH
F+PzW;
8L'"z
3pC~Y
Wi=e}
5TUxY
!t| 
E	1rY
1$R#
 {	uI
R@of
^cT~
MLbHL2
 F2f^
dDXOr
nA?/
L9-( u
p*`w\A<
b<6,XV%
iYi>
:,Frx
/4bM1
=[_E1
%?@J
%qZ	]
'^I82
l_Ro
:-'#.
VaB|Qc
G8X7
@Nms	
8Ipw
!H?+
 V1p=
:MlK
!m)QX^
>qpUt
(y-``
&9.{
XQIx
:hHkOk{
L`Ow
nBnGY
qkTk
 "SC
:[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585473626
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
"3DUfw`T
2l]Pc
_CONSOLE
_nu_
Z	$QXU
t>B"}W
;<Q,$E
p0pi
e^&/
iNkh"@
6$Il
KMfG
ATR2<
w1U^2
Ma@M
 bTk;
i?g0
~0^T
QI,"bm
Qxq>
]O/AI{
1cWY
163#x4
qH0}
k]Y^
9Gby
@{F 
,T/A
$J-8!Ah
	dJ]
W2?a,Q(>
~Q_F
K/Ol
dBX/
gJ0:
PDjI
aq~l e
O~=$;
fvtx
d^&,b
Yq?	
yY5Y3
k=?i?
o.im
qQt}s
d2^r
sd,x
3&zM[9L
4yhu7
tz8T4
<>oV
toH&
jTa~<6}2
_>l~
,AEn
T-}I
mu.~
3OC{R
nwjG0
!>`O
n[2+k
w9)[
{Vv1
"|aER
l9n&
}gH]v
I1pu8G
n+iDCR
XU@K
n=Y)+
mE|t&
5xosK
F)bw]3K
U_1|
g<Qi"
}/|]I,
?bT3
ZbRS
,t|>|Z
pgWf
#!C:
@3\&
75(W
iv~:
o,>.-+Tx
4QBz
lB'F(
Y)6|
I4|>Les
|a_z
(H\$
(06P=/
P^EA@c
Al7i@
7|?sE
0LLa
\5S2X
'59+L
w7W-Z
Rk,R
GWJT
0R3\
V*eJ
%#AP,
`/\O
3&]y]X
[S{R
;AV4
cLAR<
c"/KG
]X.%S
\Oo0
p^*.
pS'k
QMmxCM3
;(\M
Qx_Q
tiqFh
+m*"r
p(P6
@1?M
.O]6~
NeOX
}MAd>
!$G9
a-2x
T``eDr
8[XB
^:9eg
|DNC
HhJ5
*nmj
72o%
t[_g
$5K.
v34z
r/Br>h
;DK|
fr`fG
X>E+
FN1 I
d2eH
t\=}
Ga6<
ms"r
X3lv
pDA&
U/_[
@%j/
pi?(
fgM$
#T0w
/u_k
;h@g
-'Ri
tpPc
;HW 
sfEC0
nA8*v$B
e4 O
l>8"N
)s L
+5ZW
XTKP
_;H$
*1NR&}%
pk4%
[^<e
2'^$J
I:mQ
@a5?
-lJ_N
ho]!
@	Z4
"[c=
CJVey
|D)=\
[V0"
x-lT\l
D-m`z
[Uo2Q
}qZ(Z
@{kUl
e\.l
"sx"
^sW>I
y2&$vS
0_s=
x];i%P>
)&n3
+!Sk
A]H96
<-\ux
?jr@
LW5G?
Pb9\
ocW0Dyb|
Rl?7
^?><
pw?>
rC~S
	X]aO
\]7tm7=
E,04
H(!i
$"!%i
e*tB
Yyr9j
\/`W
P+Ar
w|FN
/[_=
R<'wg
}X<<
"B4-
mMv*
h+ug
(RN#
$KJo
V@=?
YBx0
9o;b
#euK
vAQ.
Kj(1
gJH:+^s
:|u-
Nk(}z[(+
54l~tIR
2}P.
|k7a
HMiE\
gsLO
B.v$
|K =A
n-5H,8
,?	S
rT8Jl
]N~f8
uM1Sp
.]}*%
*<b-
8;Kp
$nEE
".X{
JccST
1	l-
m]&Na
g6fEO$
R=dQ
s&O/
6~-sI
Ils1
B\26
\{n\
3cD:
ge.*Z
ml\O
iR;~z
t{<3
3Fs:
]E3$Ig
d"MT
LitB
p,uw
TsD$
bQwt
9^ksp
gzFY
.aZ} 
:f8R`+
<vb;m
iVJf
:NeR:
<*t=
u/5;
k^A6
kG]s
)h-qw
h~%z3t
!gCE-w$
nQC'7nb
0fQF
D`U\
H(LT(
?V8T
'=Y2
.%vwK
zV\S
}iBh
}LP<
NXRU
tN	6
uDOU
(0Y^
}ALe[k
H?vG
2V{J
[#xvc
1M_/
0,~2SH
s`U7
uLC%
w@0(P
Oa7H
B$-[
~:q5^
mm z
\g3C
goT"
6T;ON
Fc6%
Rd_h
0	zC2
5oKw
EjF'
@\;{z#ME
%!H^V~B
?Ghq
:T4|
rh6P
S{OFse
}ffq[
<g*9
O% (
OOa!h
iDc1?[
1^i!
T~VV
KHV.
{NE;
h9AAe
KZMxiZ
OO>VFdL"
3AT"
kP$}
&Lx]
4<`se
P5gW
^k,r
wc|1h
5\PC
hzJm	I4
BX^Z
t13b
lOz#
'jBf
\ UQ)Kk
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585474526
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585474826
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585475426
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
>OCc
"3DUfw`	qC
_CONSOLE
'51/nD
*apk
&2S((
Kj<n
V^!2
RrK\
+b|i
VwtR
\b:^
TI_ 
4m6u
uH5&
n&zq
<Gcx
ac"^
ds68Fg;
_t8g
J:|%
"=L&
RGKco8
Ux"[
(!*w
+Z }
)f1<[
(jN$
KMAQ
JOmA
rpPU
@xs,
EZ0['
JWP;
lVuv
vlbO=I.
?^-[Z
>tH:*
R#^PC
1^hG
3Eyu
og/1
?	7	
]c)L
4NR2|
	NF$l
$?R|
.sm3Sh
shNn
}td~
nE/B
FPqt
)tYu
&@A_QTGiKu
J@e7
HP>.
KWF(
	%5a
*1P$~
Ct[W
~'yB
Gb%f
`\x8
KE9+
i!C	
mt+~
'G6|
=	.M
""DJ
}r7w
q:,!]
FP85
D6lO
[#Cd
uIq,
"_Yu
rQZR
"(C9B
mQ9.
@A/7
HZ]QZ
fp@.
.a\fOf
&Hst
/vnX
VN4GG
	FY[
dH](
47%2X%
 .tE
,P}B
8gyY;0
z2z8)
$)0j
AoDA
=i+P
,">xc~
rbHi(
>pdd
P1ksE
<>l3Le_
j0Y*
{O&U
pwTQ
s%]b
y(6(
s	k7
bU& !
5n^-
Ysnw
AeP~g
2Tyg
[d(i
}Kf3en
0qgD
C;)V
_. u`
Ja'9
5~Ma
Vr)w
th%X
^1Qs
kBrB
6$X/.
NEnoJ
ZG>@
NP/92|.
JA[9
N<c7xh
T&h5
X)P`
I7Xz&
S_EUE
\gx@$Iyd 
n!5}
!z.k
&kvO
`*~S%
,RBxr
<k&N
,R@mm
]\aAv@
nN2X
jl/\
kb1}!
<I/u
:-ib
P|fR
k@u'
FKn8u+
VH#-_
B(H[
:=C'
/DF01Y
b6!?
Lh>$
Prbo
l9wEO7
W^$b
li&(
)ywD-`
Se&t-
D((=
~7I&U
20"b
N$`n0
l7'k
Plg%
vRKU5
fl"QQ
]>=Q
_1T2
`U_c
o/Dx
Fsc2-
YMG!
\3jK2o#
\S d
_%W*$
@QLN
f@C4
,a#U
nWV{V
n7B_
e$X{
Rs$f{&
g-z,
HP;&Z
+m0:[3
.Ti,
,DWQ
BlgM,
gq[X"
yA>KQs
Re{-
Z'vM
?g91
w^p&
}H$1AM.
.r2d
NaA%
.GVO
Vo@)
3x#$
`n7x
> pu
YPuc9(
;)So
&jtJ?
e[EQ/
';oI
1h]2
?woO"
623d^
&KP<
X^~	`H
7x v
&4! Mf
;.X	
?,bw
fZNp
%`GvM
!~6L
}Z`3
)G_fA
H6X^}
1~2k
, ik8
@*+V
\F7(zy(
T;%$8
!m`S
`:)t
nN^O]
rH)	bo
O'6s
L2$?
q@Wy
mFsl
;*H<
{[%F
+4$2{
d./7h
KCM(
1??2
{d`~
r6eF
8V;Z>
ZVly/
SMNe
kLV"i3{;
u(t:
#5{H
i$u,S
t`&,Z
r,'Y
UYNb
5G#9
lXI2
(~o0M
f;k'E
vn.C
%)	[Y
!?O*GXp
AVDu
h8I]j
5&Kn
=rWj
P4fM@
!?^\
XRU?
huiM
Wy~xe
73J|Dpi
MU=E
6x'F
wv--)
sC$g
.t6>
V?	v(
b;Om
(b:H#em<
$Boycf
HagG}
}}j*
$9;U>#
J&'1
r%[W
:~:,
DJVS
6Foul2
K/BHD*
Av(=C
xX!I
KGZv
C~h)
{|@	
lQx7
B&rS	+
)1$1
+zX8%
/\9a
S+4U
[#d/
\0'&
4y$P
x.4gna6
3rx,f
JP"t
(',s?(
!%gX
%|/7(`
?#Bp{
[q!|{
T"(=
i4Cv!
1RAw
@`.u\0
P	"j
QRx}{
%o;4
1<Q@
#3YS
^M?:Lx
J.Sr(25t
6OG0
s0<X
$GY/
]`)X
vxj	
"3DUfw`
_CONSOLE
kT.h
@}&)
83FG
Bf=[Y
N~va
)E8g
JTGN6
[bwN
aqAmb
 	!`
ouMuo
W0||
8F8p
H5U	
Z7: 
!'41
r`UBu
I}8^w9
{<u!{
=djNw
fPt D
)D=/
Z>	G
4duTn
2_(i
tCMs
 WeE
x{<"
q*R5
g@ba
~;w3V
dqK]
mx_?GR
.f	zd
}WxO
HPaSp
tz`;
)AL'N
],d6
B.ms
~!**
h"tw
*0v0
V!L{1V
+l7y
|b{y
'7hF
8\1TST
W	B>
/s+*
X,D:
80>vj
ki]6
Xc$n+^
3-J-
D2W|U
 *'y
^2fm
DYok3El
4HB`C'=
q_,d
"``j
eP(J
gN)-
T-:s^&
,23i0G
^ C`
P@K-
5*'9
p6	7
kM.o
*D;W
9E-x
+\hf+
d9m6
,EP!e
(Lax
v0?+[
F.O"
Vl6+
Un.{
U(On'CE
ax/q
AG*RZ
p[Yv	
EM?&
{p`9
+R,K$-
B=oG
u)@<
~R4bQ
7[mj
!gX>
]$ny_
[lSb^
B-#J
Wq}=$v
TS"a
X./DP*
aqjN
^fkU
.?zH+Pq
_3Z[)
u{'<
.q[j
@JOz
la'-T
-no|
5SH$
b 5l
o[F@
1l`o
V#,m<OF
fUC3
6q:Q
('N4
}3qblj=/#
c=FZ
t2&c77
,CD,
AI/:
SJBf
$ E^"B*
PB?a
,` 7
G&-n"
`o"s
=\Ev
!z|A>
%'1)
C_FAy
7#Z3
!r.<:
2-%!
J&p{
(`i>p
p79V
sq[lP@il%&,
i8N5(q
bE{SH-~U=
l&,^
A^/]
Wpvj
ZmbQ
[.`	
:Y-qq
nSc*
>Zqo7
YG)k9
,M)9
X>~S
5#r|
/ >q
uCPY
@*bR
K3Hs
sDM,
LIno
obG!
3>1pK
:mi	Y
x#-3
%AMz1%
!p7M
7'1'
:7^p
$Jn.
^,>PC
b +k
H~a>
"eI	
lG1=
UXIC
LW>i
gR\C
{z+{
Qouz
<s"F
eTT.
aD#3
zP~p
la0A
@%3o
^Y3>
W5=Z
|9Zi
u.z[K
:JOQ
KXq.)
?c'p
N/-z
?yKk
BJ>1d
h-p_
n{`;W
&l="[
< 2S
[kRh(/
M7DZ
C@|3
>BKG
+^Kf
c~0W
CdN'/
;=l.<.R
[O2O
=Q"XO|F
cB@;$`
tDJ8
lV%p
7,W<)u}
J;#9
m>)\W
sPqE
Z[HI
m!#L
<7dk
>_qy
8F)/m
rq X
7o5G.
}7)b
H&;b$
ddXW
1R36Gy
\i0p
AoWR0Q
qP0G
@Ml2
8|)r
 j<4
W,m^
 cG$
<mUf
>R>?
4-u3i
VZ:.
JR"F
N2xk
AzO&
9s	Y#
R\4;
~!%'
&%o14
'M^Q
	2%<E
;^lh
U=g]0
z\=R
>HL<F
.yLR{IR?
ERe^
{sVB
Ss)z
a28O
AMt/
Qnm.
(E*e
iaeG
WQms
tG@%
hRPiZ
d&(ji
'5s3
UY)Y
!#`b_[
6.%L
@C'^
4*~@
W5=n/\
Y+SiC
5IYM
ZN"7W
:SGW
"T2h
^t q
x:zP
	XES
g(w~
&H{d
J[TWi=
c{_B
kzw'
}	l8
7?ir
AmCkU
!pz_Tc
Z9i4
UXK\bo
rso=
 JC+
/=Gv3
fvFW
#T2X
"'Ryi
_y,L_
$~oL
\QEVw%-
koKC
8*Ri
)k/I
(8YF
3/z!
1;#THs
w$+L
*>lb
\zsQg
.^ys
D`zu\GI
I3|E
<kW@2
Y0A#{
~W'NNQ
IXW~
~B`R
51^O
UI*,y%
889:<
h-xd
%T0pFg
U?y.
ZvWB
><Rt
9!s=
s?7N
"3DUfw`
_CONSOLE
9r<I
5R~H9Y
a {y
v7K]
b{2B
{,w^rN
1n*Hs
< QK0
$qg1,
daBv
9X+/
c|p>
X>?M
='4f
^/2<
8{b>
`["b5
g}bJ
CZ`_
[g%6
e0MC
S).1
DX#AGGt
SI}T
K7[]-
=PlaX
n7Af
E`q]
F7;{
B?C-*?
 mYp
Lt21
b"%pI
GSWR
3Be_
SBFH2
7LL+n[
!-fD
hcV6
Tl8#
E`e'
<>w>
s|f;g
S<n=F
,tmhQ{
T"^B
72F4!o,O
8fO8
JQP1
2Bj9wH
oOhY
r'X<z
87JA
Iq6Z-
rTsp
=4o 
Du$.|Qwt
5KD+
pY5*7!
`@.G
EuW,O
vfj4A*G
MKTU[DT
bOV[
E/>>
<UXW
;=Yk
a6)P
mF7*
0n>9Y
hjY 
6zSr
HW2%V
A" Ag7
`	=q9
`l|T
dpBT*
<.tr
:-><
*bUq
8G#hq
3\^s(
;w!O
 -IX
&zl-A
\y.t
N9	L
<*TO
3x;N
?$fm
<36$X
	3NYz#
:*O$
$m{yvv
rH7jAmV
4PKT
:~Xz
>3f}
t|(O
iRr@_
|[Y<Sh
i)7~
"Z>";4
*z3Gp
=G=@
?%=*2
}NZI}
=Jpl
|D'tjEj
afqHz
S=55y
|T v
i@79
'3(O
g#'g
kU&iyi
At[Z
$0I.
CHC6
$HvB
A5T,I
e8a,
')^E
^(F]
z'D 
s2UYK
aA.X
_4Vf
\~Zn
K~tZk
4IjB
>``?
fMY[+#
]+,|^7[
:|V"M
U "\
/:`U
|J]>s)
q*eK
DP;[
mBj8;
hi	Je
0Jo@
J"_)^
hP.w
RZ7o~X
A ^Zq
&KQ/.
aUS!'>
s9/LW1
^$Q"
9D]S
)u|F
Nq/'
Wd	vX
zw0W
>G	_
{D%;l>A4C
^)Wo&_
3M)u
/5,tML
8yk\5
q*q6_Y~v;
@"yV
{U>-E[f?
UU]H
$RV%
;Lxq
L&rq
)[-\
o NqB
X vY
i`g|
2_oG
c0XL
j7+G]
>&pe
hm|'7v
O om0
bI*x
},Q}E
by<>(
1&`	
;@>[
c=T~a_
@DMg
y[a4
 "^=
LCzj2
)TW>
39`l
K]w4
YMH;
rF#=#
.m5ws
/;8,I
,4{*m
9zhD
tk$1
wC~d
a>m(b
Sfh2|RX
oV<K
HmzOd
D.-l
\iW]
Rz90
`DasW
vFan3
:2mT
d!	#S,
D3|{v
ycZb:
vF4,Yn,-
`:]>I
k_:_
5elxE
ek1p
"-QjFU
pREx
@_I	
pUiM
?kYH_
}Pa#
(mzF{
Y]k&
 Z@N
O]*F^
r+qDK#|
F`z~
[ +<
1]%()
a&nD"'
IF"-
lbjJ
BE)%
-l(0
+4PE[
g(D4H
f=I7hH
L'hz
b~Y)
\RD_RZ
8G~!(	,m
w	5KiW^'Xa$
G::S\
	hU9
<VCy
Kk[?;
vd=}
T]DUd
\FV%4
4<HT
]V/Q<
iMz7
g5 e
7u+_
DUMJ
4Jed
UF*P
spkk
R1pm
!(f""j
:B\"+
If)t
Qio&
CQ*4H
vFz$
1O7X
iqV5E(
|GvM
J6kc(dw
GqAN
$wtv
dcBvn
EK=P
0 ux
UY_c
v/Fp
`wE^B
uA+c
:	8}
0I@a!P
3Rhl
=fsuA0V$
nPfMn
[+:J
B=QP
w p^K
*4$S
|Iqh
El6E
j^_~
f@afK
\j2@
"]j}`Z
Iz1KY%w`P
kEUX
$2xi
<]PT
k	F#
@"mZ
WT8b
<KgF
h/q2
?k>=
$ni%
K,R[
kdGJ
|4E^k
NBr=
>)B4]
 W5|
O\L@O
t0C.
Mar 29 11:55:12 perplexities kernel: [249663.868610] usb 1-3: new full-speed USB device number 34 using xhci_hcd
Mar 29 11:55:12 perplexities kernel: [249664.022649] usb 1-3: New USB device found, idVendor=0403, idProduct=6001, bcdDevice= 6.00
Mar 29 11:55:12 perplexities kernel: [249664.022661] usb 1-3: New USB device strings: Mfr=1, Product=2, SerialNumber=3
Mar 29 11:55:12 perplexities kernel: [249664.022669] usb 1-3: Product: FT232R USB UART
Mar 29 11:55:12 perplexities kernel: [249664.022676] usb 1-3: Manufacturer: FTDI
Mar 29 11:55:12 perplexities kernel: [249664.022682] usb 1-3: SerialNumber: A600HD1H
Mar 29 11:55:12 perplexities kernel: [249664.031411] ftdi_sio 1-3:1.0: FTDI USB Serial Device converter detected
Mar 29 11:55:12 perplexities kernel: [249664.031508] usb 1-3: Detected FT232RL
Mar 29 11:55:12 perplexities kernel: [249664.032240] usb 1-3: FTDI USB Serial Device converter now attached to ttyUSB0
Mar 29 12:03:08 perplexities kernel: [250139.600283] usb 1-3: USB disconnect, device number 34
Mar 29 12:03:08 perplexities kernel: [250139.600553] ftdi_sio ttyUSB0: FTDI USB Serial Device converter now disconnected from ttyUSB0
Mar 29 12:03:08 perplexities kernel: [250139.600615] ftdi_sio 1-3:1.0: device disconnected
Mar 29 12:03:34 perplexities kernel: [250165.472579] usb 1-3: new full-speed USB device number 35 using xhci_hcd
Mar 29 12:03:34 perplexities kernel: [250165.634162] usb 1-3: New USB device found, idVendor=0403, idProduct=6001, bcdDevice= 6.00
Mar 29 12:03:34 perplexities kernel: [250165.634169] usb 1-3: New USB device strings: Mfr=1, Product=2, SerialNumber=3
Mar 29 12:03:34 perplexities kernel: [250165.634174] usb 1-3: Product: FT232R USB UART
Mar 29 12:03:34 perplexities kernel: [250165.634177] usb 1-3: Manufacturer: FTDI
Mar 29 12:03:34 perplexities kernel: [250165.634181] usb 1-3: SerialNumber: A600HD1H
Mar 29 12:03:34 perplexities kernel: [250165.641730] ftdi_sio 1-3:1.0: FTDI USB Serial Device converter detected
Mar 29 12:03:34 perplexities kernel: [250165.641847] usb 1-3: Detected FT232RL
Mar 29 12:03:34 perplexities kernel: [250165.642555] usb 1-3: FTDI USB Serial Device converter now attached to ttyUSB0
Mar 29 12:10:40 perplexities kernel: [250591.801712] ftdi_sio ttyUSB0: failed to get modem status: -71
Mar 29 12:10:40 perplexities kernel: [250591.802211] usb 1-3: USB disconnect, device number 35
Mar 29 12:10:40 perplexities kernel: [250591.802421] ftdi_sio ttyUSB0: error from flowcontrol urb
Mar 29 12:10:40 perplexities kernel: [250591.803041] ftdi_sio ttyUSB0: FTDI USB Serial Device converter now disconnected from ttyUSB0
Mar 29 12:10:40 perplexities kernel: [250591.803088] ftdi_sio 1-3:1.0: device disconnected
Mar 29 12:11:24 perplexities kernel: [250635.592694] usb 1-3: new full-speed USB device number 36 using xhci_hcd
Mar 29 12:11:24 perplexities kernel: [250635.746737] usb 1-3: New USB device found, idVendor=0403, idProduct=6001, bcdDevice= 6.00
Mar 29 12:11:24 perplexities kernel: [250635.746746] usb 1-3: New USB device strings: Mfr=1, Product=2, SerialNumber=3
Mar 29 12:11:24 perplexities kernel: [250635.746751] usb 1-3: Product: FT232R USB UART
Mar 29 12:11:24 perplexities kernel: [250635.746756] usb 1-3: Manufacturer: FTDI
Mar 29 12:11:24 perplexities kernel: [250635.746760] usb 1-3: SerialNumber: A600HD1H
Mar 29 12:11:24 perplexities kernel: [250635.754065] ftdi_sio 1-3:1.0: FTDI USB Serial Device converter detected
Mar 29 12:11:24 perplexities kernel: [250635.754159] usb 1-3: Detected FT232RL
Mar 29 12:11:24 perplexities kernel: [250635.754911] usb 1-3: FTDI USB Serial Device converter now attached to ttyUSB0
Mar 29 12:21:53 perplexities kernel: [    0.000000] microcode: microcode updated early to revision 0xd6, date = 2019-10-03
Mar 29 12:21:53 perplexities kernel: [    0.000000] Linux version 5.3.0-42-generic (buildd@lcy01-amd64-026) (gcc version 9.2.1 20191008 (Ubuntu 9.2.1-9ubuntu2)) #34-Ubuntu SMP Fri Feb 28 05:49:40 UTC 2020 (Ubuntu 5.3.0-42.34-generic 5.3.18)
Mar 29 12:21:53 perplexities kernel: [    0.000000] Command line: BOOT_IMAGE=/vmlinuz-5.3.0-42-generic root=/dev/mapper/perplexities--vg-root ro quiet splash pci=noaer vt.handoff=7
Mar 29 12:21:53 perplexities kernel: [    0.000000] KERNEL supported cpus:
Mar 29 12:21:53 perplexities kernel: [    0.000000]   Intel GenuineIntel
Mar 29 12:21:53 perplexities kernel: [    0.000000]   AMD AuthenticAMD
Mar 29 12:21:53 perplexities kernel: [    0.000000]   Hygon HygonGenuine
Mar 29 12:21:53 perplexities kernel: [    0.000000]   Centaur CentaurHauls
Mar 29 12:21:53 perplexities kernel: [    0.000000]   zhaoxin   Shanghai  
Mar 29 12:21:53 perplexities kernel: [    0.000000] x86/fpu: Supporting XSAVE feature 0x001: 'x87 floating point registers'
Mar 29 12:21:53 perplexities kernel: [    0.000000] x86/fpu: Supporting XSAVE feature 0x002: 'SSE registers'
Mar 29 12:21:53 perplexities kernel: [    0.000000] x86/fpu: Supporting XSAVE feature 0x004: 'AVX registers'
Mar 29 12:21:53 perplexities kernel: [    0.000000] x86/fpu: Supporting XSAVE feature 0x008: 'MPX bounds registers'
Mar 29 12:21:53 perplexities kernel: [    0.000000] x86/fpu: Supporting XSAVE feature 0x010: 'MPX CSR'
Mar 29 12:21:53 perplexities kernel: [    0.000000] x86/fpu: xstate_offset[2]:  576, xstate_sizes[2]:  256
Mar 29 12:21:53 perplexities kernel: [    0.000000] x86/fpu: xstate_offset[3]:  832, xstate_sizes[3]:   64
Mar 29 12:21:53 perplexities kernel: [    0.000000] x86/fpu: xstate_offset[4]:  896, xstate_sizes[4]:   64
Mar 29 12:21:53 perplexities kernel: [    0.000000] x86/fpu: Enabled xstate features 0x1f, context size is 960 bytes, using 'compacted' format.
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-provided physical RAM map:
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009c7ff] usable
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x000000000009c800-0x000000000009ffff] reserved
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x00000000000e0000-0x00000000000fffff] reserved
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x0000000000100000-0x000000008228dfff] usable
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x000000008228e000-0x000000008228efff] ACPI NVS
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x000000008228f000-0x00000000822b8fff] reserved
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x00000000822b9000-0x000000008515efff] usable
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x000000008515f000-0x0000000085e6afff] reserved
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x0000000085e6b000-0x000000008621bfff] usable
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x000000008621c000-0x00000000870abfff] ACPI NVS
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x00000000870ac000-0x0000000087f7efff] reserved
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x0000000087f7f000-0x0000000087ffefff] usable
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x0000000088000000-0x00000000880fffff] reserved
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x00000000e0000000-0x00000000efffffff] reserved
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x00000000fe000000-0x00000000fe010fff] reserved
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x00000000fec00000-0x00000000fec00fff] reserved
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x00000000fee00000-0x00000000fee00fff] reserved
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x00000000ff000000-0x00000000ffffffff] reserved
Mar 29 12:21:53 perplexities kernel: [    0.000000] BIOS-e820: [mem 0x0000000100000000-0x0000000173ffffff] usable
Mar 29 12:21:53 perplexities kernel: [    0.000000] NX (Execute Disable) protection: active
Mar 29 12:21:53 perplexities kernel: [    0.000000] SMBIOS 3.0.0 present.
Mar 29 12:21:53 perplexities kernel: [    0.000000] DMI: ASUSTeK COMPUTER INC. P553UA/P553UA, BIOS P553UA.303 01/25/2017
Mar 29 12:21:53 perplexities kernel: [    0.000000] tsc: Detected 2400.000 MHz processor
Mar 29 12:21:53 perplexities kernel: [    0.002309] e820: update [mem 0x00000000-0x00000fff] usable ==> reserved
Mar 29 12:21:53 perplexities kernel: [    0.002311] e820: remove [mem 0x000a0000-0x000fffff] usable
Mar 29 12:21:53 perplexities kernel: [    0.002318] last_pfn = 0x174000 max_arch_pfn = 0x400000000
Mar 29 12:21:53 perplexities kernel: [    0.002322] MTRR default type: write-back
Mar 29 12:21:53 perplexities kernel: [    0.002323] MTRR fixed ranges enabled:
Mar 29 12:21:53 perplexities kernel: [    0.002325]   00000-9FFFF write-back
Mar 29 12:21:53 perplexities kernel: [    0.002325]   A0000-BFFFF uncachable
Mar 29 12:21:53 perplexities kernel: [    0.002326]   C0000-FFFFF write-protect
Mar 29 12:21:53 perplexities kernel: [    0.002327] MTRR variable ranges enabled:
Mar 29 12:21:53 perplexities kernel: [    0.002329]   0 base 00C0000000 mask 7FC0000000 uncachable
Mar 29 12:21:53 perplexities kernel: [    0.002330]   1 base 00A0000000 mask 7FE0000000 uncachable
Mar 29 12:21:53 perplexities kernel: [    0.002331]   2 base 0090000000 mask 7FF0000000 uncachable
Mar 29 12:21:53 perplexities kernel: [    0.002331]   3 base 008C000000 mask 7FFC000000 uncachable
Mar 29 12:21:53 perplexities kernel: [    0.002332]   4 base 008A000000 mask 7FFE000000 uncachable
Mar 29 12:21:53 perplexities kernel: [    0.002333]   5 base 0089000000 mask 7FFF000000 uncachable
Mar 29 12:21:53 perplexities kernel: [    0.002334]   6 base 0088800000 mask 7FFF800000 uncachable
Mar 29 12:21:53 perplexities kernel: [    0.002334]   7 disabled
Mar 29 12:21:53 perplexities kernel: [    0.002335]   8 disabled
Mar 29 12:21:53 perplexities kernel: [    0.002335]   9 disabled
Mar 29 12:21:53 perplexities kernel: [    0.002743] x86/PAT: Configuration [0-7]: WB  WC  UC- UC  WB  WP  UC- WT  
Mar 29 12:21:53 perplexities kernel: [    0.002900] last_pfn = 0x87fff max_arch_pfn = 0x400000000
Mar 29 12:21:53 perplexities kernel: [    0.011905] found SMP MP-table at [mem 0x000fcc30-0x000fcc3f]
Mar 29 12:21:53 perplexities kernel: [    0.011990] check: Scanning 1 areas for low memory corruption
Mar 29 12:21:53 perplexities kernel: [    0.011994] Using GB pages for direct mapping
Mar 29 12:21:53 perplexities kernel: [    0.011996] BRK [0x7b201000, 0x7b201fff] PGTABLE
Mar 29 12:21:53 perplexities kernel: [    0.011998] BRK [0x7b202000, 0x7b202fff] PGTABLE
Mar 29 12:21:53 perplexities kernel: [    0.011999] BRK [0x7b203000, 0x7b203fff] PGTABLE
Mar 29 12:21:53 perplexities kernel: [    0.012027] BRK [0x7b204000, 0x7b204fff] PGTABLE
Mar 29 12:21:53 perplexities kernel: [    0.012028] BRK [0x7b205000, 0x7b205fff] PGTABLE
Mar 29 12:21:53 perplexities kernel: [    0.012310] BRK [0x7b206000, 0x7b206fff] PGTABLE
Mar 29 12:21:53 perplexities kernel: [    0.012368] BRK [0x7b207000, 0x7b207fff] PGTABLE
Mar 29 12:21:53 perplexities kernel: [    0.012446] BRK [0x7b208000, 0x7b208fff] PGTABLE
Mar 29 12:21:53 perplexities kernel: [    0.012521] BRK [0x7b209000, 0x7b209fff] PGTABLE
Mar 29 12:21:53 perplexities kernel: [    0.012575] RAMDISK: [mem 0x2e47f000-0x33236fff]
Mar 29 12:21:53 perplexities kernel: [    0.012585] ACPI: Early table checksum verification disabled
Mar 29 12:21:53 perplexities kernel: [    0.012588] ACPI: RSDP 0x00000000000F05B0 000024 (v02 _ASUS_)
Mar 29 12:21:53 perplexities kernel: [    0.012592] ACPI: XSDT 0x00000000863200A0 0000B4 (v01 _ASUS_ Notebook 01072009 AMI  00010013)
Mar 29 12:21:53 perplexities kernel: [    0.012598] ACPI: FACP 0x0000000086346068 00010C (v05 _ASUS_ Notebook 01072009 AMI  00010013)
Mar 29 12:21:53 perplexities kernel: [    0.012603] ACPI: DSDT 0x00000000863201E8 025E7A (v02 _ASUS_ Notebook 01072009 INTL 20120913)
Mar 29 12:21:53 perplexities kernel: [    0.012606] ACPI: FACS 0x0000000087092F80 000040
Mar 29 12:21:53 perplexities kernel: [    0.012609] ACPI: APIC 0x0000000086346178 000084 (v03 _ASUS_ Notebook 01072009 AMI  00010013)
Mar 29 12:21:53 perplexities kernel: [    0.012612] ACPI: FPDT 0x0000000086346200 000044 (v01 _ASUS_ Notebook 01072009 AMI  00010013)
Mar 29 12:21:53 perplexities kernel: [    0.012614] ACPI: FIDT 0x0000000086346248 00009C (v01 _ASUS_ Notebook 01072009 AMI  00010013)
Mar 29 12:21:53 perplexities kernel: [    0.012617] ACPI: MCFG 0x00000000863462E8 00003C (v01 _ASUS_ Notebook 01072009 MSFT 00000097)
Mar 29 12:21:53 perplexities kernel: [    0.012620] ACPI: HPET 0x0000000086346328 000038 (v01 _ASUS_ Notebook 01072009 AMI. 0005000B)
Mar 29 12:21:53 perplexities kernel: [    0.012623] ACPI: SSDT 0x0000000086346360 000315 (v01 SataRe SataTabl 00001000 INTL 20120913)
Mar 29 12:21:53 perplexities kernel: [    0.012626] ACPI: ECDT 0x0000000086346678 0000C1 (v01 _ASUS_ Notebook 01072009 AMI. 00000005)
Mar 29 12:21:53 perplexities kernel: [    0.012628] ACPI: LPIT 0x0000000086346740 000094 (v01 INTEL  SKL-ULT  00000000 MSFT 0000005F)
Mar 29 12:21:53 perplexities kernel: [    0.012631] ACPI: SSDT 0x00000000863467D8 000248 (v02 INTEL  sensrhub 00000000 INTL 20120913)
Mar 29 12:21:53 perplexities kernel: [    0.012634] ACPI: DBGP 0x0000000086346A20 000034 (v01 INTEL           00000000 MSFT 0000005F)
Mar 29 12:21:53 perplexities kernel: [    0.012637] ACPI: DBG2 0x0000000086346A58 000054 (v00 INTEL           00000000 MSFT 0000005F)
Mar 29 12:21:53 perplexities kernel: [    0.012640] ACPI: SSDT 0x0000000086346AB0 003DB2 (v02 DptfTa DptfTabl 00001000 INTL 20120913)
Mar 29 12:21:53 perplexities kernel: [    0.012643] ACPI: SSDT 0x000000008634A868 005850 (v02 SaSsdt SaSsdt   00003000 INTL 20120913)
Mar 29 12:21:53 perplexities kernel: [    0.012646] ACPI: UEFI 0x00000000863500B8 000042 (v01                 00000000      00000000)
Mar 29 12:21:53 perplexities kernel: [    0.012649] ACPI: SSDT 0x0000000086350100 000E73 (v02 CpuRef CpuSsdt  00003000 INTL 20120913)
Mar 29 12:21:53 perplexities kernel: [    0.012652] ACPI: DMAR 0x0000000086350F78 0000A8 (v01 INTEL  SKL      00000001 INTL 00000001)
Mar 29 12:21:53 perplexities kernel: [    0.012655] ACPI: TPM2 0x0000000086351020 000034 (v03        Tpm2Tabl 00000001 AMI  00000000)
Mar 29 12:21:53 perplexities kernel: [    0.012665] ACPI: Local APIC address 0xfee00000
Mar 29 12:21:53 perplexities kernel: [    0.013022] No NUMA configuration found
Mar 29 12:21:53 perplexities kernel: [    0.013023] Faking a node at [mem 0x0000000000000000-0x0000000173ffffff]
Mar 29 12:21:53 perplexities kernel: [    0.013036] NODE_DATA(0) allocated [mem 0x173fd3000-0x173ffdfff]
Mar 29 12:21:53 perplexities kernel: [    0.013306] Zone ranges:
Mar 29 12:21:53 perplexities kernel: [    0.013306]   DMA      [mem 0x0000000000001000-0x0000000000ffffff]
Mar 29 12:21:53 perplexities kernel: [    0.013308]   DMA32    [mem 0x0000000001000000-0x00000000ffffffff]
Mar 29 12:21:53 perplexities kernel: [    0.013309]   Normal   [mem 0x0000000100000000-0x0000000173ffffff]
Mar 29 12:21:53 perplexities kernel: [    0.013310]   Device   empty
Mar 29 12:21:53 perplexities kernel: [    0.013311] Movable zone start for each node
Mar 29 12:21:53 perplexities kernel: [    0.013314] Early memory node ranges
Mar 29 12:21:53 perplexities kernel: [    0.013315]   node   0: [mem 0x0000000000001000-0x000000000009bfff]
Mar 29 12:21:53 perplexities kernel: [    0.013316]   node   0: [mem 0x0000000000100000-0x000000008228dfff]
Mar 29 12:21:53 perplexities kernel: [    0.013317]   node   0: [mem 0x00000000822b9000-0x000000008515efff]
Mar 29 12:21:53 perplexities kernel: [    0.013318]   node   0: [mem 0x0000000085e6b000-0x000000008621bfff]
Mar 29 12:21:53 perplexities kernel: [    0.013318]   node   0: [mem 0x0000000087f7f000-0x0000000087ffefff]
Mar 29 12:21:53 perplexities kernel: [    0.013319]   node   0: [mem 0x0000000100000000-0x0000000173ffffff]
Mar 29 12:21:53 perplexities kernel: [    0.013430] Zeroed struct page in unavailable ranges: 11008 pages
Mar 29 12:21:53 perplexities kernel: [    0.013432] Initmem setup node 0 [mem 0x0000000000001000-0x0000000173ffffff]
Mar 29 12:21:53 perplexities kernel: [    0.013433] On node 0 totalpages: 1021184
Mar 29 12:21:53 perplexities kernel: [    0.013434]   DMA zone: 64 pages used for memmap
Mar 29 12:21:53 perplexities kernel: [    0.013435]   DMA zone: 21 pages reserved
Mar 29 12:21:53 perplexities kernel: [    0.013436]   DMA zone: 3995 pages, LIFO batch:0
Mar 29 12:21:53 perplexities kernel: [    0.013488]   DMA32 zone: 8470 pages used for memmap
Mar 29 12:21:53 perplexities kernel: [    0.013489]   DMA32 zone: 542053 pages, LIFO batch:63
Mar 29 12:21:53 perplexities kernel: [    0.023984]   Normal zone: 7424 pages used for memmap
Mar 29 12:21:53 perplexities kernel: [    0.023985]   Normal zone: 475136 pages, LIFO batch:63
Mar 29 12:21:53 perplexities kernel: [    0.031058] Reserving Intel graphics memory at [mem 0x89000000-0x8affffff]
Mar 29 12:21:53 perplexities kernel: [    0.031202] ACPI: PM-Timer IO Port: 0x1808
Mar 29 12:21:53 perplexities kernel: [    0.031204] ACPI: Local APIC address 0xfee00000
Mar 29 12:21:53 perplexities kernel: [    0.031210] ACPI: LAPIC_NMI (acpi_id[0x01] high edge lint[0x1])
Mar 29 12:21:53 perplexities kernel: [    0.031211] ACPI: LAPIC_NMI (acpi_id[0x02] high edge lint[0x1])
Mar 29 12:21:53 perplexities kernel: [    0.031212] ACPI: LAPIC_NMI (acpi_id[0x03] high edge lint[0x1])
Mar 29 12:21:53 perplexities kernel: [    0.031212] ACPI: LAPIC_NMI (acpi_id[0x04] high edge lint[0x1])
Mar 29 12:21:53 perplexities kernel: [    0.031240] IOAPIC[0]: apic_id 2, version 32, address 0xfec00000, GSI 0-119
Mar 29 12:21:53 perplexities kernel: [    0.031242] ACPI: INT_SRC_OVR (bus 0 bus_irq 0 global_irq 2 dfl dfl)
Mar 29 12:21:53 perplexities kernel: [    0.031244] ACPI: INT_SRC_OVR (bus 0 bus_irq 9 global_irq 9 high level)
Mar 29 12:21:53 perplexities kernel: [    0.031245] ACPI: IRQ0 used by override.
Mar 29 12:21:53 perplexities kernel: [    0.031246] ACPI: IRQ9 used by override.
Mar 29 12:21:53 perplexities kernel: [    0.031248] Using ACPI (MADT) for SMP configuration information
Mar 29 12:21:53 perplexities kernel: [    0.031249] ACPI: HPET id: 0x8086a701 base: 0xfed00000
Mar 29 12:21:53 perplexities kernel: [    0.031252] smpboot: Allowing 4 CPUs, 0 hotplug CPUs
Mar 29 12:21:53 perplexities kernel: [    0.031275] PM: Registered nosave memory: [mem 0x00000000-0x00000fff]
Mar 29 12:21:53 perplexities kernel: [    0.031277] PM: Registered nosave memory: [mem 0x0009c000-0x0009cfff]
Mar 29 12:21:53 perplexities kernel: [    0.031277] PM: Registered nosave memory: [mem 0x0009d000-0x0009ffff]
Mar 29 12:21:53 perplexities kernel: [    0.031278] PM: Registered nosave memory: [mem 0x000a0000-0x000dffff]
Mar 29 12:21:53 perplexities kernel: [    0.031278] PM: Registered nosave memory: [mem 0x000e0000-0x000fffff]
Mar 29 12:21:53 perplexities kernel: [    0.031280] PM: Registered nosave memory: [mem 0x8228e000-0x8228efff]
Mar 29 12:21:53 perplexities kernel: [    0.031281] PM: Registered nosave memory: [mem 0x8228f000-0x822b8fff]
Mar 29 12:21:53 perplexities kernel: [    0.031282] PM: Registered nosave memory: [mem 0x8515f000-0x85e6afff]
Mar 29 12:21:53 perplexities kernel: [    0.031283] PM: Registered nosave memory: [mem 0x8621c000-0x870abfff]
Mar 29 12:21:53 perplexities kernel: [    0.031284] PM: Registered nosave memory: [mem 0x870ac000-0x87f7efff]
Mar 29 12:21:53 perplexities kernel: [    0.031286] PM: Registered nosave memory: [mem 0x87fff000-0x87ffffff]
Mar 29 12:21:53 perplexities kernel: [    0.031286] PM: Registered nosave memory: [mem 0x88000000-0x880fffff]
Mar 29 12:21:53 perplexities kernel: [    0.031287] PM: Registered nosave memory: [mem 0x88100000-0x88ffffff]
Mar 29 12:21:53 perplexities kernel: [    0.031287] PM: Registered nosave memory: [mem 0x89000000-0x8affffff]
Mar 29 12:21:53 perplexities kernel: [    0.031288] PM: Registered nosave memory: [mem 0x8b000000-0xdfffffff]
Mar 29 12:21:53 perplexities kernel: [    0.031288] PM: Registered nosave memory: [mem 0xe0000000-0xefffffff]
Mar 29 12:21:53 perplexities kernel: [    0.031289] PM: Registered nosave memory: [mem 0xf0000000-0xfdffffff]
Mar 29 12:21:53 perplexities kernel: [    0.031289] PM: Registered nosave memory: [mem 0xfe000000-0xfe010fff]
Mar 29 12:21:53 perplexities kernel: [    0.031290] PM: Registered nosave memory: [mem 0xfe011000-0xfebfffff]
Mar 29 12:21:53 perplexities kernel: [    0.031290] PM: Registered nosave memory: [mem 0xfec00000-0xfec00fff]
Mar 29 12:21:53 perplexities kernel: [    0.031291] PM: Registered nosave memory: [mem 0xfec01000-0xfedfffff]
Mar 29 12:21:53 perplexities kernel: [    0.031292] PM: Registered nosave memory: [mem 0xfee00000-0xfee00fff]
Mar 29 12:21:53 perplexities kernel: [    0.031292] PM: Registered nosave memory: [mem 0xfee01000-0xfeffffff]
Mar 29 12:21:53 perplexities kernel: [    0.031293] PM: Registered nosave memory: [mem 0xff000000-0xffffffff]
Mar 29 12:21:53 perplexities kernel: [    0.031294] [mem 0x8b000000-0xdfffffff] available for PCI devices
Mar 29 12:21:53 perplexities kernel: [    0.031295] Booting paravirtualized kernel on bare hardware
Mar 29 12:21:53 perplexities kernel: [    0.031299] clocksource: refined-jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645519600211568 ns
Mar 29 12:21:53 perplexities kernel: [    0.031304] setup_percpu: NR_CPUS:8192 nr_cpumask_bits:4 nr_cpu_ids:4 nr_node_ids:1
Mar 29 12:21:53 perplexities kernel: [    0.031564] percpu: Embedded 54 pages/cpu s184320 r8192 d28672 u524288
Mar 29 12:21:53 perplexities kernel: [    0.031571] pcpu-alloc: s184320 r8192 d28672 u524288 alloc=1*2097152
Mar 29 12:21:53 perplexities kernel: [    0.031572] pcpu-alloc: [0] 0 1 2 3 
Mar 29 12:21:53 perplexities kernel: [    0.031598] Built 1 zonelists, mobility grouping on.  Total pages: 1005205
Mar 29 12:21:53 perplexities kernel: [    0.031599] Policy zone: Normal
Mar 29 12:21:53 perplexities kernel: [    0.031600] Kernel command line: BOOT_IMAGE=/vmlinuz-5.3.0-42-generic root=/dev/mapper/perplexities--vg-root ro quiet splash pci=noaer vt.handoff=7
Mar 29 12:21:53 perplexities kernel: [    0.032066] Dentry cache hash table entries: 524288 (order: 10, 4194304 bytes, linear)
Mar 29 12:21:53 perplexities kernel: [    0.032306] Inode-cache hash table entries: 262144 (order: 9, 2097152 bytes, linear)
Mar 29 12:21:53 perplexities kernel: [    0.032362] mem auto-init: stack:off, heap alloc:on, heap free:off
Mar 29 12:21:53 perplexities kernel: [    0.039395] Calgary: detecting Calgary via BIOS EBDA area
Mar 29 12:21:53 perplexities kernel: [    0.039397] Calgary: Unable to locate Rio Grande table in EBDA - bailing!
Mar 29 12:21:53 perplexities kernel: [    0.056217] Memory: 3833348K/4084736K available (14339K kernel code, 2387K rwdata, 4724K rodata, 2676K init, 5044K bss, 251388K reserved, 0K cma-reserved)
Mar 29 12:21:53 perplexities kernel: [    0.056385] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=4, Nodes=1
Mar 29 12:21:53 perplexities kernel: [    0.056398] Kernel/User page tables isolation: enabled
Mar 29 12:21:53 perplexities kernel: [    0.056414] ftrace: allocating 43572 entries in 171 pages
Mar 29 12:21:53 perplexities kernel: [    0.075622] rcu: Hierarchical RCU implementation.
Mar 29 12:21:53 perplexities kernel: [    0.075624] rcu: 	RCU restricting CPUs from NR_CPUS=8192 to nr_cpu_ids=4.
Mar 29 12:21:53 perplexities kernel: [    0.075624] 	Tasks RCU enabled.
Mar 29 12:21:53 perplexities kernel: [    0.075625] rcu: RCU calculated value of scheduler-enlistment delay is 25 jiffies.
Mar 29 12:21:53 perplexities kernel: [    0.075626] rcu: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=4
Mar 29 12:21:53 perplexities kernel: [    0.079338] NR_IRQS: 524544, nr_irqs: 1024, preallocated irqs: 16
Mar 29 12:21:53 perplexities kernel: [    0.079689] random: crng done (trusting CPU's manufacturer)
Mar 29 12:21:53 perplexities kernel: [    0.079717] vt handoff: transparent VT on vt#7
Mar 29 12:21:53 perplexities kernel: [    0.079724] Console: colour dummy device 80x25
Mar 29 12:21:53 perplexities kernel: [    0.079729] printk: console [tty0] enabled
Mar 29 12:21:53 perplexities kernel: [    0.079747] ACPI: Core revision 20190703
Mar 29 12:21:53 perplexities kernel: [    0.080078] clocksource: hpet: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 79635855245 ns
Mar 29 12:21:53 perplexities kernel: [    0.080147] APIC: Switch to symmetric I/O mode setup
Mar 29 12:21:53 perplexities kernel: [    0.080149] DMAR: Host address width 39
Mar 29 12:21:53 perplexities kernel: [    0.080150] DMAR: DRHD base: 0x000000fed90000 flags: 0x0
Mar 29 12:21:53 perplexities kernel: [    0.080156] DMAR: dmar0: reg_base_addr fed90000 ver 1:0 cap 1c0000c40660462 ecap 7e3ff0505e
Mar 29 12:21:53 perplexities kernel: [    0.080157] DMAR: DRHD base: 0x000000fed91000 flags: 0x1
Mar 29 12:21:53 perplexities kernel: [    0.080161] DMAR: dmar1: reg_base_addr fed91000 ver 1:0 cap d2008c40660462 ecap f050da
Mar 29 12:21:53 perplexities kernel: [    0.080162] DMAR: RMRR base: 0x00000085c0d000 end: 0x00000085c2cfff
Mar 29 12:21:53 perplexities kernel: [    0.080163] DMAR: RMRR base: 0x00000088800000 end: 0x0000008affffff
Mar 29 12:21:53 perplexities kernel: [    0.080165] DMAR-IR: IOAPIC id 2 under DRHD base  0xfed91000 IOMMU 1
Mar 29 12:21:53 perplexities kernel: [    0.080166] DMAR-IR: HPET id 0 under DRHD base 0xfed91000
Mar 29 12:21:53 perplexities kernel: [    0.080166] DMAR-IR: x2apic is disabled because BIOS sets x2apic opt out bit.
Mar 29 12:21:53 perplexities kernel: [    0.080167] DMAR-IR: Use 'intremap=no_x2apic_optout' to override the BIOS setting.
Mar 29 12:21:53 perplexities kernel: [    0.082119] DMAR-IR: Enabled IRQ remapping in xapic mode
Mar 29 12:21:53 perplexities kernel: [    0.082119] x2apic: IRQ remapping doesn't support X2APIC mode
Mar 29 12:21:53 perplexities kernel: [    0.086100] ..TIMER: vector=0x30 apic1=0 pin1=2 apic2=-1 pin2=-1
Mar 29 12:21:53 perplexities kernel: [    0.104119] clocksource: tsc-early: mask: 0xffffffffffffffff max_cycles: 0x22983777dd9, max_idle_ns: 440795300422 ns
Mar 29 12:21:53 perplexities kernel: [    0.104124] Calibrating delay loop (skipped), value calculated using timer frequency.. 4800.00 BogoMIPS (lpj=9600000)
Mar 29 12:21:53 perplexities kernel: [    0.104126] pid_max: default: 32768 minimum: 301
Mar 29 12:21:53 perplexities kernel: [    0.104161] LSM: Security Framework initializing
Mar 29 12:21:53 perplexities kernel: [    0.104172] Yama: becoming mindful.
Mar 29 12:21:53 perplexities kernel: [    0.104213] AppArmor: AppArmor initialized
Mar 29 12:21:53 perplexities kernel: [    0.104260] Mount-cache hash table entries: 8192 (order: 4, 65536 bytes, linear)
Mar 29 12:21:53 perplexities kernel: [    0.104274] Mountpoint-cache hash table entries: 8192 (order: 4, 65536 bytes, linear)
Mar 29 12:21:53 perplexities kernel: [    0.104445] *** VALIDATE proc ***
Mar 29 12:21:53 perplexities kernel: [    0.104497] *** VALIDATE cgroup1 ***
Mar 29 12:21:53 perplexities kernel: [    0.104498] *** VALIDATE cgroup2 ***
Mar 29 12:21:53 perplexities kernel: [    0.104577] mce: CPU0: Thermal monitoring enabled (TM1)
Mar 29 12:21:53 perplexities kernel: [    0.104595] process: using mwait in idle threads
Mar 29 12:21:53 perplexities kernel: [    0.104597] Last level iTLB entries: 4KB 64, 2MB 8, 4MB 8
Mar 29 12:21:53 perplexities kernel: [    0.104598] Last level dTLB entries: 4KB 64, 2MB 0, 4MB 0, 1GB 4
Mar 29 12:21:53 perplexities kernel: [    0.104601] Spectre V1 : Mitigation: usercopy/swapgs barriers and __user pointer sanitization
Mar 29 12:21:53 perplexities kernel: [    0.104602] Spectre V2 : Mitigation: Full generic retpoline
Mar 29 12:21:53 perplexities kernel: [    0.104603] Spectre V2 : Spectre v2 / SpectreRSB mitigation: Filling RSB on context switch
Mar 29 12:21:53 perplexities kernel: [    0.104603] Spectre V2 : Enabling Restricted Speculation for firmware calls
Mar 29 12:21:53 perplexities kernel: [    0.104605] Spectre V2 : mitigation: Enabling conditional Indirect Branch Prediction Barrier
Mar 29 12:21:53 perplexities kernel: [    0.104605] Spectre V2 : User space: Mitigation: STIBP via seccomp and prctl
Mar 29 12:21:53 perplexities kernel: [    0.104607] Speculative Store Bypass: Mitigation: Speculative Store Bypass disabled via prctl and seccomp
Mar 29 12:21:53 perplexities kernel: [    0.104610] MDS: Mitigation: Clear CPU buffers
Mar 29 12:21:53 perplexities kernel: [    0.104885] Freeing SMP alternatives memory: 36K
Mar 29 12:21:53 perplexities kernel: [    0.108201] TSC deadline timer enabled
Mar 29 12:21:53 perplexities kernel: [    0.108206] smpboot: CPU0: Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz (family: 0x6, model: 0x4e, stepping: 0x3)
Mar 29 12:21:53 perplexities kernel: [    0.108312] Performance Events: PEBS fmt3+, Skylake events, 32-deep LBR, full-width counters, Intel PMU driver.
Mar 29 12:21:53 perplexities kernel: [    0.108318] ... version:                4
Mar 29 12:21:53 perplexities kernel: [    0.108319] ... bit width:              48
Mar 29 12:21:53 perplexities kernel: [    0.108319] ... generic registers:      4
Mar 29 12:21:53 perplexities kernel: [    0.108320] ... value mask:             0000ffffffffffff
Mar 29 12:21:53 perplexities kernel: [    0.108320] ... max period:             00007fffffffffff
Mar 29 12:21:53 perplexities kernel: [    0.108321] ... fixed-purpose events:   3
Mar 29 12:21:53 perplexities kernel: [    0.108321] ... event mask:             000000070000000f
Mar 29 12:21:53 perplexities kernel: [    0.108367] rcu: Hierarchical SRCU implementation.
Mar 29 12:21:53 perplexities kernel: [    0.109313] NMI watchdog: Enabled. Permanently consumes one hw-PMU counter.
Mar 29 12:21:53 perplexities kernel: [    0.109368] smp: Bringing up secondary CPUs ...
Mar 29 12:21:53 perplexities kernel: [    0.109459] x86: Booting SMP configuration:
Mar 29 12:21:53 perplexities kernel: [    0.109460] .... node  #0, CPUs:      #1 #2
Mar 29 12:21:53 perplexities kernel: [    0.112789] MDS CPU bug present and SMT on, data leak possible. See https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/mds.html for more details.
Mar 29 12:21:53 perplexities kernel: [    0.112789]  #3
Mar 29 12:21:53 perplexities kernel: [    0.112789] smp: Brought up 1 node, 4 CPUs
Mar 29 12:21:53 perplexities kernel: [    0.112789] smpboot: Max logical packages: 1
Mar 29 12:21:53 perplexities kernel: [    0.112789] smpboot: Total of 4 processors activated (19200.00 BogoMIPS)
Mar 29 12:21:53 perplexities kernel: [    0.114024] devtmpfs: initialized
Mar 29 12:21:53 perplexities kernel: [    0.114024] x86/mm: Memory block size: 128MB
Mar 29 12:21:53 perplexities kernel: [    0.114024] PM: Registering ACPI NVS region [mem 0x8228e000-0x8228efff] (4096 bytes)
Mar 29 12:21:53 perplexities kernel: [    0.114024] PM: Registering ACPI NVS region [mem 0x8621c000-0x870abfff] (15269888 bytes)
Mar 29 12:21:53 perplexities kernel: [    0.116378] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
Mar 29 12:21:53 perplexities kernel: [    0.116378] futex hash table entries: 1024 (order: 4, 65536 bytes, linear)
Mar 29 12:21:53 perplexities kernel: [    0.116378] pinctrl core: initialized pinctrl subsystem
Mar 29 12:21:53 perplexities kernel: [    0.116378] PM: RTC time: 10:20:49, date: 2020-03-29
Mar 29 12:21:53 perplexities kernel: [    0.116501] NET: Registered protocol family 16
Mar 29 12:21:53 perplexities kernel: [    0.116599] audit: initializing netlink subsys (disabled)
Mar 29 12:21:53 perplexities kernel: [    0.116605] audit: type=2000 audit(1585477249.036:1): state=initialized audit_enabled=0 res=1
Mar 29 12:21:53 perplexities kernel: [    0.116605] EISA bus registered
Mar 29 12:21:53 perplexities kernel: [    0.116605] cpuidle: using governor ladder
Mar 29 12:21:53 perplexities kernel: [    0.116605] cpuidle: using governor menu
Mar 29 12:21:53 perplexities kernel: [    0.116605] ACPI FADT declares the system doesn't support PCIe ASPM, so disable it
Mar 29 12:21:53 perplexities kernel: [    0.116605] ACPI: bus type PCI registered
Mar 29 12:21:53 perplexities kernel: [    0.116605] acpiphp: ACPI Hot Plug PCI Controller Driver version: 0.5
Mar 29 12:21:53 perplexities kernel: [    0.116605] PCI: MMCONFIG for domain 0000 [bus 00-ff] at [mem 0xe0000000-0xefffffff] (base 0xe0000000)
Mar 29 12:21:53 perplexities kernel: [    0.116605] PCI: MMCONFIG at [mem 0xe0000000-0xefffffff] reserved in E820
Mar 29 12:21:53 perplexities kernel: [    0.116605] PCI: Using configuration type 1 for base access
Mar 29 12:21:53 perplexities kernel: [    0.116605] ENERGY_PERF_BIAS: Set to 'normal', was 'performance'
Mar 29 12:21:53 perplexities kernel: [    0.117509] HugeTLB registered 1.00 GiB page size, pre-allocated 0 pages
Mar 29 12:21:53 perplexities kernel: [    0.117509] HugeTLB registered 2.00 MiB page size, pre-allocated 0 pages
Mar 29 12:21:53 perplexities kernel: [    0.120215] ACPI: Added _OSI(Module Device)
Mar 29 12:21:53 perplexities kernel: [    0.120216] ACPI: Added _OSI(Processor Device)
Mar 29 12:21:53 perplexities kernel: [    0.120217] ACPI: Added _OSI(3.0 _SCP Extensions)
Mar 29 12:21:53 perplexities kernel: [    0.120218] ACPI: Added _OSI(Processor Aggregator Device)
Mar 29 12:21:53 perplexities kernel: [    0.120219] ACPI: Added _OSI(Linux-Dell-Video)
Mar 29 12:21:53 perplexities kernel: [    0.120220] ACPI: Added _OSI(Linux-Lenovo-NV-HDMI-Audio)
Mar 29 12:21:53 perplexities kernel: [    0.120220] ACPI: Added _OSI(Linux-HPI-Hybrid-Graphics)
Mar 29 12:21:53 perplexities kernel: [    0.176602] ACPI: 6 ACPI AML tables successfully acquired and loaded
Mar 29 12:21:53 perplexities kernel: [    0.178859] ACPI: EC: EC started
Mar 29 12:21:53 perplexities kernel: [    0.178860] ACPI: EC: interrupt blocked
Mar 29 12:21:53 perplexities kernel: [    0.181565] ACPI: \: Used as first EC
Mar 29 12:21:53 perplexities kernel: [    0.181567] ACPI: \: GPE=0x50, EC_CMD/EC_SC=0x66, EC_DATA=0x62
Mar 29 12:21:53 perplexities kernel: [    0.181567] ACPI: EC: Boot ECDT EC used to handle transactions
Mar 29 12:21:53 perplexities kernel: [    0.183391] ACPI: [Firmware Bug]: BIOS _OSI(Linux) query ignored
Mar 29 12:21:53 perplexities kernel: [    0.190823] ACPI: Dynamic OEM Table Load:
Mar 29 12:21:53 perplexities kernel: [    0.190830] ACPI: SSDT 0xFFFFA0EDEEA3E000 00061E (v02 PmRef  Cpu0Ist  00003000 INTL 20120913)
Mar 29 12:21:53 perplexities kernel: [    0.192998] ACPI: \_PR_.CPU0: _OSC native thermal LVT Acked
Mar 29 12:21:53 perplexities kernel: [    0.194923] ACPI: Dynamic OEM Table Load:
Mar 29 12:21:53 perplexities kernel: [    0.194928] ACPI: SSDT 0xFFFFA0EDEE6CA800 00037F (v02 PmRef  Cpu0Cst  00003001 INTL 20120913)
Mar 29 12:21:53 perplexities kernel: [    0.196955] ACPI: Dynamic OEM Table Load:
Mar 29 12:21:53 perplexities kernel: [    0.196959] ACPI: SSDT 0xFFFFA0EDEEA326C0 00008E (v02 PmRef  Cpu0Hwp  00003000 INTL 20120913)
Mar 29 12:21:53 perplexities kernel: [    0.198824] ACPI: Dynamic OEM Table Load:
Mar 29 12:21:53 perplexities kernel: [    0.198827] ACPI: SSDT 0xFFFFA0EDEE4AD400 000130 (v02 PmRef  HwpLvt   00003000 INTL 20120913)
Mar 29 12:21:53 perplexities kernel: [    0.201578] ACPI: Dynamic OEM Table Load:
Mar 29 12:21:53 perplexities kernel: [    0.201584] ACPI: SSDT 0xFFFFA0EDEEA3B800 0005AA (v02 PmRef  ApIst    00003000 INTL 20120913)
Mar 29 12:21:53 perplexities kernel: [    0.204019] ACPI: Dynamic OEM Table Load:
Mar 29 12:21:53 perplexities kernel: [    0.204023] ACPI: SSDT 0xFFFFA0EDEE4AC400 000119 (v02 PmRef  ApHwp    00003000 INTL 20120913)
Mar 29 12:21:53 perplexities kernel: [    0.206008] ACPI: Dynamic OEM Table Load:
Mar 29 12:21:53 perplexities kernel: [    0.206012] ACPI: SSDT 0xFFFFA0EDEE4AD200 000119 (v02 PmRef  ApCst    00003000 INTL 20120913)
Mar 29 12:21:53 perplexities kernel: [    0.210265] ACPI: Interpreter enabled
Mar 29 12:21:53 perplexities kernel: [    0.210313] ACPI: (supports S0 S3 S4 S5)
Mar 29 12:21:53 perplexities kernel: [    0.210314] ACPI: Using IOAPIC for interrupt routing
Mar 29 12:21:53 perplexities kernel: [    0.210361] PCI: Using host bridge windows from ACPI; if necessary, use "pci=nocrs" and report a bug
Mar 29 12:21:53 perplexities kernel: [    0.211349] ACPI: Enabled 8 GPEs in block 00 to 7F
Mar 29 12:21:53 perplexities kernel: [    0.215853] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.216341] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.216834] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.217326] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.217808] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.218289] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.218767] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.219248] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.219727] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.220215] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.220861] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.221391] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.221875] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.222354] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.222833] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.223312] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.223791] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.224276] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.224757] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.225242] ACPI: Power Resource [WRST] (off)
Mar 29 12:21:53 perplexities kernel: [    0.240809] ACPI: PCI Root Bridge [PCI0] (domain 0000 [bus 00-fe])
Mar 29 12:21:53 perplexities kernel: [    0.240817] acpi PNP0A08:00: _OSC: OS supports [ExtendedConfig ASPM ClockPM Segments MSI HPX-Type3]
Mar 29 12:21:53 perplexities kernel: [    0.242825] acpi PNP0A08:00: _OSC: OS now controls [PCIeHotplug SHPCHotplug PME PCIeCapability LTR]
Mar 29 12:21:53 perplexities kernel: [    0.242826] acpi PNP0A08:00: FADT indicates ASPM is unsupported, using BIOS configuration
Mar 29 12:21:53 perplexities kernel: [    0.243841] PCI host bridge to bus 0000:00
Mar 29 12:21:53 perplexities kernel: [    0.243843] pci_bus 0000:00: root bus resource [io  0x0000-0x0cf7 window]
Mar 29 12:21:53 perplexities kernel: [    0.243845] pci_bus 0000:00: root bus resource [io  0x0d00-0xffff window]
Mar 29 12:21:53 perplexities kernel: [    0.243846] pci_bus 0000:00: root bus resource [mem 0x000a0000-0x000bffff window]
Mar 29 12:21:53 perplexities kernel: [    0.243847] pci_bus 0000:00: root bus resource [mem 0x8b000000-0xdfffffff window]
Mar 29 12:21:53 perplexities kernel: [    0.243848] pci_bus 0000:00: root bus resource [mem 0xfd000000-0xfe7fffff window]
Mar 29 12:21:53 perplexities kernel: [    0.243850] pci_bus 0000:00: root bus resource [bus 00-fe]
Mar 29 12:21:53 perplexities kernel: [    0.243861] pci 0000:00:00.0: [8086:1904] type 00 class 0x060000
Mar 29 12:21:53 perplexities kernel: [    0.244018] pci 0000:00:02.0: [8086:1916] type 00 class 0x030000
Mar 29 12:21:53 perplexities kernel: [    0.244031] pci 0000:00:02.0: reg 0x10: [mem 0xde000000-0xdeffffff 64bit]
Mar 29 12:21:53 perplexities kernel: [    0.244037] pci 0000:00:02.0: reg 0x18: [mem 0xc0000000-0xcfffffff 64bit pref]
Mar 29 12:21:53 perplexities kernel: [    0.244042] pci 0000:00:02.0: reg 0x20: [io  0xf000-0xf03f]
Mar 29 12:21:53 perplexities kernel: [    0.244227] pci 0000:00:04.0: [8086:1903] type 00 class 0x118000
Mar 29 12:21:53 perplexities kernel: [    0.244243] pci 0000:00:04.0: reg 0x10: [mem 0xdfd20000-0xdfd27fff 64bit]
Mar 29 12:21:53 perplexities kernel: [    0.244502] pci 0000:00:14.0: [8086:9d2f] type 00 class 0x0c0330
Mar 29 12:21:53 perplexities kernel: [    0.244527] pci 0000:00:14.0: reg 0x10: [mem 0xdfd10000-0xdfd1ffff 64bit]
Mar 29 12:21:53 perplexities kernel: [    0.244605] pci 0000:00:14.0: PME# supported from D3hot D3cold
Mar 29 12:21:53 perplexities kernel: [    0.244786] pci 0000:00:14.2: [8086:9d31] type 00 class 0x118000
Mar 29 12:21:53 perplexities kernel: [    0.244810] pci 0000:00:14.2: reg 0x10: [mem 0xdfd36000-0xdfd36fff 64bit]
Mar 29 12:21:53 perplexities kernel: [    0.245015] pci 0000:00:16.0: [8086:9d3a] type 00 class 0x078000
Mar 29 12:21:53 perplexities kernel: [    0.245043] pci 0000:00:16.0: reg 0x10: [mem 0xdfd35000-0xdfd35fff 64bit]
Mar 29 12:21:53 perplexities kernel: [    0.245125] pci 0000:00:16.0: PME# supported from D3hot
Mar 29 12:21:53 perplexities kernel: [    0.245319] pci 0000:00:17.0: [8086:9d03] type 00 class 0x010601
Mar 29 12:21:53 perplexities kernel: [    0.245340] pci 0000:00:17.0: reg 0x10: [mem 0xdfd30000-0xdfd31fff]
Mar 29 12:21:53 perplexities kernel: [    0.245348] pci 0000:00:17.0: reg 0x14: [mem 0xdfd34000-0xdfd340ff]
Mar 29 12:21:53 perplexities kernel: [    0.245357] pci 0000:00:17.0: reg 0x18: [io  0xf090-0xf097]
Mar 29 12:21:53 perplexities kernel: [    0.245365] pci 0000:00:17.0: reg 0x1c: [io  0xf080-0xf083]
Mar 29 12:21:53 perplexities kernel: [    0.245373] pci 0000:00:17.0: reg 0x20: [io  0xf060-0xf07f]
Mar 29 12:21:53 perplexities kernel: [    0.245382] pci 0000:00:17.0: reg 0x24: [mem 0xdfd33000-0xdfd337ff]
Mar 29 12:21:53 perplexities kernel: [    0.245430] pci 0000:00:17.0: PME# supported from D3hot
Mar 29 12:21:53 perplexities kernel: [    0.245621] pci 0000:00:1c.0: [8086:9d10] type 01 class 0x060400
Mar 29 12:21:53 perplexities kernel: [    0.245799] pci 0000:00:1c.0: PME# supported from D0 D3hot D3cold
Mar 29 12:21:53 perplexities kernel: [    0.246040] pci 0000:00:1c.4: [8086:9d14] type 01 class 0x060400
Mar 29 12:21:53 perplexities kernel: [    0.246133] pci 0000:00:1c.4: PME# supported from D0 D3hot D3cold
Mar 29 12:21:53 perplexities kernel: [    0.246360] pci 0000:00:1c.5: [8086:9d15] type 01 class 0x060400
Mar 29 12:21:53 perplexities kernel: [    0.246452] pci 0000:00:1c.5: PME# supported from D0 D3hot D3cold
Mar 29 12:21:53 perplexities kernel: [    0.246689] pci 0000:00:1f.0: [8086:9d48] type 00 class 0x060100
Mar 29 12:21:53 perplexities kernel: [    0.246975] pci 0000:00:1f.2: [8086:9d21] type 00 class 0x058000
Mar 29 12:21:53 perplexities kernel: [    0.246993] pci 0000:00:1f.2: reg 0x10: [mem 0xdfd2c000-0xdfd2ffff]
Mar 29 12:21:53 perplexities kernel: [    0.247222] pci 0000:00:1f.3: [8086:9d70] type 00 class 0x040300
Mar 29 12:21:53 perplexities kernel: [    0.247254] pci 0000:00:1f.3: reg 0x10: [mem 0xdfd28000-0xdfd2bfff 64bit]
Mar 29 12:21:53 perplexities kernel: [    0.247290] pci 0000:00:1f.3: reg 0x20: [mem 0xdfd00000-0xdfd0ffff 64bit]
Mar 29 12:21:53 perplexities kernel: [    0.247347] pci 0000:00:1f.3: PME# supported from D3hot D3cold
Mar 29 12:21:53 perplexities kernel: [    0.247611] pci 0000:00:1f.4: [8086:9d23] type 00 class 0x0c0500
Mar 29 12:21:53 perplexities kernel: [    0.247673] pci 0000:00:1f.4: reg 0x10: [mem 0xdfd32000-0xdfd320ff 64bit]
Mar 29 12:21:53 perplexities kernel: [    0.247744] pci 0000:00:1f.4: reg 0x20: [io  0xf040-0xf05f]
Mar 29 12:21:53 perplexities kernel: [    0.248040] pci 0000:00:1c.0: PCI bridge to [bus 01]
Mar 29 12:21:53 perplexities kernel: [    0.248044] pci 0000:00:1c.0:   bridge window [io  0xe000-0xefff]
Mar 29 12:21:53 perplexities kernel: [    0.248047] pci 0000:00:1c.0:   bridge window [mem 0xdf200000-0xdfbfffff]
Mar 29 12:21:53 perplexities kernel: [    0.248051] pci 0000:00:1c.0:   bridge window [mem 0xd0000000-0xd09fffff 64bit pref]
Mar 29 12:21:53 perplexities kernel: [    0.248131] pci 0000:02:00.0: [10ec:8168] type 00 class 0x020000
Mar 29 12:21:53 perplexities kernel: [    0.248163] pci 0000:02:00.0: reg 0x10: [io  0xd000-0xd0ff]
Mar 29 12:21:53 perplexities kernel: [    0.248192] pci 0000:02:00.0: reg 0x18: [mem 0xdfc04000-0xdfc04fff 64bit]
Mar 29 12:21:53 perplexities kernel: [    0.248210] pci 0000:02:00.0: reg 0x20: [mem 0xdfc00000-0xdfc03fff 64bit]
Mar 29 12:21:53 perplexities kernel: [    0.248327] pci 0000:02:00.0: supports D1 D2
Mar 29 12:21:53 perplexities kernel: [    0.248328] pci 0000:02:00.0: PME# supported from D0 D1 D2 D3hot D3cold
Mar 29 12:21:53 perplexities kernel: [    0.248554] pci 0000:00:1c.4: PCI bridge to [bus 02]
Mar 29 12:21:53 perplexities kernel: [    0.248556] pci 0000:00:1c.4:   bridge window [io  0xd000-0xdfff]
Mar 29 12:21:53 perplexities kernel: [    0.248559] pci 0000:00:1c.4:   bridge window [mem 0xdfc00000-0xdfcfffff]
Mar 29 12:21:53 perplexities kernel: [    0.248787] pci 0000:03:00.0: [168c:0042] type 00 class 0x028000
Mar 29 12:21:53 perplexities kernel: [    0.248856] pci 0000:03:00.0: reg 0x10: [mem 0xdf000000-0xdf1fffff 64bit]
Mar 29 12:21:53 perplexities kernel: [    0.249221] pci 0000:03:00.0: PME# supported from D0 D3hot D3cold
Mar 29 12:21:53 perplexities kernel: [    0.249627] pci 0000:00:1c.5: PCI bridge to [bus 03]
Mar 29 12:21:53 perplexities kernel: [    0.249632] pci 0000:00:1c.5:   bridge window [mem 0xdf000000-0xdf1fffff]
Mar 29 12:21:53 perplexities kernel: [    0.252603] ACPI: PCI Interrupt Link [LNKA] (IRQs 3 4 5 6 10 *11 12 14 15)
Mar 29 12:21:53 perplexities kernel: [    0.252679] ACPI: PCI Interrupt Link [LNKB] (IRQs 3 4 5 6 *10 11 12 14 15)
Mar 29 12:21:53 perplexities kernel: [    0.252753] ACPI: PCI Interrupt Link [LNKC] (IRQs 3 4 5 6 10 *11 12 14 15)
Mar 29 12:21:53 perplexities kernel: [    0.252826] ACPI: PCI Interrupt Link [LNKD] (IRQs 3 4 5 6 10 *11 12 14 15)
Mar 29 12:21:53 perplexities kernel: [    0.252899] ACPI: PCI Interrupt Link [LNKE] (IRQs 3 4 5 6 10 *11 12 14 15)
Mar 29 12:21:53 perplexities kernel: [    0.252972] ACPI: PCI Interrupt Link [LNKF] (IRQs 3 4 5 6 10 *11 12 14 15)
Mar 29 12:21:53 perplexities kernel: [    0.253044] ACPI: PCI Interrupt Link [LNKG] (IRQs 3 4 5 6 10 *11 12 14 15)
Mar 29 12:21:53 perplexities kernel: [    0.253117] ACPI: PCI Interrupt Link [LNKH] (IRQs 3 4 5 6 10 *11 12 14 15)
Mar 29 12:21:53 perplexities kernel: [    0.253829] ACPI: EC: interrupt unblocked
Mar 29 12:21:53 perplexities kernel: [    0.253829] ACPI: EC: event unblocked
Mar 29 12:21:53 perplexities kernel: [    0.253829] ACPI: \_SB_.PCI0.LPCB.EC0_: GPE=0x50, EC_CMD/EC_SC=0x66, EC_DATA=0x62
Mar 29 12:21:53 perplexities kernel: [    0.253829] ACPI: \_SB_.PCI0.LPCB.EC0_: Boot DSDT EC used to handle transactions and events
Mar 29 12:21:53 perplexities kernel: [    0.253833] SCSI subsystem initialized
Mar 29 12:21:53 perplexities kernel: [    0.253833] libata version 3.00 loaded.
Mar 29 12:21:53 perplexities kernel: [    0.253833] pci 0000:00:02.0: vgaarb: setting as boot VGA device
Mar 29 12:21:53 perplexities kernel: [    0.253833] pci 0000:00:02.0: vgaarb: VGA device added: decodes=io+mem,owns=io+mem,locks=none
Mar 29 12:21:53 perplexities kernel: [    0.253833] pci 0000:00:02.0: vgaarb: bridge control possible
Mar 29 12:21:53 perplexities kernel: [    0.253833] vgaarb: loaded
Mar 29 12:21:53 perplexities kernel: [    0.253833] ACPI: bus type USB registered
Mar 29 12:21:53 perplexities kernel: [    0.253833] usbcore: registered new interface driver usbfs
Mar 29 12:21:53 perplexities kernel: [    0.253833] usbcore: registered new interface driver hub
Mar 29 12:21:53 perplexities kernel: [    0.253833] usbcore: registered new device driver usb
Mar 29 12:21:53 perplexities kernel: [    0.253833] pps_core: LinuxPPS API ver. 1 registered
Mar 29 12:21:53 perplexities kernel: [    0.253833] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti <giometti@linux.it>
Mar 29 12:21:53 perplexities kernel: [    0.253833] PTP clock support registered
Mar 29 12:21:53 perplexities kernel: [    0.253833] EDAC MC: Ver: 3.0.0
Mar 29 12:21:53 perplexities kernel: [    0.253833] PCI: Using ACPI for IRQ routing
Mar 29 12:21:53 perplexities kernel: [    0.283549] PCI: pci_cache_line_size set to 64 bytes
Mar 29 12:21:53 perplexities kernel: [    0.283721] e820: reserve RAM buffer [mem 0x0009c800-0x0009ffff]
Mar 29 12:21:53 perplexities kernel: [    0.283722] e820: reserve RAM buffer [mem 0x8228e000-0x83ffffff]
Mar 29 12:21:53 perplexities kernel: [    0.283723] e820: reserve RAM buffer [mem 0x8515f000-0x87ffffff]
Mar 29 12:21:53 perplexities kernel: [    0.283724] e820: reserve RAM buffer [mem 0x8621c000-0x87ffffff]
Mar 29 12:21:53 perplexities kernel: [    0.283725] e820: reserve RAM buffer [mem 0x87fff000-0x87ffffff]
Mar 29 12:21:53 perplexities kernel: [    0.283829] NetLabel: Initializing
Mar 29 12:21:53 perplexities kernel: [    0.283829] NetLabel:  domain hash size = 128
Mar 29 12:21:53 perplexities kernel: [    0.283830] NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO
Mar 29 12:21:53 perplexities kernel: [    0.283844] NetLabel:  unlabeled traffic allowed by default
Mar 29 12:21:53 perplexities kernel: [    0.284606] hpet0: at MMIO 0xfed00000, IRQs 2, 8, 0, 0, 0, 0, 0, 0
Mar 29 12:21:53 perplexities kernel: [    0.284610] hpet0: 8 comparators, 64-bit 24.000000 MHz counter
Mar 29 12:21:53 perplexities kernel: [    0.286655] clocksource: Switched to clocksource tsc-early
Mar 29 12:21:53 perplexities kernel: [    0.296445] VFS: Disk quotas dquot_6.6.0
Mar 29 12:21:53 perplexities kernel: [    0.296461] VFS: Dquot-cache hash table entries: 512 (order 0, 4096 bytes)
Mar 29 12:21:53 perplexities kernel: [    0.296495] *** VALIDATE hugetlbfs ***
Mar 29 12:21:53 perplexities kernel: [    0.296583] AppArmor: AppArmor Filesystem Enabled
Mar 29 12:21:53 perplexities kernel: [    0.296635] pnp: PnP ACPI init
Mar 29 12:21:53 perplexities kernel: [    0.297113] system 00:00: [io  0x0680-0x069f] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297115] system 00:00: [io  0xffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297117] system 00:00: [io  0xffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297118] system 00:00: [io  0xffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297119] system 00:00: [io  0x1800-0x18fe] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297120] system 00:00: [io  0x164e-0x164f] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297125] system 00:00: Plug and Play ACPI device, IDs PNP0c02 (active)
Mar 29 12:21:53 perplexities kernel: [    0.297252] pnp 00:01: Plug and Play ACPI device, IDs PNP0b00 (active)
Mar 29 12:21:53 perplexities kernel: [    0.297297] system 00:02: [io  0x1854-0x1857] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297300] system 00:02: Plug and Play ACPI device, IDs INT3f0d PNP0c02 (active)
Mar 29 12:21:53 perplexities kernel: [    0.297476] system 00:03: [io  0x0240-0x0259] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297479] system 00:03: Plug and Play ACPI device, IDs PNP0c02 (active)
Mar 29 12:21:53 perplexities kernel: [    0.297587] pnp 00:04: Plug and Play ACPI device, IDs ETD0108 SYN0a00 SYN0002 PNP0f03 PNP0f13 PNP0f12 (active)
Mar 29 12:21:53 perplexities kernel: [    0.297632] pnp 00:05: Plug and Play ACPI device, IDs ATK3001 PNP030b (active)
Mar 29 12:21:53 perplexities kernel: [    0.297877] system 00:06: [mem 0xfed10000-0xfed17fff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297878] system 00:06: [mem 0xfed18000-0xfed18fff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297880] system 00:06: [mem 0xfed19000-0xfed19fff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297881] system 00:06: [mem 0xe0000000-0xefffffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297882] system 00:06: [mem 0xfed20000-0xfed3ffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297884] system 00:06: [mem 0xfed90000-0xfed93fff] could not be reserved
Mar 29 12:21:53 perplexities kernel: [    0.297885] system 00:06: [mem 0xfed45000-0xfed8ffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297886] system 00:06: [mem 0xff000000-0xffffffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297888] system 00:06: [mem 0xfee00000-0xfeefffff] could not be reserved
Mar 29 12:21:53 perplexities kernel: [    0.297889] system 00:06: [mem 0xdffe0000-0xdfffffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297892] system 00:06: Plug and Play ACPI device, IDs PNP0c02 (active)
Mar 29 12:21:53 perplexities kernel: [    0.297945] system 00:07: [mem 0xfd000000-0xfdabffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297946] system 00:07: [mem 0xfdad0000-0xfdadffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297947] system 00:07: [mem 0xfdb00000-0xfdffffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297949] system 00:07: [mem 0xfe000000-0xfe01ffff] could not be reserved
Mar 29 12:21:53 perplexities kernel: [    0.297950] system 00:07: [mem 0xfe036000-0xfe03bfff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297951] system 00:07: [mem 0xfe03d000-0xfe3fffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297953] system 00:07: [mem 0xfe410000-0xfe7fffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.297956] system 00:07: Plug and Play ACPI device, IDs PNP0c02 (active)
Mar 29 12:21:53 perplexities kernel: [    0.298383] system 00:08: [io  0xff00-0xfffe] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.298386] system 00:08: Plug and Play ACPI device, IDs PNP0c02 (active)
Mar 29 12:21:53 perplexities kernel: [    0.300090] system 00:09: [mem 0xfdaf0000-0xfdafffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.300091] system 00:09: [mem 0xfdae0000-0xfdaeffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.300093] system 00:09: [mem 0xfdac0000-0xfdacffff] has been reserved
Mar 29 12:21:53 perplexities kernel: [    0.300096] system 00:09: Plug and Play ACPI device, IDs PNP0c02 (active)
Mar 29 12:21:53 perplexities kernel: [    0.301310] pnp: PnP ACPI: found 10 devices
Mar 29 12:21:53 perplexities kernel: [    0.302576] thermal_sys: Registered thermal governor 'fair_share'
Mar 29 12:21:53 perplexities kernel: [    0.302577] thermal_sys: Registered thermal governor 'bang_bang'
Mar 29 12:21:53 perplexities kernel: [    0.302577] thermal_sys: Registered thermal governor 'step_wise'
Mar 29 12:21:53 perplexities kernel: [    0.302578] thermal_sys: Registered thermal governor 'user_space'
Mar 29 12:21:53 perplexities kernel: [    0.302579] thermal_sys: Registered thermal governor 'power_allocator'
Mar 29 12:21:53 perplexities kernel: [    0.307075] clocksource: acpi_pm: mask: 0xffffff max_cycles: 0xffffff, max_idle_ns: 2085701024 ns
Mar 29 12:21:53 perplexities kernel: [    0.307115] pci 0000:00:1c.0: PCI bridge to [bus 01]
Mar 29 12:21:53 perplexities kernel: [    0.307118] pci 0000:00:1c.0:   bridge window [io  0xe000-0xefff]
Mar 29 12:21:53 perplexities kernel: [    0.307122] pci 0000:00:1c.0:   bridge window [mem 0xdf200000-0xdfbfffff]
Mar 29 12:21:53 perplexities kernel: [    0.307125] pci 0000:00:1c.0:   bridge window [mem 0xd0000000-0xd09fffff 64bit pref]
Mar 29 12:21:53 perplexities kernel: [    0.307130] pci 0000:00:1c.4: PCI bridge to [bus 02]
Mar 29 12:21:53 perplexities kernel: [    0.307132] pci 0000:00:1c.4:   bridge window [io  0xd000-0xdfff]
Mar 29 12:21:53 perplexities kernel: [    0.307136] pci 0000:00:1c.4:   bridge window [mem 0xdfc00000-0xdfcfffff]
Mar 29 12:21:53 perplexities kernel: [    0.307142] pci 0000:00:1c.5: PCI bridge to [bus 03]
Mar 29 12:21:53 perplexities kernel: [    0.307146] pci 0000:00:1c.5:   bridge window [mem 0xdf000000-0xdf1fffff]
Mar 29 12:21:53 perplexities kernel: [    0.307153] pci_bus 0000:00: resource 4 [io  0x0000-0x0cf7 window]
Mar 29 12:21:53 perplexities kernel: [    0.307154] pci_bus 0000:00: resource 5 [io  0x0d00-0xffff window]
Mar 29 12:21:53 perplexities kernel: [    0.307156] pci_bus 0000:00: resource 6 [mem 0x000a0000-0x000bffff window]
Mar 29 12:21:53 perplexities kernel: [    0.307157] pci_bus 0000:00: resource 7 [mem 0x8b000000-0xdfffffff window]
Mar 29 12:21:53 perplexities kernel: [    0.307158] pci_bus 0000:00: resource 8 [mem 0xfd000000-0xfe7fffff window]
Mar 29 12:21:53 perplexities kernel: [    0.307159] pci_bus 0000:01: resource 0 [io  0xe000-0xefff]
Mar 29 12:21:53 perplexities kernel: [    0.307160] pci_bus 0000:01: resource 1 [mem 0xdf200000-0xdfbfffff]
Mar 29 12:21:53 perplexities kernel: [    0.307161] pci_bus 0000:01: resource 2 [mem 0xd0000000-0xd09fffff 64bit pref]
Mar 29 12:21:53 perplexities kernel: [    0.307162] pci_bus 0000:02: resource 0 [io  0xd000-0xdfff]
Mar 29 12:21:53 perplexities kernel: [    0.307163] pci_bus 0000:02: resource 1 [mem 0xdfc00000-0xdfcfffff]
Mar 29 12:21:53 perplexities kernel: [    0.307165] pci_bus 0000:03: resource 1 [mem 0xdf000000-0xdf1fffff]
Mar 29 12:21:53 perplexities kernel: [    0.307356] NET: Registered protocol family 2
Mar 29 12:21:53 perplexities kernel: [    0.307484] tcp_listen_portaddr_hash hash table entries: 2048 (order: 3, 32768 bytes, linear)
Mar 29 12:21:53 perplexities kernel: [    0.307532] TCP established hash table entries: 32768 (order: 6, 262144 bytes, linear)
Mar 29 12:21:53 perplexities kernel: [    0.307603] TCP bind hash table entries: 32768 (order: 7, 524288 bytes, linear)
Mar 29 12:21:53 perplexities kernel: [    0.307644] TCP: Hash tables configured (established 32768 bind 32768)
Mar 29 12:21:53 perplexities kernel: [    0.307672] UDP hash table entries: 2048 (order: 4, 65536 bytes, linear)
Mar 29 12:21:53 perplexities kernel: [    0.307686] UDP-Lite hash table entries: 2048 (order: 4, 65536 bytes, linear)
Mar 29 12:21:53 perplexities kernel: [    0.307756] NET: Registered protocol family 1
Mar 29 12:21:53 perplexities kernel: [    0.307760] NET: Registered protocol family 44
Mar 29 12:21:53 perplexities kernel: [    0.307771] pci 0000:00:02.0: Video device with shadowed ROM at [mem 0x000c0000-0x000dffff]
Mar 29 12:21:53 perplexities kernel: [    0.308580] PCI: CLS 0 bytes, default 64
Mar 29 12:21:53 perplexities kernel: [    0.308619] Trying to unpack rootfs image as initramfs...
Mar 29 12:21:53 perplexities kernel: [    0.529534] Freeing initrd memory: 79584K
Mar 29 12:21:53 perplexities kernel: [    0.548188] PCI-DMA: Using software bounce buffering for IO (SWIOTLB)
Mar 29 12:21:53 perplexities kernel: [    0.548197] software IO TLB: mapped [mem 0x7e28e000-0x8228e000] (64MB)
Mar 29 12:21:53 perplexities kernel: [    0.548485] check: Scanning for low memory corruption every 60 seconds
Mar 29 12:21:53 perplexities kernel: [    0.550704] Initialise system trusted keyrings
Mar 29 12:21:53 perplexities kernel: [    0.550714] Key type blacklist registered
Mar 29 12:21:53 perplexities kernel: [    0.550746] workingset: timestamp_bits=36 max_order=20 bucket_order=0
Mar 29 12:21:53 perplexities kernel: [    0.552091] zbud: loaded
Mar 29 12:21:53 perplexities kernel: [    0.552481] squashfs: version 4.0 (2009/01/31) Phillip Lougher
Mar 29 12:21:53 perplexities kernel: [    0.552630] fuse: init (API version 7.31)
Mar 29 12:21:53 perplexities kernel: [    0.552746] Platform Keyring initialized
Mar 29 12:21:53 perplexities kernel: [    0.558319] Key type asymmetric registered
Mar 29 12:21:53 perplexities kernel: [    0.558320] Asymmetric key parser 'x509' registered
Mar 29 12:21:53 perplexities kernel: [    0.558328] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 244)
Mar 29 12:21:53 perplexities kernel: [    0.558367] io scheduler mq-deadline registered
Mar 29 12:21:53 perplexities kernel: [    0.558768] pcieport 0000:00:1c.0: PME: Signaling with IRQ 122
Mar 29 12:21:53 perplexities kernel: [    0.558794] pcieport 0000:00:1c.0: pciehp: Slot #4 AttnBtn- PwrCtrl- MRL- AttnInd- PwrInd- HotPlug+ Surprise+ Interlock- NoCompl+ LLActRep+
Mar 29 12:21:53 perplexities kernel: [    0.559120] pcieport 0000:00:1c.4: PME: Signaling with IRQ 123
Mar 29 12:21:53 perplexities kernel: [    0.559351] pcieport 0000:00:1c.5: PME: Signaling with IRQ 124
Mar 29 12:21:53 perplexities kernel: [    0.559421] shpchp: Standard Hot Plug PCI Controller Driver version: 0.4
Mar 29 12:21:53 perplexities kernel: [    0.559485] vesafb: mode is 1366x768x32, linelength=5504, pages=0
Mar 29 12:21:53 perplexities kernel: [    0.559486] vesafb: scrolling: redraw
Mar 29 12:21:53 perplexities kernel: [    0.559487] vesafb: Truecolor: size=8:8:8:8, shift=24:16:8:0
Mar 29 12:21:53 perplexities kernel: [    0.559500] vesafb: framebuffer at 0xc0000000, mapped to 0x00000000dd1d2a5d, using 4160k, total 4160k
Mar 29 12:21:53 perplexities kernel: [    0.559544] fbcon: Deferring console take-over
Mar 29 12:21:53 perplexities kernel: [    0.559545] fb0: VESA VGA frame buffer device
Mar 29 12:21:53 perplexities kernel: [    0.559558] intel_idle: MWAIT substates: 0x11142120
Mar 29 12:21:53 perplexities kernel: [    0.559559] intel_idle: v0.4.1 model 0x4E
Mar 29 12:21:53 perplexities kernel: [    0.559795] intel_idle: lapic_timer_reliable_states 0xffffffff
Mar 29 12:21:53 perplexities kernel: [    0.560004] ACPI: AC Adapter [AC0] (on-line)
Mar 29 12:21:53 perplexities kernel: [    0.560082] input: Lid Switch as /devices/LNXSYSTM:00/LNXSYBUS:00/PNP0C0D:00/input/input0
Mar 29 12:21:53 perplexities kernel: [    0.560088] ACPI: Lid Switch [LID]
Mar 29 12:21:53 perplexities kernel: [    0.560115] input: Sleep Button as /devices/LNXSYSTM:00/LNXSYBUS:00/PNP0C0E:00/input/input1
Mar 29 12:21:53 perplexities kernel: [    0.560132] ACPI: Sleep Button [SLPB]
Mar 29 12:21:53 perplexities kernel: [    0.560164] input: Power Button as /devices/LNXSYSTM:00/LNXPWRBN:00/input/input2
Mar 29 12:21:53 perplexities kernel: [    0.560171] ACPI: Power Button [PWRF]
Mar 29 12:21:53 perplexities kernel: [    0.562198] thermal LNXTHERM:00: registered as thermal_zone0
Mar 29 12:21:53 perplexities kernel: [    0.562199] ACPI: Thermal Zone [THRM] (41 C)
Mar 29 12:21:53 perplexities kernel: [    0.562343] battery: ACPI: Battery Slot [BAT0] (battery absent)
Mar 29 12:21:53 perplexities kernel: [    0.562393] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled
Mar 29 12:21:53 perplexities kernel: [    0.564166] Linux agpgart interface v0.103
Mar 29 12:21:53 perplexities kernel: [    0.568137] tpm_crb MSFT0101:00: [Firmware Bug]: ACPI region does not cover the entire command/response buffer. [mem 0xfed40000-0xfed4087f flags 0x200] vs fed40080 f80
Mar 29 12:21:53 perplexities kernel: [    0.568145] tpm_crb MSFT0101:00: [Firmware Bug]: ACPI region does not cover the entire command/response buffer. [mem 0xfed40000-0xfed4087f flags 0x200] vs fed40080 f80
Mar 29 12:21:53 perplexities kernel: [    0.635523] loop: module loaded
Mar 29 12:21:53 perplexities kernel: [    0.635765] libphy: Fixed MDIO Bus: probed
Mar 29 12:21:53 perplexities kernel: [    0.635766] tun: Universal TUN/TAP device driver, 1.6
Mar 29 12:21:53 perplexities kernel: [    0.635828] PPP generic driver version 2.4.2
Mar 29 12:21:53 perplexities kernel: [    0.635871] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
Mar 29 12:21:53 perplexities kernel: [    0.635887] ehci-pci: EHCI PCI platform driver
Mar 29 12:21:53 perplexities kernel: [    0.635901] ehci-platform: EHCI generic platform driver
Mar 29 12:21:53 perplexities kernel: [    0.635913] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
Mar 29 12:21:53 perplexities kernel: [    0.635915] ohci-pci: OHCI PCI platform driver
Mar 29 12:21:53 perplexities kernel: [    0.635922] ohci-platform: OHCI generic platform driver
Mar 29 12:21:53 perplexities kernel: [    0.635928] uhci_hcd: USB Universal Host Controller Interface driver
Mar 29 12:21:53 perplexities kernel: [    0.636207] xhci_hcd 0000:00:14.0: xHCI Host Controller
Mar 29 12:21:53 perplexities kernel: [    0.636212] xhci_hcd 0000:00:14.0: new USB bus registered, assigned bus number 1
Mar 29 12:21:53 perplexities kernel: [    0.637285] xhci_hcd 0000:00:14.0: hcc params 0x200077c1 hci version 0x100 quirks 0x0000000081109810
Mar 29 12:21:53 perplexities kernel: [    0.637290] xhci_hcd 0000:00:14.0: cache line size of 64 is not supported
Mar 29 12:21:53 perplexities kernel: [    0.637476] usb usb1: New USB device found, idVendor=1d6b, idProduct=0002, bcdDevice= 5.03
Mar 29 12:21:53 perplexities kernel: [    0.637477] usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1
Mar 29 12:21:53 perplexities kernel: [    0.637478] usb usb1: Product: xHCI Host Controller
Mar 29 12:21:53 perplexities kernel: [    0.637479] usb usb1: Manufacturer: Linux 5.3.0-42-generic xhci-hcd
Mar 29 12:21:53 perplexities kernel: [    0.637480] usb usb1: SerialNumber: 0000:00:14.0
Mar 29 12:21:53 perplexities kernel: [    0.637616] hub 1-0:1.0: USB hub found
Mar 29 12:21:53 perplexities kernel: [    0.637632] hub 1-0:1.0: 12 ports detected
Mar 29 12:21:53 perplexities kernel: [    0.638689] xhci_hcd 0000:00:14.0: xHCI Host Controller
Mar 29 12:21:53 perplexities kernel: [    0.638692] xhci_hcd 0000:00:14.0: new USB bus registered, assigned bus number 2
Mar 29 12:21:53 perplexities kernel: [    0.638694] xhci_hcd 0000:00:14.0: Host supports USB 3.0 SuperSpeed
Mar 29 12:21:53 perplexities kernel: [    0.638728] usb usb2: New USB device found, idVendor=1d6b, idProduct=0003, bcdDevice= 5.03
Mar 29 12:21:53 perplexities kernel: [    0.638729] usb usb2: New USB device strings: Mfr=3, Product=2, SerialNumber=1
Mar 29 12:21:53 perplexities kernel: [    0.638730] usb usb2: Product: xHCI Host Controller
Mar 29 12:21:53 perplexities kernel: [    0.638731] usb usb2: Manufacturer: Linux 5.3.0-42-generic xhci-hcd
Mar 29 12:21:53 perplexities kernel: [    0.638732] usb usb2: SerialNumber: 0000:00:14.0
Mar 29 12:21:53 perplexities kernel: [    0.638852] hub 2-0:1.0: USB hub found
Mar 29 12:21:53 perplexities kernel: [    0.638862] hub 2-0:1.0: 6 ports detected
Mar 29 12:21:53 perplexities kernel: [    0.639532] i8042: PNP: PS/2 Controller [PNP030b:PS2K,PNP0f03:PS2M] at 0x60,0x64 irq 1,12
Mar 29 12:21:53 perplexities kernel: [    0.643373] i8042: Detected active multiplexing controller, rev 1.1
Mar 29 12:21:53 perplexities kernel: [    0.644775] serio: i8042 KBD port at 0x60,0x64 irq 1
Mar 29 12:21:53 perplexities kernel: [    0.644779] serio: i8042 AUX0 port at 0x60,0x64 irq 12
Mar 29 12:21:53 perplexities kernel: [    0.644804] serio: i8042 AUX1 port at 0x60,0x64 irq 12
Mar 29 12:21:53 perplexities kernel: [    0.644821] serio: i8042 AUX2 port at 0x60,0x64 irq 12
Mar 29 12:21:53 perplexities kernel: [    0.644837] serio: i8042 AUX3 port at 0x60,0x64 irq 12
Mar 29 12:21:53 perplexities kernel: [    0.645016] mousedev: PS/2 mouse device common for all mice
Mar 29 12:21:53 perplexities kernel: [    0.645348] rtc_cmos 00:01: RTC can wake from S4
Mar 29 12:21:53 perplexities kernel: [    0.645844] rtc_cmos 00:01: registered as rtc0
Mar 29 12:21:53 perplexities kernel: [    0.645857] rtc_cmos 00:01: alarms up to one month, y3k, 242 bytes nvram, hpet irqs
Mar 29 12:21:53 perplexities kernel: [    0.645864] i2c /dev entries driver
Mar 29 12:21:53 perplexities kernel: [    0.645910] device-mapper: uevent: version 1.0.3
Mar 29 12:21:53 perplexities kernel: [    0.646011] device-mapper: ioctl: 4.40.0-ioctl (2019-01-18) initialised: dm-devel@redhat.com
Mar 29 12:21:53 perplexities kernel: [    0.646028] platform eisa.0: Probing EISA bus 0
Mar 29 12:21:53 perplexities kernel: [    0.646030] platform eisa.0: EISA: Cannot allocate resource for mainboard
Mar 29 12:21:53 perplexities kernel: [    0.646031] platform eisa.0: Cannot allocate resource for EISA slot 1
Mar 29 12:21:53 perplexities kernel: [    0.646032] platform eisa.0: Cannot allocate resource for EISA slot 2
Mar 29 12:21:53 perplexities kernel: [    0.646033] platform eisa.0: Cannot allocate resource for EISA slot 3
Mar 29 12:21:53 perplexities kernel: [    0.646034] platform eisa.0: Cannot allocate resource for EISA slot 4
Mar 29 12:21:53 perplexities kernel: [    0.646035] platform eisa.0: Cannot allocate resource for EISA slot 5
Mar 29 12:21:53 perplexities kernel: [    0.646036] platform eisa.0: Cannot allocate resource for EISA slot 6
Mar 29 12:21:53 perplexities kernel: [    0.646036] platform eisa.0: Cannot allocate resource for EISA slot 7
Mar 29 12:21:53 perplexities kernel: [    0.646037] platform eisa.0: Cannot allocate resource for EISA slot 8
Mar 29 12:21:53 perplexities kernel: [    0.646038] platform eisa.0: EISA: Detected 0 cards
Mar 29 12:21:53 perplexities kernel: [    0.646042] intel_pstate: Intel P-state driver initializing
Mar 29 12:21:53 perplexities kernel: [    0.646326] intel_pstate: HWP enabled
Mar 29 12:21:53 perplexities kernel: [    0.646355] ledtrig-cpu: registered to indicate activity on CPUs
Mar 29 12:21:53 perplexities kernel: [    0.646389] intel_pmc_core INT33A1:00:  initialized
Mar 29 12:21:53 perplexities kernel: [    0.646598] NET: Registered protocol family 10
Mar 29 12:21:53 perplexities kernel: [    0.657040] Segment Routing with IPv6
Mar 29 12:21:53 perplexities kernel: [    0.657066] NET: Registered protocol family 17
Mar 29 12:21:53 perplexities kernel: [    0.657257] Key type dns_resolver registered
Mar 29 12:21:53 perplexities kernel: [    0.657652] RAS: Correctable Errors collector initialized.
Mar 29 12:21:53 perplexities kernel: [    0.657685] microcode: sig=0x406e3, pf=0x80, revision=0xd6
Mar 29 12:21:53 perplexities kernel: [    0.657813] microcode: Microcode Update Driver: v2.2.
Mar 29 12:21:53 perplexities kernel: [    0.657823] sched_clock: Marking stable (657323666, 486228)->(661434447, -3624553)
Mar 29 12:21:53 perplexities kernel: [    0.657988] registered taskstats version 1
Mar 29 12:21:53 perplexities kernel: [    0.658009] Loading compiled-in X.509 certificates
Mar 29 12:21:53 perplexities kernel: [    0.659948] Loaded X.509 cert 'Build time autogenerated kernel key: b0178a448cdf317ec351a9bbacbf1aca2acf00eb'
Mar 29 12:21:53 perplexities kernel: [    0.659996] zswap: loaded using pool lzo/zbud
Mar 29 12:21:53 perplexities kernel: [    0.668037] Key type big_key registered
Mar 29 12:21:53 perplexities kernel: [    0.668043] Key type trusted registered
Mar 29 12:21:53 perplexities kernel: [    0.672602] Key type encrypted registered
Mar 29 12:21:53 perplexities kernel: [    0.672623] AppArmor: AppArmor sha1 policy hashing enabled
Mar 29 12:21:53 perplexities kernel: [    0.672633] ima: Allocated hash algorithm: sha1
Mar 29 12:21:53 perplexities kernel: [    0.686086] input: AT Translated Set 2 keyboard as /devices/platform/i8042/serio0/input/input3
Mar 29 12:21:53 perplexities kernel: [    0.852785] No architecture policies found
Mar 29 12:21:53 perplexities kernel: [    0.852799] evm: Initialising EVM extended attributes:
Mar 29 12:21:53 perplexities kernel: [    0.852800] evm: security.selinux
Mar 29 12:21:53 perplexities kernel: [    0.852801] evm: security.SMACK64
Mar 29 12:21:53 perplexities kernel: [    0.852801] evm: security.SMACK64EXEC
Mar 29 12:21:53 perplexities kernel: [    0.852801] evm: security.SMACK64TRANSMUTE
Mar 29 12:21:53 perplexities kernel: [    0.852802] evm: security.SMACK64MMAP
Mar 29 12:21:53 perplexities kernel: [    0.852802] evm: security.apparmor
Mar 29 12:21:53 perplexities kernel: [    0.852802] evm: security.ima
Mar 29 12:21:53 perplexities kernel: [    0.852803] evm: security.capability
Mar 29 12:21:53 perplexities kernel: [    0.852804] evm: HMAC attrs: 0x1
Mar 29 12:21:53 perplexities kernel: [    0.854113] PM:   Magic number: 12:491:326
Mar 29 12:21:53 perplexities kernel: [    0.854597] rtc_cmos 00:01: setting system clock to 2020-03-29T10:20:50 UTC (1585477250)
Mar 29 12:21:53 perplexities kernel: [    0.855961] Freeing unused decrypted memory: 2040K
Mar 29 12:21:53 perplexities kernel: [    0.856390] Freeing unused kernel image memory: 2676K
Mar 29 12:21:53 perplexities kernel: [    0.856460] Write protecting the kernel read-only data: 22528k
Mar 29 12:21:53 perplexities kernel: [    0.857095] Freeing unused kernel image memory: 2008K
Mar 29 12:21:53 perplexities kernel: [    0.857464] Freeing unused kernel image memory: 1420K
Mar 29 12:21:53 perplexities kernel: [    0.866715] x86/mm: Checked W+X mappings: passed, no W+X pages found.
Mar 29 12:21:53 perplexities kernel: [    0.866716] x86/mm: Checking user space page tables
Mar 29 12:21:53 perplexities kernel: [    0.875680] x86/mm: Checked W+X mappings: passed, no W+X pages found.
Mar 29 12:21:53 perplexities kernel: [    0.875683] Run /init as init process
Mar 29 12:21:53 perplexities kernel: [    0.972176] usb 1-1: new low-speed USB device number 2 using xhci_hcd
Mar 29 12:21:53 perplexities kernel: [    0.999464] r8169 0000:02:00.0: can't disable ASPM; OS doesn't have ASPM control
Mar 29 12:21:53 perplexities kernel: [    1.000674] i801_smbus 0000:00:1f.4: SPD Write Disable is set
Mar 29 12:21:53 perplexities kernel: [    1.000715] i801_smbus 0000:00:1f.4: SMBus using PCI interrupt
Mar 29 12:21:53 perplexities kernel: [    1.001420] ahci 0000:00:17.0: version 3.0
Mar 29 12:21:53 perplexities kernel: [    1.003938] cryptd: max_cpu_qlen set to 1000
Mar 29 12:21:53 perplexities kernel: [    1.012164] ahci 0000:00:17.0: AHCI 0001.0301 32 slots 2 ports 6 Gbps 0x3 impl SATA mode
Mar 29 12:21:53 perplexities kernel: [    1.012168] ahci 0000:00:17.0: flags: 64bit ncq pm led clo only pio slum part deso sadm sds apst 
Mar 29 12:21:53 perplexities kernel: [    1.012490] scsi host0: ahci
Mar 29 12:21:53 perplexities kernel: [    1.012602] scsi host1: ahci
Mar 29 12:21:53 perplexities kernel: [    1.012641] ata1: SATA max UDMA/133 abar m2048@0xdfd33000 port 0xdfd33100 irq 126
Mar 29 12:21:53 perplexities kernel: [    1.012642] ata2: SATA max UDMA/133 abar m2048@0xdfd33000 port 0xdfd33180 irq 126
Mar 29 12:21:53 perplexities kernel: [    1.014994] libphy: r8169: probed
Mar 29 12:21:53 perplexities kernel: [    1.015147] r8169 0000:02:00.0 eth0: RTL8168gu/8111gu, 88:d7:f6:37:56:5c, XID 509, IRQ 127
Mar 29 12:21:53 perplexities kernel: [    1.015148] r8169 0000:02:00.0 eth0: jumbo features [frames: 9200 bytes, tx checksumming: ko]
Mar 29 12:21:53 perplexities kernel: [    1.016664] AVX2 version of gcm_enc/dec engaged.
Mar 29 12:21:53 perplexities kernel: [    1.016665] AES CTR mode by8 optimization enabled
Mar 29 12:21:53 perplexities kernel: [    1.036364] r8169 0000:02:00.0 enp2s0: renamed from eth0
Mar 29 12:21:53 perplexities kernel: [    1.069689] checking generic (c0000000 410000) vs hw (c0000000 10000000)
Mar 29 12:21:53 perplexities kernel: [    1.069690] fb0: switching to inteldrmfb from VESA VGA
Mar 29 12:21:53 perplexities kernel: [    1.069754] i915 0000:00:02.0: vgaarb: deactivate vga console
Mar 29 12:21:53 perplexities kernel: [    1.080371] [drm] Supports vblank timestamp caching Rev 2 (21.10.2013).
Mar 29 12:21:53 perplexities kernel: [    1.080373] [drm] Driver supports precise vblank timestamp query.
Mar 29 12:21:53 perplexities kernel: [    1.084456] i915 0000:00:02.0: vgaarb: changed VGA decodes: olddecodes=io+mem,decodes=io+mem:owns=io+mem
Mar 29 12:21:53 perplexities kernel: [    1.085043] [drm] Finished loading DMC firmware i915/skl_dmc_ver1_27.bin (v1.27)
Mar 29 12:21:53 perplexities kernel: [    1.105225] [drm] Initialized i915 1.6.0 20190619 for 0000:00:02.0 on minor 0
Mar 29 12:21:53 perplexities kernel: [    1.110583] ACPI: Video Device [GFX0] (multi-head: yes  rom: no  post: no)
Mar 29 12:21:53 perplexities kernel: [    1.115133] input: Video Bus as /devices/LNXSYSTM:00/LNXSYBUS:00/PNP0A08:00/LNXVIDEO:00/input/input12
Mar 29 12:21:53 perplexities kernel: [    1.125099] usb 1-1: New USB device found, idVendor=046d, idProduct=c016, bcdDevice= 3.40
Mar 29 12:21:53 perplexities kernel: [    1.125101] usb 1-1: New USB device strings: Mfr=1, Product=2, SerialNumber=0
Mar 29 12:21:53 perplexities kernel: [    1.125102] usb 1-1: Product: Optical USB Mouse
Mar 29 12:21:53 perplexities kernel: [    1.125103] usb 1-1: Manufacturer: Logitech
Mar 29 12:21:53 perplexities kernel: [    1.229478] fbcon: i915drmfb (fb0) is primary device
Mar 29 12:21:53 perplexities kernel: [    1.229480] fbcon: Deferring console take-over
Mar 29 12:21:53 perplexities kernel: [    1.229483] i915 0000:00:02.0: fb0: i915drmfb frame buffer device
Mar 29 12:21:53 perplexities kernel: [    1.248360] usb 1-3: new full-speed USB device number 3 using xhci_hcd
Mar 29 12:21:53 perplexities kernel: [    1.327736] ata2: SATA link up 1.5 Gbps (SStatus 113 SControl 300)
Mar 29 12:21:53 perplexities kernel: [    1.331290] ata2.00: ATAPI: SlimtypeDVD A  DA8AESH, XAA1, max UDMA/133
Mar 29 12:21:53 perplexities kernel: [    1.331865] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
Mar 29 12:21:53 perplexities kernel: [    1.332082] ata2.00: configured for UDMA/133
Mar 29 12:21:53 perplexities kernel: [    1.367820] ata1.00: ATA-8: HGST HTS545050A7E680, GR2OA3B0, max UDMA/133
Mar 29 12:21:53 perplexities kernel: [    1.367822] ata1.00: 976773168 sectors, multi 16: LBA48 NCQ (depth 32), AA
Mar 29 12:21:53 perplexities kernel: [    1.369527] ata1.00: configured for UDMA/133
Mar 29 12:21:53 perplexities kernel: [    1.370143] scsi 0:0:0:0: Direct-Access     ATA      HGST HTS545050A7 A3B0 PQ: 0 ANSI: 5
Mar 29 12:21:53 perplexities kernel: [    1.370538] sd 0:0:0:0: Attached scsi generic sg0 type 0
Mar 29 12:21:53 perplexities kernel: [    1.370550] sd 0:0:0:0: [sda] 976773168 512-byte logical blocks: (500 GB/466 GiB)
Mar 29 12:21:53 perplexities kernel: [    1.370552] sd 0:0:0:0: [sda] 4096-byte physical blocks
Mar 29 12:21:53 perplexities kernel: [    1.370576] sd 0:0:0:0: [sda] Write Protect is off
Mar 29 12:21:53 perplexities kernel: [    1.370578] sd 0:0:0:0: [sda] Mode Sense: 00 3a 00 00
Mar 29 12:21:53 perplexities kernel: [    1.370586] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
Mar 29 12:21:53 perplexities kernel: [    1.374430] scsi 1:0:0:0: CD-ROM            Slimtype DVD A  DA8AESH   XAA1 PQ: 0 ANSI: 5
Mar 29 12:21:53 perplexities kernel: [    1.407223] usb 1-3: New USB device found, idVendor=0403, idProduct=6001, bcdDevice= 6.00
Mar 29 12:21:53 perplexities kernel: [    1.407224] usb 1-3: New USB device strings: Mfr=1, Product=2, SerialNumber=3
Mar 29 12:21:53 perplexities kernel: [    1.407225] usb 1-3: Product: FT232R USB UART
Mar 29 12:21:53 perplexities kernel: [    1.407226] usb 1-3: Manufacturer: FTDI
Mar 29 12:21:53 perplexities kernel: [    1.407226] usb 1-3: SerialNumber: A600HD1H
Mar 29 12:21:53 perplexities kernel: [    1.422023]  sda: sda1 sda2 < sda5 >
Mar 29 12:21:53 perplexities kernel: [    1.422656] sd 0:0:0:0: [sda] Attached SCSI disk
Mar 29 12:21:53 perplexities kernel: [    1.454867] sr 1:0:0:0: [sr0] scsi3-mmc drive: 24x/24x writer dvd-ram cd/rw xa/form2 cdda tray
Mar 29 12:21:53 perplexities kernel: [    1.454869] cdrom: Uniform CD-ROM driver Revision: 3.20
Mar 29 12:21:53 perplexities kernel: [    1.455104] sr 1:0:0:0: Attached scsi CD-ROM sr0
Mar 29 12:21:53 perplexities kernel: [    1.455168] sr 1:0:0:0: Attached scsi generic sg1 type 5
Mar 29 12:21:53 perplexities kernel: [    1.536204] usb 1-5: new high-speed USB device number 4 using xhci_hcd
Mar 29 12:21:53 perplexities kernel: [    1.548141] tsc: Refined TSC clocksource calibration: 2399.999 MHz
Mar 29 12:21:53 perplexities kernel: [    1.548164] clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x2298364cab5, max_idle_ns: 440795214892 ns
Mar 29 12:21:53 perplexities kernel: [    1.548214] clocksource: Switched to clocksource tsc
Mar 29 12:21:53 perplexities kernel: [    1.582969] usb 1-5: New USB device found, idVendor=04f2, idProduct=b52b, bcdDevice=95.52
Mar 29 12:21:53 perplexities kernel: [    1.582982] usb 1-5: New USB device strings: Mfr=3, Product=1, SerialNumber=2
Mar 29 12:21:53 perplexities kernel: [    1.582991] usb 1-5: Product: USB2.0 VGA UVC WebCam
Mar 29 12:21:53 perplexities kernel: [    1.583001] usb 1-5: Manufacturer: Chicony Electronics Co.,Ltd.
Mar 29 12:21:53 perplexities kernel: [    1.583009] usb 1-5: SerialNumber: 0x0001
Mar 29 12:21:53 perplexities kernel: [    1.640230] psmouse serio4: elantech: assuming hardware version 4 (with firmware version 0x381f17)
Mar 29 12:21:53 perplexities kernel: [    1.654950] psmouse serio4: elantech: Synaptics capabilities query result 0x10, 0x14, 0x0e.
Mar 29 12:21:53 perplexities kernel: [    1.670138] psmouse serio4: elantech: Elan sample query result 0f, 19, 75
Mar 29 12:21:53 perplexities kernel: [    1.712185] usb 1-8: new full-speed USB device number 5 using xhci_hcd
Mar 29 12:21:53 perplexities kernel: [    1.771183] input: ETPS/2 Elantech Touchpad as /devices/platform/i8042/serio4/input/input11
Mar 29 12:21:53 perplexities kernel: [    1.861313] usb 1-8: New USB device found, idVendor=13d3, idProduct=3491, bcdDevice= 0.01
Mar 29 12:21:53 perplexities kernel: [    1.861315] usb 1-8: New USB device strings: Mfr=0, Product=0, SerialNumber=0
Mar 29 12:21:53 perplexities kernel: [    1.868082] hidraw: raw HID events driver (C) Jiri Kosina
Mar 29 12:21:53 perplexities kernel: [    1.871088] usbcore: registered new interface driver usbhid
Mar 29 12:21:53 perplexities kernel: [    1.871089] usbhid: USB HID core driver
Mar 29 12:21:53 perplexities kernel: [    1.872723] input: Logitech Optical USB Mouse as /devices/pci0000:00/0000:00:14.0/usb1/1-1/1-1:1.0/0003:046D:C016.0001/input/input13
Mar 29 12:21:53 perplexities kernel: [    1.872805] hid-generic 0003:046D:C016.0001: input,hidraw0: USB HID v1.10 Mouse [Logitech Optical USB Mouse] on usb-0000:00:14.0-1/input0
Mar 29 12:21:53 perplexities kernel: [    2.008126] raid6: avx2x4   gen() 27558 MB/s
Mar 29 12:21:53 perplexities kernel: [    2.056123] raid6: avx2x4   xor() 17285 MB/s
Mar 29 12:21:53 perplexities kernel: [    2.104126] raid6: avx2x2   gen() 24186 MB/s
Mar 29 12:21:53 perplexities kernel: [    2.152125] raid6: avx2x2   xor() 15377 MB/s
Mar 29 12:21:53 perplexities kernel: [    2.200123] raid6: avx2x1   gen() 19758 MB/s
Mar 29 12:21:53 perplexities kernel: [    2.248125] raid6: avx2x1   xor() 14188 MB/s
Mar 29 12:21:53 perplexities kernel: [    2.296126] raid6: sse2x4   gen() 11432 MB/s
Mar 29 12:21:53 perplexities kernel: [    2.344126] raid6: sse2x4   xor()  7247 MB/s
Mar 29 12:21:53 perplexities kernel: [    2.392126] raid6: sse2x2   gen()  9913 MB/s
Mar 29 12:21:53 perplexities kernel: [    2.440125] raid6: sse2x2   xor()  6708 MB/s
Mar 29 12:21:53 perplexities kernel: [    2.488128] raid6: sse2x1   gen()  8839 MB/s
Mar 29 12:21:53 perplexities kernel: [    2.536128] raid6: sse2x1   xor()  5059 MB/s
Mar 29 12:21:53 perplexities kernel: [    2.536128] raid6: using algorithm avx2x4 gen() 27558 MB/s
Mar 29 12:21:53 perplexities kernel: [    2.536129] raid6: .... xor() 17285 MB/s, rmw enabled
Mar 29 12:21:53 perplexities kernel: [    2.536129] raid6: using avx2x2 recovery algorithm
Mar 29 12:21:53 perplexities kernel: [    2.536984] xor: automatically using best checksumming function   avx       
Mar 29 12:21:53 perplexities kernel: [    2.537841] async_tx: api initialized (async)
Mar 29 12:21:53 perplexities kernel: [   26.967829] EXT4-fs (dm-1): mounted filesystem with ordered data mode. Opts: (null)
Mar 29 12:21:53 perplexities kernel: [   33.646618] EXT4-fs (dm-1): re-mounted. Opts: errors=remount-ro
Mar 29 12:21:53 perplexities kernel: [   34.104752] RPC: Registered named UNIX socket transport module.
Mar 29 12:21:53 perplexities kernel: [   34.104753] RPC: Registered udp transport module.
Mar 29 12:21:53 perplexities kernel: [   34.104754] RPC: Registered tcp transport module.
Mar 29 12:21:53 perplexities kernel: [   34.104754] RPC: Registered tcp NFSv4.1 backchannel transport module.
Mar 29 12:21:53 perplexities kernel: [   34.688756] Installing knfsd (copyright (C) 1996 okir@monad.swb.de).
Mar 29 12:21:53 perplexities kernel: [   35.104254] lp: driver loaded but no devices found
Mar 29 12:21:53 perplexities kernel: [   35.239410] ppdev: user-space parallel port driver
Mar 29 12:21:53 perplexities kernel: [   40.157531] input: Asus Wireless Radio Control as /devices/LNXSYSTM:00/LNXSYBUS:00/ATK4001:00/input/input14
Mar 29 12:21:53 perplexities kernel: [   40.335836] asus_wmi: ASUS WMI generic driver loaded
Mar 29 12:21:53 perplexities kernel: [   40.342961] intel_rapl_common: Found RAPL domain package
Mar 29 12:21:53 perplexities kernel: [   40.342963] intel_rapl_common: Found RAPL domain dram
Mar 29 12:21:53 perplexities kernel: [   40.343031] proc_thermal 0000:00:04.0: Creating sysfs group for PROC_THERMAL_PCI
Mar 29 12:21:53 perplexities kernel: [   40.350236] asus_wmi: Initialization: 0x1
Mar 29 12:21:53 perplexities kernel: [   40.350312] asus_wmi: BIOS WMI version: 7.9
Mar 29 12:21:53 perplexities kernel: [   40.350393] asus_wmi: SFUN value: 0xa0065
Mar 29 12:21:53 perplexities kernel: [   40.350396] asus-nb-wmi asus-nb-wmi: Detected ATK, not ASUSWMI, use DSTS
Mar 29 12:21:53 perplexities kernel: [   40.350398] asus-nb-wmi asus-nb-wmi: Detected ATK, enable event queue
Mar 29 12:21:53 perplexities kernel: [   40.353682] input: Asus WMI hotkeys as /devices/platform/asus-nb-wmi/input/input15
Mar 29 12:21:53 perplexities kernel: [   40.357016] asus_wmi: Number of fans: 1
Mar 29 12:21:53 perplexities kernel: [   40.741008] mei_me 0000:00:16.0: enabling device (0000 -> 0002)
Mar 29 12:21:53 perplexities kernel: [   40.928880] cfg80211: Loading compiled-in X.509 certificates for regulatory database
Mar 29 12:21:53 perplexities kernel: [   40.940067] cfg80211: Loaded X.509 cert 'sforshee: 00b28ddf47aef9cea7'
Mar 29 12:21:53 perplexities kernel: [   41.199734] intel_rapl_common: Found RAPL domain package
Mar 29 12:21:53 perplexities kernel: [   41.199736] intel_rapl_common: Found RAPL domain core
Mar 29 12:21:53 perplexities kernel: [   41.199737] intel_rapl_common: Found RAPL domain uncore
Mar 29 12:21:53 perplexities kernel: [   41.199738] intel_rapl_common: Found RAPL domain dram
Mar 29 12:21:53 perplexities kernel: [   41.433494] RAPL PMU: API unit is 2^-32 Joules, 5 fixed counters, 655360 ms ovfl timer
Mar 29 12:21:53 perplexities kernel: [   41.433495] RAPL PMU: hw unit of domain pp0-core 2^-14 Joules
Mar 29 12:21:53 perplexities kernel: [   41.433496] RAPL PMU: hw unit of domain package 2^-14 Joules
Mar 29 12:21:53 perplexities kernel: [   41.433497] RAPL PMU: hw unit of domain dram 2^-14 Joules
Mar 29 12:21:53 perplexities kernel: [   41.433497] RAPL PMU: hw unit of domain pp1-gpu 2^-14 Joules
Mar 29 12:21:53 perplexities kernel: [   41.433498] RAPL PMU: hw unit of domain psys 2^-14 Joules
Mar 29 12:21:53 perplexities kernel: [   41.481689] Bluetooth: Core ver 2.22
Mar 29 12:21:53 perplexities kernel: [   41.481709] NET: Registered protocol family 31
Mar 29 12:21:53 perplexities kernel: [   41.481710] Bluetooth: HCI device and connection manager initialized
Mar 29 12:21:53 perplexities kernel: [   41.481714] Bluetooth: HCI socket layer initialized
Mar 29 12:21:53 perplexities kernel: [   41.481716] Bluetooth: L2CAP socket layer initialized
Mar 29 12:21:53 perplexities kernel: [   41.481718] Bluetooth: SCO socket layer initialized
Mar 29 12:21:53 perplexities kernel: [   41.649619] usbcore: registered new interface driver btusb
Mar 29 12:21:53 perplexities kernel: [   41.682361] usbcore: registered new interface driver usbserial_generic
Mar 29 12:21:53 perplexities kernel: [   41.682375] usbserial: USB Serial support registered for generic
Mar 29 12:21:53 perplexities kernel: [   41.886547] usbcore: registered new interface driver ftdi_sio
Mar 29 12:21:53 perplexities kernel: [   41.886555] usbserial: USB Serial support registered for FTDI USB Serial Device
Mar 29 12:21:53 perplexities kernel: [   41.886584] ftdi_sio 1-3:1.0: FTDI USB Serial Device converter detected
Mar 29 12:21:53 perplexities kernel: [   41.886615] usb 1-3: Detected FT232RL
Mar 29 12:21:53 perplexities kernel: [   41.886969] usb 1-3: FTDI USB Serial Device converter now attached to ttyUSB0
Mar 29 12:21:53 perplexities kernel: [   42.101962] Bluetooth: hci0: using rampatch file: qca/rampatch_usb_00000302.bin
Mar 29 12:21:53 perplexities kernel: [   42.101964] Bluetooth: hci0: QCA: patch rome 0x302 build 0x3e8, firmware rome 0x302 build 0x111
Mar 29 12:21:53 perplexities kernel: [   42.139258] mc: Linux media interface: v0.10
Mar 29 12:21:53 perplexities kernel: [   42.184323] Bluetooth: hci0: using NVM file: qca/nvm_usb_00000302.bin
Mar 29 12:21:53 perplexities kernel: [   42.199687] ath10k_pci 0000:03:00.0: pci irq msi oper_irq_mode 2 irq_mode 0 reset_mode 0
Mar 29 12:21:53 perplexities kernel: [   42.208495] videodev: Linux video capture interface: v2.00
Mar 29 12:21:53 perplexities kernel: [   42.269596] snd_hda_intel 0000:00:1f.3: bound 0000:00:02.0 (ops i915_audio_component_bind_ops [i915])
Mar 29 12:21:53 perplexities kernel: [   42.561588] snd_hda_codec_conexant hdaudioC0D0: CX20751/2: BIOS auto-probing.
Mar 29 12:21:53 perplexities kernel: [   42.561886] snd_hda_codec_conexant hdaudioC0D0: autoconfig for CX20751/2: line_outs=1 (0x17/0x0/0x0/0x0/0x0) type:speaker
Mar 29 12:21:53 perplexities kernel: [   42.561888] snd_hda_codec_conexant hdaudioC0D0:    speaker_outs=0 (0x0/0x0/0x0/0x0/0x0)
Mar 29 12:21:53 perplexities kernel: [   42.561890] snd_hda_codec_conexant hdaudioC0D0:    hp_outs=1 (0x16/0x0/0x0/0x0/0x0)
Mar 29 12:21:53 perplexities kernel: [   42.561891] snd_hda_codec_conexant hdaudioC0D0:    mono: mono_out=0x0
Mar 29 12:21:53 perplexities kernel: [   42.561892] snd_hda_codec_conexant hdaudioC0D0:    inputs:
Mar 29 12:21:53 perplexities kernel: [   42.561894] snd_hda_codec_conexant hdaudioC0D0:      Internal Mic=0x1a
Mar 29 12:21:53 perplexities kernel: [   42.561895] snd_hda_codec_conexant hdaudioC0D0:      Mic=0x19
Mar 29 12:21:53 perplexities kernel: [   42.613529] ath10k_pci 0000:03:00.0: qca9377 hw1.1 target 0x05020001 chip_id 0x003821ff sub 1a3b:2231
Mar 29 12:21:53 perplexities kernel: [   42.613531] ath10k_pci 0000:03:00.0: kconfig debug 0 debugfs 1 tracing 1 dfs 0 testmode 0
Mar 29 12:21:53 perplexities kernel: [   42.614029] ath10k_pci 0000:03:00.0: firmware ver WLAN.TF.2.1-00021-QCARMSWP-1 api 6 features wowlan,ignore-otp crc32 42e41877
Mar 29 12:21:53 perplexities kernel: [   42.645147] input: HDA Intel PCH Mic as /devices/pci0000:00/0000:00:1f.3/sound/card0/input16
Mar 29 12:21:53 perplexities kernel: [   42.645207] input: HDA Intel PCH Headphone as /devices/pci0000:00/0000:00:1f.3/sound/card0/input17
Mar 29 12:21:53 perplexities kernel: [   42.645261] input: HDA Intel PCH HDMI/DP,pcm=3 as /devices/pci0000:00/0000:00:1f.3/sound/card0/input18
Mar 29 12:21:53 perplexities kernel: [   42.645315] input: HDA Intel PCH HDMI/DP,pcm=7 as /devices/pci0000:00/0000:00:1f.3/sound/card0/input19
Mar 29 12:21:53 perplexities kernel: [   42.645365] input: HDA Intel PCH HDMI/DP,pcm=8 as /devices/pci0000:00/0000:00:1f.3/sound/card0/input20
Mar 29 12:21:53 perplexities kernel: [   42.645416] input: HDA Intel PCH HDMI/DP,pcm=9 as /devices/pci0000:00/0000:00:1f.3/sound/card0/input21
Mar 29 12:21:53 perplexities kernel: [   42.645466] input: HDA Intel PCH HDMI/DP,pcm=10 as /devices/pci0000:00/0000:00:1f.3/sound/card0/input22
Mar 29 12:21:53 perplexities kernel: [   42.647190] uvcvideo: Found UVC 1.00 device USB2.0 VGA UVC WebCam (04f2:b52b)
Mar 29 12:21:53 perplexities kernel: [   42.649699] uvcvideo 1-5:1.0: Entity type for entity Extension 4 was not initialized!
Mar 29 12:21:53 perplexities kernel: [   42.649701] uvcvideo 1-5:1.0: Entity type for entity Processing 2 was not initialized!
Mar 29 12:21:53 perplexities kernel: [   42.649702] uvcvideo 1-5:1.0: Entity type for entity Camera 1 was not initialized!
Mar 29 12:21:53 perplexities kernel: [   42.649784] input: USB2.0 VGA UVC WebCam: USB2.0 V as /devices/pci0000:00/0000:00:14.0/usb1/1-5/1-5:1.0/input/input23
Mar 29 12:21:53 perplexities kernel: [   42.649845] usbcore: registered new interface driver uvcvideo
Mar 29 12:21:53 perplexities kernel: [   42.649845] USB Video Class driver (1.1.1)
Mar 29 12:21:53 perplexities kernel: [   42.720927] ath10k_pci 0000:03:00.0: board_file api 2 bmi_id N/A crc32 8aedfa4a
Mar 29 12:21:53 perplexities kernel: [   42.797581] ath10k_pci 0000:03:00.0: unsupported HTC service id: 1536
Mar 29 12:21:53 perplexities kernel: [   42.816291] ath10k_pci 0000:03:00.0: htt-ver 3.56 wmi-op 4 htt-op 3 cal otp max-sta 32 raw 0 hwcrypto 1
Mar 29 12:21:53 perplexities kernel: [   42.906463] ath: EEPROM regdomain: 0x6a
Mar 29 12:21:53 perplexities kernel: [   42.906465] ath: EEPROM indicates we should expect a direct regpair map
Mar 29 12:21:53 perplexities kernel: [   42.906466] ath: Country alpha2 being used: 00
Mar 29 12:21:53 perplexities kernel: [   42.906467] ath: Regpair used: 0x6a
Mar 29 12:21:53 perplexities kernel: [   42.938017] ath10k_pci 0000:03:00.0 wlp3s0: renamed from wlan0
Mar 29 12:21:53 perplexities kernel: [   48.208784] Adding 4083196k swap on /dev/mapper/cryptswap1.  Priority:-2 extents:1 across:4083196k FS
Mar 29 12:21:53 perplexities kernel: [   49.537122] EXT4-fs (sda1): mounting ext2 file system using the ext4 subsystem
Mar 29 12:21:53 perplexities kernel: [   49.571606] EXT4-fs (sda1): mounted filesystem without journal. Opts: (null)
Mar 29 12:21:53 perplexities kernel: [   51.226454] audit: type=1400 audit(1585477300.869:2): apparmor="STATUS" operation="profile_load" profile="unconfined" name="/usr/sbin/dhcpd" pid=847 comm="apparmor_parser"
Mar 29 12:21:53 perplexities kernel: [   51.230057] audit: type=1400 audit(1585477300.869:3): apparmor="STATUS" operation="profile_load" profile="unconfined" name="/usr/sbin/cups-browsed" pid=845 comm="apparmor_parser"
Mar 29 12:21:53 perplexities kernel: [   51.240315] audit: type=1400 audit(1585477300.881:4): apparmor="STATUS" operation="profile_load" profile="unconfined" name="/usr/sbin/named" pid=846 comm="apparmor_parser"
Mar 29 12:21:53 perplexities kernel: [   51.264812] audit: type=1400 audit(1585477300.905:5): apparmor="STATUS" operation="profile_load" profile="unconfined" name="/usr/sbin/mysqld-akonadi" pid=849 comm="apparmor_parser"
Mar 29 12:21:53 perplexities kernel: [   51.264814] audit: type=1400 audit(1585477300.905:6): apparmor="STATUS" operation="profile_load" profile="unconfined" name="/usr/sbin/mysqld-akonadi///usr/sbin/mysqld" pid=849 comm="apparmor_parser"
Mar 29 12:21:53 perplexities kernel: [   51.348494] audit: type=1400 audit(1585477300.989:7): apparmor="STATUS" operation="profile_load" profile="unconfined" name="lsb_release" pid=854 comm="apparmor_parser"
Mar 29 12:21:53 perplexities kernel: [   51.422070] audit: type=1400 audit(1585477301.065:8): apparmor="STATUS" operation="profile_load" profile="unconfined" name="nvidia_modprobe" pid=855 comm="apparmor_parser"
Mar 29 12:21:53 perplexities kernel: [   51.422075] audit: type=1400 audit(1585477301.065:9): apparmor="STATUS" operation="profile_load" profile="unconfined" name="nvidia_modprobe//kmod" pid=855 comm="apparmor_parser"
Mar 29 12:21:53 perplexities kernel: [   51.460991] audit: type=1400 audit(1585477301.105:10): apparmor="STATUS" operation="profile_load" profile="unconfined" name="/usr/sbin/ntpd" pid=853 comm="apparmor_parser"
Mar 29 12:21:53 perplexities kernel: [   51.467878] audit: type=1400 audit(1585477301.105:11): apparmor="STATUS" operation="profile_load" profile="unconfined" name="libreoffice-senddoc" pid=856 comm="apparmor_parser"
Mar 29 12:21:53 perplexities kernel: [   55.648627] zram: Added device: zram0
Mar 29 12:21:53 perplexities kernel: [   55.649374] zram: Added device: zram1
Mar 29 12:21:53 perplexities kernel: [   55.649639] zram: Added device: zram2
Mar 29 12:21:53 perplexities kernel: [   55.651004] zram: Added device: zram3
Mar 29 12:21:53 perplexities kernel: [   56.324496] zram0: detected capacity change from 0 to 501903360
Mar 29 12:21:53 perplexities kernel: [   56.372204] Adding 490136k swap on /dev/zram0.  Priority:5 extents:1 across:490136k SSFS
Mar 29 12:21:53 perplexities kernel: [   56.372892] zram1: detected capacity change from 0 to 501903360
Mar 29 12:21:53 perplexities kernel: [   56.400324] Adding 490136k swap on /dev/zram1.  Priority:5 extents:1 across:490136k SSFS
Mar 29 12:21:53 perplexities kernel: [   56.400960] zram2: detected capacity change from 0 to 501903360
Mar 29 12:21:53 perplexities kernel: [   56.428387] Adding 490136k swap on /dev/zram2.  Priority:5 extents:1 across:490136k SSFS
Mar 29 12:21:53 perplexities kernel: [   56.429029] zram3: detected capacity change from 0 to 501903360
Mar 29 12:21:53 perplexities kernel: [   56.452137] Adding 490136k swap on /dev/zram3.  Priority:5 extents:1 across:490136k SSFS
Mar 29 12:21:53 perplexities kernel: [   63.877072] Bluetooth: BNEP (Ethernet Emulation) ver 1.3
Mar 29 12:21:53 perplexities kernel: [   63.877077] Bluetooth: BNEP filters: protocol multicast
Mar 29 12:21:53 perplexities kernel: [   63.877088] Bluetooth: BNEP socket layer initialized
Mar 29 12:21:55 perplexities kernel: [   65.841695] kauditd_printk_skb: 33 callbacks suppressed
Mar 29 12:21:55 perplexities kernel: [   65.841702] audit: type=1107 audit(1585477315.481:45): pid=974 uid=106 auid=4294967295 ses=4294967295 msg='apparmor="DENIED" operation="dbus_method_call"  bus="system" path="/org/freedesktop/systemd1" interface="org.freedesktop.systemd1.Manager" member="GetDynamicUsers" mask="send" name="org.freedesktop.systemd1" pid=1153 label="/usr/sbin/named" peer_pid=1 peer_label="unconfined"
Mar 29 12:21:55 perplexities kernel: [   65.841702]  exe="/usr/bin/dbus-daemon" sauid=106 hostname=? addr=? terminal=?'
Mar 29 12:22:00 perplexities kernel: [   70.537183] input: lircd-uinput as /devices/virtual/input/input24
Mar 29 12:22:00 perplexities kernel: [   70.717661] NFSD: Using /var/lib/nfs/v4recovery as the NFSv4 state recovery directory
Mar 29 12:22:00 perplexities kernel: [   70.914116] NFSD: Using legacy client tracking operations.
Mar 29 12:22:00 perplexities kernel: [   70.914124] NFSD: starting 90-second grace period (net f00000a8)
Mar 29 12:22:05 perplexities kernel: [   75.444048] Generic Realtek PHY r8169-200:00: attached PHY driver [Generic Realtek PHY] (mii_bus:phy_addr=r8169-200:00, irq=IGNORE)
Mar 29 12:22:05 perplexities kernel: [   75.568794] r8169 0000:02:00.0 enp2s0: Link is Down
Mar 29 12:22:05 perplexities kernel: [   75.826036] ath10k_pci 0000:03:00.0: unsupported HTC service id: 1536
Mar 29 12:22:12 perplexities kernel: [   82.839077] bpfilter: Loaded bpfilter_umh pid 1361
Mar 29 12:22:12 perplexities kernel: [   82.876431] audit: type=1107 audit(1585477332.517:46): pid=974 uid=106 auid=4294967295 ses=4294967295 msg='apparmor="DENIED" operation="dbus_method_call"  bus="system" path="/org/freedesktop/systemd1" interface="org.freedesktop.systemd1.Manager" member="GetDynamicUsers" mask="send" name="org.freedesktop.systemd1" pid=1331 label="/usr/bin/freshclam" peer_pid=1 peer_label="unconfined"
Mar 29 12:22:12 perplexities kernel: [   82.876431]  exe="/usr/bin/dbus-daemon" sauid=106 hostname=? addr=? terminal=?'
Mar 29 12:22:13 perplexities kernel: [   83.948833] audit: type=1107 audit(1585477333.589:47): pid=974 uid=106 auid=4294967295 ses=4294967295 msg='apparmor="DENIED" operation="dbus_method_call"  bus="system" path="/org/freedesktop/systemd1" interface="org.freedesktop.systemd1.Manager" member="GetDynamicUsers" mask="send" name="org.freedesktop.systemd1" pid=1377 label="/usr/sbin/named" peer_pid=1 peer_label="unconfined"
Mar 29 12:22:13 perplexities kernel: [   83.948833]  exe="/usr/bin/dbus-daemon" sauid=106 hostname=? addr=? terminal=?'
Mar 29 12:22:19 perplexities kernel: [   89.866872] zram: Added device: zram4
Mar 29 12:22:19 perplexities kernel: [   89.870250] zram4: detected capacity change from 0 to 2147483648
Mar 29 12:22:29 perplexities kernel: [   99.908749] Adding 2097148k swap on /dev/zram4.  Priority:-3 extents:1 across:2097148k SSFS
Mar 29 12:22:34 perplexities kernel: [  105.244388] Adding 4194300k swap on /swapfile2.  Priority:-4 extents:160 across:35012604k FS
Mar 29 12:22:47 perplexities kernel: [  117.465032] Bluetooth: RFCOMM TTY layer initialized
Mar 29 12:22:47 perplexities kernel: [  117.465040] Bluetooth: RFCOMM socket layer initialized
Mar 29 12:22:47 perplexities kernel: [  117.465044] Bluetooth: RFCOMM ver 1.11
Mar 29 12:23:11 perplexities kernel: [  141.911075] wlp3s0: authenticate with cc:2d:e0:a2:a5:0c
Mar 29 12:23:11 perplexities kernel: [  141.940553] wlp3s0: send auth to cc:2d:e0:a2:a5:0c (try 1/3)
Mar 29 12:23:11 perplexities kernel: [  141.942252] wlp3s0: authenticated
Mar 29 12:23:11 perplexities kernel: [  141.944236] wlp3s0: associate with cc:2d:e0:a2:a5:0c (try 1/3)
Mar 29 12:23:11 perplexities kernel: [  141.949214] wlp3s0: RX AssocResp from cc:2d:e0:a2:a5:0c (capab=0x431 status=0 aid=2)
Mar 29 12:23:11 perplexities kernel: [  141.953471] wlp3s0: associated
Mar 29 12:23:11 perplexities kernel: [  142.116052] IPv6: ADDRCONF(NETDEV_CHANGE): wlp3s0: link becomes ready
Mar 29 12:25:59 perplexities kernel: [  309.822789] Valid eCryptfs headers not found in file header region or xattr region, inode 25953868
Mar 29 13:00:20 perplexities kernel: [ 2370.828863] perf: interrupt took too long (2508 > 2500), lowering kernel.perf_event_max_sample_rate to 79500
Mar 29 13:12:55 perplexities kernel: [ 3125.462819] perf: interrupt took too long (3147 > 3135), lowering kernel.perf_event_max_sample_rate to 63500
Mar 29 13:33:07 perplexities kernel: [ 4337.507657] perf: interrupt took too long (3998 > 3933), lowering kernel.perf_event_max_sample_rate to 50000
Mar 29 13:41:27 perplexities kernel: [ 4838.140719] usb 1-3: USB disconnect, device number 3
Mar 29 13:41:27 perplexities kernel: [ 4838.143363] ftdi_sio ttyUSB0: FTDI USB Serial Device converter now disconnected from ttyUSB0
Mar 29 13:41:27 perplexities kernel: [ 4838.143383] ftdi_sio 1-3:1.0: device disconnected
knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to take a picture and send it via telegram (configure via udp layer 5 control protocol).<br>");
            client.print("Click <a href=\"/L\">here</a> to restart the device.<br>");
            client.print("Click <a href=\"/W\">here</a> to initialize the camera hardware for the integrated camera webserver.<br>");
            client.print("Click <a href=\"/S\">here</a> to deinitialize the camera hardware and save power.<br>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          //digitalWrite(LED_BUILTIN, HIGH);               // GET /H takes a picture and sends it via telegram
          if ((cameraInitType ! = 1) || (cameraInitType == 0)) {
              if (cameraInitType ! = 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
          take_send_photo(TChatId);
          digitalWrite(LED_BUILTIN, LOW);  
        }
        if (currentLine.endsWith("GET /W")) {  // init camera for the main camera webserver
          if ((cameraInitType ! = 1) || (cameraInitType == 0)) {
              if (cameraInitType ! = 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
        }
        if (currentLine.endsWith("GET /S")) {  // deinitialize the camera
          cameraInitType = 0;
          esp_camera_deinit();  // the camera needs a deinit from its current configuration.
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(LED_BUILTIN, LOW);                // GET /L restarts the device
          esp_restart();
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
void startCameraServer();
void wifiIntManagement() {
    // STA connection and disconnection management
// WIFI DEBUG AND SERVICING SECTION START
  if (wifiDebugOn == 1) {
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
    
      Serial.println("WiFi not connected yet");
    }
    if (WiFi.status() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
    
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
    }
  if (wifiConnectionAttempts >= 32) { // turning off wifi, there is no point in trying anymore, if past 32 attempts.
    WiFi.mode(WIFI_OFF); // turning off wifi, then we go to deep sleep for a certain number of seconds.
    
    esp_err_t err = esp_camera_deinit();
    esp_deep_sleep_start();  // going to deep sleep
    
  if ((wifiConnFlag == 0) && (wifiConnectionAttempts < 32)) {  // wifiConnectionAttempts must be < 32 
    wifiConnectionAttempts++; // increasing the connection attempts counter
    
    if (wifiMulti.run() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
      Serial2.print("WiFi up and running: ");
      Serial2.print(WiFi.localIP());
      Serial2.println("' to connect");
      wifiConnFlag = 1;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
    if ((WiFi.status() != WL_CONNECTED) && (wifiBeginFlag == 0)) {
    
      Serial.println("WiFi restarting");
      WiFi.begin(ssid, password); 
      
      wifiBeginFlag = 1;
    }
  if (wifiConnFlag == 1) { // test if the wifi stays alive...
    if (WiFi.status() != WL_CONNECTED) {  // wifiMulti.run() == WL_CONNECTED // WiFi.status() != WL_CONNECTED
    
      Serial.println("WiFi disconnected");
      wifiConnFlag = 0;
      wifiBeginFlag = 0;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
  if (((wifiConnFlag == 1) && (wifiWebserverFlag == 0)) || (ESP.getFreeHeap() < 44000)) { // servicing the webserver on connection up for the first time
      // >>>>>>>> START SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      // >>>>>>>> END SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      
      wifiWebserverFlag = 1;
    
  // WIFI DEBUG AND SERVICING SECTION END 
// UDP - layer 5 control protocol
void UresetudpData() {
for(int i = 0; i < FIELDUA; i++){
  for(int j = 0; j < FIELDUB; j++) {
    UdataSplit[i][j] = 0;
for(int i = 0; i < FIELDUA; i++) {
  UfieldsLen[i] = 0;
UdataLen = 0;
} // end resetudpData()
int UfillinudpData(uint8_t *pktDataField, int pktLen) {
int i = 0;
int j = 0;
int k = 0;
UdataLen = pktLen;
for(i = 0; i < UdataLen; i++){
  if(pktDataField[i] == ',') {
    UfieldsLen[j] = k;
    Serial.print("received_udp_control_protocol_data:");
    Serial.print(UdataSplit[j]);
    Serial.print("; data_len:");
    Serial.print(k);
    Serial.print("; field_position:");
    Serial.println(j);
    j++;
    k = 0;
  if(j >= FIELDUA) {
    Serial.print("ERROR: too many commas in the udp layer 5 control protocol");
    return 100;
    
  UdataSplit[j][k] = pktDataField[i];
  k++; 
UfieldsLen[j] = k;
return 0;
} // end fillinudpData()
void UprocessudpCommand(AsyncUDPPacket packet) {
  Serial.print("processing udp layer 5 control protocol command directed to: ");
  Serial.print(UdataSplit[0]);
  Serial.print("; command is: ");
  Serial.println(UdataSplit[1]);
  // commands available at the moment, or planned, are: 
  // ACK (confirmed heartbeat reception, do nothing), TLGS (send picture to telegram), TLGC (configure telegram, field 2 = bot token, field 3 = chat id)
  // RST (reboot the device), DSLP (deep sleep)
  if(UdataSplit[0] == MY_NAME) {  // matched the field 0, the command is directed to me. 
      
      // processing the actual commands
      
      if(UdataSplit[1] == "ACK") {
        // do not reply with an ACK to an ACK, that would be ...disturbing
        UserverOK = 3;
      }
      if(UdataSplit[1] == "TLGS") {  // send picture via telegram
        //TBotToken
        //TChatId
        // technically speaking we should deinit and reinit with acceptable parameters. 
        
        if ((cameraInitType ! = 1) || (cameraInitType == 0)) {
          if (cameraInitType ! = 0) {
            esp_camera_deinit();  // the camera needs a deinit from its current configuration.
          }
          delay(1000); // this might not really be necessary
          cameraInitConfig(); // and is setup for the correct motion capture configuration
          delay(3000);
        }
         // this might not really be necessary
        take_send_photo(TChatId);   
      }
      if(UdataSplit[1] == "TLGC") { // configure telegram bot token and chat id
        bool ok; 
        String sToken = convertToString(UdataSplit[2], UfieldsLen[2]); 
        String sChatId = convertToString(UdataSplit[3], UfieldsLen[3]); 
        ok = NVS.setString ("TLGToken", sToken); // Store the data value into the key named "TLGToken" on the NVS
        if(ok) {
          ok = NVS.setString ("TLGChatId", sChatId); // Store the data value into the key named "TLGChatId" on the NVS
          
        }
        if(ok) {
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        } else {
          Serial.println("ERROR saving data to nvs");
          packet.printf(ERRNVS_DATA, packet.length());
        }
        
        
      }
      if(UdataSplit[1] == "RST") {  // restart system
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        esp_restart();
      }
      if(UdataSplit[1] == "DSLP") { // start deep sleep
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        Serial.println("RECEIVED REQUEST TO DEEP SLEEP, STARTING TO SLEEP DEEP");
        esp_err_t err = esp_camera_deinit();
        esp_deep_sleep_start();  // going to deep sleep
      }
      if(UdataSplit[1] == "WCAM") { // init camera for the webserver
        if ((cameraInitType ! = 1) || (cameraInitType == 0)) {
              if (cameraInitType ! = 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
        }   
      }
      if(UdataSplit[1] == "SCAM") { // deinitialize the camera
        cameraInitType = 0;
        esp_camera_deinit();  // the camera needs a deinit from its current configuration.
      }
      
      
void udpCommandClient() {
  if( ! udp.connected()) {
    Serial.println("UDP connecting to server A");
    udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
    Serial.println("UDP connected to server A");
  if(udp.connected()) {
        Serial.println("UDP sending to server A");
        //Send unicast
        udp.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType ! = 2) || (cameraInitType == 0)) {
              if (cameraInitType ! = 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udp.onPacket([](AsyncUDPPacket packet) {
            Serial.print("UDP Packet Type: ");
            Serial.print(packet.isBroadcast()?"Broadcast":packet.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packet.remoteIP());
            Serial.print(":");
            Serial.print(packet.remotePort());
            Serial.print(", To: ");
            Serial.print(packet.localIP());
            Serial.print(":");
            Serial.print(packet.localPort());
            Serial.print(", Length: ");
            Serial.print(packet.length());
            Serial.print(", Data: ");
            Serial.write(packet.data(), packet.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packet.data() ,packet.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packet); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
// sending the heartbeat to the backup udp command server
void udpBCommandClient() {
  if( ! udpB.connected()) {
    Serial.println("UDP connecting to server B");
    udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
    Serial.println("UDP connected to server B");
  if(udpB.connected()) {
        Serial.println("UDP sending to server B");
        //Send unicast
        udpB.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType ! = 2) || (cameraInitType == 0)) {
              if (cameraInitType ! = 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udpB.onPacket([](AsyncUDPPacket packetB) {
            Serial.print("UDP B Packet Type: ");
            Serial.print(packetB.isBroadcast()?"Broadcast":packetB.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packetB.remoteIP());
            Serial.print(":");
            Serial.print(packetB.remotePort());
            Serial.print(", To: ");
            Serial.print(packetB.localIP());
            Serial.print(":");
            Serial.print(packetB.localPort());
            Serial.print(", Length: ");
            Serial.print(packetB.length());
            Serial.print(", Data: ");
            Serial.write(packetB.data(), packetB.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packetB.data() ,packetB.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packetB); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
void clientsManagement() {
  if ((wifiConnFlag == 1) && (wifiWebserverFlag == 1)) { // HANDLE CLIENT REQUESTS HERE
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
    clientServe();
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
  } // end handle client requests if
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
// wakeup and init part 
  // packet / payload buffer allocation
  payloadBuffer = (uint8_t *)malloc(256 * sizeof(uint8_t));  // the actual size is 224 (see in the declarations), the maximum payload size for ESP-NOW is 250.
  pinMode(LED_BUILTIN, OUTPUT);
  // deep sleep boots
  ++bootCount;
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  /*
  First we configure the wake up source
  We set our ESP32 to wake up every 5 seconds
  */
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
// camera init and config
  Serial.println("WARNING, NOT INITIALIZING THE CAMERA IN ORDER TO SAVE POWER. PLEASE DO IT MANUALLY VIA UDP COMMANDS OR VIA THE MANAGEMENT HTTP SERVER ON PORT 8080");
  //cameraInitConfig(); // we want the camera not initialized by default. This saver power.
  /*
 if ((cameraInitType ! = 1) || (cameraInitType == 0)) {
              if (cameraInitType ! = 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
  */
// WIFI SECTION
  Serial.println();
  Serial.println("Configuring access point...");
  WiFi.mode(WIFI_AP_STA); // added by me // selecting the AP+STA mode
  wifiMulti.addAP("e32ap001s01border", "giampippetto");  // the connection part is verified as follows: wifiMulti.run() == WL_CONNECTED
  wifiMulti.addAP("G5SE_7499", "pippopluto");
  wifiMulti.addAP("internet-gw.iw1gpe.it.ampr.o", "heisakuukanwohiraite");
  wifiMulti.addAP("inverse", "heisakuukanwohiraite");
  wifiMulti.addAP("e32ap002s01border", "giampippetto");
  wifiMulti.addAP("e32ap003s01border", "giampippetto");
  wifiMulti.addAP("e32ap004s01border", "giampippetto");
  wifiMulti.addAP("e32ap001s02border", "giampippetto");
  wifiMulti.addAP("e32ap002s02border", "giampippetto");
  wifiMulti.addAP("e32ap003s02border", "giampippetto");
  wifiMulti.addAP("e32ap004s02border", "giampippetto");
  // You can remove the password parameter if you want the AP to be open.
  WiFi.softAP(ssid, password);
  delay(200); // wait at least 100ms until the AP has started
  if(!WiFi.softAPConfig(SetAPIP, SetAPIP, IPAddress(255, 255, 255, 0))){
      Serial.println("AP Config Failed");
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  // the STA part is configured here and managed in loop()
// old wifi section
  //WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  Serial.println("");
  Serial.println("WiFi connected");
  startCameraServer();
  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  */
  // NVS storage init
  NVS.begin();
  // trying to load the bot configuration from NVS 
  //TBotToken
  //TChatId
  // load the telegram bot token if available from NVS
  String loadedstr = NVS.getString ("TLGToken"); // Read the value of the "TLGToken" key from the NVS 
  if(loadedstr.length() > 3) { // at least we make sure the result is not empty...
    TBotToken = {};
    loadedstr.toCharArray(TBotToken, loadedstr.length()); // loading TBotToken
    loadedstr = NVS.getString ("TLGChatId"); // Read the value of the "TLGChatId" key from the NVS 
    if(loadedstr.length() > 3) {
      loadedstr.toCharArray(TChatId, loadedstr.length()); // loading TChatId
      Serial.print("Loaded Telegram BotToken and ChatId from NVS storage with values: ");
      Serial.print(TBotToken);
      Serial.print(" and ");
      Serial.println(TChatId);
    }
} // END setup()
void loop() {
  // put your main code here, to run repeatedly:
 // loopCounter check
  if (loopCounter > 16) {
    loopCounter = 0;
  clientsManagement();  // web client requests are handled always 
  if(loopCounter == 1) {
    wifiIntManagement();
  if(loopCounter == 2) {
    routeTableUpdate();
  if(loopCounter == 3) {
    udpCommandClient();
    udp.broadcastTo(MY_NAME, udpServerPort);
  if(loopCounter == 5) {
  // position number 15, let the device stabilize its connections first...
  if(loopCounter == 15) { // MOTION DETECTOR SECTION
    if ((motionDetectON == 1) || ((UserverOK == 0) && (alarmEnabled == 1)) ){
      
      if (!capture_still()) {
        Serial.println("Failed capture");
        delay(3000);
        return;
      }
      if (motion_detect()) {
        Serial.println("Motion detected");
    }
    update_frame();
    }
  // loopCounter increase
  loopCounter++;
  delay(1000);
otadata
app0
spiffs
h&!,[3
# 1 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
// ESP32_cam_node, upgraded with una additional udp layer 5 control protocol and configurable telegram bot
// PLEASE ALSO INSTALL THE ArduinoJson library by Benoit Blanchon
# 6 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 7 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 9 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 12 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 13 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 14 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 15 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
// NVS includes, non volatile storage
# 18 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
// WIFI includes and variables section START
#define MY_NAME "e32cam001s01"
#define HEARTBEAT_DATA "e32cam001s01,HEARTBEAT,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/
#define ACK_DATA "e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/
#define ERR_DATA "e32cam001s01,ERR,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/
#define ERRNVS_DATA "e32cam001s01,ERR,ERROR saving data to NVS,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/
# 28 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
WiFiMulti wifiMulti; // this should support more different AP's // ToDo
// Non volatile storage - incorporated in the project folder
# 33 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
// CAMERA: camera configuration and initialization
camera_config_t config;
uint8_t cameraInitType = 0; // 0 = camera off, not initialized; 1 = default init, the main webserver; 2 = motion detector; 3 = color blob detector
#define ALARMS_ENABLED 1 /* by default, the device works as a motion detector in case the contact with the command and control server is lost. */
// WARNING!!! Make sure that you have either selected ESP32 Wrover Module,
//            or another board which has PSRAM enabled
// Select camera model
//#define CAMERA_MODEL_WROVER_KIT
//#define CAMERA_MODEL_ESP_EYE
//#define CAMERA_MODEL_M5STACK_PSRAM
//#define CAMERA_MODEL_M5STACK_WIDE
#define CAMERA_MODEL_AI_THINKER 
# 53 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
// of course this is the default and should be modified
void cameraInitConfig() {
  // camera part
  cameraInitType = 1;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != 0 /*!< esp_err_t value indicating success (no error) */) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == (0x36)) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
// MOTION DETECTION SPECIFIC CAMERA DEFINES and buffers
#define WIDTH 320
#define HEIGHT 240
#define BLOCK_SIZE 10
#define W (WIDTH / BLOCK_SIZE)
#define H (HEIGHT / BLOCK_SIZE)
#define BLOCK_DIFF_THRESHOLD 0.2
#define IMAGE_DIFF_THRESHOLD 0.1
#define DEBUG 1
bool capture_still(); // declare functions
bool motion_detect();
void update_frame();
void print_frame(uint16_t frame[(240 / 10)][(320 / 10)]);
uint16_t prev_frame[(240 / 10)][(320 / 10)] = { 0 }; // these are actually 32*24 * 16bit, more than acceptable, no problem.
uint16_t current_frame[(240 / 10)][(320 / 10)] = { 0 };
uint8_t motionDetectON = 0; // motion detection is normally kept off. The idea is to activate it in case the command & control servers do not respond, or to activate it on demand / on alarm.
uint8_t alarmEnabled = 1 /* by default, the device works as a motion detector in case the contact with the command and control server is lost. */; // motion detection activation is enabled by default to 1, some other kinds of usage may require this is off, for example the color blob detection mode and the webcam / telegram modes. 
// MOTION DETECTION SPECIFIC CAMERA CONFIG INIT FUNCTION (first, remember to do a deinit!!!)
void cameraInitConfigMotionDetect() {
  // camera part
  cameraInitType = 2;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_GRAYSCALE;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != 0 /*!< esp_err_t value indicating success (no error) */) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == (0x36)) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
// CAMERA MOTION DETECTION SPECIFIC FUNCTIONS
 * Capture image and do down-sampling
bool capture_still() {
    camera_fb_t *frame_buffer = esp_camera_fb_get();
    if (!frame_buffer)
        return false;
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != 
# 222 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                                  __null 
# 222 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                                       ? frame_buffer->len : 0);
    //sensor_t *sensor = esp_camera_sensor_get();
    //Serial.print("Switch to JPEG: ");
    //Serial.println(sensor->set_pixformat(sensor, PIXFORMAT_RGB565));
    config.pixel_format = PIXFORMAT_RGB565;
    Serial.print("Switch ok? ");
    Serial.println(esp_camera_init(&config) == 0 /*!< esp_err_t value indicating success (no error) */ ? "yes" : "no");
    frame_buffer = esp_camera_fb_get();
    Serial.print("JPEG len: ");
    Serial.println(frame_buffer != 
# 233 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                                  __null 
# 233 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                                       ? frame_buffer->len : 0);
    //sensor->set_pixformat(sensor, PIXFORMAT_GRAYSCALE);
    frame_buffer = esp_camera_fb_get();
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != 
# 237 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                                  __null 
# 237 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                                       ? frame_buffer->len : 0);
    while (1) delay(50000);
    // set all 0s in current frame
    for (int y = 0; y < (240 / 10); y++)
        for (int x = 0; x < (320 / 10); x++)
            current_frame[y][x] = 0;
    // down-sample image in blocks
    for (uint32_t i = 0; i < 320 * 240; i++) {
        const uint16_t x = i % 320;
        const uint16_t y = floor(i / 320);
        const uint8_t block_x = floor(x / 10);
        const uint8_t block_y = floor(y / 10);
        const uint8_t pixel = frame_buffer->buf[i];
        const uint16_t current = current_frame[block_y][block_x];
        // average pixels in block (accumulate)
        current_frame[block_y][block_x] += pixel;
    }
    // average pixels in block (rescale)
    for (int y = 0; y < (240 / 10); y++)
        for (int x = 0; x < (320 / 10); x++)
            current_frame[y][x] /= 10 * 10;
    Serial.println("Current frame:");
    print_frame(current_frame);
    Serial.println("---------------");
    return true;
 * Compute the number of different blocks
 * If there are enough, then motion happened
bool motion_detect() {
    uint16_t changes = 0;
    const uint16_t blocks = (320 * 240) / (10 * 10);
    for (int y = 0; y < (240 / 10); y++) {
        for (int x = 0; x < (320 / 10); x++) {
            float current = current_frame[y][x];
            float prev = prev_frame[y][x];
            float delta = abs(current - prev) / prev;
            if (delta >= 0.2) {
                Serial.print("diff\t");
                Serial.print(y);
                Serial.print('\t');
                Serial.println(x);
                changes += 1;
            }
        }
    }
    Serial.print("Changed ");
    Serial.print(changes);
    Serial.print(" out of ");
    Serial.println(blocks);
    return (1.0 * changes / blocks) > 0.1;
 * Copy current frame to previous
void update_frame() {
    for (int y = 0; y < (240 / 10); y++) {
        for (int x = 0; x < (320 / 10); x++) {
            prev_frame[y][x] = current_frame[y][x];
        }
    }
 * For serial debugging
 * @param frame
void print_frame(uint16_t frame[(240 / 10)][(320 / 10)]) {
    for (int y = 0; y < (240 / 10); y++) {
        for (int x = 0; x < (320 / 10); x++) {
            Serial.print(frame[y][x]);
            Serial.print('\t');
        }
        Serial.println();
    }
// CAMERA COLOR BLOB DETECTOR, INIT FUNCTION
// color-based blob detection - I plan to use this as part of a larger project, the idea is to help detect certain insects and pests in agricultural settings
// this camera will then become an additional sensor communicating with a robot designed to remove pests from invaded plants. 
void cameraInitConfigColorDetector() { // specific for color-based target recognition, remember to do a deinit first!!!
  // camera part
  cameraInitType = 3;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_RGB888;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != 0 /*!< esp_err_t value indicating success (no error) */) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == (0x36)) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
// Telegram section
# 414 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 415 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
char* TBotToken = "810218086:AAFPJNDbolU0tzj_Xx6lXOsatDlYnWYaa80";
char* TChatId = "537093554";
WiFiClientSecure client;
UniversalTelegramBot TBotCambot(TBotToken, client);
int Bot_mtbs = 3000; //mean time between scan messages
long Bot_lasttime; //last time messages' scan has been done
// specific camera variables for the telegram bot
//camera_fb_t * TBotCamfb; // moved intra-function
uint8_t* TBotCamfb_buffer;
size_t TBotCamfb_length;
int TBotCamcurrentByte;
// camera functions specific for the telegram bot
bool isMoreDataAvailable() {
  return (TBotCamfb_length - TBotCamcurrentByte);
uint8_t photoNextByte() {
  TBotCamcurrentByte++;
  return (TBotCamfb_buffer[TBotCamcurrentByte - 1]);
void take_send_photo(String TChatId)
  camera_fb_t * TBotCamfb = 
# 444 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                           __null
# 444 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                               ;
  TBotCamfb = esp_camera_fb_get();
  TBotCamcurrentByte = 0;
  TBotCamfb_length = TBotCamfb->len;
  TBotCamfb_buffer = TBotCamfb->buf;
  TBotCambot.sendPhotoByBinary(TChatId, "image/jpeg", TBotCamfb->len, isMoreDataAvailable, photoNextByte, nullptr, nullptr);
  esp_camera_fb_return(TBotCamfb);
  TBotCamfb_length = 
# 451 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                    __null
# 451 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                        ;
  TBotCamfb_buffer = 
# 452 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                    __null
# 452 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                        ;
// UDP Async client, sends keep heartbeat messages to the server and retrieves commands
AsyncUDP udp; // for server A  // udp layer 5 control protocol
AsyncUDP udpB; // for server B
// command and control IP addresses for server A and server B (redundant server), the exchange is done via udp ( the port is defined by int udpServerPort) and the layer 5 transfers commands and status info as comma separated variables
int IPudpServerAa = 192;
int IPudpServerAb = 168;
int IPudpServerAc = 88;
int IPudpServerAd = 32;
int IPudpServerBa = 192;
int IPudpServerBb = 168;
int IPudpServerBc = 88;
int IPudpServerBd = 3;
int udpServerPort = 8443; // UDP/443 because, well, we can
// udp - layer 5 control protocol processing, the layer 5 control protocol consists of 8 CSV fields. The protocol structure is simple: client_name,requested_operation,field1,field2,field3,field4,field5,field6  all unused fields are set to ascii character 0
#define FIELDUA 8
#define FIELDUB 64
char UdataSplit[8][64];
int UfieldsLen[8];
int UdataLen = 0;
int UserverOK = 0; // contact with the server attempted for 3 times in a row, failing. Say, the idea is: ACK from server received: set to 3, send HEARTBEAT: decrease by 1 until zero is reached, then stop decreasing.
static uint8_t wifiDebugOn = 0;
static uint8_t wifiConnFlag = 0;
static uint8_t wifiWebserverFlag = 0;
static uint8_t wifiBeginFlag = 0;
static uint8_t wifiConnectionAttempts = 0;
// Set the local access point IP address, the netmask is assumed to be /24
IPAddress SetAPIP = {192,168,5,1}; // REMEMBER TO CHANGE THIS FOR EVERY AP YOU PLAN TO INTRODUCE TO THE NETWORK
// Set these to your desired credentials.
const char *ssid = "e32cam001s01"; // for the local AP  // REMEMBER TO CHANGE THE SSID AS WELL, THE NET PART CONTAINS THE THIRD BYTE OF THE AP IP ADDRESS (the network LSByte)
const char *password = "giampippetto";
WiFiServer serverSTA(8080); // adding a second server on the STA interface? Let's try
// loop() control section
uint32_t loopCounter = 0;
// NETWORK section
// processing variables subsection
uint8_t payloadCurrContent[128] = {0};
uint8_t hashCurrContent[64] = {0};
uint8_t payHeaderCurrContent[32] = {0};
// NAt processing subsection
uint32_t payloadTypeF = 0;
uint32_t srcIPext = 0; // STA side
uint32_t dstIPext = 0;
uint32_t srcIPint = 0; // AP side
uint32_t dstIPint = 0;
uint32_t srcIPpay = 0; // payload side
uint32_t dstIPpay = 0;
// in the NAT table, the folloving are converted to uint32_t 
uint16_t srcPortext = 0; // STA side
uint16_t dstPortext = 0;
uint16_t srcPortint = 0; // AP side
uint16_t dstPortint = 0;
uint16_t srcPortpay = 0; // payload side
uint16_t dstPortpay = 0;
uint16_t expiryCounter = 0;
// NAT table subsection
uint32_t NATline[16] = {0}; // there are 14 fields actually, as per the above list, plus 2 reserved fields
uint32_t NATtable[256][16] = {0};
uint16_t NATlinePointer = 0; // do we allow up to 256 flows only?
// routing table subsection
uint16_t RoutelinePointer = 0; // do we allow up to 16 routes only?
uint32_t routetable[16][8] = {0}; // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
//packet buffer sub-section
uint8_t payloadToProcessFlag = 0; // if the LSB bit0 == 1, there is a payload that needs processing, other values / bits set may mean other operations.
uint8_t * payloadBuffer = 
# 557 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                         __null
# 557 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                             ;
//structure of the packet buffer:
Size = 224Bytes = 32B header + 128B payload + 64B hash
4B = Type Field( 4 bytes ) = reqtype(1B), protocolNum(1B), Reserved(1B), Reserved(1B)
4B = DST IP
4B = SRC IP 
2B = DST PORT
2B = SRC PORT
2B = PayloadLen
2B = Reserved
4B = Reserved
4B = Reserved
4B = Reserved
128B = actual payload
64B = sha256Hash_reserved(32B raw or 64B hex)
// LED section
#define LED_BUILTIN 2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/
// string section 
// converts character array 
// to string and returns it 
String convertToString(char* a, int size)
    int i;
    String s = "";
    for (i = 0; i < size; i++) {
        s = s + a[i];
    }
    return s;
// deep sleep section
#define uS_TO_S_FACTOR 1000000ULL /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP 60 /* Time ESP32 will go to sleep (in seconds) */
__attribute__((section(".rtc.data"))) int bootCount = 0;
Method to print the reason by which ESP32
has been awaken from sleep
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch(wakeup_reason)
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
// update the routing table
void routeTableUpdate() {
// RoutelinePointer // do we allow up to 16 routes only?
//uint32_t *routetable[16][8] // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
uint32_t ImyLocalIP = 0;
uint32_t ImyLocalSubnet = 0;
uint32_t ImyAPIP = 0;
uint32_t ImyAPSubnet = 0;
uint32_t ImyLocalSubnetMask = 0;
uint32_t ImyAPSubnetMask = (255 >> 24) + (255 >> 16) + (255 >> 8);
uint32_t ImyLocalGateway = 0;
IPAddress myLocalIP = {0,0,0,0};
IPAddress myLocalSubnet = {0,0,0,0};
IPAddress myLocalSubnetMask = {0,0,0,0};
IPAddress myLocalGateway = {0,0,0,0};
IPAddress myAPIP = WiFi.softAPIP();
ImyAPIP = (uint32_t)((myAPIP[0] << 24) + (myAPIP[1] << 24) + (myAPIP[2] << 24) + myAPIP[3]);
ImyAPSubnet = ImyAPIP & ImyAPSubnetMask;
// the first lines
// line 0 local AP  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
routetable[0][0] = ImyAPSubnet;
routetable[0][1] = ImyAPSubnetMask;
routetable[0][2] = ImyAPIP;
routetable[0][3] = 0; // gateway of course set to 0 for the AP side
routetable[0][4] = 0; // interface ID set to zero, for the moment.
routetable[0][5] = 0;
routetable[0][6] = 0;
routetable[0][7] = 0;
if (wifiConnFlag == 1) {
  myLocalIP = WiFi.localIP();
  myLocalSubnet = WiFi.subnetMask();
  myLocalGateway = WiFi.gatewayIP();
  ImyLocalIP = (myLocalIP[0] << 24) + (myLocalIP[1] << 24) + (myLocalIP[2] << 24) + myLocalIP[3];
  ImyLocalSubnetMask = (myLocalSubnetMask[0] << 24) + (myLocalSubnetMask[1] << 24) + (myLocalSubnetMask[2] << 24) + myLocalSubnetMask[3];
  ImyLocalGateway = (myLocalGateway[0] << 24) + (myLocalGateway[1] << 24) + (myLocalGateway[2] << 24) + myLocalGateway[3];
  ImyLocalSubnet = ImyLocalIP & ImyLocalSubnetMask;
  // line 1 STA  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
  routetable[1][0] = ImyLocalSubnet;
  routetable[1][1] = ImyLocalSubnetMask;
  routetable[1][2] = ImyLocalIP;
  routetable[1][3] = ImyLocalGateway;
  routetable[1][4] = 1; // interface ID set to 1, for the moment.
  routetable[1][5] = 0;
  routetable[1][6] = 0;
  routetable[1][7] = 0;
} else {
  routetable[1][0] = 0; // nullifying the STA route
  routetable[1][1] = 0; // nullifying the STA route
  routetable[1][2] = 0; // nullifying the STA route
  routetable[1][3] = 0; // nullifying the STA route
  routetable[1][4] = 0; // nullifying the STA route
  routetable[1][5] = 0; // nullifying the STA route
  routetable[1][6] = 0; // nullifying the STA route
  routetable[1][7] = 0; // nullifying the STA route
} // end void routetableupdate()
// handle client requests
void clientServe() {
  WiFiClient client = serverSTA.available(); // listen for incoming clients
  if (client) { // if you get a client,
    Serial.println("New Client."); // print a message out the serial port
    String currentLine = ""; // make a String to hold incoming data from the client
    while (client.connected()) { // loop while the client's connected
      if (client.available()) { // if there's bytes to read from the client,
        char c = client.read(); // read a byte, then
        Serial.write(c); // print it out the serial monitor
        if (c == '\n') { // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to take a picture and send it via telegram (configure via udp layer 5 control protocol).<br>");
            client.print("Click <a href=\"/L\">here</a> to restart the device.<br>");
            client.print("Click <a href=\"/W\">here</a> to initialize the camera hardware for the integrated camera webserver.<br>");
            client.print("Click <a href=\"/S\">here</a> to deinitialize the camera hardware and save power.<br>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else { // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') { // if you got anything else but a carriage return character,
          currentLine += c; // add it to the end of the currentLine
        }
        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          //digitalWrite(LED_BUILTIN, HIGH);               // GET /H takes a picture and sends it via telegram
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          }
          take_send_photo(TChatId);
          digitalWrite(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x0);
        }
        if (currentLine.endsWith("GET /W")) { // init camera for the main camera webserver
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          }
        }
        if (currentLine.endsWith("GET /S")) { // deinitialize the camera
          cameraInitType = 0;
          esp_camera_deinit(); // the camera needs a deinit from its current configuration.
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x0); // GET /L restarts the device
          esp_restart();
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
void startCameraServer();
void wifiIntManagement() {
    // STA connection and disconnection management
// WIFI DEBUG AND SERVICING SECTION START
  if (wifiDebugOn == 1) {
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("WiFi not connected yet");
    }
    if (WiFi.status() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer(); // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
    }
  if (wifiConnectionAttempts >= 32) { // turning off wifi, there is no point in trying anymore, if past 32 attempts.
    WiFi.mode(WIFI_MODE_NULL); // turning off wifi, then we go to deep sleep for a certain number of seconds.
    esp_err_t err = esp_camera_deinit();
    esp_deep_sleep_start(); // going to deep sleep
  if ((wifiConnFlag == 0) && (wifiConnectionAttempts < 32)) { // wifiConnectionAttempts must be < 32 
    wifiConnectionAttempts++; // increasing the connection attempts counter
    if (wifiMulti.run() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer(); // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
      Serial2.print("WiFi up and running: ");
      Serial2.print(WiFi.localIP());
      Serial2.println("' to connect");
      wifiConnFlag = 1;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
    if ((WiFi.status() != WL_CONNECTED) && (wifiBeginFlag == 0)) {
      Serial.println("WiFi restarting");
      WiFi.begin(ssid, password);
      wifiBeginFlag = 1;
    }
  if (wifiConnFlag == 1) { // test if the wifi stays alive...
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() != WL_CONNECTED
      Serial.println("WiFi disconnected");
      wifiConnFlag = 0;
      wifiBeginFlag = 0;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
  if (((wifiConnFlag == 1) && (wifiWebserverFlag == 0)) || (ESP.getFreeHeap() < 44000)) { // servicing the webserver on connection up for the first time
      // >>>>>>>> START SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      // >>>>>>>> END SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      wifiWebserverFlag = 1;
  // WIFI DEBUG AND SERVICING SECTION END 
// UDP - layer 5 control protocol
void UresetudpData() {
for(int i = 0; i < 8; i++){
  for(int j = 0; j < 64; j++) {
    UdataSplit[i][j] = 0;
for(int i = 0; i < 8; i++) {
  UfieldsLen[i] = 0;
UdataLen = 0;
} // end resetudpData()
int UfillinudpData(uint8_t *pktDataField, int pktLen) {
int i = 0;
int j = 0;
int k = 0;
UdataLen = pktLen;
for(i = 0; i < UdataLen; i++){
  if(pktDataField[i] == ',') {
    UfieldsLen[j] = k;
    Serial.print("received_udp_control_protocol_data:");
    Serial.print(UdataSplit[j]);
    Serial.print("; data_len:");
    Serial.print(k);
    Serial.print("; field_position:");
    Serial.println(j);
    j++;
    k = 0;
  if(j >= 8) {
    Serial.print("ERROR: too many commas in the udp layer 5 control protocol");
    return 100;
  UdataSplit[j][k] = pktDataField[i];
  k++;
UfieldsLen[j] = k;
return 0;
} // end fillinudpData()
void UprocessudpCommand(AsyncUDPPacket packet) {
  Serial.print("processing udp layer 5 control protocol command directed to: ");
  Serial.print(UdataSplit[0]);
  Serial.print("; command is: ");
  Serial.println(UdataSplit[1]);
  // commands available at the moment, or planned, are: 
  // ACK (confirmed heartbeat reception, do nothing), TLGS (send picture to telegram), TLGC (configure telegram, field 2 = bot token, field 3 = chat id)
  // RST (reboot the device), DSLP (deep sleep)
  if(UdataSplit[0] == "e32cam001s01") { // matched the field 0, the command is directed to me. 
      // processing the actual commands
      if(UdataSplit[1] == "ACK") {
        // do not reply with an ACK to an ACK, that would be ...disturbing
        UserverOK = 3;
      }
      if(UdataSplit[1] == "TLGS") { // send picture via telegram
        //TBotToken
        //TChatId
        // technically speaking we should deinit and reinit with acceptable parameters. 
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
          if (cameraInitType != 0) {
            esp_camera_deinit(); // the camera needs a deinit from its current configuration.
          }
          delay(1000); // this might not really be necessary
          cameraInitConfig(); // and is setup for the correct motion capture configuration
          delay(3000);
        }
         // this might not really be necessary
        take_send_photo(TChatId);
      }
      if(UdataSplit[1] == "TLGC") { // configure telegram bot token and chat id
        bool ok;
        String sToken = convertToString(UdataSplit[2], UfieldsLen[2]);
        String sChatId = convertToString(UdataSplit[3], UfieldsLen[3]);
        ok = NVS.setString ("TLGToken", sToken); // Store the data value into the key named "TLGToken" on the NVS
        if(ok) {
          ok = NVS.setString ("TLGChatId", sChatId); // Store the data value into the key named "TLGChatId" on the NVS
        }
        if(ok) {
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf("e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        } else {
          Serial.println("ERROR saving data to nvs");
          packet.printf("e32cam001s01,ERR,ERROR saving data to NVS,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        }
      }
      if(UdataSplit[1] == "RST") { // restart system
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf("e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        esp_restart();
      }
      if(UdataSplit[1] == "DSLP") { // start deep sleep
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf("e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        Serial.println("RECEIVED REQUEST TO DEEP SLEEP, STARTING TO SLEEP DEEP");
        esp_err_t err = esp_camera_deinit();
        esp_deep_sleep_start(); // going to deep sleep
      }
      if(UdataSplit[1] == "WCAM") { // init camera for the webserver
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
        }
      }
      if(UdataSplit[1] == "SCAM") { // deinitialize the camera
        cameraInitType = 0;
        esp_camera_deinit(); // the camera needs a deinit from its current configuration.
      }
void udpCommandClient() {
  if( ! udp.connected()) {
    Serial.println("UDP connecting to server A");
    udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
    Serial.println("UDP connected to server A");
  if(udp.connected()) {
        Serial.println("UDP sending to server A");
        //Send unicast
        udp.print("e32cam001s01,HEARTBEAT,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/); // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
          }
        }
        udp.onPacket([](AsyncUDPPacket packet) {
            Serial.print("UDP Packet Type: ");
            Serial.print(packet.isBroadcast()?"Broadcast":packet.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packet.remoteIP());
            Serial.print(":");
            Serial.print(packet.remotePort());
            Serial.print(", To: ");
            Serial.print(packet.localIP());
            Serial.print(":");
            Serial.print(packet.localPort());
            Serial.print(", Length: ");
            Serial.print(packet.length());
            Serial.print(", Data: ");
            Serial.write(packet.data(), packet.length());
            Serial.println();
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packet.data() ,packet.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packet); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            // packet response processing END
        });
    }
// sending the heartbeat to the backup udp command server
void udpBCommandClient() {
  if( ! udpB.connected()) {
    Serial.println("UDP connecting to server B");
    udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
    Serial.println("UDP connected to server B");
  if(udpB.connected()) {
        Serial.println("UDP sending to server B");
        //Send unicast
        udpB.print("e32cam001s01,HEARTBEAT,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/); // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
          }
        }
        udpB.onPacket([](AsyncUDPPacket packetB) {
            Serial.print("UDP B Packet Type: ");
            Serial.print(packetB.isBroadcast()?"Broadcast":packetB.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packetB.remoteIP());
            Serial.print(":");
            Serial.print(packetB.remotePort());
            Serial.print(", To: ");
            Serial.print(packetB.localIP());
            Serial.print(":");
            Serial.print(packetB.localPort());
            Serial.print(", Length: ");
            Serial.print(packetB.length());
            Serial.print(", Data: ");
            Serial.write(packetB.data(), packetB.length());
            Serial.println();
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packetB.data() ,packetB.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packetB); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            // packet response processing END
        });
    }
void clientsManagement() {
  if ((wifiConnFlag == 1) && (wifiWebserverFlag == 1)) { // HANDLE CLIENT REQUESTS HERE
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    clientServe();
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
  } // end handle client requests if
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
// wakeup and init part 
  // packet / payload buffer allocation
  payloadBuffer = (uint8_t *)malloc(256 * sizeof(uint8_t)); // the actual size is 224 (see in the declarations), the maximum payload size for ESP-NOW is 250.
  pinMode(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x02);
  // deep sleep boots
  ++bootCount;
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  /*
  First we configure the wake up source
  We set our ESP32 to wake up every 5 seconds
  */
  esp_sleep_enable_timer_wakeup(60 /* Time ESP32 will go to sleep (in seconds) */ * 1000000ULL /* Conversion factor for micro seconds to seconds */);
// camera init and config
  Serial.println("WARNING, NOT INITIALIZING THE CAMERA IN ORDER TO SAVE POWER. PLEASE DO IT MANUALLY VIA UDP COMMANDS OR VIA THE MANAGEMENT HTTP SERVER ON PORT 8080");
  //cameraInitConfig(); // we want the camera not initialized by default. This saver power.
  /*
 if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
  */
// WIFI SECTION
  Serial.println();
  Serial.println("Configuring access point...");
  WiFi.mode(WIFI_MODE_APSTA); // added by me // selecting the AP+STA mode
  wifiMulti.addAP("e32ap001s01border", "giampippetto"); // the connection part is verified as follows: wifiMulti.run() == WL_CONNECTED
  wifiMulti.addAP("G5SE_7499", "pippopluto");
  wifiMulti.addAP("internet-gw.iw1gpe.it.ampr.o", "heisakuukanwohiraite");
  wifiMulti.addAP("inverse", "heisakuukanwohiraite");
  wifiMulti.addAP("e32ap002s01border", "giampippetto");
  wifiMulti.addAP("e32ap003s01border", "giampippetto");
  wifiMulti.addAP("e32ap004s01border", "giampippetto");
  wifiMulti.addAP("e32ap001s02border", "giampippetto");
  wifiMulti.addAP("e32ap002s02border", "giampippetto");
  wifiMulti.addAP("e32ap003s02border", "giampippetto");
  wifiMulti.addAP("e32ap004s02border", "giampippetto");
  // You can remove the password parameter if you want the AP to be open.
  WiFi.softAP(ssid, password);
  delay(200); // wait at least 100ms until the AP has started
  if(!WiFi.softAPConfig(SetAPIP, SetAPIP, IPAddress(255, 255, 255, 0))){
      Serial.println("AP Config Failed");
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  // the STA part is configured here and managed in loop()
// old wifi section
  //WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  Serial.println("");
  Serial.println("WiFi connected");
  startCameraServer();
  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  */
  // NVS storage init
  NVS.begin();
  // trying to load the bot configuration from NVS 
  //TBotToken
  //TChatId
  // load the telegram bot token if available from NVS
  String loadedstr = NVS.getString ("TLGToken"); // Read the value of the "TLGToken" key from the NVS 
  if(loadedstr.length() > 3) { // at least we make sure the result is not empty...
    TBotToken = {};
    loadedstr.toCharArray(TBotToken, loadedstr.length()); // loading TBotToken
    loadedstr = NVS.getString ("TLGChatId"); // Read the value of the "TLGChatId" key from the NVS 
    if(loadedstr.length() > 3) {
      loadedstr.toCharArray(TChatId, loadedstr.length()); // loading TChatId
      Serial.print("Loaded Telegram BotToken and ChatId from NVS storage with values: ");
      Serial.print(TBotToken);
      Serial.print(" and ");
      Serial.println(TChatId);
    }
} // END setup()
void loop() {
  // put your main code here, to run repeatedly:
 // loopCounter check
  if (loopCounter > 16) {
    loopCounter = 0;
  clientsManagement(); // web client requests are handled always 
  if(loopCounter == 1) {
    wifiIntManagement();
  if(loopCounter == 2) {
    routeTableUpdate();
  if(loopCounter == 3) {
    udpCommandClient();
    udp.broadcastTo("e32cam001s01", udpServerPort);
  if(loopCounter == 5) {
  // position number 15, let the device stabilize its connections first...
  if(loopCounter == 15) { // MOTION DETECTOR SECTION
    if ((motionDetectON == 1) || ((UserverOK == 0) && (alarmEnabled == 1)) ){
      if (!capture_still()) {
        Serial.println("Failed capture");
        delay(3000);
        return;
      }
      if (motion_detect()) {
        Serial.println("Motion detected");
    }
    update_frame();
    }
  // loopCounter increase
  loopCounter++;
  delay(1000);
"3DUfw`
_CONSOLE
"3DUfw`t
_CONSOLE
/tmp/arduino_build_383460/sketch/esp32_cam_node.ino.cpp.o: \
 /tmp/arduino_build_383460/sketch/esp32_cam_node.ino.cpp \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Arduino.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdint.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/_default_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/features.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/_intsup.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/_ansi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/newlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/ieeefp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core-isa.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/cdefs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/reent.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/_ansi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/lock.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/sched.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/stdio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/stdlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/alloca.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/string.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/string.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/inttypes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/FreeRTOS.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/config/sdkconfig.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/hal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtensa-versions.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core-matmap.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/tie.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/system.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_context.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/corebits.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime-frames.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/ets_sys.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_assert.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/assert.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/projdefs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/deprecated_definitions.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portmacro.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/specreg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_crosscore_int.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_timer.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_err.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/heap/esp_heap_caps.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/heap/multi_heap.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc_memory_layout.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_attr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portbenchmark.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/mpu_wrappers.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_system.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_sleep.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_struct.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/rtc_io_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/io_mux_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_sig_map.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_pins.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_intr_alloc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_periph.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/touch_pad.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_intr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/ets_sys.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_api.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/touch_channel.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/task.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/limits.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/list.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/semphr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/queue.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/math.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-log.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/log/esp_log.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/log/esp_log_internal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-matrix.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-uart.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-touch.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-dac.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-adc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-spi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-i2c.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/event_groups.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/timers.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/task.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-ledc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-rmt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-sigmadelta.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-timer.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-bt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-psram.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-cpu.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp8266-compat.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/stdlib_noniso.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/binary.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WCharacter.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WString.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/pgmspace.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Stream.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Print.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Printable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/IPAddress.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WString.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Printable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Client.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Server.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Udp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Stream.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/IPAddress.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/HardwareSerial.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Esp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/variants/esp32/pins_arduino.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/esp_camera.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/ledc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/periph_ctrl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/dport_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/dport_access.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_dport_access.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/uart_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/periph_defs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/sensor.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/img_converters.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Print.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/IPv6Address.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiType.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiSTA.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiGeneric.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_event_loop.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp_event/esp_event.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/queue.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp_event/esp_event_base.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_event_legacy.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_wifi_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_private/esp_wifi_types_private.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/queue.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_interface.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/tcpip_adapter/tcpip_adapter.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_wifi_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/ip_addr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/opt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwipopts.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/time.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/fcntl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/_default_fcntl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/stat.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/vfs/sys/ioctl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/select.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_task.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/netif/dhcp_state.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/debug.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/arch.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/arch/cc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/errno.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/errno.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/arch/sys_arch.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/arch/vfs_lwip.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/def.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/ip4_addr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/ip6_addr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/def.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/dhcpserver/dhcpserver.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiAP.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiScan.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiClient.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Client.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiServer.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Server.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiUdp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Udp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/cbuf.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiClient.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiAP.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiUdp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/AsyncUDP/src/AsyncUDP.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/api.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/netbuf.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/pbuf.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/err.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/sys.h \
 /tmp/arduino_build_383460/sketch/ArduinoNvs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/spi_flash/esp_partition.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/spi_flash/esp_spi_flash.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/nvs_flash/nvs_flash.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/nvs_flash/nvs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/nvs_flash/nvs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiMulti.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFi.h \
 /tmp/arduino_build_383460/sketch/camera_pins.h \
 /tmp/arduino_build_383460/sketch/UniversalTelegramBotRZO.h \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson.h \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Configuration.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayRef.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Collection/CollectionData.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Namespace.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/version.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/assert.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayIterator.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/SlotFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/StringAdapters.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ConstRamStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/safe_strcmp.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/IsString.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/conditional.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/enable_if.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/integral_constant.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_array.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_base_of.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_class.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/declval.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_const.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_convertible.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_enum.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_floating_point.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_integral.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_same.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_signed.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_unsigned.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/type_identity.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_const.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_reference.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/StoragePolicy.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/RamStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/Alignment.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StringSlot.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/mpl/max.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/gsl/not_null.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/Float.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/Integer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/SizedRamStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/StlStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ArduinoStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/FlashStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/SizedFlashStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/convertNumber.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/alias_cast.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/math.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/limits.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantRef.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Misc/Visitable.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantOperators.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantCasts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/attributes.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantComparisons.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantOr.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantAs.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/IsWriteableString.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantShortcuts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayShortcuts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectShortcuts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectRef.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectIterator.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/Pair.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/String.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/DynamicJsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantTo.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/StaticJsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantAsImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/parseFloat.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/parseNumber.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/ctype.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/parseInteger.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/deserialize.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/NestingLimit.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Reader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/IteratorReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/RamReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStreamReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStringReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/StdStreamReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/StringStorage/StringStorage.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StringBuilder.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/StringStorage/StringMover.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/EscapeSequence.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/Latch.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/Utf16.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/Utf8.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/FloatParts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/measure.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/DummyWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/serialize.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/StaticStringWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStringWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/ArduinoStringWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStreamWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/PrintWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/PrettyJsonSerializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/endianess.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/utility.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/ieee754.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/compatibility.hpp \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/core_version.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/WiFiClientSecure.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/ssl_client.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/esp_mem.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/check_config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform_time.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net_sockets.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl_ciphersuites.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/pk.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/md.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/rsa.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecdsa.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/asn1.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecdh.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/debug.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/entropy.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/sha512.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ctr_drbg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/aes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/aes_alt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/hwcrypto/aes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/aes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/error.h
"3DUfw`
FIN8m
_CONSOLE
^+CV
]':|	
zUO>gJ
:}E?
3U	W
'X![
YEL|
.&vh
 >DQ
_3ug"
t,ed
V :W
lsI/
Dt`D
zG	V
ZF=R
 n]\
VR!&
+PJ$
,A|M
i?>!
 uy*Kh
IsYv
rzgh
\~Zl
jr/o
(t*c
(8W1
et	03(
u\z"
eQsE
2Au|HD
[Pdp
*dxt
]97&y#
J gdG
Qh2R
eI?7R(
X	zU
1h}T
u"WQ
(ko:
-FA@"
9pr$
:K1H
F04#
ln0y	
sh5[V
zXC"
h[Ca
4td;
YZhh%
5'~J
O?7%y
}n&N	
rUvN
I5s9
&uyU
qACh
~u~_
yfy0
-.z:@
f5i"
'Koy
NuNc
uZPrv
lMkE#
2K hx
54ijA{`
H'57
Fv%.
E?dw?y(
Xj5g
gIS8
s?Gj
QQ@r?
>R	>
*+gO:
Sv3(
GEi.r
>Rbr~
"wz/
4~N"
VT*5
2 sKH
fRI.
I7CO
8:uo
woZB
)$SW
1J@C
,? }
ZWMc
%JTf
G; ]
8~FN
0j>T
vw*-
gwn*
?QMob
-^LCj
;;#t
]Z5uQ
IuI6W
!GEi
<%G\
4/v?n
?P+.6_M
psH6
EX3u
zy6g
|res>
l's'v1
#1~O
Kj(W
WRnn
[r:]
d$%1
0<zO
U!#UL
^1V`
.'k#U~Or
{owo
CFr6H!-
j8%I
aN(X
,a[7
bazm
/gNC
df @
X^r|=|
$v#_
5*f%[
s%:l<c
J(O3b
mYsC
~4Awd
33q(
\<a994
~bbi
+s4)>
moqW?N"
6@/(
IJ?v
%k'f
07A^
i_a@]
0A,B
u0j+
uFQ{H|N
Xs}?
_=;3BbV
Pk.3'Cq
Z-.Q
vDn;
B>J,
}bD$
+h*X
^&o8|
[c+Q4
vsL%
vf'<
V)\3
Fltb
|bhu
T:pA
s>%%
F\^v
% 40 .
,'f$6
:FQgI
1E%e
v_'BRX
ra"	g
F+NG
F $%
*6T/9g'
QOqd
2:8I
mI	0
mYj"
0?!%
pZMU>
DVfs
\lMA
x3EO
K":P
%5	-
F%4o
b_S#
ct`ylG*;h
'bM9Tv
M1bM
p/y[
j'A1
{ltK
EMuW
ZG!!
7-#m
OU(B
{Lar
o@*I]
"8,kx
RZp/
}=W{
AA~0
3>$}2FS
4<Y-
GmPMzh&Z
D5}&f
 RKR+
Mu8j
tQ(E$
|3@_}
WmQ5
/ e4r
RoSp
a8KO)
/^&o
,_>9
I	PpQ
bn6l
I2<)
~mHV
k|{Q
ZF/6
+]6SRc
KQ\5
pK2pG
 W%>P
~`-}
{I}_9
#=7w
3l&w
z,g&
!,Zn
@WbP
X'I:1
6HM0
N6g(
i=8?3
+[3Ie
+A|Z
cluWP9)
_J(T
~e g
IXI@
Sm$ 
zEb,
:F)DWo
j'2l
8})a
*][JqS&
~C8L
t?+(|
prE_B2
4Rh/T
I{"W	
%s'X
9.~u=
/)BZ<
4z5TP
#.WQ6
.Ft{
7mAe
`M@@
 V&|
Ft(QA
3.8>
N(ZKWC2
=R#Ox5%
#$.L
f5QS
Y4JCD
Sm8y
KS{}n
q1oZH
X@ ?
UEu|A
C/iM
}qL<v0
Rb.E
=7b	
<R#G
CIsZ
Om!\
N,A2v
	{C[W
Jh?{
J:f^
z?zg
jn0(<
ss_p
}6Ge
:z^W
L$fJ
Iide
dhK<-*H
9kK4
h{G[
|DDZ
(@MU
M7XJaB
fj${
,@Nys
XghZ0
s]$gR
X,S 
0!(3HA1n
boBoZ<)
~To#
ZedZ
,n->0
<9u)i
@!=-
D_Sf
#,xS
OnWh
IcRo
;Qa{zi
G#Oi
;2 $Y
|v%GN
el~ 
k)EW
}Ebk8
RTk=
(yT##
_h.A7.
Oi`:
U\f1
n+p#
4z[v
>d&W
sCFW
<LK	
[UODSb>J'
V	f<
	RI>
f/B3
S02A
BHLA
6_<V
#`>[
6%"9>,e
fBnA#\"
[jIH
[JhCO
{ayL
V8r]
h#EJ"
%+$P
,w6p
MB>]
-YgE
Y0wl
8]b-
'VCE
ZxC{
:d\C6+
]PTv=;
^Yc6)%
*v<D\
@C~r$
2&(a
I<] 7
V,vP
!YYF
LZAN
F(MR
[1kY
NI"R
KpK\X
A %K
3X%g
MYASS
o2nL
a@eU9
R\	T!
-[cl
Q=h4
N$!Q_
#)0_
E]G.
l99q
^=Ybg
`;bQ
yso+Yd
NSa|
&3WT$
lF/jX
2z6~
+D+@8`H%
kF)d]
*#%:
zgg0)
A)F#
vf^$
aj5:
6OUs
@*Bu|'F!
x1t=[
*@2a
M	YA
'MfI
t]q<3U-
aG	}
X|bQ
G8^U
-MZ!2d3
kh+YxcLW
c1PF
(o6#
	3TBI
c:N2
9G)k
G_HEAP_POISONING_DISABLED 1
#define CONFIG_HEAP_TRACING_OFF 1
#define CONFIG_LOG_DEFAULT_LEVEL_INFO 1
#define CONFIG_LOG_DEFAULT_LEVEL 3
#define CONFIG_LOG_COLORS 1
#define CONFIG_LOG_TIMESTAMP_SOURCE_RTOS 1
#define CONFIG_LWIP_LOCAL_HOSTNAME "espressif"
#define CONFIG_LWIP_DNS_SUPPORT_MDNS_QUERIES 1
#define CONFIG_LWIP_TIMERS_ONDEMAND 1
#define CONFIG_LWIP_MAX_SOCKETS 10
#define CONFIG_LWIP_SO_REUSE 1
#define CONFIG_LWIP_SO_REUSE_RXTOALL 1
#define CONFIG_LWIP_IP_FRAG 1
#define CONFIG_LWIP_ESP_GRATUITOUS_ARP 1
#define CONFIG_LWIP_GARP_TMR_INTERVAL 60
#define CONFIG_LWIP_TCPIP_RECVMBOX_SIZE 32
#define CONFIG_LWIP_DHCP_DOES_ARP_CHECK 1
#define CONFIG_LWIP_DHCPS_LEASE_UNIT 60
#define CONFIG_LWIP_DHCPS_MAX_STATION_NUM 8
#define CONFIG_LWIP_NETIF_LOOPBACK 1
#define CONFIG_LWIP_LOOPBACK_MAX_PBUFS 8
#define CONFIG_LWIP_MAX_ACTIVE_TCP 16
#define CONFIG_LWIP_MAX_LISTENING_TCP 16
#define CONFIG_LWIP_TCP_MAXRTX 12
#define CONFIG_LWIP_TCP_SYNMAXRTX 6
#define CONFIG_LWIP_TCP_MSS 1440
#define CONFIG_LWIP_TCP_TMR_INTERVAL 250
#define CONFIG_LWIP_TCP_MSL 60000
#define CONFIG_LWIP_TCP_SND_BUF_DEFAULT 5744
#define CONFIG_LWIP_TCP_WND_DEFAULT 5744
#define CONFIG_LWIP_TCP_RECVMBOX_SIZE 6
#define CONFIG_LWIP_TCP_QUEUE_OOSEQ 1
#define CONFIG_LWIP_TCP_OVERSIZE_MSS 1
#define CONFIG_LWIP_MAX_UDP_PCBS 16
#define CONFIG_LWIP_UDP_RECVMBOX_SIZE 6
#define CONFIG_LWIP_TCPIP_TASK_STACK_SIZE 3072
#define CONFIG_LWIP_TCPIP_TASK_AFFINITY_NO_AFFINITY 1
#define CONFIG_LWIP_TCPIP_TASK_AFFINITY 0x7FFFFFFF
#define CONFIG_LWIP_MAX_RAW_PCBS 16
#define CONFIG_LWIP_DHCP_MAX_NTP_SERVERS 1
#define CONFIG_LWIP_SNTP_UPDATE_DELAY 3600000
#define CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC 1
#define CONFIG_MBEDTLS_ASYMMETRIC_CONTENT_LEN 1
#define CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN 16384
#define CONFIG_MBEDTLS_SSL_OUT_CONTENT_LEN 4096
#define CONFIG_MBEDTLS_CERTIFICATE_BUNDLE 1
#define CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_FULL 1
#define CONFIG_MBEDTLS_HARDWARE_AES 1
#define CONFIG_MBEDTLS_HARDWARE_MPI 1
#define CONFIG_MBEDTLS_HARDWARE_SHA 1
#define CONFIG_MBEDTLS_HAVE_TIME 1
#define CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT 1
#define CONFIG_MBEDTLS_TLS_SERVER 1
#define CONFIG_MBEDTLS_TLS_CLIENT 1
#define CONFIG_MBEDTLS_TLS_ENABLED 1
#define CONFIG_MBEDTLS_PSK_MODES 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_PSK 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_PSK 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_PSK 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA_PSK 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_RSA 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_RSA 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA 1
#define CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA 1
#define CONFIG_MBEDTLS_SSL_RENEGOTIATION 1
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1 1
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_1 1
#define CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 1
#define CONFIG_MBEDTLS_SSL_PROTO_DTLS 1
#define CONFIG_MBEDTLS_SSL_ALPN 1
#define CONFIG_MBEDTLS_CLIENT_SSL_SESSION_TICKETS 1
#define CONFIG_MBEDTLS_SERVER_SSL_SESSION_TICKETS 1
#define CONFIG_MBEDTLS_AES_C 1
#define CONFIG_MBEDTLS_RC4_DISABLED 1
#define CONFIG_MBEDTLS_CCM_C 1
#define CONFIG_MBEDTLS_GCM_C 1
#define CONFIG_MBEDTLS_PEM_PARSE_C 1
#define CONFIG_MBEDTLS_PEM_WRITE_C 1
#define CONFIG_MBEDTLS_X509_CRL_PARSE_C 1
#define CONFIG_MBEDTLS_X509_CSR_PARSE_C 1
#define CONFIG_MBEDTLS_ECP_C 1
#define CONFIG_MBEDTLS_ECDH_C 1
#define CONFIG_MBEDTLS_ECDSA_C 1
#define CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED 1
#define CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED 1
#define CONFIG_MBEDTLS_ECP_NIST_OPTIM 1
#define CONFIG_MDNS_MAX_SERVICES 10
#define CONFIG_MDNS_TASK_PRIORITY 1
#define CONFIG_MDNS_TASK_AFFINITY_CPU0 1
#define CONFIG_MDNS_TASK_AFFINITY 0x0
#define CONFIG_MDNS_SERVICE_ADD_TIMEOUT_MS 2000
#define CONFIG_MDNS_TIMER_PERIOD_MS 100
#define CONFIG_MQTT_PROTOCOL_311 1
#define CONFIG_MQTT_TRANSPORT_SSL 1
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET 1
#define CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE 1
#define CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF 1
#define CONFIG_NEWLIB_STDIN_LINE_ENDING_CR 1
#define CONFIG_OPENSSL_ASSERT_EXIT 1
#define CONFIG_PTHREAD_TASK_PRIO_DEFAULT 5
#define CONFIG_PTHREAD_TASK_STACK_SIZE_DEFAULT 3072
#define CONFIG_PTHREAD_STACK_MIN 768
#define CONFIG_PTHREAD_DEFAULT_CORE_NO_AFFINITY 1
#define CONFIG_PTHREAD_TASK_CORE_DEFAULT -1
#define CONFIG_PTHREAD_TASK_NAME_DEFAULT "pthread"
#define CONFIG_SPI_FLASH_ROM_DRIVER_PATCH 1
#define CONFIG_SPI_FLASH_DANGEROUS_WRITE_ABORTS 1
#define CONFIG_SPI_FLASH_SUPPORT_ISSI_CHIP 1
#define CONFIG_SPI_FLASH_SUPPORT_GD_CHIP 1
#define CONFIG_SPIFFS_MAX_PARTITIONS 3
#define CONFIG_SPIFFS_CACHE 1
#define CONFIG_SPIFFS_CACHE_WR 1
#define CONFIG_SPIFFS_PAGE_CHECK 1
#define CONFIG_SPIFFS_GC_MAX_RUNS 10
#define CONFIG_SPIFFS_PAGE_SIZE 256
#define CONFIG_SPIFFS_OBJ_NAME_LEN 32
#define CONFIG_SPIFFS_USE_MAGIC 1
#define CONFIG_SPIFFS_USE_MAGIC_LENGTH 1
#define CONFIG_SPIFFS_META_LENGTH 4
#define CONFIG_SPIFFS_USE_MTIME 1
#define CONFIG_USB_DESC_CUSTOM_VID 0x1234
#define CONFIG_USB_DESC_CUSTOM_PID 0x5678
#define CONFIG_UNITY_ENABLE_FLOAT 1
#define CONFIG_UNITY_ENABLE_DOUBLE 1
#define CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER 1
#define CONFIG_VFS_SUPPRESS_SELECT_DEBUG_OUTPUT 1
#define CONFIG_VFS_SUPPORT_TERMIOS 1
#define CONFIG_SEMIHOSTFS_MAX_MOUNT_POINTS 1
#define CONFIG_SEMIHOSTFS_HOST_PATH_MAX_LEN 128
#define CONFIG_WL_SECTOR_SIZE_4096 1
#define CONFIG_WL_SECTOR_SIZE 4096
#define CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES 16
#define CONFIG_WIFI_PROV_AUTOSTOP_TIMEOUT 30
#define CONFIG_WPA_MBEDTLS_CRYPTO 1
# Automatically generated file. DO NOT EDIT.
# Espressif IoT Development Framework (ESP-IDF) Configuration cmake include file
set(CONFIG_IDF_CMAKE "y")
set(CONFIG_IDF_TARGET "esp32")
set(CONFIG_IDF_TARGET_ESP32 "y")
set(CONFIG_IDF_FIRMWARE_CHIP_ID "0x0000")
set(CONFIG_SDK_TOOLPREFIX "xtensa-esp32-elf-")
set(CONFIG_SDK_TOOLCHAIN_SUPPORTS_TIME_WIDE_64_BITS "")
set(CONFIG_APP_BUILD_TYPE_APP_2NDBOOT "y")
set(CONFIG_APP_BUILD_TYPE_ELF_RAM "")
set(CONFIG_APP_BUILD_GENERATE_BINARIES "y")
set(CONFIG_APP_BUILD_BOOTLOADER "y")
set(CONFIG_APP_BUILD_USE_FLASH_SECTIONS "y")
set(CONFIG_APP_COMPILE_TIME_DATE "y")
set(CONFIG_APP_EXCLUDE_PROJECT_VER_VAR "")
set(CONFIG_APP_EXCLUDE_PROJECT_NAME_VAR "")
set(CONFIG_APP_PROJECT_VER_FROM_CONFIG "")
set(CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_SIZE "y")
set(CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_DEBUG "")
set(CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_PERF "")
set(CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_NONE "")
set(CONFIG_BOOTLOADER_LOG_LEVEL_NONE "")
set(CONFIG_BOOTLOADER_LOG_LEVEL_ERROR "")
set(CONFIG_BOOTLOADER_LOG_LEVEL_WARN "")
set(CONFIG_BOOTLOADER_LOG_LEVEL_INFO "y")
set(CONFIG_BOOTLOADER_LOG_LEVEL_DEBUG "")
set(CONFIG_BOOTLOADER_LOG_LEVEL_VERBOSE "")
set(CONFIG_BOOTLOADER_LOG_LEVEL "3")
set(CONFIG_BOOTLOADER_VDDSDIO_BOOST_1_8V "")
set(CONFIG_BOOTLOADER_VDDSDIO_BOOST_1_9V "y")
set(CONFIG_BOOTLOADER_FACTORY_RESET "")
set(CONFIG_BOOTLOADER_APP_TEST "")
set(CONFIG_BOOTLOADER_WDT_ENABLE "y")
set(CONFIG_BOOTLOADER_WDT_DISABLE_IN_USER_CODE "")
set(CONFIG_BOOTLOADER_WDT_TIME_MS "9000")
set(CONFIG_BOOTLOADER_APP_ROLLBACK_ENABLE "")
set(CONFIG_BOOTLOADER_SKIP_VALIDATE_IN_DEEP_SLEEP "")
set(CONFIG_BOOTLOADER_RESERVE_RTC_SIZE "0")
set(CONFIG_BOOTLOADER_CUSTOM_RESERVE_RTC "")
set(CONFIG_SECURE_SIGNED_APPS_NO_SECURE_BOOT "")
set(CONFIG_SECURE_BOOT "")
set(CONFIG_SECURE_FLASH_ENC_ENABLED "")
set(CONFIG_ESPTOOLPY_BAUD_OTHER_VAL "115200")
set(CONFIG_ESPTOOLPY_FLASHMODE_QIO "")
set(CONFIG_ESPTOOLPY_FLASHMODE_QOUT "")
set(CONFIG_ESPTOOLPY_FLASHMODE_DIO "y")
set(CONFIG_ESPTOOLPY_FLASHMODE_DOUT "")
set(CONFIG_ESPTOOLPY_FLASHMODE "dio")
set(CONFIG_ESPTOOLPY_FLASHFREQ_80M "")
set(CONFIG_ESPTOOLPY_FLASHFREQ_40M "")
set(CONFIG_ESPTOOLPY_FLASHFREQ_26M "y")
set(CONFIG_ESPTOOLPY_FLASHFREQ_20M "")
set(CONFIG_ESPTOOLPY_FLASHFREQ "26m")
set(CONFIG_ESPTOOLPY_FLASHSIZE_1MB "")
set(CONFIG_ESPTOOLPY_FLASHSIZE_2MB "y")
set(CONFIG_ESPTOOLPY_FLASHSIZE_4MB "")
set(CONFIG_ESPTOOLPY_FLASHSIZE_8MB "")
set(CONFIG_ESPTOOLPY_FLASHSIZE_16MB "")
set(CONFIG_ESPTOOLPY_FLASHSIZE "2MB")
set(CONFIG_ESPTOOLPY_FLASHSIZE_DETECT "y")
set(CONFIG_ESPTOOLPY_BEFORE_RESET "y")
set(CONFIG_ESPTOOLPY_BEFORE_NORESET "")
set(CONFIG_ESPTOOLPY_BEFORE "default_reset")
set(CONFIG_ESPTOOLPY_AFTER_RESET "y")
set(CONFIG_ESPTOOLPY_AFTER_NORESET "")
set(CONFIG_ESPTOOLPY_AFTER "hard_reset")
set(CONFIG_ESPTOOLPY_MONITOR_BAUD_9600B "")
set(CONFIG_ESPTOOLPY_MONITOR_BAUD_57600B "")
set(CONFIG_ESPTOOLPY_MONITOR_BAUD_115200B "y")
set(CONFIG_ESPTOOLPY_MONITOR_BAUD_230400B "")
set(CONFIG_ESPTOOLPY_MONITOR_BAUD_921600B "")
set(CONFIG_ESPTOOLPY_MONITOR_BAUD_2MB "")
set(CONFIG_ESPTOOLPY_MONITOR_BAUD_OTHER "")
set(CONFIG_ESPTOOLPY_MONITOR_BAUD_OTHER_VAL "115200")
set(CONFIG_ESPTOOLPY_MONITOR_BAUD "115200")
set(CONFIG_PARTITION_TABLE_SINGLE_APP "y")
set(CONFIG_PARTITION_TABLE_TWO_OTA "")
set(CONFIG_PARTITION_TABLE_CUSTOM "")
set(CONFIG_PARTITION_TABLE_CUSTOM_FILENAME "partitions.csv")
set(CONFIG_PARTITION_TABLE_FILENAME "partitions_singleapp.csv")
set(CONFIG_PARTITION_TABLE_OFFSET "0x8000")
set(CONFIG_PARTITION_TABLE_MD5 "y")
set(CONFIG_COMPILER_OPTIMIZATION_DEFAULT "y")
set(CONFIG_COMPILER_OPTIMIZATION_SIZE "")
set(CONFIG_COMPILER_OPTIMIZATION_PERF "")
set(CONFIG_COMPILER_OPTIMIZATION_NONE "")
set(CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE "y")
set(CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_SILENT "")
set(CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_DISABLE "")
set(CONFIG_COMPILER_CXX_EXCEPTIONS "")
set(CONFIG_COMPILER_CXX_RTTI "")
set(CONFIG_COMPILER_STACK_CHECK_MODE_NONE "y")
set(CONFIG_COMPILER_STACK_CHECK_MODE_NORM "")
set(CONFIG_COMPILER_STACK_CHECK_MODE_STRONG "")
set(CONFIG_COMPILER_STACK_CHECK_MODE_ALL "")
set(CONFIG_COMPILER_WARN_WRITE_STRINGS "")
set(CONFIG_COMPILER_DISABLE_GCC8_WARNINGS "")
set(CONFIG_APPTRACE_DEST_TRAX "")
set(CONFIG_APPTRACE_DEST_NONE "y")
set(CONFIG_APPTRACE_LOCK_ENABLE "y")
set(CONFIG_BT_ENABLED "")
set(CONFIG_BTDM_CTRL_BR_EDR_SCO_DATA_PATH_EFF "0")
set(CONFIG_BTDM_CTRL_BLE_MAX_CONN_EFF "0")
set(CONFIG_BTDM_CTRL_BR_EDR_MAX_ACL_CONN_EFF "0")
set(CONFIG_BTDM_CTRL_BR_EDR_MAX_SYNC_CONN_EFF "0")
set(CONFIG_BTDM_CTRL_PINNED_TO_CORE "0")
set(CONFIG_BTDM_BLE_SLEEP_CLOCK_ACCURACY_INDEX_EFF "1")
set(CONFIG_BT_RESERVE_DRAM "0")
set(CONFIG_COAP_MBEDTLS_PSK "y")
set(CONFIG_COAP_MBEDTLS_PKI "")
set(CONFIG_COAP_MBEDTLS_DEBUG "")
set(CONFIG_COAP_LOG_DEFAULT_LEVEL "0")
set(CONFIG_ADC_FORCE_XPD_FSM "")
set(CONFIG_ADC_DISABLE_DAC "y")
set(CONFIG_SPI_MASTER_IN_IRAM "")
set(CONFIG_SPI_MASTER_ISR_IN_IRAM "y")
set(CONFIG_SPI_SLAVE_IN_IRAM "")
set(CONFIG_SPI_SLAVE_ISR_IN_IRAM "y")
set(CONFIG_UART_ISR_IN_IRAM "")
set(CONFIG_RTCIO_SUPPORT_RTC_GPIO_DESC "")
set(CONFIG_EFUSE_CUSTOM_TABLE "")
set(CONFIG_EFUSE_VIRTUAL "")
set(CONFIG_EFUSE_CODE_SCHEME_COMPAT_NONE "")
set(CONFIG_EFUSE_CODE_SCHEME_COMPAT_3_4 "y")
set(CONFIG_EFUSE_CODE_SCHEME_COMPAT_REPEAT "")
set(CONFIG_EFUSE_MAX_BLK_LEN "192")
set(CONFIG_ESP_TLS_USING_MBEDTLS "y")
set(CONFIG_ESP_TLS_SERVER "")
set(CONFIG_ESP_TLS_PSK_VERIFICATION "")
set(CONFIG_ESP32_REV_MIN_0 "y")
set(CONFIG_ESP32_REV_MIN_1 "")
set(CONFIG_ESP32_REV_MIN_2 "")
set(CONFIG_ESP32_REV_MIN_3 "")
set(CONFIG_ESP32_REV_MIN "0")
set(CONFIG_ESP32_DPORT_WORKAROUND "y")
set(CONFIG_ESP32_DEFAULT_CPU_FREQ_80 "")
set(CONFIG_ESP32_DEFAULT_CPU_FREQ_160 "y")
set(CONFIG_ESP32_DEFAULT_CPU_FREQ_240 "")
set(CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ "160")
set(CONFIG_ESP32_SPIRAM_SUPPORT "")
set(CONFIG_ESP32_TRAX "")
set(CONFIG_ESP32_TRACEMEM_RESERVE_DRAM "0x0")
set(CONFIG_ESP32_UNIVERSAL_MAC_ADDRESSES_TWO "")
set(CONFIG_ESP32_UNIVERSAL_MAC_ADDRESSES_FOUR "y")
set(CONFIG_ESP32_UNIVERSAL_MAC_ADDRESSES "4")
set(CONFIG_ESP32_ULP_COPROC_ENABLED "")
set(CONFIG_ESP32_ULP_COPROC_RESERVE_MEM "0")
set(CONFIG_ESP32_PANIC_PRINT_HALT "")
set(CONFIG_ESP32_PANIC_PRINT_REBOOT "y")
set(CONFIG_ESP32_PANIC_SILENT_REBOOT "")
set(CONFIG_ESP32_PANIC_GDBSTUB "")
set(CONFIG_ESP32_DEBUG_OCDAWARE "y")
set(CONFIG_ESP32_BROWNOUT_DET "y")
set(CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_0 "y")
set(CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_1 "")
set(CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_2 "")
set(CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_3 "")
set(CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_4 "")
set(CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_5 "")
set(CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_6 "")
set(CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_7 "")
set(CONFIG_ESP32_BROWNOUT_DET_LVL "0")
set(CONFIG_ESP32_REDUCE_PHY_TX_POWER "y")
set(CONFIG_ESP32_TIME_SYSCALL_USE_RTC_FRC1 "y")
set(CONFIG_ESP32_TIME_SYSCALL_USE_RTC "")
set(CONFIG_ESP32_TIME_SYSCALL_USE_FRC1 "")
set(CONFIG_ESP32_TIME_SYSCALL_USE_NONE "")
set(CONFIG_ESP32_RTC_CLK_SRC_INT_RC "y")
set(CONFIG_ESP32_RTC_CLK_SRC_EXT_CRYS "")
set(CONFIG_ESP32_RTC_CLK_SRC_EXT_OSC "")
set(CONFIG_ESP32_RTC_CLK_SRC_INT_8MD256 "")
set(CONFIG_ESP32_RTC_CLK_CAL_CYCLES "1024")
set(CONFIG_ESP32_DEEP_SLEEP_WAKEUP_DELAY "2000")
set(CONFIG_ESP32_XTAL_FREQ_40 "y")
set(CONFIG_ESP32_XTAL_FREQ_26 "")
set(CONFIG_ESP32_XTAL_FREQ_AUTO "")
set(CONFIG_ESP32_XTAL_FREQ "40")
set(CONFIG_ESP32_DISABLE_BASIC_ROM_CONSOLE "")
set(CONFIG_ESP32_NO_BLOBS "")
set(CONFIG_ESP32_COMPATIBLE_PRE_V2_1_BOOTLOADERS "")
set(CONFIG_ESP32_USE_FIXED_STATIC_RAM_SIZE "")
set(CONFIG_ESP32_DPORT_DIS_INTERRUPT_LVL "5")
set(CONFIG_PM_ENABLE "")
set(CONFIG_ADC_CAL_EFUSE_TP_ENABLE "y")
set(CONFIG_ADC_CAL_EFUSE_VREF_ENABLE "y")
set(CONFIG_ADC_CAL_LUT_ENABLE "y")
set(CONFIG_ESP_ERR_TO_NAME_LOOKUP "y")
set(CONFIG_ESP_SYSTEM_EVENT_QUEUE_SIZE "32")
set(CONFIG_ESP_SYSTEM_EVENT_TASK_STACK_SIZE "2304")
set(CONFIG_ESP_MAIN_TASK_STACK_SIZE "3584")
set(CONFIG_ESP_IPC_TASK_STACK_SIZE "1024")
set(CONFIG_ESP_IPC_USES_CALLERS_PRIORITY "y")
set(CONFIG_ESP_MINIMAL_SHARED_STACK_SIZE "2048")
set(CONFIG_ESP_CONSOLE_UART_DEFAULT "y")
set(CONFIG_ESP_CONSOLE_UART_CUSTOM "")
set(CONFIG_ESP_CONSOLE_UART_NONE "")
set(CONFIG_ESP_CONSOLE_UART_NUM "0")
set(CONFIG_ESP_CONSOLE_UART_TX_GPIO "1")
set(CONFIG_ESP_CONSOLE_UART_RX_GPIO "3")
set(CONFIG_ESP_CONSOLE_UART_BAUDRATE "115200")
set(CONFIG_ESP_INT_WDT "y")
set(CONFIG_ESP_INT_WDT_TIMEOUT_MS "300")
set(CONFIG_ESP_INT_WDT_CHECK_CPU1 "y")
set(CONFIG_ESP_TASK_WDT "y")
set(CONFIG_ESP_TASK_WDT_PANIC "")
set(CONFIG_ESP_TASK_WDT_TIMEOUT_S "5")
set(CONFIG_ESP_TASK_WDT_CHECK_IDLE_TASK_CPU0 "y")
set(CONFIG_ESP_TASK_WDT_CHECK_IDLE_TASK_CPU1 "y")
set(CONFIG_ESP_PANIC_HANDLER_IRAM "")
set(CONFIG_ESP_MAC_ADDR_UNIVERSE_WIFI_STA "y")
set(CONFIG_ESP_MAC_ADDR_UNIVERSE_WIFI_AP "y")
set(CONFIG_ESP_MAC_ADDR_UNIVERSE_BT "y")
set(CONFIG_ESP_MAC_ADDR_UNIVERSE_ETH "y")
set(CONFIG_ETH_ENABLED "y")
set(CONFIG_ETH_USE_ESP32_EMAC "y")
set(CONFIG_ETH_PHY_INTERFACE_RMII "y")
set(CONFIG_ETH_PHY_INTERFACE_MII "")
set(CONFIG_ETH_RMII_CLK_INPUT "y")
set(CONFIG_ETH_RMII_CLK_OUTPUT "")
set(CONFIG_ETH_RMII_CLK_IN_GPIO "0")
set(CONFIG_ETH_DMA_BUFFER_SIZE "512")
set(CONFIG_ETH_DMA_RX_BUFFER_NUM "10")
set(CONFIG_ETH_DMA_TX_BUFFER_NUM "10")
set(CONFIG_ETH_USE_SPI_ETHERNET "y")
set(CONFIG_ETH_SPI_ETHERNET_DM9051 "")
set(CONFIG_ETH_USE_OPENETH "")
set(CONFIG_ESP_EVENT_LOOP_PROFILING "")
set(CONFIG_ESP_EVENT_POST_FROM_ISR "y")
set(CONFIG_ESP_EVENT_POST_FROM_IRAM_ISR "y")
set(CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS "y")
set(CONFIG_ESP_HTTP_CLIENT_ENABLE_BASIC_AUTH "")
set(CONFIG_HTTPD_MAX_REQ_HDR_LEN "512")
set(CONFIG_HTTPD_MAX_URI_LEN "512")
set(CONFIG_HTTPD_ERR_RESP_NO_DELAY "y")
set(CONFIG_HTTPD_PURGE_BUF_LEN "32")
set(CONFIG_HTTPD_LOG_PURGE_DATA "")
set(CONFIG_OTA_ALLOW_HTTP "")
set(CONFIG_ESP_HTTPS_SERVER_ENABLE "")
set(CONFIG_ESP_NETIF_IP_LOST_TIMER_INTERVAL "120")
set(CONFIG_ESP_NETIF_TCPIP_LWIP "y")
set(CONFIG_ESP_NETIF_LOOPBACK "")
set(CONFIG_ESP_NETIF_TCPIP_ADAPTER_COMPATIBLE_LAYER "y")
set(CONFIG_ESP_TIMER_PROFILING "")
set(CONFIG_ESP_TIMER_TASK_STACK_SIZE "3584")
set(CONFIG_ESP_TIMER_IMPL_FRC2 "")
set(CONFIG_ESP_TIMER_IMPL_TG0_LAC "y")
set(CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM "10")
set(CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM "32")
set(CONFIG_ESP32_WIFI_STATIC_TX_BUFFER "")
set(CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER "y")
set(CONFIG_ESP32_WIFI_TX_BUFFER_TYPE "1")
set(CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM "32")
set(CONFIG_ESP32_WIFI_CSI_ENABLED "")
set(CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED "y")
set(CONFIG_ESP32_WIFI_TX_BA_WIN "6")
set(CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED "y")
set(CONFIG_ESP32_WIFI_RX_BA_WIN "6")
set(CONFIG_ESP32_WIFI_NVS_ENABLED "y")
set(CONFIG_ESP32_WIFI_TASK_PINNED_TO_CORE_0 "y")
set(CONFIG_ESP32_WIFI_TASK_PINNED_TO_CORE_1 "")
set(CONFIG_ESP32_WIFI_SOFTAP_BEACON_MAX_LEN "752")
set(CONFIG_ESP32_WIFI_MGMT_SBUF_NUM "32")
set(CONFIG_ESP32_WIFI_DEBUG_LOG_ENABLE "")
set(CONFIG_ESP32_WIFI_IRAM_OPT "y")
set(CONFIG_ESP32_WIFI_RX_IRAM_OPT "y")
set(CONFIG_ESP32_WIFI_ENABLE_WPA3_SAE "")
set(CONFIG_ESP32_PHY_CALIBRATION_AND_DATA_STORAGE "y")
set(CONFIG_ESP32_PHY_INIT_DATA_IN_PARTITION "")
set(CONFIG_ESP32_PHY_MAX_WIFI_TX_POWER "20")
set(CONFIG_ESP32_PHY_MAX_TX_POWER "20")
set(CONFIG_ESP32_ENABLE_COREDUMP_TO_FLASH "")
set(CONFIG_ESP32_ENABLE_COREDUMP_TO_UART "")
set(CONFIG_ESP32_ENABLE_COREDUMP_TO_NONE "y")
set(CONFIG_FATFS_CODEPAGE_DYNAMIC "")
set(CONFIG_FATFS_CODEPAGE_437 "y")
set(CONFIG_FATFS_CODEPAGE_720 "")
set(CONFIG_FATFS_CODEPAGE_737 "")
set(CONFIG_FATFS_CODEPAGE_771 "")
set(CONFIG_FATFS_CODEPAGE_775 "")
set(CONFIG_FATFS_CODEPAGE_850 "")
set(CONFIG_FATFS_CODEPAGE_852 "")
set(CONFIG_FATFS_CODEPAGE_855 "")
set(CONFIG_FATFS_CODEPAGE_857 "")
set(CONFIG_FATFS_CODEPAGE_860 "")
set(CONFIG_FATFS_CODEPAGE_861 "")
set(CONFIG_FATFS_CODEPAGE_862 "")
set(CONFIG_FATFS_CODEPAGE_863 "")
set(CONFIG_FATFS_CODEPAGE_864 "")
set(CONFIG_FATFS_CODEPAGE_865 "")
set(CONFIG_FATFS_CODEPAGE_866 "")
set(CONFIG_FATFS_CODEPAGE_869 "")
set(CONFIG_FATFS_CODEPAGE_932 "")
set(CONFIG_FATFS_CODEPAGE_936 "")
set(CONFIG_FATFS_CODEPAGE_949 "")
set(CONFIG_FATFS_CODEPAGE_950 "")
set(CONFIG_FATFS_CODEPAGE "437")
set(CONFIG_FATFS_LFN_NONE "y")
set(CONFIG_FATFS_LFN_HEAP "")
set(CONFIG_FATFS_LFN_STACK "")
set(CONFIG_FATFS_FS_LOCK "0")
set(CONFIG_FATFS_TIMEOUT_MS "10000")
set(CONFIG_FATFS_PER_FILE_CACHE "y")
set(CONFIG_FMB_COMM_MODE_RTU_EN "y")
set(CONFIG_FMB_COMM_MODE_ASCII_EN "y")
set(CONFIG_FMB_MASTER_TIMEOUT_MS_RESPOND "150")
set(CONFIG_FMB_MASTER_DELAY_MS_CONVERT "200")
set(CONFIG_FMB_QUEUE_LENGTH "20")
set(CONFIG_FMB_SERIAL_TASK_STACK_SIZE "2048")
set(CONFIG_FMB_SERIAL_BUF_SIZE "256")
set(CONFIG_FMB_SERIAL_ASCII_BITS_PER_SYMB "8")
set(CONFIG_FMB_SERIAL_ASCII_TIMEOUT_RESPOND_MS "1000")
set(CONFIG_FMB_SERIAL_TASK_PRIO "10")
set(CONFIG_FMB_CONTROLLER_SLAVE_ID_SUPPORT "")
set(CONFIG_FMB_CONTROLLER_NOTIFY_TIMEOUT "20")
set(CONFIG_FMB_CONTROLLER_NOTIFY_QUEUE_SIZE "20")
set(CONFIG_FMB_CONTROLLER_STACK_SIZE "4096")
set(CONFIG_FMB_EVENT_QUEUE_TIMEOUT "20")
set(CONFIG_FMB_TIMER_PORT_ENABLED "y")
set(CONFIG_FMB_TIMER_GROUP "0")
set(CONFIG_FMB_TIMER_INDEX "0")
set(CONFIG_FMB_TIMER_ISR_IN_IRAM "")
set(CONFIG_FREERTOS_UNICORE "")
set(CONFIG_FREERTOS_NO_AFFINITY "0x7FFFFFFF")
set(CONFIG_FREERTOS_CORETIMER_0 "y")
set(CONFIG_FREERTOS_CORETIMER_1 "")
set(CONFIG_FREERTOS_HZ "100")
set(CONFIG_FREERTOS_ASSERT_ON_UNTESTED_FUNCTION "y")
set(CONFIG_FREERTOS_CHECK_STACKOVERFLOW_NONE "")
set(CONFIG_FREERTOS_CHECK_STACKOVERFLOW_PTRVAL "")
set(CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY "y")
set(CONFIG_FREERTOS_WATCHPOINT_END_OF_STACK "")
set(CONFIG_FREERTOS_INTERRUPT_BACKTRACE "y")
set(CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS "1")
set(CONFIG_FREERTOS_ASSERT_FAIL_ABORT "y")
set(CONFIG_FREERTOS_ASSERT_FAIL_PRINT_CONTINUE "")
set(CONFIG_FREERTOS_ASSERT_DISABLE "")
set(CONFIG_FREERTOS_IDLE_TASK_STACKSIZE "1536")
set(CONFIG_FREERTOS_ISR_STACKSIZE "1536")
set(CONFIG_FREERTOS_LEGACY_HOOKS "")
set(CONFIG_FREERTOS_MAX_TASK_NAME_LEN "16")
set(CONFIG_FREERTOS_SUPPORT_STATIC_ALLOCATION "")
set(CONFIG_FREERTOS_TIMER_TASK_PRIORITY "1")
set(CONFIG_FREERTOS_TIMER_TASK_STACK_DEPTH "2048")
set(CONFIG_FREERTOS_TIMER_QUEUE_LENGTH "10")
set(CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE "0")
set(CONFIG_FREERTOS_USE_TRACE_FACILITY "")
set(CONFIG_FREERTOS_GENERATE_RUN_TIME_STATS "")
set(CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER "y")
set(CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER "y")
set(CONFIG_FREERTOS_CHECK_PORT_CRITICAL_COMPLIANCE "")
set(CONFIG_FREERTOS_DEBUG_OCDAWARE "y")
set(CONFIG_FREERTOS_FPU_IN_ISR "")
set(CONFIG_HEAP_POISONING_DISABLED "y")
set(CONFIG_HEAP_POISONING_LIGHT "")
set(CONFIG_HEAP_POISONING_COMPREHENSIVE "")
set(CONFIG_HEAP_TRACING_OFF "y")
set(CONFIG_HEAP_TRACING_STANDALONE "")
set(CONFIG_HEAP_TRACING_TOHOST "")
set(CONFIG_JSMN_PARENT_LINKS "")
set(CONFIG_JSMN_STRICT "")
set(CONFIG_LOG_DEFAULT_LEVEL_NONE "")
set(CONFIG_LOG_DEFAULT_LEVEL_ERROR "")
set(CONFIG_LOG_DEFAULT_LEVEL_WARN "")
set(CONFIG_LOG_DEFAULT_LEVEL_INFO "y")
set(CONFIG_LOG_DEFAULT_LEVEL_DEBUG "")
set(CONFIG_LOG_DEFAULT_LEVEL_VERBOSE "")
set(CONFIG_LOG_DEFAULT_LEVEL "3")
set(CONFIG_LOG_COLORS "y")
set(CONFIG_LOG_TIMESTAMP_SOURCE_RTOS "y")
set(CONFIG_LOG_TIMESTAMP_SOURCE_SYSTEM "")
set(CONFIG_LWIP_LOCAL_HOSTNAME "espressif")
set(CONFIG_LWIP_DNS_SUPPORT_MDNS_QUERIES "y")
set(CONFIG_LWIP_L2_TO_L3_COPY "")
set(CONFIG_LWIP_IRAM_OPTIMIZATION "")
set(CONFIG_LWIP_TIMERS_ONDEMAND "y")
set(CONFIG_LWIP_MAX_SOCKETS "10")
set(CONFIG_LWIP_USE_ONLY_LWIP_SELECT "")
set(CONFIG_LWIP_SO_REUSE "y")
set(CONFIG_LWIP_SO_REUSE_RXTOALL "y")
set(CONFIG_LWIP_SO_RCVBUF "")
set(CONFIG_LWIP_NETBUF_RECVINFO "")
set(CONFIG_LWIP_IP_FRAG "y")
set(CONFIG_LWIP_IP_REASSEMBLY "")
set(CONFIG_LWIP_STATS "")
set(CONFIG_LWIP_ETHARP_TRUST_IP_MAC "")
set(CONFIG_LWIP_ESP_GRATUITOUS_ARP "y")
set(CONFIG_LWIP_GARP_TMR_INTERVAL "60")
set(CONFIG_LWIP_TCPIP_RECVMBOX_SIZE "32")
set(CONFIG_LWIP_DHCP_DOES_ARP_CHECK "y")
set(CONFIG_LWIP_DHCP_RESTORE_LAST_IP "")
set(CONFIG_LWIP_DHCPS_LEASE_UNIT "60")
set(CONFIG_LWIP_DHCPS_MAX_STATION_NUM "8")
set(CONFIG_LWIP_AUTOIP "")
set(CONFIG_LWIP_IPV6_AUTOCONFIG "")
set(CONFIG_LWIP_NETIF_LOOPBACK "y")
set(CONFIG_LWIP_LOOPBACK_MAX_PBUFS "8")
set(CONFIG_LWIP_MAX_ACTIVE_TCP "16")
set(CONFIG_LWIP_MAX_LISTENING_TCP "16")
set(CONFIG_LWIP_TCP_MAXRTX "12")
set(CONFIG_LWIP_TCP_SYNMAXRTX "6")
set(CONFIG_LWIP_TCP_MSS "1440")
set(CONFIG_LWIP_TCP_TMR_INTERVAL "250")
set(CONFIG_LWIP_TCP_MSL "60000")
set(CONFIG_LWIP_TCP_SND_BUF_DEFAULT "5744")
set(CONFIG_LWIP_TCP_WND_DEFAULT "5744")
set(CONFIG_LWIP_TCP_RECVMBOX_SIZE "6")
set(CONFIG_LWIP_TCP_QUEUE_OOSEQ "y")
set(CONFIG_LWIP_TCP_SACK_OUT "")
set(CONFIG_LWIP_TCP_KEEP_CONNECTION_WHEN_IP_CHANGES "")
set(CONFIG_LWIP_TCP_OVERSIZE_MSS "y")
set(CONFIG_LWIP_TCP_OVERSIZE_QUARTER_MSS "")
set(CONFIG_LWIP_TCP_OVERSIZE_DISABLE "")
set(CONFIG_LWIP_MAX_UDP_PCBS "16")
set(CONFIG_LWIP_UDP_RECVMBOX_SIZE "6")
set(CONFIG_LWIP_TCPIP_TASK_STACK_SIZE "3072")
set(CONFIG_LWIP_TCPIP_TASK_AFFINITY_NO_AFFINITY "y")
set(CONFIG_LWIP_TCPIP_TASK_AFFINITY_CPU0 "")
set(CONFIG_LWIP_TCPIP_TASK_AFFINITY_CPU1 "")
set(CONFIG_LWIP_TCPIP_TASK_AFFINITY "0x7FFFFFFF")
set(CONFIG_LWIP_PPP_SUPPORT "")
set(CONFIG_LWIP_MULTICAST_PING "")
set(CONFIG_LWIP_BROADCAST_PING "")
set(CONFIG_LWIP_MAX_RAW_PCBS "16")
set(CONFIG_LWIP_DHCP_MAX_NTP_SERVERS "1")
set(CONFIG_LWIP_SNTP_UPDATE_DELAY "3600000")
set(CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC "y")
set(CONFIG_MBEDTLS_DEFAULT_MEM_ALLOC "")
set(CONFIG_MBEDTLS_CUSTOM_MEM_ALLOC "")
set(CONFIG_MBEDTLS_ASYMMETRIC_CONTENT_LEN "y")
set(CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN "16384")
set(CONFIG_MBEDTLS_SSL_OUT_CONTENT_LEN "4096")
set(CONFIG_MBEDTLS_DEBUG "")
set(CONFIG_MBEDTLS_CERTIFICATE_BUNDLE "y")
set(CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_FULL "y")
set(CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_CMN "")
set(CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_NONE "")
set(CONFIG_MBEDTLS_CUSTOM_CERTIFICATE_BUNDLE "")
set(CONFIG_MBEDTLS_ECP_RESTARTABLE "")
set(CONFIG_MBEDTLS_CMAC_C "")
set(CONFIG_MBEDTLS_HARDWARE_AES "y")
set(CONFIG_MBEDTLS_HARDWARE_MPI "y")
set(CONFIG_MBEDTLS_HARDWARE_SHA "y")
set(CONFIG_MBEDTLS_HAVE_TIME "y")
set(CONFIG_MBEDTLS_HAVE_TIME_DATE "")
set(CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT "y")
set(CONFIG_MBEDTLS_TLS_SERVER_ONLY "")
set(CONFIG_MBEDTLS_TLS_CLIENT_ONLY "")
set(CONFIG_MBEDTLS_TLS_DISABLED "")
set(CONFIG_MBEDTLS_TLS_SERVER "y")
set(CONFIG_MBEDTLS_TLS_CLIENT "y")
set(CONFIG_MBEDTLS_TLS_ENABLED "y")
set(CONFIG_MBEDTLS_PSK_MODES "y")
set(CONFIG_MBEDTLS_KEY_EXCHANGE_PSK "y")
set(CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_PSK "y")
set(CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_PSK "y")
set(CONFIG_MBEDTLS_KEY_EXCHANGE_RSA_PSK "y")
set(CONFIG_MBEDTLS_KEY_EXCHANGE_RSA "y")
set(CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_RSA "y")
set(CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE "y")
set(CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA "y")
set(CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA "y")
set(CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA "y")
set(CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA "y")
set(CONFIG_MBEDTLS_SSL_RENEGOTIATION "y")
set(CONFIG_MBEDTLS_SSL_PROTO_SSL3 "")
set(CONFIG_MBEDTLS_SSL_PROTO_TLS1 "y")
set(CONFIG_MBEDTLS_SSL_PROTO_TLS1_1 "y")
set(CONFIG_MBEDTLS_SSL_PROTO_TLS1_2 "y")
set(CONFIG_MBEDTLS_SSL_PROTO_DTLS "y")
set(CONFIG_MBEDTLS_SSL_ALPN "y")
set(CONFIG_MBEDTLS_CLIENT_SSL_SESSION_TICKETS "y")
set(CONFIG_MBEDTLS_SERVER_SSL_SESSION_TICKETS "y")
set(CONFIG_MBEDTLS_AES_C "y")
set(CONFIG_MBEDTLS_CAMELLIA_C "")
set(CONFIG_MBEDTLS_DES_C "")
set(CONFIG_MBEDTLS_RC4_DISABLED "y")
set(CONFIG_MBEDTLS_RC4_ENABLED_NO_DEFAULT "")
set(CONFIG_MBEDTLS_RC4_ENABLED "")
set(CONFIG_MBEDTLS_BLOWFISH_C "")
set(CONFIG_MBEDTLS_XTEA_C "")
set(CONFIG_MBEDTLS_CCM_C "y")
set(CONFIG_MBEDTLS_GCM_C "y")
set(CONFIG_MBEDTLS_RIPEMD160_C "")
set(CONFIG_MBEDTLS_PEM_PARSE_C "y")
set(CONFIG_MBEDTLS_PEM_WRITE_C "y")
set(CONFIG_MBEDTLS_X509_CRL_PARSE_C "y")
set(CONFIG_MBEDTLS_X509_CSR_PARSE_C "y")
set(CONFIG_MBEDTLS_ECP_C "y")
set(CONFIG_MBEDTLS_ECDH_C "y")
set(CONFIG_MBEDTLS_ECDSA_C "y")
set(CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED "y")
set(CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED "y")
set(CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED "y")
set(CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED "y")
set(CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED "y")
set(CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED "y")
set(CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED "y")
set(CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED "y")
set(CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED "y")
set(CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED "y")
set(CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED "y")
set(CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED "y")
set(CONFIG_MBEDTLS_ECP_NIST_OPTIM "y")
set(CONFIG_MBEDTLS_SECURITY_RISKS "")
set(CONFIG_MDNS_MAX_SERVICES "10")
set(CONFIG_MDNS_TASK_PRIORITY "1")
set(CONFIG_MDNS_TASK_AFFINITY_NO_AFFINITY "")
set(CONFIG_MDNS_TASK_AFFINITY_CPU0 "y")
set(CONFIG_MDNS_TASK_AFFINITY_CPU1 "")
set(CONFIG_MDNS_TASK_AFFINITY "0x0")
set(CONFIG_MDNS_SERVICE_ADD_TIMEOUT_MS "2000")
set(CONFIG_MDNS_TIMER_PERIOD_MS "100")
set(CONFIG_MQTT_PROTOCOL_311 "y")
set(CONFIG_MQTT_TRANSPORT_SSL "y")
set(CONFIG_MQTT_TRANSPORT_WEBSOCKET "y")
set(CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE "y")
set(CONFIG_MQTT_USE_CUSTOM_CONFIG "")
set(CONFIG_MQTT_TASK_CORE_SELECTION_ENABLED "")
set(CONFIG_MQTT_CUSTOM_OUTBOX "")
set(CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF "y")
set(CONFIG_NEWLIB_STDOUT_LINE_ENDING_LF "")
set(CONFIG_NEWLIB_STDOUT_LINE_ENDING_CR "")
set(CONFIG_NEWLIB_STDIN_LINE_ENDING_CRLF "")
set(CONFIG_NEWLIB_STDIN_LINE_ENDING_LF "")
set(CONFIG_NEWLIB_STDIN_LINE_ENDING_CR "y")
set(CONFIG_NEWLIB_NANO_FORMAT "")
set(CONFIG_OPENSSL_DEBUG "")
set(CONFIG_OPENSSL_ASSERT_DO_NOTHING "")
set(CONFIG_OPENSSL_ASSERT_EXIT "y")
set(CONFIG_PTHREAD_TASK_PRIO_DEFAULT "5")
set(CONFIG_PTHREAD_TASK_STACK_SIZE_DEFAULT "3072")
set(CONFIG_PTHREAD_STACK_MIN "768")
set(CONFIG_PTHREAD_DEFAULT_CORE_NO_AFFINITY "y")
set(CONFIG_PTHREAD_DEFAULT_CORE_0 "")
set(CONFIG_PTHREAD_DEFAULT_CORE_1 "")
set(CONFIG_PTHREAD_TASK_CORE_DEFAULT "-1")
set(CONFIG_PTHREAD_TASK_NAME_DEFAULT "pthread")
set(CONFIG_SPI_FLASH_VERIFY_WRITE "")
set(CONFIG_SPI_FLASH_ENABLE_COUNTERS "")
set(CONFIG_SPI_FLASH_ROM_DRIVER_PATCH "y")
set(CONFIG_SPI_FLASH_DANGEROUS_WRITE_ABORTS "y")
set(CONFIG_SPI_FLASH_DANGEROUS_WRITE_FAILS "")
set(CONFIG_SPI_FLASH_DANGEROUS_WRITE_ALLOWED "")
set(CONFIG_SPI_FLASH_USE_LEGACY_IMPL "")
set(CONFIG_SPI_FLASH_SUPPORT_ISSI_CHIP "y")
set(CONFIG_SPI_FLASH_SUPPORT_GD_CHIP "y")
set(CONFIG_SPIFFS_MAX_PARTITIONS "3")
set(CONFIG_SPIFFS_CACHE "y")
set(CONFIG_SPIFFS_CACHE_WR "y")
set(CONFIG_SPIFFS_CACHE_STATS "")
set(CONFIG_SPIFFS_PAGE_CHECK "y")
set(CONFIG_SPIFFS_GC_MAX_RUNS "10")
set(CONFIG_SPIFFS_GC_STATS "")
set(CONFIG_SPIFFS_PAGE_SIZE "256")
set(CONFIG_SPIFFS_OBJ_NAME_LEN "32")
set(CONFIG_SPIFFS_FOLLOW_SYMLINKS "")
set(CONFIG_SPIFFS_USE_MAGIC "y")
set(CONFIG_SPIFFS_USE_MAGIC_LENGTH "y")
set(CONFIG_SPIFFS_META_LENGTH "4")
set(CONFIG_SPIFFS_USE_MTIME "y")
set(CONFIG_SPIFFS_DBG "")
set(CONFIG_SPIFFS_API_DBG "")
set(CONFIG_SPIFFS_GC_DBG "")
set(CONFIG_SPIFFS_CACHE_DBG "")
set(CONFIG_SPIFFS_CHECK_DBG "")
set(CONFIG_SPIFFS_TEST_VISUALISATION "")
set(CONFIG_USB_DESC_CUSTOM_VID "0x1234")
set(CONFIG_USB_DESC_CUSTOM_PID "0x5678")
set(CONFIG_UNITY_ENABLE_FLOAT "y")
set(CONFIG_UNITY_ENABLE_DOUBLE "y")
set(CONFIG_UNITY_ENABLE_COLOR "")
set(CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER "y")
set(CONFIG_UNITY_ENABLE_FIXTURE "")
set(CONFIG_UNITY_ENABLE_BACKTRACE_ON_FAIL "")
set(CONFIG_VFS_SUPPRESS_SELECT_DEBUG_OUTPUT "y")
set(CONFIG_VFS_SUPPORT_TERMIOS "y")
set(CONFIG_SEMIHOSTFS_MAX_MOUNT_POINTS "1")
set(CONFIG_SEMIHOSTFS_HOST_PATH_MAX_LEN "128")
set(CONFIG_WL_SECTOR_SIZE_512 "")
set(CONFIG_WL_SECTOR_SIZE_4096 "y")
set(CONFIG_WL_SECTOR_SIZE "4096")
set(CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES "16")
set(CONFIG_WIFI_PROV_AUTOSTOP_TIMEOUT "30")
set(CONFIG_WPA_MBEDTLS_CRYPTO "y")
set(CONFIG_WPA_DEBUG_PRINT "")
set(CONFIG_LEGACY_INCLUDE_COMMON_HEADERS "")
set(CONFIGS_LIST CONFIG_IDF_CMAKE;CONFIG_IDF_TARGET;CONFIG_IDF_TARGET_ESP32;CONFIG_IDF_FIRMWARE_CHIP_ID;CONFIG_SDK_TOOLPREFIX;CONFIG_TOOLPREFIX;CONFIG_SDK_TOOLCHAIN_SUPPORTS_TIME_WIDE_64_BITS;CONFIG_APP_BUILD_TYPE_APP_2NDBOOT;CONFIG_APP_BUILD_TYPE_ELF_RAM;CONFIG_APP_BUILD_GENERATE_BINARIES;CONFIG_APP_BUILD_BOOTLOADER;CONFIG_APP_BUILD_USE_FLASH_SECTIONS;CONFIG_APP_COMPILE_TIME_DATE;CONFIG_APP_EXCLUDE_PROJECT_VER_VAR;CONFIG_APP_EXCLUDE_PROJECT_NAME_VAR;CONFIG_APP_PROJECT_VER_FROM_CONFIG;CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_SIZE;CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_DEBUG;CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_PERF;CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_NONE;CONFIG_BOOTLOADER_LOG_LEVEL_NONE;CONFIG_LOG_BOOTLOADER_LEVEL_NONE;CONFIG_BOOTLOADER_LOG_LEVEL_ERROR;CONFIG_LOG_BOOTLOADER_LEVEL_ERROR;CONFIG_BOOTLOADER_LOG_LEVEL_WARN;CONFIG_LOG_BOOTLOADER_LEVEL_WARN;CONFIG_BOOTLOADER_LOG_LEVEL_INFO;CONFIG_LOG_BOOTLOADER_LEVEL_INFO;CONFIG_BOOTLOADER_LOG_LEVEL_DEBUG;CONFIG_LOG_BOOTLOADER_LEVEL_DEBUG;CONFIG_BOOTLOADER_LOG_LEVEL_VERBOSE;CONFIG_LOG_BOOTLOADER_LEVEL_VERBOSE;CONFIG_BOOTLOADER_LOG_LEVEL;CONFIG_LOG_BOOTLOADER_LEVEL;CONFIG_BOOTLOADER_VDDSDIO_BOOST_1_8V;CONFIG_BOOTLOADER_VDDSDIO_BOOST_1_9V;CONFIG_BOOTLOADER_FACTORY_RESET;CONFIG_BOOTLOADER_APP_TEST;CONFIG_BOOTLOADER_WDT_ENABLE;CONFIG_BOOTLOADER_WDT_DISABLE_IN_USER_CODE;CONFIG_BOOTLOADER_WDT_TIME_MS;CONFIG_BOOTLOADER_APP_ROLLBACK_ENABLE;CONFIG_APP_ROLLBACK_ENABLE;CONFIG_BOOTLOADER_SKIP_VALIDATE_IN_DEEP_SLEEP;CONFIG_BOOTLOADER_RESERVE_RTC_SIZE;CONFIG_BOOTLOADER_CUSTOM_RESERVE_RTC;CONFIG_SECURE_SIGNED_APPS_NO_SECURE_BOOT;CONFIG_SECURE_BOOT;CONFIG_SECURE_FLASH_ENC_ENABLED;CONFIG_FLASH_ENCRYPTION_ENABLED;CONFIG_ESPTOOLPY_BAUD_OTHER_VAL;CONFIG_ESPTOOLPY_FLASHMODE_QIO;CONFIG_FLASHMODE_QIO;CONFIG_ESPTOOLPY_FLASHMODE_QOUT;CONFIG_FLASHMODE_QOUT;CONFIG_ESPTOOLPY_FLASHMODE_DIO;CONFIG_FLASHMODE_DIO;CONFIG_ESPTOOLPY_FLASHMODE_DOUT;CONFIG_FLASHMODE_DOUT;CONFIG_ESPTOOLPY_FLASHMODE;CONFIG_ESPTOOLPY_FLASHFREQ_80M;CONFIG_ESPTOOLPY_FLASHFREQ_40M;CONFIG_ESPTOOLPY_FLASHFREQ_26M;CONFIG_ESPTOOLPY_FLASHFREQ_20M;CONFIG_ESPTOOLPY_FLASHFREQ;CONFIG_ESPTOOLPY_FLASHSIZE_1MB;CONFIG_ESPTOOLPY_FLASHSIZE_2MB;CONFIG_ESPTOOLPY_FLASHSIZE_4MB;CONFIG_ESPTOOLPY_FLASHSIZE_8MB;CONFIG_ESPTOOLPY_FLASHSIZE_16MB;CONFIG_ESPTOOLPY_FLASHSIZE;CONFIG_ESPTOOLPY_FLASHSIZE_DETECT;CONFIG_ESPTOOLPY_BEFORE_RESET;CONFIG_ESPTOOLPY_BEFORE_NORESET;CONFIG_ESPTOOLPY_BEFORE;CONFIG_ESPTOOLPY_AFTER_RESET;CONFIG_ESPTOOLPY_AFTER_NORESET;CONFIG_ESPTOOLPY_AFTER;CONFIG_ESPTOOLPY_MONITOR_BAUD_9600B;CONFIG_MONITOR_BAUD_9600B;CONFIG_ESPTOOLPY_MONITOR_BAUD_57600B;CONFIG_MONITOR_BAUD_57600B;CONFIG_ESPTOOLPY_MONITOR_BAUD_115200B;CONFIG_MONITOR_BAUD_115200B;CONFIG_ESPTOOLPY_MONITOR_BAUD_230400B;CONFIG_MONITOR_BAUD_230400B;CONFIG_ESPTOOLPY_MONITOR_BAUD_921600B;CONFIG_MONITOR_BAUD_921600B;CONFIG_ESPTOOLPY_MONITOR_BAUD_2MB;CONFIG_MONITOR_BAUD_2MB;CONFIG_ESPTOOLPY_MONITOR_BAUD_OTHER;CONFIG_MONITOR_BAUD_OTHER;CONFIG_ESPTOOLPY_MONITOR_BAUD_OTHER_VAL;CONFIG_MONITOR_BAUD_OTHER_VAL;CONFIG_ESPTOOLPY_MONITOR_BAUD;CONFIG_MONITOR_BAUD;CONFIG_PARTITION_TABLE_SINGLE_APP;CONFIG_PARTITION_TABLE_TWO_OTA;CONFIG_PARTITION_TABLE_CUSTOM;CONFIG_PARTITION_TABLE_CUSTOM_FILENAME;CONFIG_PARTITION_TABLE_FILENAME;CONFIG_PARTITION_TABLE_OFFSET;CONFIG_PARTITION_TABLE_MD5;CONFIG_COMPILER_OPTIMIZATION_DEFAULT;CONFIG_COMPILER_OPTIMIZATION_LEVEL_DEBUG;CONFIG_COMPILER_OPTIMIZATION_SIZE;CONFIG_COMPILER_OPTIMIZATION_LEVEL_RELEASE;CONFIG_COMPILER_OPTIMIZATION_PERF;CONFIG_COMPILER_OPTIMIZATION_NONE;CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE;CONFIG_OPTIMIZATION_ASSERTIONS_ENABLED;CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_SILENT;CONFIG_OPTIMIZATION_ASSERTIONS_SILENT;CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_DISABLE;CONFIG_OPTIMIZATION_ASSERTIONS_DISABLED;CONFIG_COMPILER_CXX_EXCEPTIONS;CONFIG_CXX_EXCEPTIONS;CONFIG_COMPILER_CXX_RTTI;CONFIG_COMPILER_STACK_CHECK_MODE_NONE;CONFIG_STACK_CHECK_NONE;CONFIG_COMPILER_STACK_CHECK_MODE_NORM;CONFIG_STACK_CHECK_NORM;CONFIG_COMPILER_STACK_CHECK_MODE_STRONG;CONFIG_STACK_CHECK_STRONG;CONFIG_COMPILER_STACK_CHECK_MODE_ALL;CONFIG_STACK_CHECK_ALL;CONFIG_COMPILER_WARN_WRITE_STRINGS;CONFIG_WARN_WRITE_STRINGS;CONFIG_COMPILER_DISABLE_GCC8_WARNINGS;CONFIG_DISABLE_GCC8_WARNINGS;CONFIG_APPTRACE_DEST_TRAX;CONFIG_ESP32_APPTRACE_DEST_TRAX;CONFIG_APPTRACE_DEST_NONE;CONFIG_ESP32_APPTRACE_DEST_NONE;CONFIG_APPTRACE_LOCK_ENABLE;CONFIG_ESP32_APPTRACE_LOCK_ENABLE;CONFIG_BT_ENABLED;CONFIG_BTDM_CTRL_BR_EDR_SCO_DATA_PATH_EFF;CONFIG_BTDM_CTRL_BLE_MAX_CONN_EFF;CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN_EFF;CONFIG_BTDM_CTRL_BR_EDR_MAX_ACL_CONN_EFF;CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN_EFF;CONFIG_BTDM_CTRL_BR_EDR_MAX_SYNC_CONN_EFF;CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN_EFF;CONFIG_BTDM_CTRL_PINNED_TO_CORE;CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE;CONFIG_BTDM_BLE_SLEEP_CLOCK_ACCURACY_INDEX_EFF;CONFIG_BT_RESERVE_DRAM;CONFIG_COAP_MBEDTLS_PSK;CONFIG_COAP_MBEDTLS_PKI;CONFIG_COAP_MBEDTLS_DEBUG;CONFIG_COAP_LOG_DEFAULT_LEVEL;CONFIG_ADC_FORCE_XPD_FSM;CONFIG_ADC_DISABLE_DAC;CONFIG_ADC2_DISABLE_DAC;CONFIG_SPI_MASTER_IN_IRAM;CONFIG_SPI_MASTER_ISR_IN_IRAM;CONFIG_SPI_SLAVE_IN_IRAM;CONFIG_SPI_SLAVE_ISR_IN_IRAM;CONFIG_UART_ISR_IN_IRAM;CONFIG_RTCIO_SUPPORT_RTC_GPIO_DESC;CONFIG_EFUSE_CUSTOM_TABLE;CONFIG_EFUSE_VIRTUAL;CONFIG_EFUSE_CODE_SCHEME_COMPAT_NONE;CONFIG_EFUSE_CODE_SCHEME_COMPAT_3_4;CONFIG_EFUSE_CODE_SCHEME_COMPAT_REPEAT;CONFIG_EFUSE_MAX_BLK_LEN;CONFIG_ESP_TLS_USING_MBEDTLS;CONFIG_ESP_TLS_SERVER;CONFIG_ESP_TLS_PSK_VERIFICATION;CONFIG_ESP32_REV_MIN_0;CONFIG_ESP32_REV_MIN_1;CONFIG_ESP32_REV_MIN_2;CONFIG_ESP32_REV_MIN_3;CONFIG_ESP32_REV_MIN;CONFIG_ESP32_DPORT_WORKAROUND;CONFIG_ESP32_DEFAULT_CPU_FREQ_80;CONFIG_ESP32_DEFAULT_CPU_FREQ_160;CONFIG_ESP32_DEFAULT_CPU_FREQ_240;CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ;CONFIG_ESP32_SPIRAM_SUPPORT;CONFIG_SPIRAM_SUPPORT;CONFIG_ESP32_TRAX;CONFIG_ESP32_TRACEMEM_RESERVE_DRAM;CONFIG_TRACEMEM_RESERVE_DRAM;CONFIG_ESP32_UNIVERSAL_MAC_ADDRESSES_TWO;CONFIG_TWO_UNIVERSAL_MAC_ADDRESS;CONFIG_ESP32_UNIVERSAL_MAC_ADDRESSES_FOUR;CONFIG_FOUR_UNIVERSAL_MAC_ADDRESS;CONFIG_ESP32_UNIVERSAL_MAC_ADDRESSES;CONFIG_NUMBER_OF_UNIVERSAL_MAC_ADDRESS;CONFIG_ESP32_ULP_COPROC_ENABLED;CONFIG_ULP_COPROC_ENABLED;CONFIG_ESP32_ULP_COPROC_RESERVE_MEM;CONFIG_ULP_COPROC_RESERVE_MEM;CONFIG_ESP32_PANIC_PRINT_HALT;CONFIG_ESP32_PANIC_PRINT_REBOOT;CONFIG_ESP32_PANIC_SILENT_REBOOT;CONFIG_ESP32_PANIC_GDBSTUB;CONFIG_ESP32_DEBUG_OCDAWARE;CONFIG_ESP32_BROWNOUT_DET;CONFIG_BROWNOUT_DET;CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_0;CONFIG_BROWNOUT_DET_LVL_SEL_0;CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_1;CONFIG_BROWNOUT_DET_LVL_SEL_1;CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_2;CONFIG_BROWNOUT_DET_LVL_SEL_2;CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_3;CONFIG_BROWNOUT_DET_LVL_SEL_3;CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_4;CONFIG_BROWNOUT_DET_LVL_SEL_4;CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_5;CONFIG_BROWNOUT_DET_LVL_SEL_5;CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_6;CONFIG_BROWNOUT_DET_LVL_SEL_6;CONFIG_ESP32_BROWNOUT_DET_LVL_SEL_7;CONFIG_BROWNOUT_DET_LVL_SEL_7;CONFIG_ESP32_BROWNOUT_DET_LVL;CONFIG_BROWNOUT_DET_LVL;CONFIG_ESP32_REDUCE_PHY_TX_POWER;CONFIG_REDUCE_PHY_TX_POWER;CONFIG_ESP32_TIME_SYSCALL_USE_RTC_FRC1;CONFIG_ESP32_TIME_SYSCALL_USE_RTC;CONFIG_ESP32_TIME_SYSCALL_USE_FRC1;CONFIG_ESP32_TIME_SYSCALL_USE_NONE;CONFIG_ESP32_RTC_CLK_SRC_INT_RC;CONFIG_ESP32_RTC_CLOCK_SOURCE_INTERNAL_RC;CONFIG_ESP32_RTC_CLK_SRC_EXT_CRYS;CONFIG_ESP32_RTC_CLOCK_SOURCE_EXTERNAL_CRYSTAL;CONFIG_ESP32_RTC_CLK_SRC_EXT_OSC;CONFIG_ESP32_RTC_CLOCK_SOURCE_EXTERNAL_OSC;CONFIG_ESP32_RTC_CLK_SRC_INT_8MD256;CONFIG_ESP32_RTC_CLOCK_SOURCE_INTERNAL_8MD256;CONFIG_ESP32_RTC_CLK_CAL_CYCLES;CONFIG_ESP32_DEEP_SLEEP_WAKEUP_DELAY;CONFIG_ESP32_XTAL_FREQ_40;CONFIG_ESP32_XTAL_FREQ_26;CONFIG_ESP32_XTAL_FREQ_AUTO;CONFIG_ESP32_XTAL_FREQ;CONFIG_ESP32_DISABLE_BASIC_ROM_CONSOLE;CONFIG_DISABLE_BASIC_ROM_CONSOLE;CONFIG_ESP32_NO_BLOBS;CONFIG_NO_BLOBS;CONFIG_ESP32_COMPATIBLE_PRE_V2_1_BOOTLOADERS;CONFIG_COMPATIBLE_PRE_V2_1_BOOTLOADERS;CONFIG_ESP32_USE_FIXED_STATIC_RAM_SIZE;CONFIG_ESP32_DPORT_DIS_INTERRUPT_LVL;CONFIG_PM_ENABLE;CONFIG_ADC_CAL_EFUSE_TP_ENABLE;CONFIG_ADC_CAL_EFUSE_VREF_ENABLE;CONFIG_ADC_CAL_LUT_ENABLE;CONFIG_ESP_ERR_TO_NAME_LOOKUP;CONFIG_ESP_SYSTEM_EVENT_QUEUE_SIZE;CONFIG_SYSTEM_EVENT_QUEUE_SIZE;CONFIG_ESP_SYSTEM_EVENT_TASK_STACK_SIZE;CONFIG_SYSTEM_EVENT_TASK_STACK_SIZE;CONFIG_ESP_MAIN_TASK_STACK_SIZE;CONFIG_MAIN_TASK_STACK_SIZE;CONFIG_ESP_IPC_TASK_STACK_SIZE;CONFIG_IPC_TASK_STACK_SIZE;CONFIG_ESP_IPC_USES_CALLERS_PRIORITY;CONFIG_ESP_MINIMAL_SHARED_STACK_SIZE;CONFIG_ESP_CONSOLE_UART_DEFAULT;CONFIG_CONSOLE_UART_DEFAULT;CONFIG_ESP_CONSOLE_UART_CUSTOM;CONFIG_CONSOLE_UART_CUSTOM;CONFIG_ESP_CONSOLE_UART_NONE;CONFIG_CONSOLE_UART_NONE;CONFIG_ESP_CONSOLE_UART_NUM;CONFIG_CONSOLE_UART_NUM;CONFIG_ESP_CONSOLE_UART_TX_GPIO;CONFIG_CONSOLE_UART_TX_GPIO;CONFIG_ESP_CONSOLE_UART_RX_GPIO;CONFIG_CONSOLE_UART_RX_GPIO;CONFIG_ESP_CONSOLE_UART_BAUDRATE;CONFIG_CONSOLE_UART_BAUDRATE;CONFIG_ESP_INT_WDT;CONFIG_INT_WDT;CONFIG_ESP_INT_WDT_TIMEOUT_MS;CONFIG_INT_WDT_TIMEOUT_MS;CONFIG_ESP_INT_WDT_CHECK_CPU1;CONFIG_INT_WDT_CHECK_CPU1;CONFIG_ESP_TASK_WDT;CONFIG_TASK_WDT;CONFIG_ESP_TASK_WDT_PANIC;CONFIG_TASK_WDT_PANIC;CONFIG_ESP_TASK_WDT_TIMEOUT_S;CONFIG_TASK_WDT_TIMEOUT_S;CONFIG_ESP_TASK_WDT_CHECK_IDLE_TASK_CPU0;CONFIG_TASK_WDT_CHECK_IDLE_TASK_CPU0;CONFIG_ESP_TASK_WDT_CHECK_IDLE_TASK_CPU1;CONFIG_TASK_WDT_CHECK_IDLE_TASK_CPU1;CONFIG_ESP_PANIC_HANDLER_IRAM;CONFIG_ESP_MAC_ADDR_UNIVERSE_WIFI_STA;CONFIG_ESP_MAC_ADDR_UNIVERSE_WIFI_AP;CONFIG_ESP_MAC_ADDR_UNIVERSE_BT;CONFIG_ESP_MAC_ADDR_UNIVERSE_ETH;CONFIG_ETH_ENABLED;CONFIG_ETH_USE_ESP32_EMAC;CONFIG_ETH_PHY_INTERFACE_RMII;CONFIG_ETH_PHY_INTERFACE_MII;CONFIG_ETH_RMII_CLK_INPUT;CONFIG_ETH_RMII_CLK_OUTPUT;CONFIG_ETH_RMII_CLK_IN_GPIO;CONFIG_ETH_DMA_BUFFER_SIZE;CONFIG_ETH_DMA_RX_BUFFER_NUM;CONFIG_ETH_DMA_TX_BUFFER_NUM;CONFIG_ETH_USE_SPI_ETHERNET;CONFIG_ETH_SPI_ETHERNET_DM9051;CONFIG_ETH_USE_OPENETH;CONFIG_ESP_EVENT_LOOP_PROFILING;CONFIG_EVENT_LOOP_PROFILING;CONFIG_ESP_EVENT_POST_FROM_ISR;CONFIG_POST_EVENTS_FROM_ISR;CONFIG_ESP_EVENT_POST_FROM_IRAM_ISR;CONFIG_POST_EVENTS_FROM_IRAM_ISR;CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS;CONFIG_ESP_HTTP_CLIENT_ENABLE_BASIC_AUTH;CONFIG_HTTPD_MAX_REQ_HDR_LEN;CONFIG_HTTPD_MAX_URI_LEN;CONFIG_HTTPD_ERR_RESP_NO_DELAY;CONFIG_HTTPD_PURGE_BUF_LEN;CONFIG_HTTPD_LOG_PURGE_DATA;CONFIG_OTA_ALLOW_HTTP;CONFIG_ESP_HTTPS_SERVER_ENABLE;CONFIG_ESP_NETIF_IP_LOST_TIMER_INTERVAL;CONFIG_ESP_NETIF_TCPIP_LWIP;CONFIG_ESP_NETIF_LOOPBACK;CONFIG_ESP_NETIF_TCPIP_ADAPTER_COMPATIBLE_LAYER;CONFIG_ESP_TIMER_PROFILING;CONFIG_ESP_TIMER_TASK_STACK_SIZE;CONFIG_TIMER_TASK_STACK_SIZE;CONFIG_ESP_TIMER_IMPL_FRC2;CONFIG_ESP_TIMER_IMPL_TG0_LAC;CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM;CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM;CONFIG_ESP32_WIFI_STATIC_TX_BUFFER;CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER;CONFIG_ESP32_WIFI_TX_BUFFER_TYPE;CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM;CONFIG_ESP32_WIFI_CSI_ENABLED;CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED;CONFIG_ESP32_WIFI_TX_BA_WIN;CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED;CONFIG_ESP32_WIFI_RX_BA_WIN;CONFIG_ESP32_WIFI_NVS_ENABLED;CONFIG_ESP32_WIFI_TASK_PINNED_TO_CORE_0;CONFIG_ESP32_WIFI_TASK_PINNED_TO_CORE_1;CONFIG_ESP32_WIFI_SOFTAP_BEACON_MAX_LEN;CONFIG_ESP32_WIFI_MGMT_SBUF_NUM;CONFIG_ESP32_WIFI_DEBUG_LOG_ENABLE;CONFIG_ESP32_WIFI_IRAM_OPT;CONFIG_ESP32_WIFI_RX_IRAM_OPT;CONFIG_ESP32_WIFI_ENABLE_WPA3_SAE;CONFIG_ESP32_PHY_CALIBRATION_AND_DATA_STORAGE;CONFIG_ESP32_PHY_INIT_DATA_IN_PARTITION;CONFIG_ESP32_PHY_MAX_WIFI_TX_POWER;CONFIG_ESP32_PHY_MAX_TX_POWER;CONFIG_ESP32_ENABLE_COREDUMP_TO_FLASH;CONFIG_ESP32_ENABLE_COREDUMP_TO_UART;CONFIG_ESP32_ENABLE_COREDUMP_TO_NONE;CONFIG_FATFS_CODEPAGE_DYNAMIC;CONFIG_FATFS_CODEPAGE_437;CONFIG_FATFS_CODEPAGE_720;CONFIG_FATFS_CODEPAGE_737;CONFIG_FATFS_CODEPAGE_771;CONFIG_FATFS_CODEPAGE_775;CONFIG_FATFS_CODEPAGE_850;CONFIG_FATFS_CODEPAGE_852;CONFIG_FATFS_CODEPAGE_855;CONFIG_FATFS_CODEPAGE_857;CONFIG_FATFS_CODEPAGE_860;CONFIG_FATFS_CODEPAGE_861;CONFIG_FATFS_CODEPAGE_862;CONFIG_FATFS_CODEPAGE_863;CONFIG_FATFS_CODEPAGE_864;CONFIG_FATFS_CODEPAGE_865;CONFIG_FATFS_CODEPAGE_866;CONFIG_FATFS_CODEPAGE_869;CONFIG_FATFS_CODEPAGE_932;CONFIG_FATFS_CODEPAGE_936;CONFIG_FATFS_CODEPAGE_949;CONFIG_FATFS_CODEPAGE_950;CONFIG_FATFS_CODEPAGE;CONFIG_FATFS_LFN_NONE;CONFIG_FATFS_LFN_HEAP;CONFIG_FATFS_LFN_STACK;CONFIG_FATFS_FS_LOCK;CONFIG_FATFS_TIMEOUT_MS;CONFIG_FATFS_PER_FILE_CACHE;CONFIG_FMB_COMM_MODE_RTU_EN;CONFIG_FMB_COMM_MODE_ASCII_EN;CONFIG_FMB_MASTER_TIMEOUT_MS_RESPOND;CONFIG_MB_MASTER_TIMEOUT_MS_RESPOND;CONFIG_FMB_MASTER_DELAY_MS_CONVERT;CONFIG_MB_MASTER_DELAY_MS_CONVERT;CONFIG_FMB_QUEUE_LENGTH;CONFIG_MB_QUEUE_LENGTH;CONFIG_FMB_SERIAL_TASK_STACK_SIZE;CONFIG_MB_SERIAL_TASK_STACK_SIZE;CONFIG_FMB_SERIAL_BUF_SIZE;CONFIG_MB_SERIAL_BUF_SIZE;CONFIG_FMB_SERIAL_ASCII_BITS_PER_SYMB;CONFIG_FMB_SERIAL_ASCII_TIMEOUT_RESPOND_MS;CONFIG_FMB_SERIAL_TASK_PRIO;CONFIG_MB_SERIAL_TASK_PRIO;CONFIG_FMB_CONTROLLER_SLAVE_ID_SUPPORT;CONFIG_MB_CONTROLLER_SLAVE_ID_SUPPORT;CONFIG_FMB_CONTROLLER_NOTIFY_TIMEOUT;CONFIG_MB_CONTROLLER_NOTIFY_TIMEOUT;CONFIG_FMB_CONTROLLER_NOTIFY_QUEUE_SIZE;CONFIG_MB_CONTROLLER_NOTIFY_QUEUE_SIZE;CONFIG_FMB_CONTROLLER_STACK_SIZE;CONFIG_MB_CONTROLLER_STACK_SIZE;CONFIG_FMB_EVENT_QUEUE_TIMEOUT;CONFIG_MB_EVENT_QUEUE_TIMEOUT;CONFIG_FMB_TIMER_PORT_ENABLED;CONFIG_MB_TIMER_PORT_ENABLED;CONFIG_FMB_TIMER_GROUP;CONFIG_MB_TIMER_GROUP;CONFIG_FMB_TIMER_INDEX;CONFIG_MB_TIMER_INDEX;CONFIG_FMB_TIMER_ISR_IN_IRAM;CONFIG_FREERTOS_UNICORE;CONFIG_FREERTOS_NO_AFFINITY;CONFIG_FREERTOS_CORETIMER_0;CONFIG_FREERTOS_CORETIMER_1;CONFIG_FREERTOS_HZ;CONFIG_FREERTOS_ASSERT_ON_UNTESTED_FUNCTION;CONFIG_FREERTOS_CHECK_STACKOVERFLOW_NONE;CONFIG_FREERTOS_CHECK_STACKOVERFLOW_PTRVAL;CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY;CONFIG_FREERTOS_WATCHPOINT_END_OF_STACK;CONFIG_FREERTOS_INTERRUPT_BACKTRACE;CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS;CONFIG_FREERTOS_ASSERT_FAIL_ABORT;CONFIG_FREERTOS_ASSERT_FAIL_PRINT_CONTINUE;CONFIG_FREERTOS_ASSERT_DISABLE;CONFIG_FREERTOS_IDLE_TASK_STACKSIZE;CONFIG_FREERTOS_ISR_STACKSIZE;CONFIG_FREERTOS_LEGACY_HOOKS;CONFIG_FREERTOS_MAX_TASK_NAME_LEN;CONFIG_FREERTOS_SUPPORT_STATIC_ALLOCATION;CONFIG_SUPPORT_STATIC_ALLOCATION;CONFIG_FREERTOS_TIMER_TASK_PRIORITY;CONFIG_TIMER_TASK_PRIORITY;CONFIG_FREERTOS_TIMER_TASK_STACK_DEPTH;CONFIG_TIMER_TASK_STACK_DEPTH;CONFIG_FREERTOS_TIMER_QUEUE_LENGTH;CONFIG_TIMER_QUEUE_LENGTH;CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE;CONFIG_FREERTOS_USE_TRACE_FACILITY;CONFIG_FREERTOS_GENERATE_RUN_TIME_STATS;CONFIG_FREERTOS_TASK_FUNCTION_WRAPPER;CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER;CONFIG_FREERTOS_CHECK_PORT_CRITICAL_COMPLIANCE;CONFIG_FREERTOS_DEBUG_OCDAWARE;CONFIG_FREERTOS_FPU_IN_ISR;CONFIG_HEAP_POISONING_DISABLED;CONFIG_HEAP_POISONING_LIGHT;CONFIG_HEAP_POISONING_COMPREHENSIVE;CONFIG_HEAP_TRACING_OFF;CONFIG_HEAP_TRACING_STANDALONE;CONFIG_HEAP_TRACING_TOHOST;CONFIG_JSMN_PARENT_LINKS;CONFIG_JSMN_STRICT;CONFIG_LOG_DEFAULT_LEVEL_NONE;CONFIG_LOG_DEFAULT_LEVEL_ERROR;CONFIG_LOG_DEFAULT_LEVEL_WARN;CONFIG_LOG_DEFAULT_LEVEL_INFO;CONFIG_LOG_DEFAULT_LEVEL_DEBUG;CONFIG_LOG_DEFAULT_LEVEL_VERBOSE;CONFIG_LOG_DEFAULT_LEVEL;CONFIG_LOG_COLORS;CONFIG_LOG_TIMESTAMP_SOURCE_RTOS;CONFIG_LOG_TIMESTAMP_SOURCE_SYSTEM;CONFIG_LWIP_LOCAL_HOSTNAME;CONFIG_LWIP_DNS_SUPPORT_MDNS_QUERIES;CONFIG_LWIP_L2_TO_L3_COPY;CONFIG_L2_TO_L3_COPY;CONFIG_LWIP_IRAM_OPTIMIZATION;CONFIG_LWIP_TIMERS_ONDEMAND;CONFIG_LWIP_MAX_SOCKETS;CONFIG_LWIP_USE_ONLY_LWIP_SELECT;CONFIG_USE_ONLY_LWIP_SELECT;CONFIG_LWIP_SO_REUSE;CONFIG_LWIP_SO_REUSE_RXTOALL;CONFIG_LWIP_SO_RCVBUF;CONFIG_LWIP_NETBUF_RECVINFO;CONFIG_LWIP_IP_FRAG;CONFIG_LWIP_IP_REASSEMBLY;CONFIG_LWIP_STATS;CONFIG_LWIP_ETHARP_TRUST_IP_MAC;CONFIG_LWIP_ESP_GRATUITOUS_ARP;CONFIG_ESP_GRATUITOUS_ARP;CONFIG_LWIP_GARP_TMR_INTERVAL;CONFIG_GARP_TMR_INTERVAL;CONFIG_LWIP_TCPIP_RECVMBOX_SIZE;CONFIG_TCPIP_RECVMBOX_SIZE;CONFIG_LWIP_DHCP_DOES_ARP_CHECK;CONFIG_LWIP_DHCP_RESTORE_LAST_IP;CONFIG_LWIP_DHCPS_LEASE_UNIT;CONFIG_LWIP_DHCPS_MAX_STATION_NUM;CONFIG_LWIP_AUTOIP;CONFIG_LWIP_IPV6_AUTOCONFIG;CONFIG_LWIP_NETIF_LOOPBACK;CONFIG_LWIP_LOOPBACK_MAX_PBUFS;CONFIG_LWIP_MAX_ACTIVE_TCP;CONFIG_LWIP_MAX_LISTENING_TCP;CONFIG_LWIP_TCP_MAXRTX;CONFIG_TCP_MAXRTX;CONFIG_LWIP_TCP_SYNMAXRTX;CONFIG_TCP_SYNMAXRTX;CONFIG_LWIP_TCP_MSS;CONFIG_TCP_MSS;CONFIG_LWIP_TCP_TMR_INTERVAL;CONFIG_LWIP_TCP_MSL;CONFIG_TCP_MSL;CONFIG_LWIP_TCP_SND_BUF_DEFAULT;CONFIG_TCP_SND_BUF_DEFAULT;CONFIG_LWIP_TCP_WND_DEFAULT;CONFIG_TCP_WND_DEFAULT;CONFIG_LWIP_TCP_RECVMBOX_SIZE;CONFIG_TCP_RECVMBOX_SIZE;CONFIG_LWIP_TCP_QUEUE_OOSEQ;CONFIG_TCP_QUEUE_OOSEQ;CONFIG_LWIP_TCP_SACK_OUT;CONFIG_LWIP_TCP_KEEP_CONNECTION_WHEN_IP_CHANGES;CONFIG_ESP_TCP_KEEP_CONNECTION_WHEN_IP_CHANGES;CONFIG_LWIP_TCP_OVERSIZE_MSS;CONFIG_TCP_OVERSIZE_MSS;CONFIG_LWIP_TCP_OVERSIZE_QUARTER_MSS;CONFIG_TCP_OVERSIZE_QUARTER_MSS;CONFIG_LWIP_TCP_OVERSIZE_DISABLE;CONFIG_TCP_OVERSIZE_DISABLE;CONFIG_LWIP_MAX_UDP_PCBS;CONFIG_LWIP_UDP_RECVMBOX_SIZE;CONFIG_UDP_RECVMBOX_SIZE;CONFIG_LWIP_TCPIP_TASK_STACK_SIZE;CONFIG_TCPIP_TASK_STACK_SIZE;CONFIG_LWIP_TCPIP_TASK_AFFINITY_NO_AFFINITY;CONFIG_TCPIP_TASK_AFFINITY_NO_AFFINITY;CONFIG_LWIP_TCPIP_TASK_AFFINITY_CPU0;CONFIG_TCPIP_TASK_AFFINITY_CPU0;CONFIG_LWIP_TCPIP_TASK_AFFINITY_CPU1;CONFIG_TCPIP_TASK_AFFINITY_CPU1;CONFIG_LWIP_TCPIP_TASK_AFFINITY;CONFIG_TCPIP_TASK_AFFINITY;CONFIG_LWIP_PPP_SUPPORT;CONFIG_PPP_SUPPORT;CONFIG_LWIP_MULTICAST_PING;CONFIG_LWIP_BROADCAST_PING;CONFIG_LWIP_MAX_RAW_PCBS;CONFIG_LWIP_DHCP_MAX_NTP_SERVERS;CONFIG_LWIP_SNTP_UPDATE_DELAY;CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC;CONFIG_MBEDTLS_DEFAULT_MEM_ALLOC;CONFIG_MBEDTLS_CUSTOM_MEM_ALLOC;CONFIG_MBEDTLS_ASYMMETRIC_CONTENT_LEN;CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN;CONFIG_MBEDTLS_SSL_OUT_CONTENT_LEN;CONFIG_MBEDTLS_DEBUG;CONFIG_MBEDTLS_CERTIFICATE_BUNDLE;CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_FULL;CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_CMN;CONFIG_MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_NONE;CONFIG_MBEDTLS_CUSTOM_CERTIFICATE_BUNDLE;CONFIG_MBEDTLS_ECP_RESTARTABLE;CONFIG_MBEDTLS_CMAC_C;CONFIG_MBEDTLS_HARDWARE_AES;CONFIG_MBEDTLS_HARDWARE_MPI;CONFIG_MBEDTLS_HARDWARE_SHA;CONFIG_MBEDTLS_HAVE_TIME;CONFIG_MBEDTLS_HAVE_TIME_DATE;CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT;CONFIG_MBEDTLS_TLS_SERVER_ONLY;CONFIG_MBEDTLS_TLS_CLIENT_ONLY;CONFIG_MBEDTLS_TLS_DISABLED;CONFIG_MBEDTLS_TLS_SERVER;CONFIG_MBEDTLS_TLS_CLIENT;CONFIG_MBEDTLS_TLS_ENABLED;CONFIG_MBEDTLS_PSK_MODES;CONFIG_MBEDTLS_KEY_EXCHANGE_PSK;CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_PSK;CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_PSK;CONFIG_MBEDTLS_KEY_EXCHANGE_RSA_PSK;CONFIG_MBEDTLS_KEY_EXCHANGE_RSA;CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_RSA;CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE;CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA;CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA;CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA;CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA;CONFIG_MBEDTLS_SSL_RENEGOTIATION;CONFIG_MBEDTLS_SSL_PROTO_SSL3;CONFIG_MBEDTLS_SSL_PROTO_TLS1;CONFIG_MBEDTLS_SSL_PROTO_TLS1_1;CONFIG_MBEDTLS_SSL_PROTO_TLS1_2;CONFIG_MBEDTLS_SSL_PROTO_DTLS;CONFIG_MBEDTLS_SSL_ALPN;CONFIG_MBEDTLS_CLIENT_SSL_SESSION_TICKETS;CONFIG_MBEDTLS_SERVER_SSL_SESSION_TICKETS;CONFIG_MBEDTLS_AES_C;CONFIG_MBEDTLS_CAMELLIA_C;CONFIG_MBEDTLS_DES_C;CONFIG_MBEDTLS_RC4_DISABLED;CONFIG_MBEDTLS_RC4_ENABLED_NO_DEFAULT;CONFIG_MBEDTLS_RC4_ENABLED;CONFIG_MBEDTLS_BLOWFISH_C;CONFIG_MBEDTLS_XTEA_C;CONFIG_MBEDTLS_CCM_C;CONFIG_MBEDTLS_GCM_C;CONFIG_MBEDTLS_RIPEMD160_C;CONFIG_MBEDTLS_PEM_PARSE_C;CONFIG_MBEDTLS_PEM_WRITE_C;CONFIG_MBEDTLS_X509_CRL_PARSE_C;CONFIG_MBEDTLS_X509_CSR_PARSE_C;CONFIG_MBEDTLS_ECP_C;CONFIG_MBEDTLS_ECDH_C;CONFIG_MBEDTLS_ECDSA_C;CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED;CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED;CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED;CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED;CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED;CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED;CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED;CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED;CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED;CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED;CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED;CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED;CONFIG_MBEDTLS_ECP_NIST_OPTIM;CONFIG_MBEDTLS_SECURITY_RISKS;CONFIG_MDNS_MAX_SERVICES;CONFIG_MDNS_TASK_PRIORITY;CONFIG_MDNS_TASK_AFFINITY_NO_AFFINITY;CONFIG_MDNS_TASK_AFFINITY_CPU0;CONFIG_MDNS_TASK_AFFINITY_CPU1;CONFIG_MDNS_TASK_AFFINITY;CONFIG_MDNS_SERVICE_ADD_TIMEOUT_MS;CONFIG_MDNS_TIMER_PERIOD_MS;CONFIG_MQTT_PROTOCOL_311;CONFIG_MQTT_TRANSPORT_SSL;CONFIG_MQTT_TRANSPORT_WEBSOCKET;CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE;CONFIG_MQTT_USE_CUSTOM_CONFIG;CONFIG_MQTT_TASK_CORE_SELECTION_ENABLED;CONFIG_MQTT_CUSTOM_OUTBOX;CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF;CONFIG_NEWLIB_STDOUT_LINE_ENDING_LF;CONFIG_NEWLIB_STDOUT_LINE_ENDING_CR;CONFIG_NEWLIB_STDIN_LINE_ENDING_CRLF;CONFIG_NEWLIB_STDIN_LINE_ENDING_LF;CONFIG_NEWLIB_STDIN_LINE_ENDING_CR;CONFIG_NEWLIB_NANO_FORMAT;CONFIG_OPENSSL_DEBUG;CONFIG_OPENSSL_ASSERT_DO_NOTHING;CONFIG_OPENSSL_ASSERT_EXIT;CONFIG_PTHREAD_TASK_PRIO_DEFAULT;CONFIG_ESP32_PTHREAD_TASK_PRIO_DEFAULT;CONFIG_PTHREAD_TASK_STACK_SIZE_DEFAULT;CONFIG_ESP32_PTHREAD_TASK_STACK_SIZE_DEFAULT;CONFIG_PTHREAD_STACK_MIN;CONFIG_ESP32_PTHREAD_STACK_MIN;CONFIG_PTHREAD_DEFAULT_CORE_NO_AFFINITY;CONFIG_ESP32_DEFAULT_PTHREAD_CORE_NO_AFFINITY;CONFIG_PTHREAD_DEFAULT_CORE_0;CONFIG_ESP32_DEFAULT_PTHREAD_CORE_0;CONFIG_PTHREAD_DEFAULT_CORE_1;CONFIG_ESP32_DEFAULT_PTHREAD_CORE_1;CONFIG_PTHREAD_TASK_CORE_DEFAULT;CONFIG_ESP32_PTHREAD_TASK_CORE_DEFAULT;CONFIG_PTHREAD_TASK_NAME_DEFAULT;CONFIG_ESP32_PTHREAD_TASK_NAME_DEFAULT;CONFIG_SPI_FLASH_VERIFY_WRITE;CONFIG_SPI_FLASH_ENABLE_COUNTERS;CONFIG_SPI_FLASH_ROM_DRIVER_PATCH;CONFIG_SPI_FLASH_DANGEROUS_WRITE_ABORTS;CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_ABORTS;CONFIG_SPI_FLASH_DANGEROUS_WRITE_FAILS;CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_FAILS;CONFIG_SPI_FLASH_DANGEROUS_WRITE_ALLOWED;CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_ALLOWED;CONFIG_SPI_FLASH_USE_LEGACY_IMPL;CONFIG_SPI_FLASH_SUPPORT_ISSI_CHIP;CONFIG_SPI_FLASH_SUPPORT_GD_CHIP;CONFIG_SPIFFS_MAX_PARTITIONS;CONFIG_SPIFFS_CACHE;CONFIG_SPIFFS_CACHE_WR;CONFIG_SPIFFS_CACHE_STATS;CONFIG_SPIFFS_PAGE_CHECK;CONFIG_SPIFFS_GC_MAX_RUNS;CONFIG_SPIFFS_GC_STATS;CONFIG_SPIFFS_PAGE_SIZE;CONFIG_SPIFFS_OBJ_NAME_LEN;CONFIG_SPIFFS_FOLLOW_SYMLINKS;CONFIG_SPIFFS_USE_MAGIC;CONFIG_SPIFFS_USE_MAGIC_LENGTH;CONFIG_SPIFFS_META_LENGTH;CONFIG_SPIFFS_USE_MTIME;CONFIG_SPIFFS_DBG;CONFIG_SPIFFS_API_DBG;CONFIG_SPIFFS_GC_DBG;CONFIG_SPIFFS_CACHE_DBG;CONFIG_SPIFFS_CHECK_DBG;CONFIG_SPIFFS_TEST_VISUALISATION;CONFIG_USB_DESC_CUSTOM_VID;CONFIG_USB_DESC_CUSTOM_PID;CONFIG_UNITY_ENABLE_FLOAT;CONFIG_UNITY_ENABLE_DOUBLE;CONFIG_UNITY_ENABLE_COLOR;CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER;CONFIG_UNITY_ENABLE_FIXTURE;CONFIG_UNITY_ENABLE_BACKTRACE_ON_FAIL;CONFIG_VFS_SUPPRESS_SELECT_DEBUG_OUTPUT;CONFIG_SUPPRESS_SELECT_DEBUG_OUTPUT;CONFIG_VFS_SUPPORT_TERMIOS;CONFIG_SUPPORT_TERMIOS;CONFIG_SEMIHOSTFS_MAX_MOUNT_POINTS;CONFIG_SEMIHOSTFS_HOST_PATH_MAX_LEN;CONFIG_WL_SECTOR_SIZE_512;CONFIG_WL_SECTOR_SIZE_4096;CONFIG_WL_SECTOR_SIZE;CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES;CONFIG_WIFI_PROV_AUTOSTOP_TIMEOUT;CONFIG_WPA_MBEDTLS_CRYPTO;CONFIG_WPA_DEBUG_PRINT;CONFIG_LEGACY_INCLUDE_COMMON_HEADERS)
# List of deprecated options for backward compatibility
set(CONFIG_TOOLPREFIX "xtensa-esp32-elf-")
set(CONFIG_LOG_BOOTLOADER_LEVEL_NONE "")
set(CONFIG_LOG_BOOTLOADER_LEVEL_ERROR "")
set(CONFIG_LOG_BOOTLOADER_LEVEL_WARN "")
set(CONFIG_LOG_BOOTLOADER_LEVEL_INFO "y")
set(CONFIG_LOG_BOOTLOADER_LEVEL_DEBUG "")
set(CONFIG_LOG_BOOTLOADER_LEVEL_VERBOSE "")
set(CONFIG_LOG_BOOTLOADER_LEVEL "3")
set(CONFIG_APP_ROLLBACK_ENABLE "")
set(CONFIG_FLASH_ENCRYPTION_ENABLED "")
set(CONFIG_FLASHMODE_QIO "")
set(CONFIG_FLASHMODE_QOUT "")
set(CONFIG_FLASHMODE_DIO "y")
set(CONFIG_FLASHMODE_DOUT "")
set(CONFIG_MONITOR_BAUD_9600B "")
set(CONFIG_MONITOR_BAUD_57600B "")
set(CONFIG_MONITOR_BAUD_115200B "y")
set(CONFIG_MONITOR_BAUD_230400B "")
set(CONFIG_MONITOR_BAUD_921600B "")
set(CONFIG_MONITOR_BAUD_2MB "")
set(CONFIG_MONITOR_BAUD_OTHER "")
set(CONFIG_MONITOR_BAUD_OTHER_VAL "115200")
set(CONFIG_MONITOR_BAUD "115200")
set(CONFIG_COMPILER_OPTIMIZATION_LEVEL_DEBUG "y")
set(CONFIG_COMPILER_OPTIMIZATION_LEVEL_RELEASE "")
set(CONFIG_OPTIMIZATION_ASSERTIONS_ENABLED "y")
set(CONFIG_OPTIMIZATION_ASSERTIONS_SILENT "")
set(CONFIG_OPTIMIZATION_ASSERTIONS_DISABLED "")
set(CONFIG_CXX_EXCEPTIONS "")
set(CONFIG_STACK_CHECK_NONE "y")
set(CONFIG_STACK_CHECK_NORM "")
set(CONFIG_STACK_CHECK_STRONG "")
set(CONFIG_STACK_CHECK_ALL "")
set(CONFIG_WARN_WRITE_STRINGS "")
set(CONFIG_DISABLE_GCC8_WARNINGS "")
set(CONFIG_ESP32_APPTRACE_DEST_TRAX "")
set(CONFIG_ESP32_APPTRACE_DEST_NONE "y")
set(CONFIG_ESP32_APPTRACE_LOCK_ENABLE "y")
set(CONFIG_BTDM_CONTROLLER_BLE_MAX_CONN_EFF "0")
set(CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_ACL_CONN_EFF "0")
set(CONFIG_BTDM_CONTROLLER_BR_EDR_MAX_SYNC_CONN_EFF "0")
set(CONFIG_BTDM_CONTROLLER_PINNED_TO_CORE "0")
set(CONFIG_ADC2_DISABLE_DAC "y")
set(CONFIG_SPIRAM_SUPPORT "")
set(CONFIG_TRACEMEM_RESERVE_DRAM "0x0")
set(CONFIG_TWO_UNIVERSAL_MAC_ADDRESS "")
set(CONFIG_FOUR_UNIVERSAL_MAC_ADDRESS "y")
set(CONFIG_NUMBER_OF_UNIVERSAL_MAC_ADDRESS "4")
set(CONFIG_ULP_COPROC_ENABLED "")
set(CONFIG_ULP_COPROC_RESERVE_MEM "0")
set(CONFIG_BROWNOUT_DET "y")
set(CONFIG_BROWNOUT_DET_LVL_SEL_0 "y")
set(CONFIG_BROWNOUT_DET_LVL_SEL_1 "")
set(CONFIG_BROWNOUT_DET_LVL_SEL_2 "")
set(CONFIG_BROWNOUT_DET_LVL_SEL_3 "")
set(CONFIG_BROWNOUT_DET_LVL_SEL_4 "")
set(CONFIG_BROWNOUT_DET_LVL_SEL_5 "")
set(CONFIG_BROWNOUT_DET_LVL_SEL_6 "")
set(CONFIG_BROWNOUT_DET_LVL_SEL_7 "")
set(CONFIG_BROWNOUT_DET_LVL "0")
set(CONFIG_REDUCE_PHY_TX_POWER "y")
set(CONFIG_ESP32_RTC_CLOCK_SOURCE_INTERNAL_RC "y")
set(CONFIG_ESP32_RTC_CLOCK_SOURCE_EXTERNAL_CRYSTAL "")
set(CONFIG_ESP32_RTC_CLOCK_SOURCE_EXTERNAL_OSC "")
set(CONFIG_ESP32_RTC_CLOCK_SOURCE_INTERNAL_8MD256 "")
set(CONFIG_DISABLE_BASIC_ROM_CONSOLE "")
set(CONFIG_NO_BLOBS "")
set(CONFIG_COMPATIBLE_PRE_V2_1_BOOTLOADERS "")
set(CONFIG_SYSTEM_EVENT_QUEUE_SIZE "32")
set(CONFIG_SYSTEM_EVENT_TASK_STACK_SIZE "2304")
set(CONFIG_MAIN_TASK_STACK_SIZE "3584")
set(CONFIG_IPC_TASK_STACK_SIZE "1024")
set(CONFIG_CONSOLE_UART_DEFAULT "y")
set(CONFIG_CONSOLE_UART_CUSTOM "")
set(CONFIG_CONSOLE_UART_NONE "")
set(CONFIG_CONSOLE_UART_NUM "0")
set(CONFIG_CONSOLE_UART_TX_GPIO "1")
set(CONFIG_CONSOLE_UART_RX_GPIO "3")
set(CONFIG_CONSOLE_UART_BAUDRATE "115200")
set(CONFIG_INT_WDT "y")
set(CONFIG_INT_WDT_TIMEOUT_MS "300")
set(CONFIG_INT_WDT_CHECK_CPU1 "y")
set(CONFIG_TASK_WDT "y")
set(CONFIG_TASK_WDT_PANIC "")
set(CONFIG_TASK_WDT_TIMEOUT_S "5")
set(CONFIG_TASK_WDT_CHECK_IDLE_TASK_CPU0 "y")
set(CONFIG_TASK_WDT_CHECK_IDLE_TASK_CPU1 "y")
set(CONFIG_EVENT_LOOP_PROFILING "")
set(CONFIG_POST_EVENTS_FROM_ISR "y")
set(CONFIG_POST_EVENTS_FROM_IRAM_ISR "y")
set(CONFIG_TIMER_TASK_STACK_SIZE "3584")
set(CONFIG_MB_MASTER_TIMEOUT_MS_RESPOND "150")
set(CONFIG_MB_MASTER_DELAY_MS_CONVERT "200")
set(CONFIG_MB_QUEUE_LENGTH "20")
set(CONFIG_MB_SERIAL_TASK_STACK_SIZE "2048")
set(CONFIG_MB_SERIAL_BUF_SIZE "256")
set(CONFIG_MB_SERIAL_TASK_PRIO "10")
set(CONFIG_MB_CONTROLLER_SLAVE_ID_SUPPORT "")
set(CONFIG_MB_CONTROLLER_NOTIFY_TIMEOUT "20")
set(CONFIG_MB_CONTROLLER_NOTIFY_QUEUE_SIZE "20")
set(CONFIG_MB_CONTROLLER_STACK_SIZE "4096")
set(CONFIG_MB_EVENT_QUEUE_TIMEOUT "20")
set(CONFIG_MB_TIMER_PORT_ENABLED "y")
set(CONFIG_MB_TIMER_GROUP "0")
set(CONFIG_MB_TIMER_INDEX "0")
set(CONFIG_SUPPORT_STATIC_ALLOCATION "")
set(CONFIG_TIMER_TASK_PRIORITY "1")
set(CONFIG_TIMER_TASK_STACK_DEPTH "2048")
set(CONFIG_TIMER_QUEUE_LENGTH "10")
set(CONFIG_L2_TO_L3_COPY "")
set(CONFIG_USE_ONLY_LWIP_SELECT "")
set(CONFIG_ESP_GRATUITOUS_ARP "y")
set(CONFIG_GARP_TMR_INTERVAL "60")
set(CONFIG_TCPIP_RECVMBOX_SIZE "32")
set(CONFIG_TCP_MAXRTX "12")
set(CONFIG_TCP_SYNMAXRTX "6")
set(CONFIG_TCP_MSS "1440")
set(CONFIG_TCP_MSL "60000")
set(CONFIG_TCP_SND_BUF_DEFAULT "5744")
set(CONFIG_TCP_WND_DEFAULT "5744")
set(CONFIG_TCP_RECVMBOX_SIZE "6")
set(CONFIG_TCP_QUEUE_OOSEQ "y")
set(CONFIG_ESP_TCP_KEEP_CONNECTION_WHEN_IP_CHANGES "")
set(CONFIG_TCP_OVERSIZE_MSS "y")
set(CONFIG_TCP_OVERSIZE_QUARTER_MSS "")
set(CONFIG_TCP_OVERSIZE_DISABLE "")
set(CONFIG_UDP_RECVMBOX_SIZE "6")
set(CONFIG_TCPIP_TASK_STACK_SIZE "3072")
set(CONFIG_TCPIP_TASK_AFFINITY_NO_AFFINITY "y")
set(CONFIG_TCPIP_TASK_AFFINITY_CPU0 "")
set(CONFIG_TCPIP_TASK_AFFINITY_CPU1 "")
set(CONFIG_TCPIP_TASK_AFFINITY "0x7FFFFFFF")
set(CONFIG_PPP_SUPPORT "")
set(CONFIG_ESP32_PTHREAD_TASK_PRIO_DEFAULT "5")
set(CONFIG_ESP32_PTHREAD_TASK_STACK_SIZE_DEFAULT "3072")
set(CONFIG_ESP32_PTHREAD_STACK_MIN "768")
set(CONFIG_ESP32_DEFAULT_PTHREAD_CORE_NO_AFFINITY "y")
set(CONFIG_ESP32_DEFAULT_PTHREAD_CORE_0 "")
set(CONFIG_ESP32_DEFAULT_PTHREAD_CORE_1 "")
set(CONFIG_ESP32_PTHREAD_TASK_CORE_DEFAULT "-1")
set(CONFIG_ESP32_PTHREAD_TASK_NAME_DEFAULT "pthread")
set(CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_ABORTS "y")
set(CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_FAILS "")
set(CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_ALLOWED "")
set(CONFIG_SUPPRESS_SELECT_DEBUG_OUTPUT "y")
set(CONFIG_SUPPORT_TERMIOS "y")
    "ADC_CAL_EFUSE_TP_ENABLE": true, 
    "ADC_CAL_EFUSE_VREF_ENABLE": true, 
    "ADC_CAL_LUT_ENABLE": true, 
    "ADC_DISABLE_DAC": true, 
    "ADC_FORCE_XPD_FSM": false, 
    "APPTRACE_DEST_NONE": true, 
    "APPTRACE_DEST_TRAX": false, 
    "APPTRACE_LOCK_ENABLE": true, 
    "APP_BUILD_BOOTLOADER": true, 
    "APP_BUILD_GENERATE_BINARIES": true, 
    "APP_BUILD_TYPE_APP_2NDBOOT": true, 
    "APP_BUILD_TYPE_ELF_RAM": false, 
    "APP_BUILD_USE_FLASH_SECTIONS": true, 
    "APP_COMPILE_TIME_DATE": true, 
    "APP_EXCLUDE_PROJECT_NAME_VAR": false, 
    "APP_EXCLUDE_PROJECT_VER_VAR": false, 
    "APP_PROJECT_VER_FROM_CONFIG": false, 
    "BOOTLOADER_APP_ROLLBACK_ENABLE": false, 
    "BOOTLOADER_APP_TEST": false, 
    "BOOTLOADER_COMPILER_OPTIMIZATION_DEBUG": false, 
    "BOOTLOADER_COMPILER_OPTIMIZATION_NONE": false, 
    "BOOTLOADER_COMPILER_OPTIMIZATION_PERF": false, 
    "BOOTLOADER_COMPILER_OPTIMIZATION_SIZE": true, 
    "BOOTLOADER_CUSTOM_RESERVE_RTC": false, 
    "BOOTLOADER_FACTORY_RESET": false, 
    "BOOTLOADER_LOG_LEVEL": 3, 
    "BOOTLOADER_LOG_LEVEL_DEBUG": false, 
    "BOOTLOADER_LOG_LEVEL_ERROR": false, 
    "BOOTLOADER_LOG_LEVEL_INFO": true, 
    "BOOTLOADER_LOG_LEVEL_NONE": false, 
    "BOOTLOADER_LOG_LEVEL_VERBOSE": false, 
    "BOOTLOADER_LOG_LEVEL_WARN": false, 
    "BOOTLOADER_RESERVE_RTC_SIZE": 0, 
    "BOOTLOADER_SKIP_VALIDATE_IN_DEEP_SLEEP": false, 
    "BOOTLOADER_VDDSDIO_BOOST_1_8V": false, 
    "BOOTLOADER_VDDSDIO_BOOST_1_9V": true, 
    "BOOTLOADER_WDT_DISABLE_IN_USER_CODE": false, 
    "BOOTLOADER_WDT_ENABLE": true, 
    "BOOTLOADER_WDT_TIME_MS": 9000, 
    "BTDM_BLE_SLEEP_CLOCK_ACCURACY_INDEX_EFF": 1, 
    "BTDM_CTRL_BLE_MAX_CONN_EFF": 0, 
    "BTDM_CTRL_BR_EDR_MAX_ACL_CONN_EFF": 0, 
    "BTDM_CTRL_BR_EDR_MAX_SYNC_CONN_EFF": 0, 
    "BTDM_CTRL_BR_EDR_SCO_DATA_PATH_EFF": 0, 
    "BTDM_CTRL_PINNED_TO_CORE": 0, 
    "BT_ENABLED": false, 
    "BT_RESERVE_DRAM": 0, 
    "COAP_LOG_DEFAULT_LEVEL": 0, 
    "COAP_MBEDTLS_DEBUG": false, 
    "COAP_MBEDTLS_PKI": false, 
    "COAP_MBEDTLS_PSK": true, 
    "COMPILER_CXX_EXCEPTIONS": false, 
    "COMPILER_CXX_RTTI": false, 
    "COMPILER_DISABLE_GCC8_WARNINGS": false, 
    "COMPILER_OPTIMIZATION_ASSERTIONS_DISABLE": false, 
    "COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE": true, 
    "COMPILER_OPTIMIZATION_ASSERTIONS_SILENT": false, 
    "COMPILER_OPTIMIZATION_DEFAULT": true, 
    "COMPILER_OPTIMIZATION_NONE": false, 
    "COMPILER_OPTIMIZATION_PERF": false, 
    "COMPILER_OPTIMIZATION_SIZE": false, 
    "COMPILER_STACK_CHECK_MODE_ALL": false, 
    "COMPILER_STACK_CHECK_MODE_NONE": true, 
    "COMPILER_STACK_CHECK_MODE_NORM": false, 
    "COMPILER_STACK_CHECK_MODE_STRONG": false, 
    "COMPILER_WARN_WRITE_STRINGS": false, 
    "EFUSE_CODE_SCHEME_COMPAT_3_4": true, 
    "EFUSE_CODE_SCHEME_COMPAT_NONE": false, 
    "EFUSE_CODE_SCHEME_COMPAT_REPEAT": false, 
    "EFUSE_CUSTOM_TABLE": false, 
    "EFUSE_MAX_BLK_LEN": 192, 
    "EFUSE_VIRTUAL": false, 
    "ESP32_BROWNOUT_DET": true, 
    "ESP32_BROWNOUT_DET_LVL": 0, 
    "ESP32_BROWNOUT_DET_LVL_SEL_0": true, 
    "ESP32_BROWNOUT_DET_LVL_SEL_1": false, 
    "ESP32_BROWNOUT_DET_LVL_SEL_2": false, 
    "ESP32_BROWNOUT_DET_LVL_SEL_3": false, 
    "ESP32_BROWNOUT_DET_LVL_SEL_4": false, 
    "ESP32_BROWNOUT_DET_LVL_SEL_5": false, 
    "ESP32_BROWNOUT_DET_LVL_SEL_6": false, 
    "ESP32_BROWNOUT_DET_LVL_SEL_7": false, 
    "ESP32_COMPATIBLE_PRE_V2_1_BOOTLOADERS": false, 
    "ESP32_DEBUG_OCDAWARE": true, 
    "ESP32_DEEP_SLEEP_WAKEUP_DELAY": 2000, 
    "ESP32_DEFAULT_CPU_FREQ_160": true, 
    "ESP32_DEFAULT_CPU_FREQ_240": false, 
    "ESP32_DEFAULT_CPU_FREQ_80": false, 
    "ESP32_DEFAULT_CPU_FREQ_MHZ": 160, 
    "ESP32_DISABLE_BASIC_ROM_CONSOLE": false, 
    "ESP32_DPORT_DIS_INTERRUPT_LVL": 5, 
    "ESP32_DPORT_WORKAROUND": true, 
    "ESP32_ENABLE_COREDUMP_TO_FLASH": false, 
    "ESP32_ENABLE_COREDUMP_TO_NONE": true, 
    "ESP32_ENABLE_COREDUMP_TO_UART": false, 
    "ESP32_NO_BLOBS": false, 
    "ESP32_PANIC_GDBSTUB": false, 
    "ESP32_PANIC_PRINT_HALT": false, 
    "ESP32_PANIC_PRINT_REBOOT": true, 
    "ESP32_PANIC_SILENT_REBOOT": false, 
    "ESP32_PHY_CALIBRATION_AND_DATA_STORAGE": true, 
    "ESP32_PHY_INIT_DATA_IN_PARTITION": false, 
    "ESP32_PHY_MAX_TX_POWER": 20, 
    "ESP32_PHY_MAX_WIFI_TX_POWER": 20, 
    "ESP32_REDUCE_PHY_TX_POWER": true, 
    "ESP32_REV_MIN": 0, 
    "ESP32_REV_MIN_0": true, 
    "ESP32_REV_MIN_1": false, 
    "ESP32_REV_MIN_2": false, 
    "ESP32_REV_MIN_3": false, 
    "ESP32_RTC_CLK_CAL_CYCLES": 1024, 
    "ESP32_RTC_CLK_SRC_EXT_CRYS": false, 
    "ESP32_RTC_CLK_SRC_EXT_OSC": false, 
    "ESP32_RTC_CLK_SRC_INT_8MD256": false, 
    "ESP32_RTC_CLK_SRC_INT_RC": true, 
    "ESP32_SPIRAM_SUPPORT": false, 
    "ESP32_TIME_SYSCALL_USE_FRC1": false, 
    "ESP32_TIME_SYSCALL_USE_NONE": false, 
    "ESP32_TIME_SYSCALL_USE_RTC": false, 
    "ESP32_TIME_SYSCALL_USE_RTC_FRC1": true, 
    "ESP32_TRACEMEM_RESERVE_DRAM": 0, 
    "ESP32_TRAX": false, 
    "ESP32_ULP_COPROC_ENABLED": false, 
    "ESP32_ULP_COPROC_RESERVE_MEM": 0, 
    "ESP32_UNIVERSAL_MAC_ADDRESSES": 4, 
    "ESP32_UNIVERSAL_MAC_ADDRESSES_FOUR": true, 
    "ESP32_UNIVERSAL_MAC_ADDRESSES_TWO": false, 
    "ESP32_USE_FIXED_STATIC_RAM_SIZE": false, 
    "ESP32_WIFI_AMPDU_RX_ENABLED": true, 
    "ESP32_WIFI_AMPDU_TX_ENABLED": true, 
    "ESP32_WIFI_CSI_ENABLED": false, 
    "ESP32_WIFI_DEBUG_LOG_ENABLE": false, 
    "ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM": 32, 
    "ESP32_WIFI_DYNAMIC_TX_BUFFER": true, 
    "ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM": 32, 
    "ESP32_WIFI_ENABLE_WPA3_SAE": false, 
    "ESP32_WIFI_IRAM_OPT": true, 
    "ESP32_WIFI_MGMT_SBUF_NUM": 32, 
    "ESP32_WIFI_NVS_ENABLED": true, 
    "ESP32_WIFI_RX_BA_WIN": 6, 
    "ESP32_WIFI_RX_IRAM_OPT": true, 
    "ESP32_WIFI_SOFTAP_BEACON_MAX_LEN": 752, 
    "ESP32_WIFI_STATIC_RX_BUFFER_NUM": 10, 
    "ESP32_WIFI_STATIC_TX_BUFFER": false, 
    "ESP32_WIFI_TASK_PINNED_TO_CORE_0": true, 
    "ESP32_WIFI_TASK_PINNED_TO_CORE_1": false, 
    "ESP32_WIFI_TX_BA_WIN": 6, 
    "ESP32_WIFI_TX_BUFFER_TYPE": 1, 
    "ESP32_XTAL_FREQ": 40, 
    "ESP32_XTAL_FREQ_26": false, 
    "ESP32_XTAL_FREQ_40": true, 
    "ESP32_XTAL_FREQ_AUTO": false, 
    "ESPTOOLPY_AFTER": "hard_reset", 
    "ESPTOOLPY_AFTER_NORESET": false, 
    "ESPTOOLPY_AFTER_RESET": true, 
    "ESPTOOLPY_BAUD_OTHER_VAL": 115200, 
    "ESPTOOLPY_BEFORE": "default_reset", 
    "ESPTOOLPY_BEFORE_NORESET": false, 
    "ESPTOOLPY_BEFORE_RESET": true, 
    "ESPTOOLPY_FLASHFREQ": "26m", 
    "ESPTOOLPY_FLASHFREQ_20M": false, 
    "ESPTOOLPY_FLASHFREQ_26M": true, 
    "ESPTOOLPY_FLASHFREQ_40M": false, 
    "ESPTOOLPY_FLASHFREQ_80M": false, 
    "ESPTOOLPY_FLASHMODE": "dio", 
    "ESPTOOLPY_FLASHMODE_DIO": true, 
    "ESPTOOLPY_FLASHMODE_DOUT": false, 
    "ESPTOOLPY_FLASHMODE_QIO": false, 
    "ESPTOOLPY_FLASHMODE_QOUT": false, 
    "ESPTOOLPY_FLASHSIZE": "2MB", 
    "ESPTOOLPY_FLASHSIZE_16MB": false, 
    "ESPTOOLPY_FLASHSIZE_1MB": false, 
    "ESPTOOLPY_FLASHSIZE_2MB": true, 
    "ESPTOOLPY_FLASHSIZE_4MB": false, 
    "ESPTOOLPY_FLASHSIZE_8MB": false, 
    "ESPTOOLPY_FLASHSIZE_DETECT": true, 
    "ESPTOOLPY_MONITOR_BAUD": 115200, 
    "ESPTOOLPY_MONITOR_BAUD_115200B": true, 
    "ESPTOOLPY_MONITOR_BAUD_230400B": false, 
    "ESPTOOLPY_MONITOR_BAUD_2MB": false, 
    "ESPTOOLPY_MONITOR_BAUD_57600B": false, 
    "ESPTOOLPY_MONITOR_BAUD_921600B": false, 
    "ESPTOOLPY_MONITOR_BAUD_9600B": false, 
    "ESPTOOLPY_MONITOR_BAUD_OTHER": false, 
    "ESPTOOLPY_MONITOR_BAUD_OTHER_VAL": 115200, 
    "ESP_CONSOLE_UART_BAUDRATE": 115200, 
    "ESP_CONSOLE_UART_CUSTOM": false, 
    "ESP_CONSOLE_UART_DEFAULT": true, 
    "ESP_CONSOLE_UART_NONE": false, 
    "ESP_CONSOLE_UART_NUM": 0, 
    "ESP_CONSOLE_UART_RX_GPIO": 3, 
    "ESP_CONSOLE_UART_TX_GPIO": 1, 
    "ESP_ERR_TO_NAME_LOOKUP": true, 
    "ESP_EVENT_LOOP_PROFILING": false, 
    "ESP_EVENT_POST_FROM_IRAM_ISR": true, 
    "ESP_EVENT_POST_FROM_ISR": true, 
    "ESP_HTTPS_SERVER_ENABLE": false, 
    "ESP_HTTP_CLIENT_ENABLE_BASIC_AUTH": false, 
    "ESP_HTTP_CLIENT_ENABLE_HTTPS": true, 
    "ESP_INT_WDT": true, 
    "ESP_INT_WDT_CHECK_CPU1": true, 
    "ESP_INT_WDT_TIMEOUT_MS": 300, 
    "ESP_IPC_TASK_STACK_SIZE": 1024, 
    "ESP_IPC_USES_CALLERS_PRIORITY": true, 
    "ESP_MAC_ADDR_UNIVERSE_BT": true, 
    "ESP_MAC_ADDR_UNIVERSE_ETH": true, 
    "ESP_MAC_ADDR_UNIVERSE_WIFI_AP": true, 
    "ESP_MAC_ADDR_UNIVERSE_WIFI_STA": true, 
    "ESP_MAIN_TASK_STACK_SIZE": 3584, 
    "ESP_MINIMAL_SHARED_STACK_SIZE": 2048, 
    "ESP_NETIF_IP_LOST_TIMER_INTERVAL": 120, 
    "ESP_NETIF_LOOPBACK": false, 
    "ESP_NETIF_TCPIP_ADAPTER_COMPATIBLE_LAYER": true, 
    "ESP_NETIF_TCPIP_LWIP": true, 
    "ESP_PANIC_HANDLER_IRAM": false, 
    "ESP_SYSTEM_EVENT_QUEUE_SIZE": 32, 
    "ESP_SYSTEM_EVENT_TASK_STACK_SIZE": 2304, 
    "ESP_TASK_WDT": true, 
    "ESP_TASK_WDT_CHECK_IDLE_TASK_CPU0": true, 
    "ESP_TASK_WDT_CHECK_IDLE_TASK_CPU1": true, 
    "ESP_TASK_WDT_PANIC": false, 
    "ESP_TASK_WDT_TIMEOUT_S": 5, 
    "ESP_TIMER_IMPL_FRC2": false, 
    "ESP_TIMER_IMPL_TG0_LAC": true, 
    "ESP_TIMER_PROFILING": false, 
    "ESP_TIMER_TASK_STACK_SIZE": 3584, 
    "ESP_TLS_PSK_VERIFICATION": false, 
    "ESP_TLS_SERVER": false, 
    "ESP_TLS_USING_MBEDTLS": true, 
    "ETH_DMA_BUFFER_SIZE": 512, 
    "ETH_DMA_RX_BUFFER_NUM": 10, 
    "ETH_DMA_TX_BUFFER_NUM": 10, 
    "ETH_ENABLED": true, 
    "ETH_PHY_INTERFACE_MII": false, 
    "ETH_PHY_INTERFACE_RMII": true, 
    "ETH_RMII_CLK_INPUT": true, 
    "ETH_RMII_CLK_IN_GPIO": 0, 
    "ETH_RMII_CLK_OUTPUT": false, 
    "ETH_SPI_ETHERNET_DM9051": false, 
    "ETH_USE_ESP32_EMAC": true, 
    "ETH_USE_OPENETH": false, 
    "ETH_USE_SPI_ETHERNET": true, 
    "FATFS_CODEPAGE": 437, 
    "FATFS_CODEPAGE_437": true, 
    "FATFS_CODEPAGE_720": false, 
    "FATFS_CODEPAGE_737": false, 
    "FATFS_CODEPAGE_771": false, 
    "FATFS_CODEPAGE_775": false, 
    "FATFS_CODEPAGE_850": false, 
    "FATFS_CODEPAGE_852": false, 
    "FATFS_CODEPAGE_855": false, 
    "FATFS_CODEPAGE_857": false, 
    "FATFS_CODEPAGE_860": false, 
    "FATFS_CODEPAGE_861": false, 
    "FATFS_CODEPAGE_862": false, 
    "FATFS_CODEPAGE_863": false, 
    "FATFS_CODEPAGE_864": false, 
    "FATFS_CODEPAGE_865": false, 
    "FATFS_CODEPAGE_866": false, 
    "FATFS_CODEPAGE_869": false, 
    "FATFS_CODEPAGE_932": false, 
    "FATFS_CODEPAGE_936": false, 
    "FATFS_CODEPAGE_949": false, 
    "FATFS_CODEPAGE_950": false, 
    "FATFS_CODEPAGE_DYNAMIC": false, 
    "FATFS_FS_LOCK": 0, 
    "FATFS_LFN_HEAP": false, 
    "FATFS_LFN_NONE": true, 
    "FATFS_LFN_STACK": false, 
    "FATFS_PER_FILE_CACHE": true, 
    "FATFS_TIMEOUT_MS": 10000, 
    "FMB_COMM_MODE_ASCII_EN": true, 
    "FMB_COMM_MODE_RTU_EN": true, 
    "FMB_CONTROLLER_NOTIFY_QUEUE_SIZE": 20, 
    "FMB_CONTROLLER_NOTIFY_TIMEOUT": 20, 
    "FMB_CONTROLLER_SLAVE_ID_SUPPORT": false, 
    "FMB_CONTROLLER_STACK_SIZE": 4096, 
    "FMB_EVENT_QUEUE_TIMEOUT": 20, 
    "FMB_MASTER_DELAY_MS_CONVERT": 200, 
    "FMB_MASTER_TIMEOUT_MS_RESPOND": 150, 
    "FMB_QUEUE_LENGTH": 20, 
    "FMB_SERIAL_ASCII_BITS_PER_SYMB": 8, 
    "FMB_SERIAL_ASCII_TIMEOUT_RESPOND_MS": 1000, 
    "FMB_SERIAL_BUF_SIZE": 256, 
    "FMB_SERIAL_TASK_PRIO": 10, 
    "FMB_SERIAL_TASK_STACK_SIZE": 2048, 
    "FMB_TIMER_GROUP": 0, 
    "FMB_TIMER_INDEX": 0, 
    "FMB_TIMER_ISR_IN_IRAM": false, 
    "FMB_TIMER_PORT_ENABLED": true, 
    "FREERTOS_ASSERT_DISABLE": false, 
    "FREERTOS_ASSERT_FAIL_ABORT": true, 
    "FREERTOS_ASSERT_FAIL_PRINT_CONTINUE": false, 
    "FREERTOS_ASSERT_ON_UNTESTED_FUNCTION": true, 
    "FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER": true, 
    "FREERTOS_CHECK_PORT_CRITICAL_COMPLIANCE": false, 
    "FREERTOS_CHECK_STACKOVERFLOW_CANARY": true, 
    "FREERTOS_CHECK_STACKOVERFLOW_NONE": false, 
    "FREERTOS_CHECK_STACKOVERFLOW_PTRVAL": false, 
    "FREERTOS_CORETIMER_0": true, 
    "FREERTOS_CORETIMER_1": false, 
    "FREERTOS_DEBUG_OCDAWARE": true, 
    "FREERTOS_FPU_IN_ISR": false, 
    "FREERTOS_GENERATE_RUN_TIME_STATS": false, 
    "FREERTOS_HZ": 100, 
    "FREERTOS_IDLE_TASK_STACKSIZE": 1536, 
    "FREERTOS_INTERRUPT_BACKTRACE": true, 
    "FREERTOS_ISR_STACKSIZE": 1536, 
    "FREERTOS_LEGACY_HOOKS": false, 
    "FREERTOS_MAX_TASK_NAME_LEN": 16, 
    "FREERTOS_NO_AFFINITY": 2147483647, 
    "FREERTOS_QUEUE_REGISTRY_SIZE": 0, 
    "FREERTOS_SUPPORT_STATIC_ALLOCATION": false, 
    "FREERTOS_TASK_FUNCTION_WRAPPER": true, 
    "FREERTOS_THREAD_LOCAL_STORAGE_POINTERS": 1, 
    "FREERTOS_TIMER_QUEUE_LENGTH": 10, 
    "FREERTOS_TIMER_TASK_PRIORITY": 1, 
    "FREERTOS_TIMER_TASK_STACK_DEPTH": 2048, 
    "FREERTOS_UNICORE": false, 
    "FREERTOS_USE_TRACE_FACILITY": false, 
    "FREERTOS_WATCHPOINT_END_OF_STACK": false, 
    "HEAP_POISONING_COMPREHENSIVE": false, 
    "HEAP_POISONING_DISABLED": true, 
    "HEAP_POISONING_LIGHT": false, 
    "HEAP_TRACING_OFF": true, 
    "HEAP_TRACING_STANDALONE": false, 
    "HEAP_TRACING_TOHOST": false, 
    "HTTPD_ERR_RESP_NO_DELAY": true, 
    "HTTPD_LOG_PURGE_DATA": false, 
    "HTTPD_MAX_REQ_HDR_LEN": 512, 
    "HTTPD_MAX_URI_LEN": 512, 
    "HTTPD_PURGE_BUF_LEN": 32, 
    "IDF_CMAKE": true, 
    "IDF_FIRMWARE_CHIP_ID": 0, 
    "IDF_TARGET": "esp32", 
    "IDF_TARGET_ESP32": true, 
    "JSMN_PARENT_LINKS": false, 
    "JSMN_STRICT": false, 
    "LEGACY_INCLUDE_COMMON_HEADERS": false, 
    "LOG_COLORS": true, 
    "LOG_DEFAULT_LEVEL": 3, 
    "LOG_DEFAULT_LEVEL_DEBUG": false, 
    "LOG_DEFAULT_LEVEL_ERROR": false, 
    "LOG_DEFAULT_LEVEL_INFO": true, 
    "LOG_DEFAULT_LEVEL_NONE": false, 
    "LOG_DEFAULT_LEVEL_VERBOSE": false, 
    "LOG_DEFAULT_LEVEL_WARN": false, 
    "LOG_TIMESTAMP_SOURCE_RTOS": true, 
    "LOG_TIMESTAMP_SOURCE_SYSTEM": false, 
    "LWIP_AUTOIP": false, 
    "LWIP_BROADCAST_PING": false, 
    "LWIP_DHCPS_LEASE_UNIT": 60, 
    "LWIP_DHCPS_MAX_STATION_NUM": 8, 
    "LWIP_DHCP_DOES_ARP_CHECK": true, 
    "LWIP_DHCP_MAX_NTP_SERVERS": 1, 
    "LWIP_DHCP_RESTORE_LAST_IP": false, 
    "LWIP_DNS_SUPPORT_MDNS_QUERIES": true, 
    "LWIP_ESP_GRATUITOUS_ARP": true, 
    "LWIP_ETHARP_TRUST_IP_MAC": false, 
    "LWIP_GARP_TMR_INTERVAL": 60, 
    "LWIP_IPV6_AUTOCONFIG": false, 
    "LWIP_IP_FRAG": true, 
    "LWIP_IP_REASSEMBLY": false, 
    "LWIP_IRAM_OPTIMIZATION": false, 
    "LWIP_L2_TO_L3_COPY": false, 
    "LWIP_LOCAL_HOSTNAME": "espressif", 
    "LWIP_LOOPBACK_MAX_PBUFS": 8, 
    "LWIP_MAX_ACTIVE_TCP": 16, 
    "LWIP_MAX_LISTENING_TCP": 16, 
    "LWIP_MAX_RAW_PCBS": 16, 
    "LWIP_MAX_SOCKETS": 10, 
    "LWIP_MAX_UDP_PCBS": 16, 
    "LWIP_MULTICAST_PING": false, 
    "LWIP_NETBUF_RECVINFO": false, 
    "LWIP_NETIF_LOOPBACK": true, 
    "LWIP_PPP_SUPPORT": false, 
    "LWIP_SNTP_UPDATE_DELAY": 3600000, 
    "LWIP_SO_RCVBUF": false, 
    "LWIP_SO_REUSE": true, 
    "LWIP_SO_REUSE_RXTOALL": true, 
    "LWIP_STATS": false, 
    "LWIP_TCPIP_RECVMBOX_SIZE": 32, 
    "LWIP_TCPIP_TASK_AFFINITY": 2147483647, 
    "LWIP_TCPIP_TASK_AFFINITY_CPU0": false, 
    "LWIP_TCPIP_TASK_AFFINITY_CPU1": false, 
    "LWIP_TCPIP_TASK_AFFINITY_NO_AFFINITY": true, 
    "LWIP_TCPIP_TASK_STACK_SIZE": 3072, 
    "LWIP_TCP_KEEP_CONNECTION_WHEN_IP_CHANGES": false, 
    "LWIP_TCP_MAXRTX": 12, 
    "LWIP_TCP_MSL": 60000, 
    "LWIP_TCP_MSS": 1440, 
    "LWIP_TCP_OVERSIZE_DISABLE": false, 
    "LWIP_TCP_OVERSIZE_MSS": true, 
    "LWIP_TCP_OVERSIZE_QUARTER_MSS": false, 
    "LWIP_TCP_QUEUE_OOSEQ": true, 
    "LWIP_TCP_RECVMBOX_SIZE": 6, 
    "LWIP_TCP_SACK_OUT": false, 
    "LWIP_TCP_SND_BUF_DEFAULT": 5744, 
    "LWIP_TCP_SYNMAXRTX": 6, 
    "LWIP_TCP_TMR_INTERVAL": 250, 
    "LWIP_TCP_WND_DEFAULT": 5744, 
    "LWIP_TIMERS_ONDEMAND": true, 
    "LWIP_UDP_RECVMBOX_SIZE": 6, 
    "LWIP_USE_ONLY_LWIP_SELECT": false, 
    "MBEDTLS_AES_C": true, 
    "MBEDTLS_ASYMMETRIC_CONTENT_LEN": true, 
    "MBEDTLS_BLOWFISH_C": false, 
    "MBEDTLS_CAMELLIA_C": false, 
    "MBEDTLS_CCM_C": true, 
    "MBEDTLS_CERTIFICATE_BUNDLE": true, 
    "MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_CMN": false, 
    "MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_FULL": true, 
    "MBEDTLS_CERTIFICATE_BUNDLE_DEFAULT_NONE": false, 
    "MBEDTLS_CLIENT_SSL_SESSION_TICKETS": true, 
    "MBEDTLS_CMAC_C": false, 
    "MBEDTLS_CUSTOM_CERTIFICATE_BUNDLE": false, 
    "MBEDTLS_CUSTOM_MEM_ALLOC": false, 
    "MBEDTLS_DEBUG": false, 
    "MBEDTLS_DEFAULT_MEM_ALLOC": false, 
    "MBEDTLS_DES_C": false, 
    "MBEDTLS_ECDH_C": true, 
    "MBEDTLS_ECDSA_C": true, 
    "MBEDTLS_ECP_C": true, 
    "MBEDTLS_ECP_DP_BP256R1_ENABLED": true, 
    "MBEDTLS_ECP_DP_BP384R1_ENABLED": true, 
    "MBEDTLS_ECP_DP_BP512R1_ENABLED": true, 
    "MBEDTLS_ECP_DP_CURVE25519_ENABLED": true, 
    "MBEDTLS_ECP_DP_SECP192K1_ENABLED": true, 
    "MBEDTLS_ECP_DP_SECP192R1_ENABLED": true, 
    "MBEDTLS_ECP_DP_SECP224K1_ENABLED": true, 
    "MBEDTLS_ECP_DP_SECP224R1_ENABLED": true, 
    "MBEDTLS_ECP_DP_SECP256K1_ENABLED": true, 
    "MBEDTLS_ECP_DP_SECP256R1_ENABLED": true, 
    "MBEDTLS_ECP_DP_SECP384R1_ENABLED": true, 
    "MBEDTLS_ECP_DP_SECP521R1_ENABLED": true, 
    "MBEDTLS_ECP_NIST_OPTIM": true, 
    "MBEDTLS_ECP_RESTARTABLE": false, 
    "MBEDTLS_GCM_C": true, 
    "MBEDTLS_HARDWARE_AES": true, 
    "MBEDTLS_HARDWARE_MPI": true, 
    "MBEDTLS_HARDWARE_SHA": true, 
    "MBEDTLS_HAVE_TIME": true, 
    "MBEDTLS_HAVE_TIME_DATE": false, 
    "MBEDTLS_INTERNAL_MEM_ALLOC": true, 
    "MBEDTLS_KEY_EXCHANGE_DHE_PSK": true, 
    "MBEDTLS_KEY_EXCHANGE_DHE_RSA": true, 
    "MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA": true, 
    "MBEDTLS_KEY_EXCHANGE_ECDHE_PSK": true, 
    "MBEDTLS_KEY_EXCHANGE_ECDHE_RSA": true, 
    "MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA": true, 
    "MBEDTLS_KEY_EXCHANGE_ECDH_RSA": true, 
    "MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE": true, 
    "MBEDTLS_KEY_EXCHANGE_PSK": true, 
    "MBEDTLS_KEY_EXCHANGE_RSA": true, 
    "MBEDTLS_KEY_EXCHANGE_RSA_PSK": true, 
    "MBEDTLS_PEM_PARSE_C": true, 
    "MBEDTLS_PEM_WRITE_C": true, 
    "MBEDTLS_PSK_MODES": true, 
    "MBEDTLS_RC4_DISABLED": true, 
    "MBEDTLS_RC4_ENABLED": false, 
    "MBEDTLS_RC4_ENABLED_NO_DEFAULT": false, 
    "MBEDTLS_RIPEMD160_C": false, 
    "MBEDTLS_SECURITY_RISKS": false, 
    "MBEDTLS_SERVER_SSL_SESSION_TICKETS": true, 
    "MBEDTLS_SSL_ALPN": true, 
    "MBEDTLS_SSL_IN_CONTENT_LEN": 16384, 
    "MBEDTLS_SSL_OUT_CONTENT_LEN": 4096, 
    "MBEDTLS_SSL_PROTO_DTLS": true, 
    "MBEDTLS_SSL_PROTO_SSL3": false, 
    "MBEDTLS_SSL_PROTO_TLS1": true, 
    "MBEDTLS_SSL_PROTO_TLS1_1": true, 
    "MBEDTLS_SSL_PROTO_TLS1_2": true, 
    "MBEDTLS_SSL_RENEGOTIATION": true, 
    "MBEDTLS_TLS_CLIENT": true, 
    "MBEDTLS_TLS_CLIENT_ONLY": false, 
    "MBEDTLS_TLS_DISABLED": false, 
    "MBEDTLS_TLS_ENABLED": true, 
    "MBEDTLS_TLS_SERVER": true, 
    "MBEDTLS_TLS_SERVER_AND_CLIENT": true, 
    "MBEDTLS_TLS_SERVER_ONLY": false, 
    "MBEDTLS_X509_CRL_PARSE_C": true, 
    "MBEDTLS_X509_CSR_PARSE_C": true, 
    "MBEDTLS_XTEA_C": false, 
    "MDNS_MAX_SERVICES": 10, 
    "MDNS_SERVICE_ADD_TIMEOUT_MS": 2000, 
    "MDNS_TASK_AFFINITY": 0, 
    "MDNS_TASK_AFFINITY_CPU0": true, 
    "MDNS_TASK_AFFINITY_CPU1": false, 
    "MDNS_TASK_AFFINITY_NO_AFFINITY": false, 
    "MDNS_TASK_PRIORITY": 1, 
    "MDNS_TIMER_PERIOD_MS": 100, 
    "MQTT_CUSTOM_OUTBOX": false, 
    "MQTT_PROTOCOL_311": true, 
    "MQTT_TASK_CORE_SELECTION_ENABLED": false, 
    "MQTT_TRANSPORT_SSL": true, 
    "MQTT_TRANSPORT_WEBSOCKET": true, 
    "MQTT_TRANSPORT_WEBSOCKET_SECURE": true, 
    "MQTT_USE_CUSTOM_CONFIG": false, 
    "NEWLIB_NANO_FORMAT": false, 
    "NEWLIB_STDIN_LINE_ENDING_CR": true, 
    "NEWLIB_STDIN_LINE_ENDING_CRLF": false, 
    "NEWLIB_STDIN_LINE_ENDING_LF": false, 
    "NEWLIB_STDOUT_LINE_ENDING_CR": false, 
    "NEWLIB_STDOUT_LINE_ENDING_CRLF": true, 
    "NEWLIB_STDOUT_LINE_ENDING_LF": false, 
    "OPENSSL_ASSERT_DO_NOTHING": false, 
    "OPENSSL_ASSERT_EXIT": true, 
    "OPENSSL_DEBUG": false, 
    "OTA_ALLOW_HTTP": false, 
    "PARTITION_TABLE_CUSTOM": false, 
    "PARTITION_TABLE_CUSTOM_FILENAME": "partitions.csv", 
    "PARTITION_TABLE_FILENAME": "partitions_singleapp.csv", 
    "PARTITION_TABLE_MD5": true, 
    "PARTITION_TABLE_OFFSET": 32768, 
    "PARTITION_TABLE_SINGLE_APP": true, 
    "PARTITION_TABLE_TWO_OTA": false, 
    "PM_ENABLE": false, 
    "PTHREAD_DEFAULT_CORE_0": false, 
    "PTHREAD_DEFAULT_CORE_1": false, 
    "PTHREAD_DEFAULT_CORE_NO_AFFINITY": true, 
    "PTHREAD_STACK_MIN": 768, 
    "PTHREAD_TASK_CORE_DEFAULT": -1, 
    "PTHREAD_TASK_NAME_DEFAULT": "pthread", 
    "PTHREAD_TASK_PRIO_DEFAULT": 5, 
    "PTHREAD_TASK_STACK_SIZE_DEFAULT": 3072, 
    "RTCIO_SUPPORT_RTC_GPIO_DESC": false, 
    "SDK_TOOLCHAIN_SUPPORTS_TIME_WIDE_64_BITS": false, 
    "SDK_TOOLPREFIX": "xtensa-esp32-elf-", 
    "SECURE_BOOT": false, 
    "SECURE_FLASH_ENC_ENABLED": false, 
    "SECURE_SIGNED_APPS_NO_SECURE_BOOT": false, 
    "SEMIHOSTFS_HOST_PATH_MAX_LEN": 128, 
    "SEMIHOSTFS_MAX_MOUNT_POINTS": 1, 
    "SPIFFS_API_DBG": false, 
    "SPIFFS_CACHE": true, 
    "SPIFFS_CACHE_DBG": false, 
    "SPIFFS_CACHE_STATS": false, 
    "SPIFFS_CACHE_WR": true, 
    "SPIFFS_CHECK_DBG": false, 
    "SPIFFS_DBG": false, 
    "SPIFFS_FOLLOW_SYMLINKS": false, 
    "SPIFFS_GC_DBG": false, 
    "SPIFFS_GC_MAX_RUNS": 10, 
    "SPIFFS_GC_STATS": false, 
    "SPIFFS_MAX_PARTITIONS": 3, 
    "SPIFFS_META_LENGTH": 4, 
    "SPIFFS_OBJ_NAME_LEN": 32, 
    "SPIFFS_PAGE_CHECK": true, 
    "SPIFFS_PAGE_SIZE": 256, 
    "SPIFFS_TEST_VISUALISATION": false, 
    "SPIFFS_USE_MAGIC": true, 
    "SPIFFS_USE_MAGIC_LENGTH": true, 
    "SPIFFS_USE_MTIME": true, 
    "SPI_FLASH_DANGEROUS_WRITE_ABORTS": true, 
    "SPI_FLASH_DANGEROUS_WRITE_ALLOWED": false, 
    "SPI_FLASH_DANGEROUS_WRITE_FAILS": false, 
    "SPI_FLASH_ENABLE_COUNTERS": false, 
    "SPI_FLASH_ROM_DRIVER_PATCH": true, 
    "SPI_FLASH_SUPPORT_GD_CHIP": true, 
    "SPI_FLASH_SUPPORT_ISSI_CHIP": true, 
    "SPI_FLASH_USE_LEGACY_IMPL": false, 
    "SPI_FLASH_VERIFY_WRITE": false, 
    "SPI_MASTER_IN_IRAM": false, 
    "SPI_MASTER_ISR_IN_IRAM": true, 
    "SPI_SLAVE_IN_IRAM": false, 
    "SPI_SLAVE_ISR_IN_IRAM": true, 
    "UART_ISR_IN_IRAM": false, 
    "UNITY_ENABLE_BACKTRACE_ON_FAIL": false, 
    "UNITY_ENABLE_COLOR": false, 
    "UNITY_ENABLE_DOUBLE": true, 
    "UNITY_ENABLE_FIXTURE": false, 
    "UNITY_ENABLE_FLOAT": true, 
    "UNITY_ENABLE_IDF_TEST_RUNNER": true, 
    "USB_DESC_CUSTOM_PID": 22136, 
    "USB_DESC_CUSTOM_VID": 4660, 
    "VFS_SUPPORT_TERMIOS": true, 
    "VFS_SUPPRESS_SELECT_DEBUG_OUTPUT": true, 
    "WIFI_PROV_AUTOSTOP_TIMEOUT": 30, 
    "WIFI_PROV_SCAN_MAX_ENTRIES": 16, 
    "WL_SECTOR_SIZE": 4096, 
    "WL_SECTOR_SIZE_4096": true, 
    "WL_SECTOR_SIZE_512": false, 
    "WPA_DEBUG_PRINT": false, 
    "WPA_MBEDTLS_CRYPTO": true
	.file	"arc4.c"
	.text
.Ltext0:
.Letext0:
	.file 1 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/sys/lock.h"
	.file 2 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/sys/_types.h"
	.file 3 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/lib/gcc/xtensa-esp32-elf/8.2.0/include/stddef.h"
	.file 4 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/sys/reent.h"
	.file 5 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.4byte	0x90c
	.2byte	0x4
	.4byte	.Ldebug_abbrev0
	.byte	0x4
	.uleb128 0x1
	.4byte	.LASF121
	.byte	0xc
	.4byte	.LASF122
	.4byte	.LASF123
	.4byte	.Ldebug_line0
	.uleb128 0x2
	.byte	0x1
	.byte	0x6
	.4byte	.LASF0
	.uleb128 0x2
	.byte	0x1
	.byte	0x8
	.4byte	.LASF1
	.uleb128 0x2
	.byte	0x2
	.byte	0x5
	.4byte	.LASF2
	.uleb128 0x2
	.byte	0x2
	.byte	0x7
	.4byte	.LASF3
	.uleb128 0x3
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x2
	.byte	0x4
	.byte	0x7
	.4byte	.LASF4
	.uleb128 0x2
	.byte	0x8
	.byte	0x5
	.4byte	.LASF5
	.uleb128 0x2
	.byte	0x8
	.byte	0x7
	.4byte	.LASF6
	.uleb128 0x4
	.4byte	.LASF7
	.byte	0x1
	.byte	0xb
	.byte	0xd
	.4byte	0x39
	.uleb128 0x4
	.4byte	.LASF8
	.byte	0x1
	.byte	0xc
	.byte	0x11
	.4byte	0x55
	.uleb128 0x2
	.byte	0x4
	.byte	0x5
	.4byte	.LASF9
	.uleb128 0x4
	.4byte	.LASF10
	.byte	0x2
	.byte	0x2c
	.byte	0xe
	.4byte	0x6d
	.uleb128 0x4
	.4byte	.LASF11
	.byte	0x2
	.byte	0x72
	.byte	0xe
	.4byte	0x6d
	.uleb128 0x5
	.4byte	.LASF12
	.byte	0x3
	.2byte	0x165
	.byte	0x17
	.4byte	0x40
	.uleb128 0x6
	.byte	0x4
	.byte	0x2
	.byte	0xa6
	.byte	0x3
	.4byte	0xbb
	.uleb128 0x7
	.4byte	.LASF13
	.byte	0x2
	.byte	0xa8
	.byte	0xc
	.4byte	0x8c
	.uleb128 0x7
	.4byte	.LASF14
	.byte	0x2
	.byte	0xa9
	.byte	0x13
	.4byte	0xbb
	.byte	0
	.uleb128 0x8
	.4byte	0x24
	.4byte	0xcb
	.uleb128 0x9
	.4byte	0x40
	.byte	0x3
	.byte	0
	.uleb128 0xa
	.byte	0x8
	.byte	0x2
	.byte	0xa3
	.byte	0x9
	.4byte	0xef
	.uleb128 0xb
	.4byte	.LASF15
	.byte	0x2
	.byte	0xa5
	.byte	0x7
	.4byte	0x39
	.byte	0
	.uleb128 0xb
	.4byte	.LASF16
	.byte	0x2
	.byte	0xaa
	.byte	0x5
	.4byte	0x99
	.byte	0x4
	.byte	0
	.uleb128 0x4
	.4byte	.LASF17
	.byte	0x2
	.byte	0xab
	.byte	0x3
	.4byte	0xcb
	.uleb128 0x4
	.4byte	.LASF18
	.byte	0x2
	.byte	0xaf
	.byte	0x1b
	.4byte	0x61
	.uleb128 0xc
	.byte	0x4
	.uleb128 0x2
	.byte	0x4
	.byte	0x7
	.4byte	.LASF19
	.uleb128 0x4
	.4byte	.LASF20
	.byte	0x4
	.byte	0x16
	.byte	0x19
	.4byte	0x109
	.uleb128 0xd
	.4byte	.LASF25
	.byte	0x18
	.byte	0x4
	.byte	0x2f
	.byte	0x8
	.4byte	0x176
	.uleb128 0xb
	.4byte	.LASF21
	.byte	0x4
	.byte	0x31
	.byte	0x13
	.4byte	0x176
	.byte	0
	.uleb128 0xe
	.string	"_k"
	.byte	0x4
	.byte	0x32
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0xb
	.4byte	.LASF22
	.byte	0x4
	.byte	0x32
	.byte	0xb
	.4byte	0x39
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF23
	.byte	0x4
	.byte	0x32
	.byte	0x14
	.4byte	0x39
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF24
	.byte	0x4
	.byte	0x32
	.byte	0x1b
	.4byte	0x39
	.byte	0x10
	.uleb128 0xe
	.string	"_x"
	.byte	0x4
	.byte	0x33
	.byte	0xb
	.4byte	0x17c
	.byte	0x14
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x11c
	.uleb128 0x8
	.4byte	0x110
	.4byte	0x18c
	.uleb128 0x9
	.4byte	0x40
	.byte	0
	.byte	0
	.uleb128 0xd
	.4byte	.LASF26
	.byte	0x24
	.byte	0x4
	.byte	0x37
	.byte	0x8
	.4byte	0x20f
	.uleb128 0xb
	.4byte	.LASF27
	.byte	0x4
	.byte	0x39
	.byte	0x9
	.4byte	0x39
	.byte	0
	.uleb128 0xb
	.4byte	.LASF28
	.byte	0x4
	.byte	0x3a
	.byte	0x9
	.4byte	0x39
	.byte	0x4
	.uleb128 0xb
	.4byte	.LASF29
	.byte	0x4
	.byte	0x3b
	.byte	0x9
	.4byte	0x39
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF30
	.byte	0x4
	.byte	0x3c
	.byte	0x9
	.4byte	0x39
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF31
	.byte	0x4
	.byte	0x3d
	.byte	0x9
	.4byte	0x39
	.byte	0x10
	.uleb128 0xb
	.4byte	.LASF32
	.byte	0x4
	.byte	0x3e
	.byte	0x9
	.4byte	0x39
	.byte	0x14
	.uleb128 0xb
	.4byte	.LASF33
	.byte	0x4
	.byte	0x3f
	.byte	0x9
	.4byte	0x39
	.byte	0x18
	.uleb128 0xb
	.4byte	.LASF34
	.byte	0x4
	.byte	0x40
	.byte	0x9
	.4byte	0x39
	.byte	0x1c
	.uleb128 0xb
	.4byte	.LASF35
	.byte	0x4
	.byte	0x41
	.byte	0x9
	.4byte	0x39
	.byte	0x20
	.byte	0
	.uleb128 0x10
	.4byte	.LASF36
	.2byte	0x108
	.byte	0x4
	.byte	0x4a
	.byte	0x8
	.4byte	0x254
	.uleb128 0xb
	.4byte	.LASF37
	.byte	0x4
	.byte	0x4b
	.byte	0xa
	.4byte	0x254
	.byte	0
	.uleb128 0xb
	.4byte	.LASF38
	.byte	0x4
	.byte	0x4c
	.byte	0x9
	.4byte	0x254
	.byte	0x80
	.uleb128 0x11
	.4byte	.LASF39
	.byte	0x4
	.byte	0x4e
	.byte	0xa
	.4byte	0x110
	.2byte	0x100
	.uleb128 0x11
	.4byte	.LASF40
	.byte	0x4
	.byte	0x51
	.byte	0xa
	.4byte	0x110
	.2byte	0x104
	.byte	0
	.uleb128 0x8
	.4byte	0x107
	.4byte	0x264
	.uleb128 0x9
	.4byte	0x40
	.byte	0x1f
	.byte	0
	.uleb128 0xd
	.4byte	.LASF41
	.byte	0x8c
	.byte	0x4
	.byte	0x55
	.byte	0x8
	.4byte	0x2a6
	.uleb128 0xb
	.4byte	.LASF21
	.byte	0x4
	.byte	0x56
	.byte	0x12
	.4byte	0x2a6
	.byte	0
	.uleb128 0xb
	.4byte	.LASF42
	.byte	0x4
	.byte	0x57
	.byte	0x6
	.4byte	0x39
	.byte	0x4
	.uleb128 0xb
	.4byte	.LASF43
	.byte	0x4
	.byte	0x58
	.byte	0x9
	.4byte	0x2ac
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF44
	.byte	0x4
	.byte	0x59
	.byte	0x20
	.4byte	0x2c3
	.byte	0x88
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x264
	.uleb128 0x8
	.4byte	0x2bc
	.4byte	0x2bc
	.uleb128 0x9
	.4byte	0x40
	.byte	0x1f
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x2c2
	.uleb128 0x12
	.uleb128 0xf
	.byte	0x4
	.4byte	0x20f
	.uleb128 0xd
	.4byte	.LASF45
	.byte	0x8
	.byte	0x4
	.byte	0x75
	.byte	0x8
	.4byte	0x2f1
	.uleb128 0xb
	.4byte	.LASF46
	.byte	0x4
	.byte	0x76
	.byte	0x11
	.4byte	0x2f1
	.byte	0
	.uleb128 0xb
	.4byte	.LASF47
	.byte	0x4
	.byte	0x77
	.byte	0x6
	.4byte	0x39
	.byte	0x4
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x24
	.uleb128 0xd
	.4byte	.LASF48
	.byte	0x20
	.byte	0x4
	.byte	0x99
	.byte	0x8
	.4byte	0x36a
	.uleb128 0xe
	.string	"_p"
	.byte	0x4
	.byte	0x9a
	.byte	0x12
	.4byte	0x2f1
	.byte	0
	.uleb128 0xe
	.string	"_r"
	.byte	0x4
	.byte	0x9b
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0xe
	.string	"_w"
	.byte	0x4
	.byte	0x9c
	.byte	0x7
	.4byte	0x39
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF49
	.byte	0x4
	.byte	0x9d
	.byte	0x9
	.4byte	0x2b
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF50
	.byte	0x4
	.byte	0x9e
	.byte	0x9
	.4byte	0x2b
	.byte	0xe
	.uleb128 0xe
	.string	"_bf"
	.byte	0x4
	.byte	0x9f
	.byte	0x11
	.4byte	0x2c9
	.byte	0x10
	.uleb128 0xb
	.4byte	.LASF51
	.byte	0x4
	.byte	0xa0
	.byte	0x7
	.4byte	0x39
	.byte	0x18
	.uleb128 0xb
	.4byte	.LASF52
	.byte	0x4
	.byte	0xa2
	.byte	0x12
	.4byte	0x4ce
	.byte	0x1c
	.byte	0
	.uleb128 0x13
	.4byte	0x2f7
	.uleb128 0x14
	.4byte	.LASF53
	.byte	0xf0
	.byte	0x4
	.2byte	0x174
	.byte	0x8
	.4byte	0x4ce
	.uleb128 0x15
	.4byte	.LASF54
	.byte	0x4
	.2byte	0x178
	.byte	0x7
	.4byte	0x39
	.byte	0
	.uleb128 0x15
	.4byte	.LASF55
	.byte	0x4
	.2byte	0x17d
	.byte	0xb
	.4byte	0x721
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF56
	.byte	0x4
	.2byte	0x17d
	.byte	0x14
	.4byte	0x721
	.byte	0x8
	.uleb128 0x15
	.4byte	.LASF57
	.byte	0x4
	.2byte	0x17d
	.byte	0x1e
	.4byte	0x721
	.byte	0xc
	.uleb128 0x15
	.4byte	.LASF58
	.byte	0x4
	.2byte	0x17f
	.byte	0x8
	.4byte	0x39
	.byte	0x10
	.uleb128 0x15
	.4byte	.LASF59
	.byte	0x4
	.2byte	0x181
	.byte	0x9
	.4byte	0x635
	.byte	0x14
	.uleb128 0x15
	.4byte	.LASF60
	.byte	0x4
	.2byte	0x183
	.byte	0x7
	.4byte	0x39
	.byte	0x18
	.uleb128 0x15
	.4byte	.LASF61
	.byte	0x4
	.2byte	0x185
	.byte	0x7
	.4byte	0x39
	.byte	0x1c
	.uleb128 0x15
	.4byte	.LASF62
	.byte	0x4
	.2byte	0x186
	.byte	0x16
	.4byte	0x889
	.byte	0x20
	.uleb128 0x16
	.string	"_mp"
	.byte	0x4
	.2byte	0x188
	.byte	0x12
	.4byte	0x88f
	.byte	0x24
	.uleb128 0x15
	.4byte	.LASF63
	.byte	0x4
	.2byte	0x18a
	.byte	0xa
	.4byte	0x8a0
	.byte	0x28
	.uleb128 0x15
	.4byte	.LASF64
	.byte	0x4
	.2byte	0x18c
	.byte	0x7
	.4byte	0x39
	.byte	0x2c
	.uleb128 0x15
	.4byte	.LASF65
	.byte	0x4
	.2byte	0x18f
	.byte	0x7
	.4byte	0x39
	.byte	0x30
	.uleb128 0x15
	.4byte	.LASF66
	.byte	0x4
	.2byte	0x190
	.byte	0x9
	.4byte	0x635
	.byte	0x34
	.uleb128 0x15
	.4byte	.LASF67
	.byte	0x4
	.2byte	0x192
	.byte	0x13
	.4byte	0x8a6
	.byte	0x38
	.uleb128 0x15
	.4byte	.LASF68
	.byte	0x4
	.2byte	0x193
	.byte	0x10
	.4byte	0x8ac
	.byte	0x3c
	.uleb128 0x15
	.4byte	.LASF69
	.byte	0x4
	.2byte	0x194
	.byte	0x9
	.4byte	0x635
	.byte	0x40
	.uleb128 0x15
	.4byte	.LASF70
	.byte	0x4
	.2byte	0x197
	.byte	0xb
	.4byte	0x8bd
	.byte	0x44
	.uleb128 0x15
	.4byte	.LASF41
	.byte	0x4
	.2byte	0x19b
	.byte	0x13
	.4byte	0x2a6
	.byte	0x48
	.uleb128 0x15
	.4byte	.LASF71
	.byte	0x4
	.2byte	0x19c
	.byte	0x12
	.4byte	0x264
	.byte	0x4c
	.uleb128 0x15
	.4byte	.LASF72
	.byte	0x4
	.2byte	0x19f
	.byte	0x10
	.4byte	0x6e2
	.byte	0xd8
	.uleb128 0x15
	.4byte	.LASF73
	.byte	0x4
	.2byte	0x1a0
	.byte	0xb
	.4byte	0x721
	.byte	0xe4
	.uleb128 0x15
	.4byte	.LASF74
	.byte	0x4
	.2byte	0x1a1
	.byte	0x17
	.4byte	0x8c9
	.byte	0xe8
	.uleb128 0x15
	.4byte	.LASF75
	.byte	0x4
	.2byte	0x1a2
	.byte	0x9
	.4byte	0x635
	.byte	0xec
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x36f
	.uleb128 0xd
	.4byte	.LASF76
	.byte	0x68
	.byte	0x4
	.byte	0xb5
	.byte	0x8
	.4byte	0x617
	.uleb128 0xe
	.string	"_p"
	.byte	0x4
	.byte	0xb6
	.byte	0x12
	.4byte	0x2f1
	.byte	0
	.uleb128 0xe
	.string	"_r"
	.byte	0x4
	.byte	0xb7
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0xe
	.string	"_w"
	.byte	0x4
	.byte	0xb8
	.byte	0x7
	.4byte	0x39
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF49
	.byte	0x4
	.byte	0xb9
	.byte	0x9
	.4byte	0x2b
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF50
	.byte	0x4
	.byte	0xba
	.byte	0x9
	.4byte	0x2b
	.byte	0xe
	.uleb128 0xe
	.string	"_bf"
	.byte	0x4
	.byte	0xbb
	.byte	0x11
	.4byte	0x2c9
	.byte	0x10
	.uleb128 0xb
	.4byte	.LASF51
	.byte	0x4
	.byte	0xbc
	.byte	0x7
	.4byte	0x39
	.byte	0x18
	.uleb128 0xb
	.4byte	.LASF52
	.byte	0x4
	.byte	0xbf
	.byte	0x12
	.4byte	0x4ce
	.byte	0x1c
	.uleb128 0xb
	.4byte	.LASF77
	.byte	0x4
	.byte	0xc3
	.byte	0xa
	.4byte	0x107
	.byte	0x20
	.uleb128 0xb
	.4byte	.LASF78
	.byte	0x4
	.byte	0xc5
	.byte	0x1d
	.4byte	0x647
	.byte	0x24
	.uleb128 0xb
	.4byte	.LASF79
	.byte	0x4
	.byte	0xc7
	.byte	0x1d
	.4byte	0x671
	.byte	0x28
	.uleb128 0xb
	.4byte	.LASF80
	.byte	0x4
	.byte	0xca
	.byte	0xd
	.4byte	0x695
	.byte	0x2c
	.uleb128 0xb
	.4byte	.LASF81
	.byte	0x4
	.byte	0xcb
	.byte	0x9
	.4byte	0x6af
	.byte	0x30
	.uleb128 0xe
	.string	"_ub"
	.byte	0x4
	.byte	0xce
	.byte	0x11
	.4byte	0x2c9
	.byte	0x34
	.uleb128 0xe
	.string	"_up"
	.byte	0x4
	.byte	0xcf
	.byte	0x12
	.4byte	0x2f1
	.byte	0x3c
	.uleb128 0xe
	.string	"_ur"
	.byte	0x4
	.byte	0xd0
	.byte	0x7
	.4byte	0x39
	.byte	0x40
	.uleb128 0xb
	.4byte	.LASF82
	.byte	0x4
	.byte	0xd3
	.byte	0x11
	.4byte	0x6b5
	.byte	0x44
	.uleb128 0xb
	.4byte	.LASF83
	.byte	0x4
	.byte	0xd4
	.byte	0x11
	.4byte	0x6c5
	.byte	0x47
	.uleb128 0xe
	.string	"_lb"
	.byte	0x4
	.byte	0xd7
	.byte	0x11
	.4byte	0x2c9
	.byte	0x48
	.uleb128 0xb
	.4byte	.LASF84
	.byte	0x4
	.byte	0xda
	.byte	0x7
	.4byte	0x39
	.byte	0x50
	.uleb128 0xb
	.4byte	.LASF85
	.byte	0x4
	.byte	0xdb
	.byte	0xa
	.4byte	0x74
	.byte	0x54
	.uleb128 0xb
	.4byte	.LASF86
	.byte	0x4
	.byte	0xe2
	.byte	0xc
	.4byte	0xfb
	.byte	0x58
	.uleb128 0xb
	.4byte	.LASF87
	.byte	0x4
	.byte	0xe4
	.byte	0xe
	.4byte	0xef
	.byte	0x5c
	.uleb128 0xb
	.4byte	.LASF88
	.byte	0x4
	.byte	0xe5
	.byte	0x9
	.4byte	0x39
	.byte	0x64
	.byte	0
	.uleb128 0x17
	.4byte	0x39
	.4byte	0x635
	.uleb128 0x18
	.4byte	0x4ce
	.uleb128 0x18
	.4byte	0x107
	.uleb128 0x18
	.4byte	0x635
	.uleb128 0x18
	.4byte	0x39
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x63b
	.uleb128 0x2
	.byte	0x1
	.byte	0x8
	.4byte	.LASF89
	.uleb128 0x13
	.4byte	0x63b
	.uleb128 0xf
	.byte	0x4
	.4byte	0x617
	.uleb128 0x17
	.4byte	0x39
	.4byte	0x66b
	.uleb128 0x18
	.4byte	0x4ce
	.uleb128 0x18
	.4byte	0x107
	.uleb128 0x18
	.4byte	0x66b
	.uleb128 0x18
	.4byte	0x39
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x642
	.uleb128 0xf
	.byte	0x4
	.4byte	0x64d
	.uleb128 0x17
	.4byte	0x80
	.4byte	0x695
	.uleb128 0x18
	.4byte	0x4ce
	.uleb128 0x18
	.4byte	0x107
	.uleb128 0x18
	.4byte	0x80
	.uleb128 0x18
	.4byte	0x39
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x677
	.uleb128 0x17
	.4byte	0x39
	.4byte	0x6af
	.uleb128 0x18
	.4byte	0x4ce
	.uleb128 0x18
	.4byte	0x107
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x69b
	.uleb128 0x8
	.4byte	0x24
	.4byte	0x6c5
	.uleb128 0x9
	.4byte	0x40
	.byte	0x2
	.byte	0
	.uleb128 0x8
	.4byte	0x24
	.4byte	0x6d5
	.uleb128 0x9
	.4byte	0x40
	.byte	0
	.byte	0
	.uleb128 0x5
	.4byte	.LASF90
	.byte	0x4
	.2byte	0x11f
	.byte	0x1a
	.4byte	0x4d4
	.uleb128 0x14
	.4byte	.LASF91
	.byte	0xc
	.byte	0x4
	.2byte	0x123
	.byte	0x8
	.4byte	0x71b
	.uleb128 0x15
	.4byte	.LASF21
	.byte	0x4
	.2byte	0x125
	.byte	0x11
	.4byte	0x71b
	.byte	0
	.uleb128 0x15
	.4byte	.LASF92
	.byte	0x4
	.2byte	0x126
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF93
	.byte	0x4
	.2byte	0x127
	.byte	0xb
	.4byte	0x721
	.byte	0x8
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x6e2
	.uleb128 0xf
	.byte	0x4
	.4byte	0x6d5
	.uleb128 0x14
	.4byte	.LASF94
	.byte	0x18
	.byte	0x4
	.2byte	0x13f
	.byte	0x8
	.4byte	0x76e
	.uleb128 0x15
	.4byte	.LASF95
	.byte	0x4
	.2byte	0x140
	.byte	0x12
	.4byte	0x76e
	.byte	0
	.uleb128 0x15
	.4byte	.LASF96
	.byte	0x4
	.2byte	0x141
	.byte	0x12
	.4byte	0x76e
	.byte	0x6
	.uleb128 0x15
	.4byte	.LASF97
	.byte	0x4
	.2byte	0x142
	.byte	0x12
	.4byte	0x32
	.byte	0xc
	.uleb128 0x15
	.4byte	.LASF98
	.byte	0x4
	.2byte	0x145
	.byte	0x24
	.4byte	0x4e
	.byte	0x10
	.byte	0
	.uleb128 0x8
	.4byte	0x32
	.4byte	0x77e
	.uleb128 0x9
	.4byte	0x40
	.byte	0x2
	.byte	0
	.uleb128 0x14
	.4byte	.LASF99
	.byte	0x10
	.byte	0x4
	.2byte	0x158
	.byte	0x8
	.4byte	0x7c5
	.uleb128 0x15
	.4byte	.LASF100
	.byte	0x4
	.2byte	0x15b
	.byte	0x13
	.4byte	0x176
	.byte	0
	.uleb128 0x15
	.4byte	.LASF101
	.byte	0x4
	.2byte	0x15c
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF102
	.byte	0x4
	.2byte	0x15d
	.byte	0x13
	.4byte	0x176
	.byte	0x8
	.uleb128 0x15
	.4byte	.LASF103
	.byte	0x4
	.2byte	0x15e
	.byte	0x14
	.4byte	0x7c5
	.byte	0xc
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x176
	.uleb128 0x14
	.4byte	.LASF104
	.byte	0x50
	.byte	0x4
	.2byte	0x162
	.byte	0x8
	.4byte	0x874
	.uleb128 0x15
	.4byte	.LASF105
	.byte	0x4
	.2byte	0x165
	.byte	0x9
	.4byte	0x635
	.byte	0
	.uleb128 0x15
	.4byte	.LASF106
	.byte	0x4
	.2byte	0x166
	.byte	0xe
	.4byte	0xef
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF107
	.byte	0x4
	.2byte	0x167
	.byte	0xe
	.4byte	0xef
	.byte	0xc
	.uleb128 0x15
	.4byte	.LASF108
	.byte	0x4
	.2byte	0x168
	.byte	0xe
	.4byte	0xef
	.byte	0x14
	.uleb128 0x15
	.4byte	.LASF109
	.byte	0x4
	.2byte	0x169
	.byte	0x8
	.4byte	0x874
	.byte	0x1c
	.uleb128 0x15
	.4byte	.LASF110
	.byte	0x4
	.2byte	0x16a
	.byte	0x7
	.4byte	0x39
	.byte	0x24
	.uleb128 0x15
	.4byte	.LASF111
	.byte	0x4
	.2byte	0x16b
	.byte	0xe
	.4byte	0xef
	.byte	0x28
	.uleb128 0x15
	.4byte	.LASF112
	.byte	0x4
	.2byte	0x16c
	.byte	0xe
	.4byte	0xef
	.byte	0x30
	.uleb128 0x15
	.4byte	.LASF113
	.byte	0x4
	.2byte	0x16d
	.byte	0xe
	.4byte	0xef
	.byte	0x38
	.uleb128 0x15
	.4byte	.LASF114
	.byte	0x4
	.2byte	0x16e
	.byte	0xe
	.4byte	0xef
	.byte	0x40
	.uleb128 0x15
	.4byte	.LASF115
	.byte	0x4
	.2byte	0x16f
	.byte	0xe
	.4byte	0xef
	.byte	0x48
	.byte	0
	.uleb128 0x8
	.4byte	0x63b
	.4byte	0x884
	.uleb128 0x9
	.4byte	0x40
	.byte	0x7
	.byte	0
	.uleb128 0x19
	.4byte	.LASF124
	.uleb128 0xf
	.byte	0x4
	.4byte	0x884
	.uleb128 0xf
	.byte	0x4
	.4byte	0x77e
	.uleb128 0x1a
	.4byte	0x8a0
	.uleb128 0x18
	.4byte	0x4ce
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x895
	.uleb128 0xf
	.byte	0x4
	.4byte	0x727
	.uleb128 0xf
	.byte	0x4
	.4byte	0x18c
	.uleb128 0x1a
	.4byte	0x8bd
	.uleb128 0x18
	.4byte	0x39
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x8c3
	.uleb128 0xf
	.byte	0x4
	.4byte	0x8b2
	.uleb128 0xf
	.byte	0x4
	.4byte	0x7cb
	.uleb128 0x1b
	.4byte	.LASF116
	.byte	0x4
	.2byte	0x1a5
	.byte	0x22
	.4byte	0x36a
	.uleb128 0x1b
	.4byte	.LASF117
	.byte	0x4
	.2byte	0x1a6
	.byte	0x22
	.4byte	0x36a
	.uleb128 0x1b
	.4byte	.LASF118
	.byte	0x4
	.2byte	0x1a7
	.byte	0x22
	.4byte	0x36a
	.uleb128 0x1b
	.4byte	.LASF119
	.byte	0x4
	.2byte	0x30a
	.byte	0x18
	.4byte	0x4ce
	.uleb128 0x1c
	.4byte	.LASF120
	.byte	0x5
	.byte	0x67
	.byte	0xe
	.4byte	0x635
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1b
	.uleb128 0xe
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x17
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x13
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x15
	.byte	0
	.uleb128 0x27
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x13
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"",@progbits
	.4byte	0x14
	.2byte	0x2
	.4byte	.Ldebug_info0
	.byte	0x4
	.byte	0
	.2byte	0
	.2byte	0
	.4byte	0
	.4byte	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF38:
	.string	"_dso_handle"
.LASF11:
	.string	"_fpos_t"
.LASF47:
	.string	"_size"
.LASF94:
	.string	"_rand48"
.LASF59:
	.string	"_emergency"
.LASF52:
	.string	"_data"
.LASF114:
	.string	"_wcrtomb_state"
.LASF115:
	.string	"_wcsrtombs_state"
.LASF6:
	.string	"long long unsigned int"
.LASF51:
	.string	"_lbfsize"
.LASF124:
	.string	"__locale_t"
.LASF112:
	.string	"_mbrtowc_state"
.LASF107:
	.string	"_wctomb_state"
.LASF27:
	.string	"__tm_sec"
.LASF5:
	.string	"long long int"
.LASF0:
	.string	"signed char"
.LASF82:
	.string	"_ubuf"
.LASF46:
	.string	"_base"
.LASF29:
	.string	"__tm_hour"
.LASF73:
	.string	"__sf"
.LASF36:
	.string	"_on_exit_args"
.LASF77:
	.string	"_cookie"
.LASF72:
	.string	"__sglue"
.LASF9:
	.string	"long int"
.LASF99:
	.string	"_mprec"
.LASF49:
	.string	"_flags"
.LASF40:
	.string	"_is_cxa"
.LASF55:
	.string	"_stdin"
.LASF84:
	.string	"_blksize"
.LASF7:
	.string	"_lock_t"
.LASF66:
	.string	"_cvtbuf"
.LASF85:
	.string	"_offset"
.LASF113:
	.string	"_mbsrtowcs_state"
.LASF111:
	.string	"_mbrlen_state"
.LASF37:
	.string	"_fnargs"
.LASF43:
	.string	"_fns"
.LASF23:
	.string	"_sign"
.LASF18:
	.string	"_flock_t"
.LASF57:
	.string	"_stderr"
.LASF25:
	.string	"_Bigint"
.LASF64:
	.string	"_gamma_signgam"
.LASF78:
	.string	"_read"
.LASF101:
	.string	"_result_k"
.LASF26:
	.string	"__tm"
.LASF44:
	.string	"_on_exit_args_ptr"
.LASF4:
	.string	"unsigned int"
.LASF14:
	.string	"__wchb"
.LASF56:
	.string	"_stdout"
.LASF65:
	.string	"_cvtlen"
.LASF19:
	.string	"long unsigned int"
.LASF48:
	.string	"__sFILE_fake"
.LASF92:
	.string	"_niobs"
.LASF3:
	.string	"short unsigned int"
.LASF71:
	.string	"_atexit0"
.LASF75:
	.string	"_signal_buf"
.LASF69:
	.string	"_asctime_buf"
.LASF100:
	.string	"_result"
.LASF13:
	.string	"__wch"
.LASF12:
	.string	"wint_t"
.LASF86:
	.string	"_lock"
.LASF88:
	.string	"_flags2"
.LASF122:
	.string	"/home/inverse/esp/esp-idf/components/mbedtls/mbedtls/library/arc4.c"
.LASF79:
	.string	"_write"
.LASF32:
	.string	"__tm_year"
.LASF74:
	.string	"_misc"
.LASF116:
	.string	"__sf_fake_stdin"
.LASF117:
	.string	"__sf_fake_stdout"
.LASF31:
	.string	"__tm_mon"
.LASF41:
	.string	"_atexit"
.LASF120:
	.string	"suboptarg"
.LASF60:
	.string	"__sdidinit"
.LASF10:
	.string	"_off_t"
.LASF103:
	.string	"_freelist"
.LASF8:
	.string	"_LOCK_RECURSIVE_T"
.LASF121:
	.string	"GNU C99 8.2.0 -mlongcalls -ggdb -Og -std=gnu99 -ffunction-sections -fdata-sections -fstrict-volatile-bitfields"
.LASF1:
	.string	"unsigned char"
.LASF93:
	.string	"_iobs"
.LASF2:
	.string	"short int"
.LASF34:
	.string	"__tm_yday"
.LASF45:
	.string	"__sbuf"
.LASF90:
	.string	"__FILE"
.LASF17:
	.string	"_mbstate_t"
.LASF76:
	.string	"__sFILE"
.LASF87:
	.string	"_mbstate"
.LASF98:
	.string	"_rand_next"
.LASF106:
	.string	"_mblen_state"
.LASF58:
	.string	"_inc"
.LASF42:
	.string	"_ind"
.LASF62:
	.string	"_locale"
.LASF63:
	.string	"__cleanup"
.LASF61:
	.string	"_unspecified_locale_info"
.LASF22:
	.string	"_maxwds"
.LASF53:
	.string	"_reent"
.LASF95:
	.string	"_seed"
.LASF15:
	.string	"__count"
.LASF16:
	.string	"__value"
.LASF80:
	.string	"_seek"
.LASF123:
	.string	"/home/inverse/esp/hello_world/build"
.LASF54:
	.string	"_errno"
.LASF89:
	.string	"char"
.LASF28:
	.string	"__tm_min"
.LASF96:
	.string	"_mult"
.LASF21:
	.string	"_next"
.LASF105:
	.string	"_strtok_last"
.LASF39:
	.string	"_fntypes"
.LASF104:
	.string	"_misc_reent"
.LASF97:
	.string	"_add"
.LASF20:
	.string	"__ULong"
.LASF110:
	.string	"_getdate_err"
.LASF119:
	.string	"_global_impure_ptr"
.LASF50:
	.string	"_file"
.LASF24:
	.string	"_wds"
.LASF33:
	.string	"__tm_wday"
.LASF91:
	.string	"_glue"
.LASF109:
	.string	"_l64a_buf"
.LASF70:
	.string	"_sig_func"
.LASF83:
	.string	"_nbuf"
.LASF35:
	.string	"__tm_isdst"
.LASF68:
	.string	"_localtime_buf"
.LASF81:
	.string	"_close"
.LASF118:
	.string	"__sf_fake_stderr"
.LASF67:
	.string	"_r48"
.LASF108:
	.string	"_mbtowc_state"
.LASF102:
	.string	"_p5s"
.LASF30:
	.string	"__tm_mday"
	.ident	"GCC: (crosstool-NG esp-2019r2) 8.2.0"
	.file	"entropy_poll.c"
	.text
.Ltext0:
.Letext0:
	.file 1 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/sys/lock.h"
	.file 2 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/sys/_types.h"
	.file 3 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/lib/gcc/xtensa-esp32-elf/8.2.0/include/stddef.h"
	.file 4 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/sys/reent.h"
	.file 5 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.4byte	0x90c
	.2byte	0x4
	.4byte	.Ldebug_abbrev0
	.byte	0x4
	.uleb128 0x1
	.4byte	.LASF121
	.byte	0xc
	.4byte	.LASF122
	.4byte	.LASF123
	.4byte	.Ldebug_line0
	.uleb128 0x2
	.byte	0x1
	.byte	0x6
	.4byte	.LASF0
	.uleb128 0x2
	.byte	0x1
	.byte	0x8
	.4byte	.LASF1
	.uleb128 0x2
	.byte	0x2
	.byte	0x5
	.4byte	.LASF2
	.uleb128 0x2
	.byte	0x2
	.byte	0x7
	.4byte	.LASF3
	.uleb128 0x3
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x2
	.byte	0x4
	.byte	0x7
	.4byte	.LASF4
	.uleb128 0x2
	.byte	0x8
	.byte	0x5
	.4byte	.LASF5
	.uleb128 0x2
	.byte	0x8
	.byte	0x7
	.4byte	.LASF6
	.uleb128 0x4
	.4byte	.LASF7
	.byte	0x1
	.byte	0xb
	.byte	0xd
	.4byte	0x39
	.uleb128 0x4
	.4byte	.LASF8
	.byte	0x1
	.byte	0xc
	.byte	0x11
	.4byte	0x55
	.uleb128 0x2
	.byte	0x4
	.byte	0x5
	.4byte	.LASF9
	.uleb128 0x4
	.4byte	.LASF10
	.byte	0x2
	.byte	0x2c
	.byte	0xe
	.4byte	0x6d
	.uleb128 0x4
	.4byte	.LASF11
	.byte	0x2
	.byte	0x72
	.byte	0xe
	.4byte	0x6d
	.uleb128 0x5
	.4byte	.LASF12
	.byte	0x3
	.2byte	0x165
	.byte	0x17
	.4byte	0x40
	.uleb128 0x6
	.byte	0x4
	.byte	0x2
	.byte	0xa6
	.byte	0x3
	.4byte	0xbb
	.uleb128 0x7
	.4byte	.LASF13
	.byte	0x2
	.byte	0xa8
	.byte	0xc
	.4byte	0x8c
	.uleb128 0x7
	.4byte	.LASF14
	.byte	0x2
	.byte	0xa9
	.byte	0x13
	.4byte	0xbb
	.byte	0
	.uleb128 0x8
	.4byte	0x24
	.4byte	0xcb
	.uleb128 0x9
	.4byte	0x40
	.byte	0x3
	.byte	0
	.uleb128 0xa
	.byte	0x8
	.byte	0x2
	.byte	0xa3
	.byte	0x9
	.4byte	0xef
	.uleb128 0xb
	.4byte	.LASF15
	.byte	0x2
	.byte	0xa5
	.byte	0x7
	.4byte	0x39
	.byte	0
	.uleb128 0xb
	.4byte	.LASF16
	.byte	0x2
	.byte	0xaa
	.byte	0x5
	.4byte	0x99
	.byte	0x4
	.byte	0
	.uleb128 0x4
	.4byte	.LASF17
	.byte	0x2
	.byte	0xab
	.byte	0x3
	.4byte	0xcb
	.uleb128 0x4
	.4byte	.LASF18
	.byte	0x2
	.byte	0xaf
	.byte	0x1b
	.4byte	0x61
	.uleb128 0xc
	.byte	0x4
	.uleb128 0x2
	.byte	0x4
	.byte	0x7
	.4byte	.LASF19
	.uleb128 0x4
	.4byte	.LASF20
	.byte	0x4
	.byte	0x16
	.byte	0x19
	.4byte	0x109
	.uleb128 0xd
	.4byte	.LASF25
	.byte	0x18
	.byte	0x4
	.byte	0x2f
	.byte	0x8
	.4byte	0x176
	.uleb128 0xb
	.4byte	.LASF21
	.byte	0x4
	.byte	0x31
	.byte	0x13
	.4byte	0x176
	.byte	0
	.uleb128 0xe
	.string	"_k"
	.byte	0x4
	.byte	0x32
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0xb
	.4byte	.LASF22
	.byte	0x4
	.byte	0x32
	.byte	0xb
	.4byte	0x39
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF23
	.byte	0x4
	.byte	0x32
	.byte	0x14
	.4byte	0x39
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF24
	.byte	0x4
	.byte	0x32
	.byte	0x1b
	.4byte	0x39
	.byte	0x10
	.uleb128 0xe
	.string	"_x"
	.byte	0x4
	.byte	0x33
	.byte	0xb
	.4byte	0x17c
	.byte	0x14
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x11c
	.uleb128 0x8
	.4byte	0x110
	.4byte	0x18c
	.uleb128 0x9
	.4byte	0x40
	.byte	0
	.byte	0
	.uleb128 0xd
	.4byte	.LASF26
	.byte	0x24
	.byte	0x4
	.byte	0x37
	.byte	0x8
	.4byte	0x20f
	.uleb128 0xb
	.4byte	.LASF27
	.byte	0x4
	.byte	0x39
	.byte	0x9
	.4byte	0x39
	.byte	0
	.uleb128 0xb
	.4byte	.LASF28
	.byte	0x4
	.byte	0x3a
	.byte	0x9
	.4byte	0x39
	.byte	0x4
	.uleb128 0xb
	.4byte	.LASF29
	.byte	0x4
	.byte	0x3b
	.byte	0x9
	.4byte	0x39
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF30
	.byte	0x4
	.byte	0x3c
	.byte	0x9
	.4byte	0x39
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF31
	.byte	0x4
	.byte	0x3d
	.byte	0x9
	.4byte	0x39
	.byte	0x10
	.uleb128 0xb
	.4byte	.LASF32
	.byte	0x4
	.byte	0x3e
	.byte	0x9
	.4byte	0x39
	.byte	0x14
	.uleb128 0xb
	.4byte	.LASF33
	.byte	0x4
	.byte	0x3f
	.byte	0x9
	.4byte	0x39
	.byte	0x18
	.uleb128 0xb
	.4byte	.LASF34
	.byte	0x4
	.byte	0x40
	.byte	0x9
	.4byte	0x39
	.byte	0x1c
	.uleb128 0xb
	.4byte	.LASF35
	.byte	0x4
	.byte	0x41
	.byte	0x9
	.4byte	0x39
	.byte	0x20
	.byte	0
	.uleb128 0x10
	.4byte	.LASF36
	.2byte	0x108
	.byte	0x4
	.byte	0x4a
	.byte	0x8
	.4byte	0x254
	.uleb128 0xb
	.4byte	.LASF37
	.byte	0x4
	.byte	0x4b
	.byte	0xa
	.4byte	0x254
	.byte	0
	.uleb128 0xb
	.4byte	.LASF38
	.byte	0x4
	.byte	0x4c
	.byte	0x9
	.4byte	0x254
	.byte	0x80
	.uleb128 0x11
	.4byte	.LASF39
	.byte	0x4
	.byte	0x4e
	.byte	0xa
	.4byte	0x110
	.2byte	0x100
	.uleb128 0x11
	.4byte	.LASF40
	.byte	0x4
	.byte	0x51
	.byte	0xa
	.4byte	0x110
	.2byte	0x104
	.byte	0
	.uleb128 0x8
	.4byte	0x107
	.4byte	0x264
	.uleb128 0x9
	.4byte	0x40
	.byte	0x1f
	.byte	0
	.uleb128 0xd
	.4byte	.LASF41
	.byte	0x8c
	.byte	0x4
	.byte	0x55
	.byte	0x8
	.4byte	0x2a6
	.uleb128 0xb
	.4byte	.LASF21
	.byte	0x4
	.byte	0x56
	.byte	0x12
	.4byte	0x2a6
	.byte	0
	.uleb128 0xb
	.4byte	.LASF42
	.byte	0x4
	.byte	0x57
	.byte	0x6
	.4byte	0x39
	.byte	0x4
	.uleb128 0xb
	.4byte	.LASF43
	.byte	0x4
	.byte	0x58
	.byte	0x9
	.4byte	0x2ac
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF44
	.byte	0x4
	.byte	0x59
	.byte	0x20
	.4byte	0x2c3
	.byte	0x88
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x264
	.uleb128 0x8
	.4byte	0x2bc
	.4byte	0x2bc
	.uleb128 0x9
	.4byte	0x40
	.byte	0x1f
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x2c2
	.uleb128 0x12
	.uleb128 0xf
	.byte	0x4
	.4byte	0x20f
	.uleb128 0xd
	.4byte	.LASF45
	.byte	0x8
	.byte	0x4
	.byte	0x75
	.byte	0x8
	.4byte	0x2f1
	.uleb128 0xb
	.4byte	.LASF46
	.byte	0x4
	.byte	0x76
	.byte	0x11
	.4byte	0x2f1
	.byte	0
	.uleb128 0xb
	.4byte	.LASF47
	.byte	0x4
	.byte	0x77
	.byte	0x6
	.4byte	0x39
	.byte	0x4
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x24
	.uleb128 0xd
	.4byte	.LASF48
	.byte	0x20
	.byte	0x4
	.byte	0x99
	.byte	0x8
	.4byte	0x36a
	.uleb128 0xe
	.string	"_p"
	.byte	0x4
	.byte	0x9a
	.byte	0x12
	.4byte	0x2f1
	.byte	0
	.uleb128 0xe
	.string	"_r"
	.byte	0x4
	.byte	0x9b
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0xe
	.string	"_w"
	.byte	0x4
	.byte	0x9c
	.byte	0x7
	.4byte	0x39
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF49
	.byte	0x4
	.byte	0x9d
	.byte	0x9
	.4byte	0x2b
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF50
	.byte	0x4
	.byte	0x9e
	.byte	0x9
	.4byte	0x2b
	.byte	0xe
	.uleb128 0xe
	.string	"_bf"
	.byte	0x4
	.byte	0x9f
	.byte	0x11
	.4byte	0x2c9
	.byte	0x10
	.uleb128 0xb
	.4byte	.LASF51
	.byte	0x4
	.byte	0xa0
	.byte	0x7
	.4byte	0x39
	.byte	0x18
	.uleb128 0xb
	.4byte	.LASF52
	.byte	0x4
	.byte	0xa2
	.byte	0x12
	.4byte	0x4ce
	.byte	0x1c
	.byte	0
	.uleb128 0x13
	.4byte	0x2f7
	.uleb128 0x14
	.4byte	.LASF53
	.byte	0xf0
	.byte	0x4
	.2byte	0x174
	.byte	0x8
	.4byte	0x4ce
	.uleb128 0x15
	.4byte	.LASF54
	.byte	0x4
	.2byte	0x178
	.byte	0x7
	.4byte	0x39
	.byte	0
	.uleb128 0x15
	.4byte	.LASF55
	.byte	0x4
	.2byte	0x17d
	.byte	0xb
	.4byte	0x721
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF56
	.byte	0x4
	.2byte	0x17d
	.byte	0x14
	.4byte	0x721
	.byte	0x8
	.uleb128 0x15
	.4byte	.LASF57
	.byte	0x4
	.2byte	0x17d
	.byte	0x1e
	.4byte	0x721
	.byte	0xc
	.uleb128 0x15
	.4byte	.LASF58
	.byte	0x4
	.2byte	0x17f
	.byte	0x8
	.4byte	0x39
	.byte	0x10
	.uleb128 0x15
	.4byte	.LASF59
	.byte	0x4
	.2byte	0x181
	.byte	0x9
	.4byte	0x635
	.byte	0x14
	.uleb128 0x15
	.4byte	.LASF60
	.byte	0x4
	.2byte	0x183
	.byte	0x7
	.4byte	0x39
	.byte	0x18
	.uleb128 0x15
	.4byte	.LASF61
	.byte	0x4
	.2byte	0x185
	.byte	0x7
	.4byte	0x39
	.byte	0x1c
	.uleb128 0x15
	.4byte	.LASF62
	.byte	0x4
	.2byte	0x186
	.byte	0x16
	.4byte	0x889
	.byte	0x20
	.uleb128 0x16
	.string	"_mp"
	.byte	0x4
	.2byte	0x188
	.byte	0x12
	.4byte	0x88f
	.byte	0x24
	.uleb128 0x15
	.4byte	.LASF63
	.byte	0x4
	.2byte	0x18a
	.byte	0xa
	.4byte	0x8a0
	.byte	0x28
	.uleb128 0x15
	.4byte	.LASF64
	.byte	0x4
	.2byte	0x18c
	.byte	0x7
	.4byte	0x39
	.byte	0x2c
	.uleb128 0x15
	.4byte	.LASF65
	.byte	0x4
	.2byte	0x18f
	.byte	0x7
	.4byte	0x39
	.byte	0x30
	.uleb128 0x15
	.4byte	.LASF66
	.byte	0x4
	.2byte	0x190
	.byte	0x9
	.4byte	0x635
	.byte	0x34
	.uleb128 0x15
	.4byte	.LASF67
	.byte	0x4
	.2byte	0x192
	.byte	0x13
	.4byte	0x8a6
	.byte	0x38
	.uleb128 0x15
	.4byte	.LASF68
	.byte	0x4
	.2byte	0x193
	.byte	0x10
	.4byte	0x8ac
	.byte	0x3c
	.uleb128 0x15
	.4byte	.LASF69
	.byte	0x4
	.2byte	0x194
	.byte	0x9
	.4byte	0x635
	.byte	0x40
	.uleb128 0x15
	.4byte	.LASF70
	.byte	0x4
	.2byte	0x197
	.byte	0xb
	.4byte	0x8bd
	.byte	0x44
	.uleb128 0x15
	.4byte	.LASF41
	.byte	0x4
	.2byte	0x19b
	.byte	0x13
	.4byte	0x2a6
	.byte	0x48
	.uleb128 0x15
	.4byte	.LASF71
	.byte	0x4
	.2byte	0x19c
	.byte	0x12
	.4byte	0x264
	.byte	0x4c
	.uleb128 0x15
	.4byte	.LASF72
	.byte	0x4
	.2byte	0x19f
	.byte	0x10
	.4byte	0x6e2
	.byte	0xd8
	.uleb128 0x15
	.4byte	.LASF73
	.byte	0x4
	.2byte	0x1a0
	.byte	0xb
	.4byte	0x721
	.byte	0xe4
	.uleb128 0x15
	.4byte	.LASF74
	.byte	0x4
	.2byte	0x1a1
	.byte	0x17
	.4byte	0x8c9
	.byte	0xe8
	.uleb128 0x15
	.4byte	.LASF75
	.byte	0x4
	.2byte	0x1a2
	.byte	0x9
	.4byte	0x635
	.byte	0xec
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x36f
	.uleb128 0xd
	.4byte	.LASF76
	.byte	0x68
	.byte	0x4
	.byte	0xb5
	.byte	0x8
	.4byte	0x617
	.uleb128 0xe
	.string	"_p"
	.byte	0x4
	.byte	0xb6
	.byte	0x12
	.4byte	0x2f1
	.byte	0
	.uleb128 0xe
	.string	"_r"
	.byte	0x4
	.byte	0xb7
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0xe
	.string	"_w"
	.byte	0x4
	.byte	0xb8
	.byte	0x7
	.4byte	0x39
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF49
	.byte	0x4
	.byte	0xb9
	.byte	0x9
	.4byte	0x2b
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF50
	.byte	0x4
	.byte	0xba
	.byte	0x9
	.4byte	0x2b
	.byte	0xe
	.uleb128 0xe
	.string	"_bf"
	.byte	0x4
	.byte	0xbb
	.byte	0x11
	.4byte	0x2c9
	.byte	0x10
	.uleb128 0xb
	.4byte	.LASF51
	.byte	0x4
	.byte	0xbc
	.byte	0x7
	.4byte	0x39
	.byte	0x18
	.uleb128 0xb
	.4byte	.LASF52
	.byte	0x4
	.byte	0xbf
	.byte	0x12
	.4byte	0x4ce
	.byte	0x1c
	.uleb128 0xb
	.4byte	.LASF77
	.byte	0x4
	.byte	0xc3
	.byte	0xa
	.4byte	0x107
	.byte	0x20
	.uleb128 0xb
	.4byte	.LASF78
	.byte	0x4
	.byte	0xc5
	.byte	0x1d
	.4byte	0x647
	.byte	0x24
	.uleb128 0xb
	.4byte	.LASF79
	.byte	0x4
	.byte	0xc7
	.byte	0x1d
	.4byte	0x671
	.byte	0x28
	.uleb128 0xb
	.4byte	.LASF80
	.byte	0x4
	.byte	0xca
	.byte	0xd
	.4byte	0x695
	.byte	0x2c
	.uleb128 0xb
	.4byte	.LASF81
	.byte	0x4
	.byte	0xcb
	.byte	0x9
	.4byte	0x6af
	.byte	0x30
	.uleb128 0xe
	.string	"_ub"
	.byte	0x4
	.byte	0xce
	.byte	0x11
	.4byte	0x2c9
	.byte	0x34
	.uleb128 0xe
	.string	"_up"
	.byte	0x4
	.byte	0xcf
	.byte	0x12
	.4byte	0x2f1
	.byte	0x3c
	.uleb128 0xe
	.string	"_ur"
	.byte	0x4
	.byte	0xd0
	.byte	0x7
	.4byte	0x39
	.byte	0x40
	.uleb128 0xb
	.4byte	.LASF82
	.byte	0x4
	.byte	0xd3
	.byte	0x11
	.4byte	0x6b5
	.byte	0x44
	.uleb128 0xb
	.4byte	.LASF83
	.byte	0x4
	.byte	0xd4
	.byte	0x11
	.4byte	0x6c5
	.byte	0x47
	.uleb128 0xe
	.string	"_lb"
	.byte	0x4
	.byte	0xd7
	.byte	0x11
	.4byte	0x2c9
	.byte	0x48
	.uleb128 0xb
	.4byte	.LASF84
	.byte	0x4
	.byte	0xda
	.byte	0x7
	.4byte	0x39
	.byte	0x50
	.uleb128 0xb
	.4byte	.LASF85
	.byte	0x4
	.byte	0xdb
	.byte	0xa
	.4byte	0x74
	.byte	0x54
	.uleb128 0xb
	.4byte	.LASF86
	.byte	0x4
	.byte	0xe2
	.byte	0xc
	.4byte	0xfb
	.byte	0x58
	.uleb128 0xb
	.4byte	.LASF87
	.byte	0x4
	.byte	0xe4
	.byte	0xe
	.4byte	0xef
	.byte	0x5c
	.uleb128 0xb
	.4byte	.LASF88
	.byte	0x4
	.byte	0xe5
	.byte	0x9
	.4byte	0x39
	.byte	0x64
	.byte	0
	.uleb128 0x17
	.4byte	0x39
	.4byte	0x635
	.uleb128 0x18
	.4byte	0x4ce
	.uleb128 0x18
	.4byte	0x107
	.uleb128 0x18
	.4byte	0x635
	.uleb128 0x18
	.4byte	0x39
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x63b
	.uleb128 0x2
	.byte	0x1
	.byte	0x8
	.4byte	.LASF89
	.uleb128 0x13
	.4byte	0x63b
	.uleb128 0xf
	.byte	0x4
	.4byte	0x617
	.uleb128 0x17
	.4byte	0x39
	.4byte	0x66b
	.uleb128 0x18
	.4byte	0x4ce
	.uleb128 0x18
	.4byte	0x107
	.uleb128 0x18
	.4byte	0x66b
	.uleb128 0x18
	.4byte	0x39
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x642
	.uleb128 0xf
	.byte	0x4
	.4byte	0x64d
	.uleb128 0x17
	.4byte	0x80
	.4byte	0x695
	.uleb128 0x18
	.4byte	0x4ce
	.uleb128 0x18
	.4byte	0x107
	.uleb128 0x18
	.4byte	0x80
	.uleb128 0x18
	.4byte	0x39
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x677
	.uleb128 0x17
	.4byte	0x39
	.4byte	0x6af
	.uleb128 0x18
	.4byte	0x4ce
	.uleb128 0x18
	.4byte	0x107
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x69b
	.uleb128 0x8
	.4byte	0x24
	.4byte	0x6c5
	.uleb128 0x9
	.4byte	0x40
	.byte	0x2
	.byte	0
	.uleb128 0x8
	.4byte	0x24
	.4byte	0x6d5
	.uleb128 0x9
	.4byte	0x40
	.byte	0
	.byte	0
	.uleb128 0x5
	.4byte	.LASF90
	.byte	0x4
	.2byte	0x11f
	.byte	0x1a
	.4byte	0x4d4
	.uleb128 0x14
	.4byte	.LASF91
	.byte	0xc
	.byte	0x4
	.2byte	0x123
	.byte	0x8
	.4byte	0x71b
	.uleb128 0x15
	.4byte	.LASF21
	.byte	0x4
	.2byte	0x125
	.byte	0x11
	.4byte	0x71b
	.byte	0
	.uleb128 0x15
	.4byte	.LASF92
	.byte	0x4
	.2byte	0x126
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF93
	.byte	0x4
	.2byte	0x127
	.byte	0xb
	.4byte	0x721
	.byte	0x8
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x6e2
	.uleb128 0xf
	.byte	0x4
	.4byte	0x6d5
	.uleb128 0x14
	.4byte	.LASF94
	.byte	0x18
	.byte	0x4
	.2byte	0x13f
	.byte	0x8
	.4byte	0x76e
	.uleb128 0x15
	.4byte	.LASF95
	.byte	0x4
	.2byte	0x140
	.byte	0x12
	.4byte	0x76e
	.byte	0
	.uleb128 0x15
	.4byte	.LASF96
	.byte	0x4
	.2byte	0x141
	.byte	0x12
	.4byte	0x76e
	.byte	0x6
	.uleb128 0x15
	.4byte	.LASF97
	.byte	0x4
	.2byte	0x142
	.byte	0x12
	.4byte	0x32
	.byte	0xc
	.uleb128 0x15
	.4byte	.LASF98
	.byte	0x4
	.2byte	0x145
	.byte	0x24
	.4byte	0x4e
	.byte	0x10
	.byte	0
	.uleb128 0x8
	.4byte	0x32
	.4byte	0x77e
	.uleb128 0x9
	.4byte	0x40
	.byte	0x2
	.byte	0
	.uleb128 0x14
	.4byte	.LASF99
	.byte	0x10
	.byte	0x4
	.2byte	0x158
	.byte	0x8
	.4byte	0x7c5
	.uleb128 0x15
	.4byte	.LASF100
	.byte	0x4
	.2byte	0x15b
	.byte	0x13
	.4byte	0x176
	.byte	0
	.uleb128 0x15
	.4byte	.LASF101
	.byte	0x4
	.2byte	0x15c
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF102
	.byte	0x4
	.2byte	0x15d
	.byte	0x13
	.4byte	0x176
	.byte	0x8
	.uleb128 0x15
	.4byte	.LASF103
	.byte	0x4
	.2byte	0x15e
	.byte	0x14
	.4byte	0x7c5
	.byte	0xc
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x176
	.uleb128 0x14
	.4byte	.LASF104
	.byte	0x50
	.byte	0x4
	.2byte	0x162
	.byte	0x8
	.4byte	0x874
	.uleb128 0x15
	.4byte	.LASF105
	.byte	0x4
	.2byte	0x165
	.byte	0x9
	.4byte	0x635
	.byte	0
	.uleb128 0x15
	.4byte	.LASF106
	.byte	0x4
	.2byte	0x166
	.byte	0xe
	.4byte	0xef
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF107
	.byte	0x4
	.2byte	0x167
	.byte	0xe
	.4byte	0xef
	.byte	0xc
	.uleb128 0x15
	.4byte	.LASF108
	.byte	0x4
	.2byte	0x168
	.byte	0xe
	.4byte	0xef
	.byte	0x14
	.uleb128 0x15
	.4byte	.LASF109
	.byte	0x4
	.2byte	0x169
	.byte	0x8
	.4byte	0x874
	.byte	0x1c
	.uleb128 0x15
	.4byte	.LASF110
	.byte	0x4
	.2byte	0x16a
	.byte	0x7
	.4byte	0x39
	.byte	0x24
	.uleb128 0x15
	.4byte	.LASF111
	.byte	0x4
	.2byte	0x16b
	.byte	0xe
	.4byte	0xef
	.byte	0x28
	.uleb128 0x15
	.4byte	.LASF112
	.byte	0x4
	.2byte	0x16c
	.byte	0xe
	.4byte	0xef
	.byte	0x30
	.uleb128 0x15
	.4byte	.LASF113
	.byte	0x4
	.2byte	0x16d
	.byte	0xe
	.4byte	0xef
	.byte	0x38
	.uleb128 0x15
	.4byte	.LASF114
	.byte	0x4
	.2byte	0x16e
	.byte	0xe
	.4byte	0xef
	.byte	0x40
	.uleb128 0x15
	.4byte	.LASF115
	.byte	0x4
	.2byte	0x16f
	.byte	0xe
	.4byte	0xef
	.byte	0x48
	.byte	0
	.uleb128 0x8
	.4byte	0x63b
	.4byte	0x884
	.uleb128 0x9
	.4byte	0x40
	.byte	0x7
	.byte	0
	.uleb128 0x19
	.4byte	.LASF124
	.uleb128 0xf
	.byte	0x4
	.4byte	0x884
	.uleb128 0xf
	.byte	0x4
	.4byte	0x77e
	.uleb128 0x1a
	.4byte	0x8a0
	.uleb128 0x18
	.4byte	0x4ce
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x895
	.uleb128 0xf
	.byte	0x4
	.4byte	0x727
	.uleb128 0xf
	.byte	0x4
	.4byte	0x18c
	.uleb128 0x1a
	.4byte	0x8bd
	.uleb128 0x18
	.4byte	0x39
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x8c3
	.uleb128 0xf
	.byte	0x4
	.4byte	0x8b2
	.uleb128 0xf
	.byte	0x4
	.4byte	0x7cb
	.uleb128 0x1b
	.4byte	.LASF116
	.byte	0x4
	.2byte	0x1a5
	.byte	0x22
	.4byte	0x36a
	.uleb128 0x1b
	.4byte	.LASF117
	.byte	0x4
	.2byte	0x1a6
	.byte	0x22
	.4byte	0x36a
	.uleb128 0x1b
	.4byte	.LASF118
	.byte	0x4
	.2byte	0x1a7
	.byte	0x22
	.4byte	0x36a
	.uleb128 0x1b
	.4byte	.LASF119
	.byte	0x4
	.2byte	0x30a
	.byte	0x18
	.4byte	0x4ce
	.uleb128 0x1c
	.4byte	.LASF120
	.byte	0x5
	.byte	0x67
	.byte	0xe
	.4byte	0x635
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1b
	.uleb128 0xe
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x17
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x13
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x15
	.byte	0
	.uleb128 0x27
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x13
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"",@progbits
	.4byte	0x14
	.2byte	0x2
	.4byte	.Ldebug_info0
	.byte	0x4
	.byte	0
	.2byte	0
	.2byte	0
	.4byte	0
	.4byte	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF38:
	.string	"_dso_handle"
.LASF11:
	.string	"_fpos_t"
.LASF47:
	.string	"_size"
.LASF94:
	.string	"_rand48"
.LASF59:
	.string	"_emergency"
.LASF52:
	.string	"_data"
.LASF114:
	.string	"_wcrtomb_state"
.LASF115:
	.string	"_wcsrtombs_state"
.LASF6:
	.string	"long long unsigned int"
.LASF51:
	.string	"_lbfsize"
.LASF124:
	.string	"__locale_t"
.LASF112:
	.string	"_mbrtowc_state"
.LASF107:
	.string	"_wctomb_state"
.LASF27:
	.string	"__tm_sec"
.LASF5:
	.string	"long long int"
.LASF0:
	.string	"signed char"
.LASF82:
	.string	"_ubuf"
.LASF46:
	.string	"_base"
.LASF29:
	.string	"__tm_hour"
.LASF73:
	.string	"__sf"
.LASF36:
	.string	"_on_exit_args"
.LASF77:
	.string	"_cookie"
.LASF72:
	.string	"__sglue"
.LASF9:
	.string	"long int"
.LASF99:
	.string	"_mprec"
.LASF49:
	.string	"_flags"
.LASF40:
	.string	"_is_cxa"
.LASF55:
	.string	"_stdin"
.LASF84:
	.string	"_blksize"
.LASF7:
	.string	"_lock_t"
.LASF66:
	.string	"_cvtbuf"
.LASF85:
	.string	"_offset"
.LASF113:
	.string	"_mbsrtowcs_state"
.LASF111:
	.string	"_mbrlen_state"
.LASF37:
	.string	"_fnargs"
.LASF43:
	.string	"_fns"
.LASF23:
	.string	"_sign"
.LASF18:
	.string	"_flock_t"
.LASF57:
	.string	"_stderr"
.LASF25:
	.string	"_Bigint"
.LASF64:
	.string	"_gamma_signgam"
.LASF78:
	.string	"_read"
.LASF101:
	.string	"_result_k"
.LASF26:
	.string	"__tm"
.LASF44:
	.string	"_on_exit_args_ptr"
.LASF4:
	.string	"unsigned int"
.LASF14:
	.string	"__wchb"
.LASF56:
	.string	"_stdout"
.LASF65:
	.string	"_cvtlen"
.LASF19:
	.string	"long unsigned int"
.LASF48:
	.string	"__sFILE_fake"
.LASF92:
	.string	"_niobs"
.LASF3:
	.string	"short unsigned int"
.LASF71:
	.string	"_atexit0"
.LASF75:
	.string	"_signal_buf"
.LASF69:
	.string	"_asctime_buf"
.LASF100:
	.string	"_result"
.LASF13:
	.string	"__wch"
.LASF12:
	.string	"wint_t"
.LASF86:
	.string	"_lock"
.LASF88:
	.string	"_flags2"
.LASF79:
	.string	"_write"
.LASF32:
	.string	"__tm_year"
.LASF74:
	.string	"_misc"
.LASF116:
	.string	"__sf_fake_stdin"
.LASF117:
	.string	"__sf_fake_stdout"
.LASF31:
	.string	"__tm_mon"
.LASF41:
	.string	"_atexit"
.LASF120:
	.string	"suboptarg"
.LASF60:
	.string	"__sdidinit"
.LASF10:
	.string	"_off_t"
.LASF103:
	.string	"_freelist"
.LASF8:
	.string	"_LOCK_RECURSIVE_T"
.LASF121:
	.string	"GNU C99 8.2.0 -mlongcalls -ggdb -Og -std=gnu99 -ffunction-sections -fdata-sections -fstrict-volatile-bitfields"
.LASF1:
	.string	"unsigned char"
.LASF93:
	.string	"_iobs"
.LASF2:
	.string	"short int"
.LASF34:
	.string	"__tm_yday"
.LASF45:
	.string	"__sbuf"
.LASF90:
	.string	"__FILE"
.LASF17:
	.string	"_mbstate_t"
.LASF76:
	.string	"__sFILE"
.LASF87:
	.string	"_mbstate"
.LASF98:
	.string	"_rand_next"
.LASF106:
	.string	"_mblen_state"
.LASF58:
	.string	"_inc"
.LASF42:
	.string	"_ind"
.LASF62:
	.string	"_locale"
.LASF63:
	.string	"__cleanup"
.LASF61:
	.string	"_unspecified_locale_info"
.LASF22:
	.string	"_maxwds"
.LASF53:
	.string	"_reent"
.LASF95:
	.string	"_seed"
.LASF15:
	.string	"__count"
.LASF16:
	.string	"__value"
.LASF80:
	.string	"_seek"
.LASF123:
	.string	"/home/inverse/esp/hello_world/build"
.LASF54:
	.string	"_errno"
.LASF89:
	.string	"char"
.LASF28:
	.string	"__tm_min"
.LASF122:
	.string	"/home/inverse/esp/esp-idf/components/mbedtls/mbedtls/library/entropy_poll.c"
.LASF96:
	.string	"_mult"
.LASF21:
	.string	"_next"
.LASF105:
	.string	"_strtok_last"
.LASF39:
	.string	"_fntypes"
.LASF104:
	.string	"_misc_reent"
.LASF97:
	.string	"_add"
.LASF20:
	.string	"__ULong"
.LASF110:
	.string	"_getdate_err"
.LASF119:
	.string	"_global_impure_ptr"
.LASF50:
	.string	"_file"
.LASF24:
	.string	"_wds"
.LASF33:
	.string	"__tm_wday"
.LASF91:
	.string	"_glue"
.LASF109:
	.string	"_l64a_buf"
.LASF70:
	.string	"_sig_func"
.LASF83:
	.string	"_nbuf"
.LASF35:
	.string	"__tm_isdst"
.LASF68:
	.string	"_localtime_buf"
.LASF81:
	.string	"_close"
.LASF118:
	.string	"__sf_fake_stderr"
.LASF67:
	.string	"_r48"
.LASF108:
	.string	"_mbtowc_state"
.LASF102:
	.string	"_p5s"
.LASF30:
	.string	"__tm_mday"
	.ident	"GCC: (crosstool-NG esp-2019r2) 8.2.0"
	.file	"hkdf.c"
	.text
.Ltext0:
.Letext0:
	.file 1 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/sys/lock.h"
	.file 2 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/sys/_types.h"
	.file 3 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/lib/gcc/xtensa-esp32-elf/8.2.0/include/stddef.h"
	.file 4 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/sys/reent.h"
	.file 5 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.4byte	0x90c
	.2byte	0x4
	.4byte	.Ldebug_abbrev0
	.byte	0x4
	.uleb128 0x1
	.4byte	.LASF121
	.byte	0xc
	.4byte	.LASF122
	.4byte	.LASF123
	.4byte	.Ldebug_line0
	.uleb128 0x2
	.byte	0x1
	.byte	0x6
	.4byte	.LASF0
	.uleb128 0x2
	.byte	0x1
	.byte	0x8
	.4byte	.LASF1
	.uleb128 0x2
	.byte	0x2
	.byte	0x5
	.4byte	.LASF2
	.uleb128 0x2
	.byte	0x2
	.byte	0x7
	.4byte	.LASF3
	.uleb128 0x3
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x2
	.byte	0x4
	.byte	0x7
	.4byte	.LASF4
	.uleb128 0x2
	.byte	0x8
	.byte	0x5
	.4byte	.LASF5
	.uleb128 0x2
	.byte	0x8
	.byte	0x7
	.4byte	.LASF6
	.uleb128 0x4
	.4byte	.LASF7
	.byte	0x1
	.byte	0xb
	.byte	0xd
	.4byte	0x39
	.uleb128 0x4
	.4byte	.LASF8
	.byte	0x1
	.byte	0xc
	.byte	0x11
	.4byte	0x55
	.uleb128 0x2
	.byte	0x4
	.byte	0x5
	.4byte	.LASF9
	.uleb128 0x4
	.4byte	.LASF10
	.byte	0x2
	.byte	0x2c
	.byte	0xe
	.4byte	0x6d
	.uleb128 0x4
	.4byte	.LASF11
	.byte	0x2
	.byte	0x72
	.byte	0xe
	.4byte	0x6d
	.uleb128 0x5
	.4byte	.LASF12
	.byte	0x3
	.2byte	0x165
	.byte	0x17
	.4byte	0x40
	.uleb128 0x6
	.byte	0x4
	.byte	0x2
	.byte	0xa6
	.byte	0x3
	.4byte	0xbb
	.uleb128 0x7
	.4byte	.LASF13
	.byte	0x2
	.byte	0xa8
	.byte	0xc
	.4byte	0x8c
	.uleb128 0x7
	.4byte	.LASF14
	.byte	0x2
	.byte	0xa9
	.byte	0x13
	.4byte	0xbb
	.byte	0
	.uleb128 0x8
	.4byte	0x24
	.4byte	0xcb
	.uleb128 0x9
	.4byte	0x40
	.byte	0x3
	.byte	0
	.uleb128 0xa
	.byte	0x8
	.byte	0x2
	.byte	0xa3
	.byte	0x9
	.4byte	0xef
	.uleb128 0xb
	.4byte	.LASF15
	.byte	0x2
	.byte	0xa5
	.byte	0x7
	.4byte	0x39
	.byte	0
	.uleb128 0xb
	.4byte	.LASF16
	.byte	0x2
	.byte	0xaa
	.byte	0x5
	.4byte	0x99
	.byte	0x4
	.byte	0
	.uleb128 0x4
	.4byte	.LASF17
	.byte	0x2
	.byte	0xab
	.byte	0x3
	.4byte	0xcb
	.uleb128 0x4
	.4byte	.LASF18
	.byte	0x2
	.byte	0xaf
	.byte	0x1b
	.4byte	0x61
	.uleb128 0xc
	.byte	0x4
	.uleb128 0x2
	.byte	0x4
	.byte	0x7
	.4byte	.LASF19
	.uleb128 0x4
	.4byte	.LASF20
	.byte	0x4
	.byte	0x16
	.byte	0x19
	.4byte	0x109
	.uleb128 0xd
	.4byte	.LASF25
	.byte	0x18
	.byte	0x4
	.byte	0x2f
	.byte	0x8
	.4byte	0x176
	.uleb128 0xb
	.4byte	.LASF21
	.byte	0x4
	.byte	0x31
	.byte	0x13
	.4byte	0x176
	.byte	0
	.uleb128 0xe
	.string	"_k"
	.byte	0x4
	.byte	0x32
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0xb
	.4byte	.LASF22
	.byte	0x4
	.byte	0x32
	.byte	0xb
	.4byte	0x39
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF23
	.byte	0x4
	.byte	0x32
	.byte	0x14
	.4byte	0x39
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF24
	.byte	0x4
	.byte	0x32
	.byte	0x1b
	.4byte	0x39
	.byte	0x10
	.uleb128 0xe
	.string	"_x"
	.byte	0x4
	.byte	0x33
	.byte	0xb
	.4byte	0x17c
	.byte	0x14
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x11c
	.uleb128 0x8
	.4byte	0x110
	.4byte	0x18c
	.uleb128 0x9
	.4byte	0x40
	.byte	0
	.byte	0
	.uleb128 0xd
	.4byte	.LASF26
	.byte	0x24
	.byte	0x4
	.byte	0x37
	.byte	0x8
	.4byte	0x20f
	.uleb128 0xb
	.4byte	.LASF27
	.byte	0x4
	.byte	0x39
	.byte	0x9
	.4byte	0x39
	.byte	0
	.uleb128 0xb
	.4byte	.LASF28
	.byte	0x4
	.byte	0x3a
	.byte	0x9
	.4byte	0x39
	.byte	0x4
	.uleb128 0xb
	.4byte	.LASF29
	.byte	0x4
	.byte	0x3b
	.byte	0x9
	.4byte	0x39
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF30
	.byte	0x4
	.byte	0x3c
	.byte	0x9
	.4byte	0x39
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF31
	.byte	0x4
	.byte	0x3d
	.byte	0x9
	.4byte	0x39
	.byte	0x10
	.uleb128 0xb
	.4byte	.LASF32
	.byte	0x4
	.byte	0x3e
	.byte	0x9
	.4byte	0x39
	.byte	0x14
	.uleb128 0xb
	.4byte	.LASF33
	.byte	0x4
	.byte	0x3f
	.byte	0x9
	.4byte	0x39
	.byte	0x18
	.uleb128 0xb
	.4byte	.LASF34
	.byte	0x4
	.byte	0x40
	.byte	0x9
	.4byte	0x39
	.byte	0x1c
	.uleb128 0xb
	.4byte	.LASF35
	.byte	0x4
	.byte	0x41
	.byte	0x9
	.4byte	0x39
	.byte	0x20
	.byte	0
	.uleb128 0x10
	.4byte	.LASF36
	.2byte	0x108
	.byte	0x4
	.byte	0x4a
	.byte	0x8
	.4byte	0x254
	.uleb128 0xb
	.4byte	.LASF37
	.byte	0x4
	.byte	0x4b
	.byte	0xa
	.4byte	0x254
	.byte	0
	.uleb128 0xb
	.4byte	.LASF38
	.byte	0x4
	.byte	0x4c
	.byte	0x9
	.4byte	0x254
	.byte	0x80
	.uleb128 0x11
	.4byte	.LASF39
	.byte	0x4
	.byte	0x4e
	.byte	0xa
	.4byte	0x110
	.2byte	0x100
	.uleb128 0x11
	.4byte	.LASF40
	.byte	0x4
	.byte	0x51
	.byte	0xa
	.4byte	0x110
	.2byte	0x104
	.byte	0
	.uleb128 0x8
	.4byte	0x107
	.4byte	0x264
	.uleb128 0x9
	.4byte	0x40
	.byte	0x1f
	.byte	0
	.uleb128 0xd
	.4byte	.LASF41
	.byte	0x8c
	.byte	0x4
	.byte	0x55
	.byte	0x8
	.4byte	0x2a6
	.uleb128 0xb
	.4byte	.LASF21
	.byte	0x4
	.byte	0x56
	.byte	0x12
	.4byte	0x2a6
	.byte	0
	.uleb128 0xb
	.4byte	.LASF42
	.byte	0x4
	.byte	0x57
	.byte	0x6
	.4byte	0x39
	.byte	0x4
	.uleb128 0xb
	.4byte	.LASF43
	.byte	0x4
	.byte	0x58
	.byte	0x9
	.4byte	0x2ac
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF44
	.byte	0x4
	.byte	0x59
	.byte	0x20
	.4byte	0x2c3
	.byte	0x88
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x264
	.uleb128 0x8
	.4byte	0x2bc
	.4byte	0x2bc
	.uleb128 0x9
	.4byte	0x40
	.byte	0x1f
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x2c2
	.uleb128 0x12
	.uleb128 0xf
	.byte	0x4
	.4byte	0x20f
	.uleb128 0xd
	.4byte	.LASF45
	.byte	0x8
	.byte	0x4
	.byte	0x75
	.byte	0x8
	.4byte	0x2f1
	.uleb128 0xb
	.4byte	.LASF46
	.byte	0x4
	.byte	0x76
	.byte	0x11
	.4byte	0x2f1
	.byte	0
	.uleb128 0xb
	.4byte	.LASF47
	.byte	0x4
	.byte	0x77
	.byte	0x6
	.4byte	0x39
	.byte	0x4
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x24
	.uleb128 0xd
	.4byte	.LASF48
	.byte	0x20
	.byte	0x4
	.byte	0x99
	.byte	0x8
	.4byte	0x36a
	.uleb128 0xe
	.string	"_p"
	.byte	0x4
	.byte	0x9a
	.byte	0x12
	.4byte	0x2f1
	.byte	0
	.uleb128 0xe
	.string	"_r"
	.byte	0x4
	.byte	0x9b
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0xe
	.string	"_w"
	.byte	0x4
	.byte	0x9c
	.byte	0x7
	.4byte	0x39
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF49
	.byte	0x4
	.byte	0x9d
	.byte	0x9
	.4byte	0x2b
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF50
	.byte	0x4
	.byte	0x9e
	.byte	0x9
	.4byte	0x2b
	.byte	0xe
	.uleb128 0xe
	.string	"_bf"
	.byte	0x4
	.byte	0x9f
	.byte	0x11
	.4byte	0x2c9
	.byte	0x10
	.uleb128 0xb
	.4byte	.LASF51
	.byte	0x4
	.byte	0xa0
	.byte	0x7
	.4byte	0x39
	.byte	0x18
	.uleb128 0xb
	.4byte	.LASF52
	.byte	0x4
	.byte	0xa2
	.byte	0x12
	.4byte	0x4ce
	.byte	0x1c
	.byte	0
	.uleb128 0x13
	.4byte	0x2f7
	.uleb128 0x14
	.4byte	.LASF53
	.byte	0xf0
	.byte	0x4
	.2byte	0x174
	.byte	0x8
	.4byte	0x4ce
	.uleb128 0x15
	.4byte	.LASF54
	.byte	0x4
	.2byte	0x178
	.byte	0x7
	.4byte	0x39
	.byte	0
	.uleb128 0x15
	.4byte	.LASF55
	.byte	0x4
	.2byte	0x17d
	.byte	0xb
	.4byte	0x721
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF56
	.byte	0x4
	.2byte	0x17d
	.byte	0x14
	.4byte	0x721
	.byte	0x8
	.uleb128 0x15
	.4byte	.LASF57
	.byte	0x4
	.2byte	0x17d
	.byte	0x1e
	.4byte	0x721
	.byte	0xc
	.uleb128 0x15
	.4byte	.LASF58
	.byte	0x4
	.2byte	0x17f
	.byte	0x8
	.4byte	0x39
	.byte	0x10
	.uleb128 0x15
	.4byte	.LASF59
	.byte	0x4
	.2byte	0x181
	.byte	0x9
	.4byte	0x635
	.byte	0x14
	.uleb128 0x15
	.4byte	.LASF60
	.byte	0x4
	.2byte	0x183
	.byte	0x7
	.4byte	0x39
	.byte	0x18
	.uleb128 0x15
	.4byte	.LASF61
	.byte	0x4
	.2byte	0x185
	.byte	0x7
	.4byte	0x39
	.byte	0x1c
	.uleb128 0x15
	.4byte	.LASF62
	.byte	0x4
	.2byte	0x186
	.byte	0x16
	.4byte	0x889
	.byte	0x20
	.uleb128 0x16
	.string	"_mp"
	.byte	0x4
	.2byte	0x188
	.byte	0x12
	.4byte	0x88f
	.byte	0x24
	.uleb128 0x15
	.4byte	.LASF63
	.byte	0x4
	.2byte	0x18a
	.byte	0xa
	.4byte	0x8a0
	.byte	0x28
	.uleb128 0x15
	.4byte	.LASF64
	.byte	0x4
	.2byte	0x18c
	.byte	0x7
	.4byte	0x39
	.byte	0x2c
	.uleb128 0x15
	.4byte	.LASF65
	.byte	0x4
	.2byte	0x18f
	.byte	0x7
	.4byte	0x39
	.byte	0x30
	.uleb128 0x15
	.4byte	.LASF66
	.byte	0x4
	.2byte	0x190
	.byte	0x9
	.4byte	0x635
	.byte	0x34
	.uleb128 0x15
	.4byte	.LASF67
	.byte	0x4
	.2byte	0x192
	.byte	0x13
	.4byte	0x8a6
	.byte	0x38
	.uleb128 0x15
	.4byte	.LASF68
	.byte	0x4
	.2byte	0x193
	.byte	0x10
	.4byte	0x8ac
	.byte	0x3c
	.uleb128 0x15
	.4byte	.LASF69
	.byte	0x4
	.2byte	0x194
	.byte	0x9
	.4byte	0x635
	.byte	0x40
	.uleb128 0x15
	.4byte	.LASF70
	.byte	0x4
	.2byte	0x197
	.byte	0xb
	.4byte	0x8bd
	.byte	0x44
	.uleb128 0x15
	.4byte	.LASF41
	.byte	0x4
	.2byte	0x19b
	.byte	0x13
	.4byte	0x2a6
	.byte	0x48
	.uleb128 0x15
	.4byte	.LASF71
	.byte	0x4
	.2byte	0x19c
	.byte	0x12
	.4byte	0x264
	.byte	0x4c
	.uleb128 0x15
	.4byte	.LASF72
	.byte	0x4
	.2byte	0x19f
	.byte	0x10
	.4byte	0x6e2
	.byte	0xd8
	.uleb128 0x15
	.4byte	.LASF73
	.byte	0x4
	.2byte	0x1a0
	.byte	0xb
	.4byte	0x721
	.byte	0xe4
	.uleb128 0x15
	.4byte	.LASF74
	.byte	0x4
	.2byte	0x1a1
	.byte	0x17
	.4byte	0x8c9
	.byte	0xe8
	.uleb128 0x15
	.4byte	.LASF75
	.byte	0x4
	.2byte	0x1a2
	.byte	0x9
	.4byte	0x635
	.byte	0xec
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x36f
	.uleb128 0xd
	.4byte	.LASF76
	.byte	0x68
	.byte	0x4
	.byte	0xb5
	.byte	0x8
	.4byte	0x617
	.uleb128 0xe
	.string	"_p"
	.byte	0x4
	.byte	0xb6
	.byte	0x12
	.4byte	0x2f1
	.byte	0
	.uleb128 0xe
	.string	"_r"
	.byte	0x4
	.byte	0xb7
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0xe
	.string	"_w"
	.byte	0x4
	.byte	0xb8
	.byte	0x7
	.4byte	0x39
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF49
	.byte	0x4
	.byte	0xb9
	.byte	0x9
	.4byte	0x2b
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF50
	.byte	0x4
	.byte	0xba
	.byte	0x9
	.4byte	0x2b
	.byte	0xe
	.uleb128 0xe
	.string	"_bf"
	.byte	0x4
	.byte	0xbb
	.byte	0x11
	.4byte	0x2c9
	.byte	0x10
	.uleb128 0xb
	.4byte	.LASF51
	.byte	0x4
	.byte	0xbc
	.byte	0x7
	.4byte	0x39
	.byte	0x18
	.uleb128 0xb
	.4byte	.LASF52
	.byte	0x4
	.byte	0xbf
	.byte	0x12
	.4byte	0x4ce
	.byte	0x1c
	.uleb128 0xb
	.4byte	.LASF77
	.byte	0x4
	.byte	0xc3
	.byte	0xa
	.4byte	0x107
	.byte	0x20
	.uleb128 0xb
	.4byte	.LASF78
	.byte	0x4
	.byte	0xc5
	.byte	0x1d
	.4byte	0x647
	.byte	0x24
	.uleb128 0xb
	.4byte	.LASF79
	.byte	0x4
	.byte	0xc7
	.byte	0x1d
	.4byte	0x671
	.byte	0x28
	.uleb128 0xb
	.4byte	.LASF80
	.byte	0x4
	.byte	0xca
	.byte	0xd
	.4byte	0x695
	.byte	0x2c
	.uleb128 0xb
	.4byte	.LASF81
	.byte	0x4
	.byte	0xcb
	.byte	0x9
	.4byte	0x6af
	.byte	0x30
	.uleb128 0xe
	.string	"_ub"
	.byte	0x4
	.byte	0xce
	.byte	0x11
	.4byte	0x2c9
	.byte	0x34
	.uleb128 0xe
	.string	"_up"
	.byte	0x4
	.byte	0xcf
	.byte	0x12
	.4byte	0x2f1
	.byte	0x3c
	.uleb128 0xe
	.string	"_ur"
	.byte	0x4
	.byte	0xd0
	.byte	0x7
	.4byte	0x39
	.byte	0x40
	.uleb128 0xb
	.4byte	.LASF82
	.byte	0x4
	.byte	0xd3
	.byte	0x11
	.4byte	0x6b5
	.byte	0x44
	.uleb128 0xb
	.4byte	.LASF83
	.byte	0x4
	.byte	0xd4
	.byte	0x11
	.4byte	0x6c5
	.byte	0x47
	.uleb128 0xe
	.string	"_lb"
	.byte	0x4
	.byte	0xd7
	.byte	0x11
	.4byte	0x2c9
	.byte	0x48
	.uleb128 0xb
	.4byte	.LASF84
	.byte	0x4
	.byte	0xda
	.byte	0x7
	.4byte	0x39
	.byte	0x50
	.uleb128 0xb
	.4byte	.LASF85
	.byte	0x4
	.byte	0xdb
	.byte	0xa
	.4byte	0x74
	.byte	0x54
	.uleb128 0xb
	.4byte	.LASF86
	.byte	0x4
	.byte	0xe2
	.byte	0xc
	.4byte	0xfb
	.byte	0x58
	.uleb128 0xb
	.4byte	.LASF87
	.byte	0x4
	.byte	0xe4
	.byte	0xe
	.4byte	0xef
	.byte	0x5c
	.uleb128 0xb
	.4byte	.LASF88
	.byte	0x4
	.byte	0xe5
	.byte	0x9
	.4byte	0x39
	.byte	0x64
	.byte	0
	.uleb128 0x17
	.4byte	0x39
	.4byte	0x635
	.uleb128 0x18
	.4byte	0x4ce
	.uleb128 0x18
	.4byte	0x107
	.uleb128 0x18
	.4byte	0x635
	.uleb128 0x18
	.4byte	0x39
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x63b
	.uleb128 0x2
	.byte	0x1
	.byte	0x8
	.4byte	.LASF89
	.uleb128 0x13
	.4byte	0x63b
	.uleb128 0xf
	.byte	0x4
	.4byte	0x617
	.uleb128 0x17
	.4byte	0x39
	.4byte	0x66b
	.uleb128 0x18
	.4byte	0x4ce
	.uleb128 0x18
	.4byte	0x107
	.uleb128 0x18
	.4byte	0x66b
	.uleb128 0x18
	.4byte	0x39
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x642
	.uleb128 0xf
	.byte	0x4
	.4byte	0x64d
	.uleb128 0x17
	.4byte	0x80
	.4byte	0x695
	.uleb128 0x18
	.4byte	0x4ce
	.uleb128 0x18
	.4byte	0x107
	.uleb128 0x18
	.4byte	0x80
	.uleb128 0x18
	.4byte	0x39
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x677
	.uleb128 0x17
	.4byte	0x39
	.4byte	0x6af
	.uleb128 0x18
	.4byte	0x4ce
	.uleb128 0x18
	.4byte	0x107
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x69b
	.uleb128 0x8
	.4byte	0x24
	.4byte	0x6c5
	.uleb128 0x9
	.4byte	0x40
	.byte	0x2
	.byte	0
	.uleb128 0x8
	.4byte	0x24
	.4byte	0x6d5
	.uleb128 0x9
	.4byte	0x40
	.byte	0
	.byte	0
	.uleb128 0x5
	.4byte	.LASF90
	.byte	0x4
	.2byte	0x11f
	.byte	0x1a
	.4byte	0x4d4
	.uleb128 0x14
	.4byte	.LASF91
	.byte	0xc
	.byte	0x4
	.2byte	0x123
	.byte	0x8
	.4byte	0x71b
	.uleb128 0x15
	.4byte	.LASF21
	.byte	0x4
	.2byte	0x125
	.byte	0x11
	.4byte	0x71b
	.byte	0
	.uleb128 0x15
	.4byte	.LASF92
	.byte	0x4
	.2byte	0x126
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF93
	.byte	0x4
	.2byte	0x127
	.byte	0xb
	.4byte	0x721
	.byte	0x8
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x6e2
	.uleb128 0xf
	.byte	0x4
	.4byte	0x6d5
	.uleb128 0x14
	.4byte	.LASF94
	.byte	0x18
	.byte	0x4
	.2byte	0x13f
	.byte	0x8
	.4byte	0x76e
	.uleb128 0x15
	.4byte	.LASF95
	.byte	0x4
	.2byte	0x140
	.byte	0x12
	.4byte	0x76e
	.byte	0
	.uleb128 0x15
	.4byte	.LASF96
	.byte	0x4
	.2byte	0x141
	.byte	0x12
	.4byte	0x76e
	.byte	0x6
	.uleb128 0x15
	.4byte	.LASF97
	.byte	0x4
	.2byte	0x142
	.byte	0x12
	.4byte	0x32
	.byte	0xc
	.uleb128 0x15
	.4byte	.LASF98
	.byte	0x4
	.2byte	0x145
	.byte	0x24
	.4byte	0x4e
	.byte	0x10
	.byte	0
	.uleb128 0x8
	.4byte	0x32
	.4byte	0x77e
	.uleb128 0x9
	.4byte	0x40
	.byte	0x2
	.byte	0
	.uleb128 0x14
	.4byte	.LASF99
	.byte	0x10
	.byte	0x4
	.2byte	0x158
	.byte	0x8
	.4byte	0x7c5
	.uleb128 0x15
	.4byte	.LASF100
	.byte	0x4
	.2byte	0x15b
	.byte	0x13
	.4byte	0x176
	.byte	0
	.uleb128 0x15
	.4byte	.LASF101
	.byte	0x4
	.2byte	0x15c
	.byte	0x7
	.4byte	0x39
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF102
	.byte	0x4
	.2byte	0x15d
	.byte	0x13
	.4byte	0x176
	.byte	0x8
	.uleb128 0x15
	.4byte	.LASF103
	.byte	0x4
	.2byte	0x15e
	.byte	0x14
	.4byte	0x7c5
	.byte	0xc
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x176
	.uleb128 0x14
	.4byte	.LASF104
	.byte	0x50
	.byte	0x4
	.2byte	0x162
	.byte	0x8
	.4byte	0x874
	.uleb128 0x15
	.4byte	.LASF105
	.byte	0x4
	.2byte	0x165
	.byte	0x9
	.4byte	0x635
	.byte	0
	.uleb128 0x15
	.4byte	.LASF106
	.byte	0x4
	.2byte	0x166
	.byte	0xe
	.4byte	0xef
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF107
	.byte	0x4
	.2byte	0x167
	.byte	0xe
	.4byte	0xef
	.byte	0xc
	.uleb128 0x15
	.4byte	.LASF108
	.byte	0x4
	.2byte	0x168
	.byte	0xe
	.4byte	0xef
	.byte	0x14
	.uleb128 0x15
	.4byte	.LASF109
	.byte	0x4
	.2byte	0x169
	.byte	0x8
	.4byte	0x874
	.byte	0x1c
	.uleb128 0x15
	.4byte	.LASF110
	.byte	0x4
	.2byte	0x16a
	.byte	0x7
	.4byte	0x39
	.byte	0x24
	.uleb128 0x15
	.4byte	.LASF111
	.byte	0x4
	.2byte	0x16b
	.byte	0xe
	.4byte	0xef
	.byte	0x28
	.uleb128 0x15
	.4byte	.LASF112
	.byte	0x4
	.2byte	0x16c
	.byte	0xe
	.4byte	0xef
	.byte	0x30
	.uleb128 0x15
	.4byte	.LASF113
	.byte	0x4
	.2byte	0x16d
	.byte	0xe
	.4byte	0xef
	.byte	0x38
	.uleb128 0x15
	.4byte	.LASF114
	.byte	0x4
	.2byte	0x16e
	.byte	0xe
	.4byte	0xef
	.byte	0x40
	.uleb128 0x15
	.4byte	.LASF115
	.byte	0x4
	.2byte	0x16f
	.byte	0xe
	.4byte	0xef
	.byte	0x48
	.byte	0
	.uleb128 0x8
	.4byte	0x63b
	.4byte	0x884
	.uleb128 0x9
	.4byte	0x40
	.byte	0x7
	.byte	0
	.uleb128 0x19
	.4byte	.LASF124
	.uleb128 0xf
	.byte	0x4
	.4byte	0x884
	.uleb128 0xf
	.byte	0x4
	.4byte	0x77e
	.uleb128 0x1a
	.4byte	0x8a0
	.uleb128 0x18
	.4byte	0x4ce
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x895
	.uleb128 0xf
	.byte	0x4
	.4byte	0x727
	.uleb128 0xf
	.byte	0x4
	.4byte	0x18c
	.uleb128 0x1a
	.4byte	0x8bd
	.uleb128 0x18
	.4byte	0x39
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x8c3
	.uleb128 0xf
	.byte	0x4
	.4byte	0x8b2
	.uleb128 0xf
	.byte	0x4
	.4byte	0x7cb
	.uleb128 0x1b
	.4byte	.LASF116
	.byte	0x4
	.2byte	0x1a5
	.byte	0x22
	.4byte	0x36a
	.uleb128 0x1b
	.4byte	.LASF117
	.byte	0x4
	.2byte	0x1a6
	.byte	0x22
	.4byte	0x36a
	.uleb128 0x1b
	.4byte	.LASF118
	.byte	0x4
	.2byte	0x1a7
	.byte	0x22
	.4byte	0x36a
	.uleb128 0x1b
	.4byte	.LASF119
	.byte	0x4
	.2byte	0x30a
	.byte	0x18
	.4byte	0x4ce
	.uleb128 0x1c
	.4byte	.LASF120
	.byte	0x5
	.byte	0x67
	.byte	0xe
	.4byte	0x635
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1b
	.uleb128 0xe
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x17
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x13
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x15
	.byte	0
	.uleb128 0x27
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x13
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"",@progbits
	.4byte	0x14
	.2byte	0x2
	.4byte	.Ldebug_info0
	.byte	0x4
	.byte	0
	.2byte	0
	.2byte	0
	.4byte	0
	.4byte	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF38:
	.string	"_dso_handle"
.LASF11:
	.string	"_fpos_t"
.LASF47:
	.string	"_size"
.LASF94:
	.string	"_rand48"
.LASF59:
	.string	"_emergency"
.LASF52:
	.string	"_data"
.LASF114:
	.string	"_wcrtomb_state"
.LASF115:
	.string	"_wcsrtombs_state"
.LASF6:
	.string	"long long unsigned int"
.LASF51:
	.string	"_lbfsize"
.LASF124:
	.string	"__locale_t"
.LASF112:
	.string	"_mbrtowc_state"
.LASF107:
	.string	"_wctomb_state"
.LASF27:
	.string	"__tm_sec"
.LASF5:
	.string	"long long int"
.LASF0:
	.string	"signed char"
.LASF82:
	.string	"_ubuf"
.LASF46:
	.string	"_base"
.LASF29:
	.string	"__tm_hour"
.LASF73:
	.string	"__sf"
.LASF36:
	.string	"_on_exit_args"
.LASF77:
	.string	"_cookie"
.LASF72:
	.string	"__sglue"
.LASF9:
	.string	"long int"
.LASF99:
	.string	"_mprec"
.LASF49:
	.string	"_flags"
.LASF40:
	.string	"_is_cxa"
.LASF55:
	.string	"_stdin"
.LASF84:
	.string	"_blksize"
.LASF7:
	.string	"_lock_t"
.LASF66:
	.string	"_cvtbuf"
.LASF85:
	.string	"_offset"
.LASF113:
	.string	"_mbsrtowcs_state"
.LASF111:
	.string	"_mbrlen_state"
.LASF37:
	.string	"_fnargs"
.LASF43:
	.string	"_fns"
.LASF23:
	.string	"_sign"
.LASF18:
	.string	"_flock_t"
.LASF57:
	.string	"_stderr"
.LASF25:
	.string	"_Bigint"
.LASF64:
	.string	"_gamma_signgam"
.LASF78:
	.string	"_read"
.LASF101:
	.string	"_result_k"
.LASF26:
	.string	"__tm"
.LASF44:
	.string	"_on_exit_args_ptr"
.LASF4:
	.string	"unsigned int"
.LASF14:
	.string	"__wchb"
.LASF56:
	.string	"_stdout"
.LASF65:
	.string	"_cvtlen"
.LASF19:
	.string	"long unsigned int"
.LASF48:
	.string	"__sFILE_fake"
.LASF122:
	.string	"/home/inverse/esp/esp-idf/components/mbedtls/mbedtls/library/hkdf.c"
.LASF92:
	.string	"_niobs"
.LASF3:
	.string	"short unsigned int"
.LASF71:
	.string	"_atexit0"
.LASF75:
	.string	"_signal_buf"
.LASF69:
	.string	"_asctime_buf"
.LASF100:
	.string	"_result"
.LASF13:
	.string	"__wch"
.LASF12:
	.string	"wint_t"
.LASF86:
	.string	"_lock"
.LASF88:
	.string	"_flags2"
.LASF79:
	.string	"_write"
.LASF32:
	.string	"__tm_year"
.LASF74:
	.string	"_misc"
.LASF116:
	.string	"__sf_fake_stdin"
.LASF117:
	.string	"__sf_fake_stdout"
.LASF31:
	.string	"__tm_mon"
.LASF41:
	.string	"_atexit"
.LASF120:
	.string	"suboptarg"
.LASF60:
	.string	"__sdidinit"
.LASF10:
	.string	"_off_t"
.LASF103:
	.string	"_freelist"
.LASF8:
	.string	"_LOCK_RECURSIVE_T"
.LASF121:
	.string	"GNU C99 8.2.0 -mlongcalls -ggdb -Og -std=gnu99 -ffunction-sections -fdata-sections -fstrict-volatile-bitfields"
.LASF1:
	.string	"unsigned char"
.LASF93:
	.string	"_iobs"
.LASF2:
	.string	"short int"
.LASF34:
	.string	"__tm_yday"
.LASF45:
	.string	"__sbuf"
.LASF90:
	.string	"__FILE"
.LASF17:
	.string	"_mbstate_t"
.LASF76:
	.string	"__sFILE"
.LASF87:
	.string	"_mbstate"
.LASF98:
	.string	"_rand_next"
.LASF106:
	.string	"_mblen_state"
.LASF58:
	.string	"_inc"
.LASF42:
	.string	"_ind"
.LASF62:
	.string	"_locale"
.LASF63:
	.string	"__cleanup"
.LASF61:
	.string	"_unspecified_locale_info"
.LASF22:
	.string	"_maxwds"
.LASF53:
	.string	"_reent"
.LASF95:
	.string	"_seed"
.LASF15:
	.string	"__count"
.LASF16:
	.string	"__value"
.LASF80:
	.string	"_seek"
.LASF123:
	.string	"/home/inverse/esp/hello_world/build"
.LASF54:
	.string	"_errno"
.LASF89:
	.string	"char"
.LASF28:
	.string	"__tm_min"
.LASF96:
	.string	"_mult"
.LASF21:
	.string	"_next"
.LASF105:
	.string	"_strtok_last"
.LASF39:
	.string	"_fntypes"
.LASF104:
	.string	"_misc_reent"
.LASF97:
	.string	"_add"
.LASF20:
	.string	"__ULong"
.LASF110:
	.string	"_getdate_err"
.LASF119:
	.string	"_global_impure_ptr"
.LASF50:
	.string	"_file"
.LASF24:
	.string	"_wds"
.LASF33:
	.string	"__tm_wday"
.LASF91:
	.string	"_glue"
.LASF109:
	.string	"_l64a_buf"
.LASF70:
	.string	"_sig_func"
.LASF83:
	.string	"_nbuf"
.LASF35:
	.string	"__tm_isdst"
.LASF68:
	.string	"_localtime_buf"
.LASF81:
	.string	"_close"
.LASF118:
	.string	"__sf_fake_stderr"
.LASF67:
	.string	"_r48"
.LASF108:
	.string	"_mbtowc_state"
.LASF102:
	.string	"_p5s"
.LASF30:
	.string	"__tm_mday"
	.ident	"GCC: (crosstool-NG esp-2019r2) 8.2.0"
	.file	"platform_util.c"
	.text
.Ltext0:
	.section	.text.mbedtls_platform_zeroize,"ax",@progbits
	.literal_position
	.literal .LC0, memset_func
	.align	4
	.global	mbedtls_platform_zeroize
	.type	mbedtls_platform_zeroize, @function
mbedtls_platform_zeroize:
.LVL0:
.LFB3:
	.file 1 "/home/inverse/esp/esp-idf/components/mbedtls/mbedtls/library/platform_util.c"
	.loc 1 74 1 view -0
	.loc 1 74 1 is_stmt 0 view .LVU1
	entry	sp, 32
.LCFI0:
	.loc 1 75 5 is_stmt 1 view .LVU2
	.loc 1 75 5 view .LVU3
	.loc 1 77 5 view .LVU4
	.loc 1 77 7 is_stmt 0 view .LVU5
	beqz.n	a3, .L1
	.loc 1 78 9 is_stmt 1 view .LVU6
	l32r	a8, .LC0
	memw
	l32i.n	a8, a8, 0
	mov.n	a12, a3
	movi.n	a11, 0
	mov.n	a10, a2
	callx8	a8
.LVL1:
.L1:
	.loc 1 79 1 is_stmt 0 view .LVU7
	retw.n
.LFE3:
	.size	mbedtls_platform_zeroize, .-mbedtls_platform_zeroize
	.section	.data.memset_func,"aw"
	.align	4
	.type	memset_func, @object
	.size	memset_func, 4
memset_func:
	.word	memset
	.section	.debug_frame,"",@progbits
.Lframe0:
	.4byte	.LECIE0-.LSCIE0
.LSCIE0:
	.4byte	0xffffffff
	.byte	0x3
	.string	""
	.uleb128 0x1
	.sleb128 -4
	.uleb128 0
	.byte	0xc
	.uleb128 0x1
	.uleb128 0
	.align	4
.LECIE0:
.LSFDE0:
	.4byte	.LEFDE0-.LASFDE0
.LASFDE0:
	.4byte	.Lframe0
	.4byte	.LFB3
	.4byte	.LFE3-.LFB3
	.byte	0x4
	.4byte	.LCFI0-.LFB3
	.byte	0xe
	.uleb128 0x20
	.align	4
.LEFDE0:
	.text
.Letext0:
	.file 2 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/lib/gcc/xtensa-esp32-elf/8.2.0/include/stddef.h"
	.file 3 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/sys/lock.h"
	.file 4 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/sys/_types.h"
	.file 5 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/sys/reent.h"
	.file 6 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/stdlib.h"
	.file 7 "/home/inverse/.espressif/tools/xtensa-esp32-elf/esp-2019r2-8.2.0/xtensa-esp32-elf/xtensa-esp32-elf/sys-include/time.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.4byte	0x9d5
	.2byte	0x4
	.4byte	.Ldebug_abbrev0
	.byte	0x4
	.uleb128 0x1
	.4byte	.LASF125
	.byte	0xc
	.4byte	.LASF126
	.4byte	.LASF127
	.4byte	.Ldebug_ranges0+0
	.4byte	0
	.4byte	.Ldebug_line0
	.uleb128 0x2
	.byte	0x1
	.byte	0x6
	.4byte	.LASF0
	.uleb128 0x2
	.byte	0x1
	.byte	0x8
	.4byte	.LASF1
	.uleb128 0x2
	.byte	0x2
	.byte	0x5
	.4byte	.LASF2
	.uleb128 0x2
	.byte	0x2
	.byte	0x7
	.4byte	.LASF3
	.uleb128 0x3
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x2
	.byte	0x4
	.byte	0x7
	.4byte	.LASF4
	.uleb128 0x2
	.byte	0x8
	.byte	0x5
	.4byte	.LASF5
	.uleb128 0x2
	.byte	0x8
	.byte	0x7
	.4byte	.LASF6
	.uleb128 0x4
	.4byte	.LASF7
	.byte	0x2
	.byte	0xd8
	.byte	0x17
	.4byte	0x48
	.uleb128 0x4
	.4byte	.LASF8
	.byte	0x3
	.byte	0xb
	.byte	0xd
	.4byte	0x41
	.uleb128 0x4
	.4byte	.LASF9
	.byte	0x3
	.byte	0xc
	.byte	0x11
	.4byte	0x69
	.uleb128 0x2
	.byte	0x4
	.byte	0x5
	.4byte	.LASF10
	.uleb128 0x4
	.4byte	.LASF11
	.byte	0x4
	.byte	0x2c
	.byte	0xe
	.4byte	0x81
	.uleb128 0x4
	.4byte	.LASF12
	.byte	0x4
	.byte	0x72
	.byte	0xe
	.4byte	0x81
	.uleb128 0x5
	.4byte	.LASF13
	.byte	0x2
	.2byte	0x165
	.byte	0x17
	.4byte	0x48
	.uleb128 0x6
	.byte	0x4
	.byte	0x4
	.byte	0xa6
	.byte	0x3
	.4byte	0xcf
	.uleb128 0x7
	.4byte	.LASF14
	.byte	0x4
	.byte	0xa8
	.byte	0xc
	.4byte	0xa0
	.uleb128 0x7
	.4byte	.LASF15
	.byte	0x4
	.byte	0xa9
	.byte	0x13
	.4byte	0xcf
	.byte	0
	.uleb128 0x8
	.4byte	0x2c
	.4byte	0xdf
	.uleb128 0x9
	.4byte	0x48
	.byte	0x3
	.byte	0
	.uleb128 0xa
	.byte	0x8
	.byte	0x4
	.byte	0xa3
	.byte	0x9
	.4byte	0x103
	.uleb128 0xb
	.4byte	.LASF16
	.byte	0x4
	.byte	0xa5
	.byte	0x7
	.4byte	0x41
	.byte	0
	.uleb128 0xb
	.4byte	.LASF17
	.byte	0x4
	.byte	0xaa
	.byte	0x5
	.4byte	0xad
	.byte	0x4
	.byte	0
	.uleb128 0x4
	.4byte	.LASF18
	.byte	0x4
	.byte	0xab
	.byte	0x3
	.4byte	0xdf
	.uleb128 0x4
	.4byte	.LASF19
	.byte	0x4
	.byte	0xaf
	.byte	0x1b
	.4byte	0x75
	.uleb128 0xc
	.byte	0x4
	.uleb128 0x2
	.byte	0x4
	.byte	0x7
	.4byte	.LASF20
	.uleb128 0x4
	.4byte	.LASF21
	.byte	0x5
	.byte	0x16
	.byte	0x19
	.4byte	0x11d
	.uleb128 0xd
	.4byte	.LASF26
	.byte	0x18
	.byte	0x5
	.byte	0x2f
	.byte	0x8
	.4byte	0x18a
	.uleb128 0xb
	.4byte	.LASF22
	.byte	0x5
	.byte	0x31
	.byte	0x13
	.4byte	0x18a
	.byte	0
	.uleb128 0xe
	.string	"_k"
	.byte	0x5
	.byte	0x32
	.byte	0x7
	.4byte	0x41
	.byte	0x4
	.uleb128 0xb
	.4byte	.LASF23
	.byte	0x5
	.byte	0x32
	.byte	0xb
	.4byte	0x41
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF24
	.byte	0x5
	.byte	0x32
	.byte	0x14
	.4byte	0x41
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF25
	.byte	0x5
	.byte	0x32
	.byte	0x1b
	.4byte	0x41
	.byte	0x10
	.uleb128 0xe
	.string	"_x"
	.byte	0x5
	.byte	0x33
	.byte	0xb
	.4byte	0x190
	.byte	0x14
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x130
	.uleb128 0x8
	.4byte	0x124
	.4byte	0x1a0
	.uleb128 0x9
	.4byte	0x48
	.byte	0
	.byte	0
	.uleb128 0xd
	.4byte	.LASF27
	.byte	0x24
	.byte	0x5
	.byte	0x37
	.byte	0x8
	.4byte	0x223
	.uleb128 0xb
	.4byte	.LASF28
	.byte	0x5
	.byte	0x39
	.byte	0x9
	.4byte	0x41
	.byte	0
	.uleb128 0xb
	.4byte	.LASF29
	.byte	0x5
	.byte	0x3a
	.byte	0x9
	.4byte	0x41
	.byte	0x4
	.uleb128 0xb
	.4byte	.LASF30
	.byte	0x5
	.byte	0x3b
	.byte	0x9
	.4byte	0x41
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF31
	.byte	0x5
	.byte	0x3c
	.byte	0x9
	.4byte	0x41
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF32
	.byte	0x5
	.byte	0x3d
	.byte	0x9
	.4byte	0x41
	.byte	0x10
	.uleb128 0xb
	.4byte	.LASF33
	.byte	0x5
	.byte	0x3e
	.byte	0x9
	.4byte	0x41
	.byte	0x14
	.uleb128 0xb
	.4byte	.LASF34
	.byte	0x5
	.byte	0x3f
	.byte	0x9
	.4byte	0x41
	.byte	0x18
	.uleb128 0xb
	.4byte	.LASF35
	.byte	0x5
	.byte	0x40
	.byte	0x9
	.4byte	0x41
	.byte	0x1c
	.uleb128 0xb
	.4byte	.LASF36
	.byte	0x5
	.byte	0x41
	.byte	0x9
	.4byte	0x41
	.byte	0x20
	.byte	0
	.uleb128 0x10
	.4byte	.LASF37
	.2byte	0x108
	.byte	0x5
	.byte	0x4a
	.byte	0x8
	.4byte	0x268
	.uleb128 0xb
	.4byte	.LASF38
	.byte	0x5
	.byte	0x4b
	.byte	0xa
	.4byte	0x268
	.byte	0
	.uleb128 0xb
	.4byte	.LASF39
	.byte	0x5
	.byte	0x4c
	.byte	0x9
	.4byte	0x268
	.byte	0x80
	.uleb128 0x11
	.4byte	.LASF40
	.byte	0x5
	.byte	0x4e
	.byte	0xa
	.4byte	0x124
	.2byte	0x100
	.uleb128 0x11
	.4byte	.LASF41
	.byte	0x5
	.byte	0x51
	.byte	0xa
	.4byte	0x124
	.2byte	0x104
	.byte	0
	.uleb128 0x8
	.4byte	0x11b
	.4byte	0x278
	.uleb128 0x9
	.4byte	0x48
	.byte	0x1f
	.byte	0
	.uleb128 0xd
	.4byte	.LASF42
	.byte	0x8c
	.byte	0x5
	.byte	0x55
	.byte	0x8
	.4byte	0x2ba
	.uleb128 0xb
	.4byte	.LASF22
	.byte	0x5
	.byte	0x56
	.byte	0x12
	.4byte	0x2ba
	.byte	0
	.uleb128 0xb
	.4byte	.LASF43
	.byte	0x5
	.byte	0x57
	.byte	0x6
	.4byte	0x41
	.byte	0x4
	.uleb128 0xb
	.4byte	.LASF44
	.byte	0x5
	.byte	0x58
	.byte	0x9
	.4byte	0x2c0
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF45
	.byte	0x5
	.byte	0x59
	.byte	0x20
	.4byte	0x2d7
	.byte	0x88
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x278
	.uleb128 0x8
	.4byte	0x2d0
	.4byte	0x2d0
	.uleb128 0x9
	.4byte	0x48
	.byte	0x1f
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x2d6
	.uleb128 0x12
	.uleb128 0xf
	.byte	0x4
	.4byte	0x223
	.uleb128 0xd
	.4byte	.LASF46
	.byte	0x8
	.byte	0x5
	.byte	0x75
	.byte	0x8
	.4byte	0x305
	.uleb128 0xb
	.4byte	.LASF47
	.byte	0x5
	.byte	0x76
	.byte	0x11
	.4byte	0x305
	.byte	0
	.uleb128 0xb
	.4byte	.LASF48
	.byte	0x5
	.byte	0x77
	.byte	0x6
	.4byte	0x41
	.byte	0x4
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x2c
	.uleb128 0xd
	.4byte	.LASF49
	.byte	0x20
	.byte	0x5
	.byte	0x99
	.byte	0x8
	.4byte	0x37e
	.uleb128 0xe
	.string	"_p"
	.byte	0x5
	.byte	0x9a
	.byte	0x12
	.4byte	0x305
	.byte	0
	.uleb128 0xe
	.string	"_r"
	.byte	0x5
	.byte	0x9b
	.byte	0x7
	.4byte	0x41
	.byte	0x4
	.uleb128 0xe
	.string	"_w"
	.byte	0x5
	.byte	0x9c
	.byte	0x7
	.4byte	0x41
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF50
	.byte	0x5
	.byte	0x9d
	.byte	0x9
	.4byte	0x33
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF51
	.byte	0x5
	.byte	0x9e
	.byte	0x9
	.4byte	0x33
	.byte	0xe
	.uleb128 0xe
	.string	"_bf"
	.byte	0x5
	.byte	0x9f
	.byte	0x11
	.4byte	0x2dd
	.byte	0x10
	.uleb128 0xb
	.4byte	.LASF52
	.byte	0x5
	.byte	0xa0
	.byte	0x7
	.4byte	0x41
	.byte	0x18
	.uleb128 0xb
	.4byte	.LASF53
	.byte	0x5
	.byte	0xa2
	.byte	0x12
	.4byte	0x4e2
	.byte	0x1c
	.byte	0
	.uleb128 0x13
	.4byte	0x30b
	.uleb128 0x14
	.4byte	.LASF54
	.byte	0xf0
	.byte	0x5
	.2byte	0x174
	.byte	0x8
	.4byte	0x4e2
	.uleb128 0x15
	.4byte	.LASF55
	.byte	0x5
	.2byte	0x178
	.byte	0x7
	.4byte	0x41
	.byte	0
	.uleb128 0x15
	.4byte	.LASF56
	.byte	0x5
	.2byte	0x17d
	.byte	0xb
	.4byte	0x735
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF57
	.byte	0x5
	.2byte	0x17d
	.byte	0x14
	.4byte	0x735
	.byte	0x8
	.uleb128 0x15
	.4byte	.LASF58
	.byte	0x5
	.2byte	0x17d
	.byte	0x1e
	.4byte	0x735
	.byte	0xc
	.uleb128 0x15
	.4byte	.LASF59
	.byte	0x5
	.2byte	0x17f
	.byte	0x8
	.4byte	0x41
	.byte	0x10
	.uleb128 0x15
	.4byte	.LASF60
	.byte	0x5
	.2byte	0x181
	.byte	0x9
	.4byte	0x649
	.byte	0x14
	.uleb128 0x15
	.4byte	.LASF61
	.byte	0x5
	.2byte	0x183
	.byte	0x7
	.4byte	0x41
	.byte	0x18
	.uleb128 0x15
	.4byte	.LASF62
	.byte	0x5
	.2byte	0x185
	.byte	0x7
	.4byte	0x41
	.byte	0x1c
	.uleb128 0x15
	.4byte	.LASF63
	.byte	0x5
	.2byte	0x186
	.byte	0x16
	.4byte	0x89d
	.byte	0x20
	.uleb128 0x16
	.string	"_mp"
	.byte	0x5
	.2byte	0x188
	.byte	0x12
	.4byte	0x8a3
	.byte	0x24
	.uleb128 0x15
	.4byte	.LASF64
	.byte	0x5
	.2byte	0x18a
	.byte	0xa
	.4byte	0x8b4
	.byte	0x28
	.uleb128 0x15
	.4byte	.LASF65
	.byte	0x5
	.2byte	0x18c
	.byte	0x7
	.4byte	0x41
	.byte	0x2c
	.uleb128 0x15
	.4byte	.LASF66
	.byte	0x5
	.2byte	0x18f
	.byte	0x7
	.4byte	0x41
	.byte	0x30
	.uleb128 0x15
	.4byte	.LASF67
	.byte	0x5
	.2byte	0x190
	.byte	0x9
	.4byte	0x649
	.byte	0x34
	.uleb128 0x15
	.4byte	.LASF68
	.byte	0x5
	.2byte	0x192
	.byte	0x13
	.4byte	0x8ba
	.byte	0x38
	.uleb128 0x15
	.4byte	.LASF69
	.byte	0x5
	.2byte	0x193
	.byte	0x10
	.4byte	0x8c0
	.byte	0x3c
	.uleb128 0x15
	.4byte	.LASF70
	.byte	0x5
	.2byte	0x194
	.byte	0x9
	.4byte	0x649
	.byte	0x40
	.uleb128 0x15
	.4byte	.LASF71
	.byte	0x5
	.2byte	0x197
	.byte	0xb
	.4byte	0x8d1
	.byte	0x44
	.uleb128 0x15
	.4byte	.LASF42
	.byte	0x5
	.2byte	0x19b
	.byte	0x13
	.4byte	0x2ba
	.byte	0x48
	.uleb128 0x15
	.4byte	.LASF72
	.byte	0x5
	.2byte	0x19c
	.byte	0x12
	.4byte	0x278
	.byte	0x4c
	.uleb128 0x15
	.4byte	.LASF73
	.byte	0x5
	.2byte	0x19f
	.byte	0x10
	.4byte	0x6f6
	.byte	0xd8
	.uleb128 0x15
	.4byte	.LASF74
	.byte	0x5
	.2byte	0x1a0
	.byte	0xb
	.4byte	0x735
	.byte	0xe4
	.uleb128 0x15
	.4byte	.LASF75
	.byte	0x5
	.2byte	0x1a1
	.byte	0x17
	.4byte	0x8dd
	.byte	0xe8
	.uleb128 0x15
	.4byte	.LASF76
	.byte	0x5
	.2byte	0x1a2
	.byte	0x9
	.4byte	0x649
	.byte	0xec
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x383
	.uleb128 0xd
	.4byte	.LASF77
	.byte	0x68
	.byte	0x5
	.byte	0xb5
	.byte	0x8
	.4byte	0x62b
	.uleb128 0xe
	.string	"_p"
	.byte	0x5
	.byte	0xb6
	.byte	0x12
	.4byte	0x305
	.byte	0
	.uleb128 0xe
	.string	"_r"
	.byte	0x5
	.byte	0xb7
	.byte	0x7
	.4byte	0x41
	.byte	0x4
	.uleb128 0xe
	.string	"_w"
	.byte	0x5
	.byte	0xb8
	.byte	0x7
	.4byte	0x41
	.byte	0x8
	.uleb128 0xb
	.4byte	.LASF50
	.byte	0x5
	.byte	0xb9
	.byte	0x9
	.4byte	0x33
	.byte	0xc
	.uleb128 0xb
	.4byte	.LASF51
	.byte	0x5
	.byte	0xba
	.byte	0x9
	.4byte	0x33
	.byte	0xe
	.uleb128 0xe
	.string	"_bf"
	.byte	0x5
	.byte	0xbb
	.byte	0x11
	.4byte	0x2dd
	.byte	0x10
	.uleb128 0xb
	.4byte	.LASF52
	.byte	0x5
	.byte	0xbc
	.byte	0x7
	.4byte	0x41
	.byte	0x18
	.uleb128 0xb
	.4byte	.LASF53
	.byte	0x5
	.byte	0xbf
	.byte	0x12
	.4byte	0x4e2
	.byte	0x1c
	.uleb128 0xb
	.4byte	.LASF78
	.byte	0x5
	.byte	0xc3
	.byte	0xa
	.4byte	0x11b
	.byte	0x20
	.uleb128 0xb
	.4byte	.LASF79
	.byte	0x5
	.byte	0xc5
	.byte	0x1d
	.4byte	0x65b
	.byte	0x24
	.uleb128 0xb
	.4byte	.LASF80
	.byte	0x5
	.byte	0xc7
	.byte	0x1d
	.4byte	0x685
	.byte	0x28
	.uleb128 0xb
	.4byte	.LASF81
	.byte	0x5
	.byte	0xca
	.byte	0xd
	.4byte	0x6a9
	.byte	0x2c
	.uleb128 0xb
	.4byte	.LASF82
	.byte	0x5
	.byte	0xcb
	.byte	0x9
	.4byte	0x6c3
	.byte	0x30
	.uleb128 0xe
	.string	"_ub"
	.byte	0x5
	.byte	0xce
	.byte	0x11
	.4byte	0x2dd
	.byte	0x34
	.uleb128 0xe
	.string	"_up"
	.byte	0x5
	.byte	0xcf
	.byte	0x12
	.4byte	0x305
	.byte	0x3c
	.uleb128 0xe
	.string	"_ur"
	.byte	0x5
	.byte	0xd0
	.byte	0x7
	.4byte	0x41
	.byte	0x40
	.uleb128 0xb
	.4byte	.LASF83
	.byte	0x5
	.byte	0xd3
	.byte	0x11
	.4byte	0x6c9
	.byte	0x44
	.uleb128 0xb
	.4byte	.LASF84
	.byte	0x5
	.byte	0xd4
	.byte	0x11
	.4byte	0x6d9
	.byte	0x47
	.uleb128 0xe
	.string	"_lb"
	.byte	0x5
	.byte	0xd7
	.byte	0x11
	.4byte	0x2dd
	.byte	0x48
	.uleb128 0xb
	.4byte	.LASF85
	.byte	0x5
	.byte	0xda
	.byte	0x7
	.4byte	0x41
	.byte	0x50
	.uleb128 0xb
	.4byte	.LASF86
	.byte	0x5
	.byte	0xdb
	.byte	0xa
	.4byte	0x88
	.byte	0x54
	.uleb128 0xb
	.4byte	.LASF87
	.byte	0x5
	.byte	0xe2
	.byte	0xc
	.4byte	0x10f
	.byte	0x58
	.uleb128 0xb
	.4byte	.LASF88
	.byte	0x5
	.byte	0xe4
	.byte	0xe
	.4byte	0x103
	.byte	0x5c
	.uleb128 0xb
	.4byte	.LASF89
	.byte	0x5
	.byte	0xe5
	.byte	0x9
	.4byte	0x41
	.byte	0x64
	.byte	0
	.uleb128 0x17
	.4byte	0x41
	.4byte	0x649
	.uleb128 0x18
	.4byte	0x4e2
	.uleb128 0x18
	.4byte	0x11b
	.uleb128 0x18
	.4byte	0x649
	.uleb128 0x18
	.4byte	0x41
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x64f
	.uleb128 0x2
	.byte	0x1
	.byte	0x8
	.4byte	.LASF90
	.uleb128 0x13
	.4byte	0x64f
	.uleb128 0xf
	.byte	0x4
	.4byte	0x62b
	.uleb128 0x17
	.4byte	0x41
	.4byte	0x67f
	.uleb128 0x18
	.4byte	0x4e2
	.uleb128 0x18
	.4byte	0x11b
	.uleb128 0x18
	.4byte	0x67f
	.uleb128 0x18
	.4byte	0x41
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x656
	.uleb128 0xf
	.byte	0x4
	.4byte	0x661
	.uleb128 0x17
	.4byte	0x94
	.4byte	0x6a9
	.uleb128 0x18
	.4byte	0x4e2
	.uleb128 0x18
	.4byte	0x11b
	.uleb128 0x18
	.4byte	0x94
	.uleb128 0x18
	.4byte	0x41
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x68b
	.uleb128 0x17
	.4byte	0x41
	.4byte	0x6c3
	.uleb128 0x18
	.4byte	0x4e2
	.uleb128 0x18
	.4byte	0x11b
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x6af
	.uleb128 0x8
	.4byte	0x2c
	.4byte	0x6d9
	.uleb128 0x9
	.4byte	0x48
	.byte	0x2
	.byte	0
	.uleb128 0x8
	.4byte	0x2c
	.4byte	0x6e9
	.uleb128 0x9
	.4byte	0x48
	.byte	0
	.byte	0
	.uleb128 0x5
	.4byte	.LASF91
	.byte	0x5
	.2byte	0x11f
	.byte	0x1a
	.4byte	0x4e8
	.uleb128 0x14
	.4byte	.LASF92
	.byte	0xc
	.byte	0x5
	.2byte	0x123
	.byte	0x8
	.4byte	0x72f
	.uleb128 0x15
	.4byte	.LASF22
	.byte	0x5
	.2byte	0x125
	.byte	0x11
	.4byte	0x72f
	.byte	0
	.uleb128 0x15
	.4byte	.LASF93
	.byte	0x5
	.2byte	0x126
	.byte	0x7
	.4byte	0x41
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF94
	.byte	0x5
	.2byte	0x127
	.byte	0xb
	.4byte	0x735
	.byte	0x8
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x6f6
	.uleb128 0xf
	.byte	0x4
	.4byte	0x6e9
	.uleb128 0x14
	.4byte	.LASF95
	.byte	0x18
	.byte	0x5
	.2byte	0x13f
	.byte	0x8
	.4byte	0x782
	.uleb128 0x15
	.4byte	.LASF96
	.byte	0x5
	.2byte	0x140
	.byte	0x12
	.4byte	0x782
	.byte	0
	.uleb128 0x15
	.4byte	.LASF97
	.byte	0x5
	.2byte	0x141
	.byte	0x12
	.4byte	0x782
	.byte	0x6
	.uleb128 0x15
	.4byte	.LASF98
	.byte	0x5
	.2byte	0x142
	.byte	0x12
	.4byte	0x3a
	.byte	0xc
	.uleb128 0x15
	.4byte	.LASF99
	.byte	0x5
	.2byte	0x145
	.byte	0x24
	.4byte	0x56
	.byte	0x10
	.byte	0
	.uleb128 0x8
	.4byte	0x3a
	.4byte	0x792
	.uleb128 0x9
	.4byte	0x48
	.byte	0x2
	.byte	0
	.uleb128 0x14
	.4byte	.LASF100
	.byte	0x10
	.byte	0x5
	.2byte	0x158
	.byte	0x8
	.4byte	0x7d9
	.uleb128 0x15
	.4byte	.LASF101
	.byte	0x5
	.2byte	0x15b
	.byte	0x13
	.4byte	0x18a
	.byte	0
	.uleb128 0x15
	.4byte	.LASF102
	.byte	0x5
	.2byte	0x15c
	.byte	0x7
	.4byte	0x41
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF103
	.byte	0x5
	.2byte	0x15d
	.byte	0x13
	.4byte	0x18a
	.byte	0x8
	.uleb128 0x15
	.4byte	.LASF104
	.byte	0x5
	.2byte	0x15e
	.byte	0x14
	.4byte	0x7d9
	.byte	0xc
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x18a
	.uleb128 0x14
	.4byte	.LASF105
	.byte	0x50
	.byte	0x5
	.2byte	0x162
	.byte	0x8
	.4byte	0x888
	.uleb128 0x15
	.4byte	.LASF106
	.byte	0x5
	.2byte	0x165
	.byte	0x9
	.4byte	0x649
	.byte	0
	.uleb128 0x15
	.4byte	.LASF107
	.byte	0x5
	.2byte	0x166
	.byte	0xe
	.4byte	0x103
	.byte	0x4
	.uleb128 0x15
	.4byte	.LASF108
	.byte	0x5
	.2byte	0x167
	.byte	0xe
	.4byte	0x103
	.byte	0xc
	.uleb128 0x15
	.4byte	.LASF109
	.byte	0x5
	.2byte	0x168
	.byte	0xe
	.4byte	0x103
	.byte	0x14
	.uleb128 0x15
	.4byte	.LASF110
	.byte	0x5
	.2byte	0x169
	.byte	0x8
	.4byte	0x888
	.byte	0x1c
	.uleb128 0x15
	.4byte	.LASF111
	.byte	0x5
	.2byte	0x16a
	.byte	0x7
	.4byte	0x41
	.byte	0x24
	.uleb128 0x15
	.4byte	.LASF112
	.byte	0x5
	.2byte	0x16b
	.byte	0xe
	.4byte	0x103
	.byte	0x28
	.uleb128 0x15
	.4byte	.LASF113
	.byte	0x5
	.2byte	0x16c
	.byte	0xe
	.4byte	0x103
	.byte	0x30
	.uleb128 0x15
	.4byte	.LASF114
	.byte	0x5
	.2byte	0x16d
	.byte	0xe
	.4byte	0x103
	.byte	0x38
	.uleb128 0x15
	.4byte	.LASF115
	.byte	0x5
	.2byte	0x16e
	.byte	0xe
	.4byte	0x103
	.byte	0x40
	.uleb128 0x15
	.4byte	.LASF116
	.byte	0x5
	.2byte	0x16f
	.byte	0xe
	.4byte	0x103
	.byte	0x48
	.byte	0
	.uleb128 0x8
	.4byte	0x64f
	.4byte	0x898
	.uleb128 0x9
	.4byte	0x48
	.byte	0x7
	.byte	0
	.uleb128 0x19
	.4byte	.LASF128
	.uleb128 0xf
	.byte	0x4
	.4byte	0x898
	.uleb128 0xf
	.byte	0x4
	.4byte	0x792
	.uleb128 0x1a
	.4byte	0x8b4
	.uleb128 0x18
	.4byte	0x4e2
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x8a9
	.uleb128 0xf
	.byte	0x4
	.4byte	0x73b
	.uleb128 0xf
	.byte	0x4
	.4byte	0x1a0
	.uleb128 0x1a
	.4byte	0x8d1
	.uleb128 0x18
	.4byte	0x41
	.byte	0
	.uleb128 0xf
	.byte	0x4
	.4byte	0x8d7
	.uleb128 0xf
	.byte	0x4
	.4byte	0x8c6
	.uleb128 0xf
	.byte	0x4
	.4byte	0x7df
	.uleb128 0x1b
	.4byte	.LASF117
	.byte	0x5
	.2byte	0x1a5
	.byte	0x22
	.4byte	0x37e
	.uleb128 0x1b
	.4byte	.LASF118
	.byte	0x5
	.2byte	0x1a6
	.byte	0x22
	.4byte	0x37e
	.uleb128 0x1b
	.4byte	.LASF119
	.byte	0x5
	.2byte	0x1a7
	.byte	0x22
	.4byte	0x37e
	.uleb128 0x1b
	.4byte	.LASF120
	.byte	0x5
	.2byte	0x30a
	.byte	0x18
	.4byte	0x4e2
	.uleb128 0x1c
	.4byte	.LASF121
	.byte	0x6
	.byte	0x67
	.byte	0xe
	.4byte	0x649
	.uleb128 0x1c
	.4byte	.LASF122
	.byte	0x7
	.byte	0x9a
	.byte	0x16
	.4byte	0x81
	.uleb128 0x1c
	.4byte	.LASF123
	.byte	0x7
	.byte	0x9b
	.byte	0x15
	.4byte	0x41
	.uleb128 0x8
	.4byte	0x649
	.4byte	0x94b
	.uleb128 0x9
	.4byte	0x48
	.byte	0x1
	.byte	0
	.uleb128 0x1c
	.4byte	.LASF124
	.byte	0x7
	.byte	0x9e
	.byte	0x17
	.4byte	0x93b
	.uleb128 0x17
	.4byte	0x11b
	.4byte	0x970
	.uleb128 0x18
	.4byte	0x11b
	.uleb128 0x18
	.4byte	0x41
	.uleb128 0x18
	.4byte	0x5d
	.byte	0
	.uleb128 0x1d
	.4byte	.LASF129
	.byte	0x1
	.byte	0x47
	.byte	0x21
	.4byte	0x98d
	.uleb128 0x5
	.byte	0x3
	.4byte	memset_func
	.uleb128 0xf
	.byte	0x4
	.4byte	0x957
	.uleb128 0x13
	.4byte	0x982
	.uleb128 0x1e
	.4byte	0x988
	.uleb128 0x1f
	.4byte	.LASF130
	.byte	0x1
	.byte	0x49
	.byte	0x6
	.4byte	.LFB3
	.4byte	.LFE3-.LFB3
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x20
	.string	"buf"
	.byte	0x1
	.byte	0x49
	.byte	0x26
	.4byte	0x11b
	.uleb128 0x1
	.byte	0x52
	.uleb128 0x20
	.string	"len"
	.byte	0x1
	.byte	0x49
	.byte	0x32
	.4byte	0x5d
	.uleb128 0x1
	.byte	0x53
	.uleb128 0x21
	.4byte	.LVL1
	.uleb128 0x22
	.uleb128 0x1
	.byte	0x5a
	.uleb128 0x2
	.byte	0x72
	.sleb128 0
	.uleb128 0x22
	.uleb128 0x1
	.byte	0x5b
	.uleb128 0x1
	.byte	0x30
	.uleb128 0x22
	.uleb128 0x1
	.byte	0x5c
	.uleb128 0x2
	.byte	0x73
	.sleb128 0
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1b
	.uleb128 0xe
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x17
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x13
	.byte	0x1
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0x5
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x15
	.byte	0
	.uleb128 0x27
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x5
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x13
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x15
	.byte	0x1
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0x35
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1f
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x6
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x20
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x21
	.uleb128 0x4109
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0x22
	.uleb128 0x410a
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x2111
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"",@progbits
	.4byte	0x1c
	.2byte	0x2
	.4byte	.Ldebug_info0
	.byte	0x4
	.byte	0
	.2byte	0
	.2byte	0
	.4byte	.LFB3
	.4byte	.LFE3-.LFB3
	.4byte	0
	.4byte	0
	.section	.debug_ranges,"",@progbits
.Ldebug_ranges0:
	.4byte	.LFB3
	.4byte	.LFE3
	.4byte	0
	.4byte	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF39:
	.string	"_dso_handle"
.LASF12:
	.string	"_fpos_t"
.LASF48:
	.string	"_size"
.LASF7:
	.string	"size_t"
.LASF95:
	.string	"_rand48"
.LASF60:
	.string	"_emergency"
.LASF123:
	.string	"_daylight"
.LASF53:
	.string	"_data"
.LASF115:
	.string	"_wcrtomb_state"
.LASF116:
	.string	"_wcsrtombs_state"
.LASF6:
	.string	"long long unsigned int"
.LASF52:
	.string	"_lbfsize"
.LASF128:
	.string	"__locale_t"
.LASF113:
	.string	"_mbrtowc_state"
.LASF124:
	.string	"_tzname"
.LASF108:
	.string	"_wctomb_state"
.LASF28:
	.string	"__tm_sec"
.LASF5:
	.string	"long long int"
.LASF0:
	.string	"signed char"
.LASF83:
	.string	"_ubuf"
.LASF47:
	.string	"_base"
.LASF30:
	.string	"__tm_hour"
.LASF74:
	.string	"__sf"
.LASF37:
	.string	"_on_exit_args"
.LASF78:
	.string	"_cookie"
.LASF73:
	.string	"__sglue"
.LASF10:
	.string	"long int"
.LASF100:
	.string	"_mprec"
.LASF50:
	.string	"_flags"
.LASF41:
	.string	"_is_cxa"
.LASF56:
	.string	"_stdin"
.LASF85:
	.string	"_blksize"
.LASF8:
	.string	"_lock_t"
.LASF67:
	.string	"_cvtbuf"
.LASF86:
	.string	"_offset"
.LASF114:
	.string	"_mbsrtowcs_state"
.LASF112:
	.string	"_mbrlen_state"
.LASF38:
	.string	"_fnargs"
.LASF44:
	.string	"_fns"
.LASF24:
	.string	"_sign"
.LASF19:
	.string	"_flock_t"
.LASF58:
	.string	"_stderr"
.LASF26:
	.string	"_Bigint"
.LASF65:
	.string	"_gamma_signgam"
.LASF79:
	.string	"_read"
.LASF102:
	.string	"_result_k"
.LASF27:
	.string	"__tm"
.LASF45:
	.string	"_on_exit_args_ptr"
.LASF4:
	.string	"unsigned int"
.LASF15:
	.string	"__wchb"
.LASF57:
	.string	"_stdout"
.LASF66:
	.string	"_cvtlen"
.LASF20:
	.string	"long unsigned int"
.LASF49:
	.string	"__sFILE_fake"
.LASF93:
	.string	"_niobs"
.LASF3:
	.string	"short unsigned int"
.LASF72:
	.string	"_atexit0"
.LASF76:
	.string	"_signal_buf"
.LASF70:
	.string	"_asctime_buf"
.LASF101:
	.string	"_result"
.LASF14:
	.string	"__wch"
.LASF13:
	.string	"wint_t"
.LASF87:
	.string	"_lock"
.LASF89:
	.string	"_flags2"
.LASF80:
	.string	"_write"
.LASF33:
	.string	"__tm_year"
.LASF75:
	.string	"_misc"
.LASF117:
	.string	"__sf_fake_stdin"
.LASF118:
	.string	"__sf_fake_stdout"
.LASF126:
	.string	"/home/inverse/esp/esp-idf/components/mbedtls/mbedtls/library/platform_util.c"
.LASF32:
	.string	"__tm_mon"
.LASF42:
	.string	"_atexit"
.LASF121:
	.string	"suboptarg"
.LASF61:
	.string	"__sdidinit"
.LASF11:
	.string	"_off_t"
.LASF104:
	.string	"_freelist"
.LASF122:
	.string	"_timezone"
.LASF9:
	.string	"_LOCK_RECURSIVE_T"
.LASF125:
	.string	"GNU C99 8.2.0 -mlongcalls -ggdb -Og -std=gnu99 -ffunction-sections -fdata-sections -fstrict-volatile-bitfields"
.LASF1:
	.string	"unsigned char"
--
t@A!
^T>[4
:s2s
=B1]
uA+`
]t|xNv*rOy
Ulu#
qiH`
QG B
P5FD
=iU3[
R=!|
T/B*
0rCZ
0rh>+
KMt#s
N:YI
aI]%pXZB
w,TW
Y=ep 
;X.^
yWPw
V.w^.
PiHm
Ip3k+
0fqi
YY)_
w/\j
wUrN
k=JZfM
M&H|
B9:f[J
>Yu:.
?G?<
:$Sd
`\y+c
i&?r#
rJPE
>T=n
h	Dn~
Evv7
I .H
1QrP
ows$$
	+=N
jE5Z9J
	'^XOr
CFPN
!9`S
ILha
M*&-oZS
~1au09
06(q
2|vv42
!:*H
ayw?
3=N$
u~:z
 MNS%+d
FBY7
_fAI&
U$N%{
V6}q^h:
zaM*
#eV)
2Ff:Wn
}.i;
s1hk
ubI?U|
:rl 
)sf8
`PEo
_7Si&
CRf=]
%'=l
xS#\&
rg`!.
MKXVzc;
I+m_.
~)+AR
1Djx
^W_)f
q0}C
W	t8
p(W<
G>3[
RSN=
B]el
6(:?
cI9%
9?1*.G`
~d.H
[lTY
)bok
Ne3?
Z*J(
^)6pVB
Nbap
 p Z:
o&K1H
>!FD
'~[d
v]-i
M6ZcE
o(9l
h^L#uK%[`2d
eU#[
hQCr9
6R-Fw$
O'WS
y}@"p
zSS&
r/;|
/hrpq
dl!Y
hBQ!
+YhI@
8H$Lf
S]+'<;q
}92T8
'b57
|qDj0
L#h3l
M )'
OZ\u
3NL0
22x$c
87Eq
X1G,s
G#F	
tEvd
:1+I$
b|,M
r>+t
_M$E
sNJ9
$oT	r\m
 V|i
](bzO
UR:Z
2P"]
Lvs5R
JCW%
&F>n
n#tU5
)7U]
sl~~p_
oT	k$\
{?!1/
2J@*
]vrX"
30#i
inp6
7k;SU
!smBo
(rvN
aNVb
=H73
}[)X
o_Ko
XzVkr
&,iEz)~
 a>r9
I8mP3F9
	CX8
>Kj&k
L-=,
i}\y
.Z,T
}BAW2
LT;`
bD	w
01lMH+_.
F[@U
)WaK
*s&%
LQ1]!
bm.}
t?<}R
^q:g
f'YlE
j[OL
<1O8
L?To
+t-%
%Brc~
'D"r
mD@`
w'B^
 uSO
H*Ojq
R	jU
[xq_
>"}!
{TsOSdU
qCYpYUb
]%|v
_,o&
8z\Q-
,"\n
qCZ7ZYL
"E.K
w`k^
@~#g
t'8l
5#eV7?A
YhKI4
.qdQ
*}8J
\9u#0
!T< 
pF1>
=*l{
3M<:
qH`h
8>N6i
#Ci}
v&9o
x]p)
AK|C
AqMBV
$^H\
39`*
|2:j
`A9nEwZ
Cu-R]
tEgt
v-w0
(`\4
KZ;z
]<D-/
vz#Tmr*+;
YS7L
v%	C
*"{-6
A=V&
?AWx^jLs
c(N-
M~Ld
"C.`
xSMg<
5UtG
6+5v
l'd{"T
3:Ix
 HjN
i.)OMYk
p]rE
+3G]
xT T
A+5H
9N\<
*UzN
;98`c
!IaUY
pYxM8
X?|+R
@ @6
%ZHa
T1WU
Xuo#
4K\#
@D^3
1DG;
J&nQn
?I4hT
\Ai<
E!t*
O:)+Pl
#XS}
Bfapj_A=
8AV*
kS;1
npV#
tlQ"$
b-!#$
	9GXAIR
3#R.
bD\<
oSQq
bvpbu
V,n!
gPq[
@zJ$
B55 
L	-C/&
^+|k
VI:c
MqlD
7br'"
tljU!
<`Od
Zd-|
^k7=
s,gh
]yc*
`jIK
t:K"
r{/<(
JI }
qe#]
3z+@
'NKA
f_uH
<#w0
$(Zr
NnSoo{
lyB%
UvtG
q6l(
~-:I7u
X+	U5
>Qq`
)[|X
&[7r
{F)]
8m'@
O'$4%mH
srRC
p"4E
`_7	:k
c'aQ
J]$4
yU52U
G|{v[j
{RS#nV
Bm#0'1
RvDi0e22_L
qe5z
|%*a
mm/+'7
s)%O
F6`i
 Mdm_f
`7e0
 (#Q
4bGH
u<	D
eKu`
T&b`
:gUY
z>\m
BFlm
ly~L
xDJ3
q]o	{^
{y8oc-
3Q.?
I`,!
TNJiP
H'=c
SKs]>
)9}-
v9j;
+l5<y
><@CDds
KKt3
%B}7
@w}	
<41b
:.r$
*;hXi#;
m;\<
5]a=l/CiX
yN`e
k(Q<
*-o|'
=H'Q
-YGd#
0K}	
K~+t
-1iKf
vlMz
^sA~NV]
W{7RhGo
_D2^
ESoJ
f;KE
%S`H
fV$<_
zk:o
}r)K
d#.P?
Ovi@_/
I.8T$
ei [X
\GsT
c7DW
k^Nl
O	Z8
w8Dd
uyIF
neV4
kkp~
HSM)
96w%!$
?XHF!
7xyZ
"L5@
_@>x
WcEDv2
>Mvh
R1*U
lw6v
F54F
\fn6,
xpsd
x{]^2*v&
]5Y^
*a4M
Y,D:
GXMb
\EIWc
?c_8
)&Z?
-=*#
e	@w]
AC4,
nID3
}Xmw
;@dj
y/u|
wH5=
IBAk
9+Qz
?	VK
)fm~2
d)$)
X5.Z
i70A
=`	B
y%8ER>
HQ8t\
Ct<@I
}yMH
1 &uI
x0Wq
j#E*
bUpG
_{Y3S{
^Ktm
yoY"
I{mc.
vCb(V
99%_
t[RO
s1#x
~L?~
Etg8
}5(jf
	:=,5
e;hJ
hDXL
I3VZ
/+Q/
rxB&
\N~r-
oPG\
~:{3
[(s`
wPxI
S ~J
?0qF#
MIwjM
,Ho_%_
4)@	Fo
dx*l
TGpj
:xw[ih
.@Bp
7)ZB3
gXA{
|*q~(@#_
,y}[5
.5uByQx
%jiN-E
':2b
_GIoG
oU50|
s{O_@
Xui:
zS.9
ib53
/L4!5
*[Ct
Hs8W
3=(S
Ga_z
4kDG
R,sF
TIHN
(j5=
1~B+
{uF{
#7@M
l)Q0
<Q}q
o|dGn
tHY#X
.ffk
dq<`(
\wu\
VJ#o[
#-'k6
>k9D
jw!x
uA3+
|%1]
6eute
pIL1
D*_-
)0/G
pL:?
Y1^<
w,f[
eMJ|
Xxj0*
;|)zbn
"CL}G<
G>`d
b5@3?	0
T8mN
~T[^2n]
BW&@^G
s)F@
@hTk
s~UG
Hh?W
^qw=
"ZpD!*
0X]z'
bPzp
?|)	
B1u<
>dnx
vL2M
l8mC&3
?Qxp
WT9ZT>G 
tPCw
TB"9
#aD?
:"LDu
3O%,
4`+yF
a|Jf	
Fy$L.
 |	 
|(	'
?Xiw
gTMZ
Ddyz`
iv(t=(m
QOqk
hRl/z
`Aw.@w
iV1f
Bkdo7w
Bl<[
vI-7
97Q[|
QtCz
?!4?
=T6v
)[;tM
af&g
H*#ZW
&mA2FD
WDqk
 q1	O/
Vw!9.:#
0Jcf
#BK9\
<pm{
dmKr
:=bz
^SRfh
7rwT
xObxU
l-j~
2J@_(
A/	>
od}.
9IL%
6! <
<Xd"
l]v/~V
I . E
E^TK#
myQc
G~R3
s.7eF
?I.Dg
"ea)
F<DB
2o1I+
>[ia
I-YjS
y.D$
u,^S]
1k~#
0v(x
BW,e
.5de
^'rA
d("^
R-1 
-&W;u
'0;<
W(ia
-"]g=B
n'H0Vol
D*.B
%=NO
R_Rd(
I)bz
T$6a{
E]@)
C;JS2
Sxlr
	H{4W
GC!Ym
P8+{oF
:KiC
V~viE
M!"Z
c{:-
6y<b
/aBK{
K2~0
\92"
vU<di
sv~+
|(i;
2	/)
h=h4S
D?9P
fe>w
={R2
t$c+
rt#,
$z(#
7U/s
=C1{
"3DUfw`
_CONSOLE
w5$]m
_r*ldV
rr@{z?
vlB.I
`nC 
xu&\KX
jhcJ
ap:]/
$b&G
O'!	
8oa3
F's=
7w28
jJb<
D<P|
$G^{
ZxL[
&&lo!
:4#L
q$t+
Ir;q
}W-B
.33y5%
n *n~
la*&
!]![
!HsT,ui
<2a|
7jTzo
PL.l
Iu-X
=`0E
Us"+q
KY;r
j[7lLx#
<scj
a@Vr8?
D(j4
eU|2@
p.=`|
f<%!d
riV6
+'g6
rS%6
Dl-,
xP;v
:Y]$
'baJ
IjS?
t]1a
b@*K
-];$5
$b))E
FCbi
c.B2
.$}JB
5QS9gE
G5Vet
pRHx
I!(0
QSi_
P:l7
b)6Q
d>*U
qbl{e9
}u"]
J`/k
*?P!
ZcjF
dqbZ
cLpq
xWZ]
Q#{;
zP>a
I09hKh
0#8I
@8!:l
_}26"oc\
,3th
pL;s
_:;H
>3jf
baomPZsMD
<dCa
Tp>NB
&qDT
QMFap
 @<i
BN,`
6|vI
N`ce
*	O}c
6{X>
/33b
vBLm
y83a
XB%D<
|<k"@@=v
dz1m
*c`Z
dQ78
Ihb$}
Mf8X{
d}R%
r{y+
@akr
o^/gu]yA~E*ha
%LW<E
"Tmn
~*D]}
'mN%
7eJ#
-V!v
''$\
Y^^%a
;mlBm
ZRUwi
EI`}
b<$9
mbR@f0
.g8k
uyR	
L/YM
?lzj
X9gK7h
aeC5$
SwmC
yv.jW
bvW!
qC}*X
~9`/;8
N2Uo
p>?q
&T,:
]G.*
&8AY
EGjt
Cn Q
&qd:
52d'
VrRM
~uk=J?
9wBVn
I"%](
oVPx
5v Aa
QQx8
*5OF
m1SK
aKQx
DUab
5HzP
2!Sq
|v.z
9$a'
SR56
-W62=
'V:r
BDe71/
+	Fl
mo"!
)Q.4{UKb[
qB0yd
*N[di
-?E(
6AW^
8OI2h$r'
^o2*
\!g8
t/j(
sni\h
XL2_
!fa;
;<Q"
knO5$N6
}|Ce
i8?	
jHB{
qTRT
g'"M
(z3V
b[j-
s,T7Z
g@sPY
qPP^
-kUX
`U^6
}o}),fZ
\(5KE/
5+$f
2Uy&,
_Upe
)X2y
$1rK
;^,O
;V~Jp
t8d#=
30t26?
WR8i
&u8C
1&5@
C{vm
z:n_
<Cr*r
t~.}#
98L]
$qaQ
DE/t
~?<m
mybZ
#NXT@
3uyP
XLMue
9b l*A_
ZY/u
#NnH\L:
3+%.
M|+Y
yE&4B
r"?L{A{
6Xzt
.!r8
]}NQ
X&dNU
j>,F&)
Rl"o
!}4~?
$\!P
/8&h
o<"S
w(A%A
bquz
_5&!
io9Ac
ss"f
mPa!^w
n2`.W<Q
vvE\#
.XY>
*U'wP
}gI%$2
ZY)|
%l5_O
bynh
d+Dw
6XX[
])S/_`
0Uq.,
75:K
^HN)	
}Y,h
LY^w
`4}k
}X:O
|bps
Q/e'<r
n,/3
wD9Z
-c?/Z
v4@?
0Red
NbCK
?Nzs
I$8cteUdx<
^kZj
sRVe
akQm3
1.kc>
:! l
XTFS
R5#y
ua6[S
)Oax
,3b.'
m9< 
&<9TK6W
L=L*I
zx?8fT
2JP#i:
cZp^
}A&*
|L%y>u
H=),
w6r{
CQ~}
UN_6v
g!) 
BUDD^
DWpE
V/w9
7b$\i*
/~cV
.>Oy
UF	]k{
PC!#U
(vGB
49K}>
X:"Eo
LI9-3
PiVSw
Qabe
Tff)
!G\`
"3DUfw`
_CONSOLE
$'qA
K '~?
SBPw
Yh)h
B4SU
Esh~Lq
PTh@
{${V
vR'rKS
Q=d g*0
u0i#
NyLK
N%~6]
}/ZR
tWD)
rU(q
yXr:
dE,.K
"vZ@
[LW~s
ce8J
LM0c
*Z&S
h7ID
3Rq	
c0oLI_-5
8CF._
5.	t
=hSq
YVM-H
Tkwn+
X!UU
ycWu
(K8r
J|cF)
X}1%wY
6~O=
/Ps(
[A'x]
|5L9
"[Js
&e@L
"5:sc3y
kmJ2
Y[>! >
U?uy
M{}2
j4k>\y
-),q
YM(qL
NZN]J
UbU#b
%VCq
V;S"Di
wGc?
8U=`
#v?)E
WsRQ	
6Ul4
'R3Jq
o{Dd
d(LA
h`d*
[EF.V
8'fB
S1+'|
I	AJ
!ti*
A~}MR
D\S?(
'$VJ
hM/$%
>9I@
-5g!
ylk#
4Qi"H
^jK_M
^{C%
w?oZ
Q:>)7
aTQ|
[\lg
}m5>F|
2VF>
jdI/
=/]Z
HE,Q
M0"C
ErC7?
CDiU
!7Dm
O^tP
Z%D@h
r)'3-
l=6\
;9RV
`(O}
c3yj
g6SE
?\Rw
@Cf6
O=$2)
ZDpxWH."
a(Zg>FX
iKKX
!jfe
ib%5
a_e|9o
Xidj
Wp*=
J)qv0
;>K*a
vQpxJ
~JaE#
<t(0
ncFNLN
Ic-<
2\nDy
AR`*a
E][C
d)p1
?L?,
lS|g
;A.n
cutq
NKIK4~
zhNtq
8qL&
;y{r
CVb 
Nez>28
VA?Y
n3IW#dO
c1EB
	22H
A*>R
7I${
-	sI
UWZQ
!d;u@
g3Zi
!p]iqoj
)$KR
$1F~
E*'f
YOPP=
9TSmy
TcRg
vg86
g[R6
xt	9
31#t
P#0eb
J6|1
bVzn
YZJTo
7iT"7
*?r m
)*m7
OUg#
ELf@s
#\6brI7
`LuXd!
v$x0T
&(.pJJv
uGc)#'
VJ"p
3)u@
v{$'
*hb-*&
ji|S
{!2~
	#YI
F]f>X
o^DG
z[>(
1&b7e97
o#dL
HM	-
@;$`0
ji(|T5-
e%a!
&kC_
,[tvv
i<K0>gE
LBN\
0mHu"
57)E
tAT)G
6(i&9
_1uF
VdeQ@
8 jy
g&7r
^2<Y{
feR;y
AXhR
#6<"
^pvT
 /OX
V'GP_
&1eEJp w
3OW3
{b~FUR.
K?$l
>8k-
Tlf[ba
IGzY
ivz*
HI~#A
Z_#b
|J[x
vwK|
5D`3N
w%/ 9
8EF2
`Np]Z%
,0~iE
}/^l
[\jh
RHFU
T}%	
~!ci
l;_:M
J)N H
%bILAr
uihMv
'K,u
ERvF
R~-_
qK2g
B 0v
$~^0
)etS
f01x
{$_=
z%\N1
"\sR
auG	
Q:,-
daO8_;
gN6~F
B;'kh
s5Gkg"
AYn2
g]tb
%2Jj
Mw#,{
@HNR
X<-c
MU9kp
@^vW
4PVnS.
%1x6
0|sU
gJ9z+f
 nu(N3=mF
9m}!'8kq
HFkl 
6|8*
%4:9
C|zQ#0T
g$CL
6tn?
I>U*'
	S]5
bzFSd~
"jn){
$G#t:
f@-o
PeDD-
'O@'
Iwy`
ZgZi
ILu(
V/`E
'#R$
6T."
~jb=@V
2>_2
tG/u
A=(^M>
uL:	
qM|j
P4)]
_=@D
({fN'
+P\]
b3,v
9>M@
)Sf)`	
D\61t
"PqA
z*Z9
tP|gi
I9`?\
W9xg
*rB4
i57R
TFx+N
"3DUfw`
_CONSOLE
kUJ;aG
',TCX#
;I4!
lx{J
'mgq
db_9
S+(9\
ni&,bG
2W3"
QX"h/pN
pr;*
32S}<f
2^}H%
MDer
Zz?V
Q{U=A
K5L]
DU`@
A;[ms:
t8dP
Q^I1
r4+j&s{
4AJ=
0Hf|
O	'(
/uB-
M=I1e
J*>>
*c|%F
hZfT
Jzs?ep
|G^Aj.
?ulQ
|ok+
m}m:
D+s,
ic0f
]x`2
#^v~
 nd9`
,_/X@
	[Pk{q
MrV~^z
2J9x
)IKC
a| Qd
$0'x
Li|@
M&d 3
sBAC
)f"/?
{^/p
BUL*~M)]
^)i#
~-fZ*3y
{<lsE
~12!z
Wyw#O.O.>
hI;i6
,kB|
wHz(]
#kpd
zb9}WbP
a$~x
!f["
JCy&6
;.Cb
$2'&
BwBo
6\w:
cT7:Qq
4[c45
8p	<{
sJML
8pJ!
MHi*
'9d}
G&Kll
bJ?4
YTlo\
^NO;t;
q&S2
]GcW
B;nCi
@E5|
0(y@
h|s8
q`D7
>I\l
R/J)
qUvDx)H
$NTc
\{Ie
lr:px
"=bax
?#$#
z.S1
&> >
QG?f
[g)e$
xu1;
a~%d
:PR%t
Q{.9
/:/YYY
)ET+
lL#V
yZoJQ
-l'j{w
ivkJ
3# 0
"z;o
c.a/
Gf\a
8/oZ
oE1h=E
; ,ll
&8kk2
]Cq,
y=3$
kJ!d
!nv*
S*cW
x 0L
kzRu3
/sg:2;"
`Pcp
39}L%
oW4eLw
]^E3
j,j_
N~fW
#+yk
&_>7
kTfr
acwR
jZs(
.Br,
C=g!
#_1A
Y25k
VQe^
	/s6~
J*t%[
E-.a
Im#=
@qB4
;vpsU
Wg4rl
dX=Z,g3
y|P+
~Q"c
`g6l
8J!&
8byeB
 :cg
FJ1@O!"
7IV#
xA0rIa*
GzWJ
4i54I
V#\VI4
=:<G
HM~g
j;og
}'x6
uhfI
hU}e;
?R:N
4*{w
&_^m
A9Ti
9&j1c
>nNM:
3<FGH
Mbd>
TPli
j;A#N
uAo*D
|Y{9=
mC\By
A{aN
H`>>
Vyrz~
FGd-D
~X3;
${Bg
#t9K
ZY.=
.cXk+H
rbEg
}X&p/
,2_X`
!LGu
8xIP4
aaF]c
/<jpZ
V/`k
H{&m
oV"K8*B
UG.|
 'M<
3dB.
Kw<3'O
J+0gY
`XU=NNY
,L)&$+
ABJzE
"z@,^N
+: e
b	x`B
:0KN
B1,r
>~-0
S>>y
uxx*
o]jx
3d0,
F\>-t4J;jSKiJ<u
+q,@%
vxAE
F4n	-
/Qyd
M=JJ
  < 
rk5A
9P+-
"ED	
?V@Rv
3kl1
)YRvH
$==> 
fF+yv@
$#M5
S,wW
ar8[}
5laE
ltp7
N97|
=3.0E&
7V=7H/p
t$dp
!'^c>
x`&/#Z,\
?f3J
~XhV
l|%z
7kO.
S! )"
cI~6
	e"%
pL]v
5~o&V
jt N
!]=f
FVT=
^dD 
\b*268
|,'Ir
<b@t
$.$J
D1xK
r^@pZ
d/]XB
7B[@
[2Uy
}i77
'U%x
pIU(9xd,
K9^;`G
Ac`	
^4$>
%BD)
S+2p=I
}CT6
QJ&:W
}DUY
a"hnN
]stz
JQ9N
8/.v
>sc5<
V;|//
z`Rd}	z
mu0/
h8g^t
jt*>e
V@eD
ZTSA
={Qn
LM%n
&_d<
f\HS
lw~Q]
j+6!:oC
cDILn
`Zh0
0i&k
5hGRTOT
tlY&
u]n4
U'cD
XC,g
5&"?c
iGNT
{~Nf
!qLy
hp_gfpPqZ
B}0E
V5M*
YMr51?
&Tob
(Y%B
AvYx
s%id3
17=G
&(?d
Vk]tt8hS/:
\~R^=
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585057392
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
"3DUfw`R
_CONSOLE
Q4w3/
_1~i
hs%7
wzN3l{*
#I_R	
BnOp
H#bFD
X3~`w
Ns=W
S2L!
u_9,
aq$m
Ua0[
/uS4
Gcvo&Lz
K>[|u
m	=<
gNrlm
IPxd
y?Nl
$4*jz{
Sm:D
V.HC
n4&p
J`Fx	
gaY4I
Mu')
Yfy.KZ;
j6D7
1UjT
K^ H
@1}CX A
^qsB
S"%\
8Eo$
6D>z;
<>XE
&y9l
SD<N
b_jM
;v<@
/501O
	HCg
`^YT
uXg:
t	=?
51y&
bVb@
\#Fh
zr,T
(Bl|
||uI
(qzo
TMH{'
c;}S3$
'W%WL
LAvJ
M4s&
MW|M3
f2)L(%
4xU'
s!;V
X89a
5?P!-
a\Xet
lz1[Q
t$K~
1:0F
N{P#
\Q	a
tU:lF
N8sz
'Qgu{
)|4x>
x"S;p
dIs/>'
h4 @#
1O4X
#cojh
C{` 
j;6P
\XCf
4P=1
X,Bn
z]tI
dq2vE
#5*_b
3Q$]x
jwgj
:<DoV
x^:l
ZJ'E
;8["
^<2s
LIB2#
Az}B
G	v#x
}wFW
mY'kX
7m4f
&g-c
8Hwb
a/@6p
9MMgd
ojq/)
>=C{
Dt8ngS
9yhF
)}yU
 ,bv2
'`4Z
+t?pAVPF
 wkO
/qox7`
 R00
nPCI_R8	
ax.v
7]#C&A
&Y!#
d=ht
<X= /
7@u4
*sK]
]&M7
`$sEJ
iIT ,
,5/	
u7)y
~n`9Qt
!	Ld
}kP<
+NZx
$UI	
6A$)
}{xZO/
<%TL
+DuS
@\Q(
=>f:
*Twds
*ecv#6|
;g:m9
47CQJ
M[j/
._]I
kU%{&
h{ba
c<('
pL5"
R}hU
458I3
M;`p
FMu)
&?%_
cbeL
UFMu
;Moo"4
n//De
IE5D!
_&dL.p
G#!\
fB7U
dSA$
96LS
~zmLJ
9Z!i
HCo/]R
|$y 
CnOZ&
fH.R
<!yE3
vI#ff
j?D9N
"c>@W
SVXA
pSSR
U*:f8
fZB]
!jQV
r.rt
Si9I
1q`t@
zl4*O
Pm%W?
XmFn
MIOW^ZW
)7:Rj5K
Kup,
eyL7
\-W~
7Og2</l(zSN\
PPk$
o{FmC]
1Xopq	
XyQX^]
^O+4
/p^T1
n((vv
tc''
}0JE
1*i_
KAs"
6/`5D]"
PZD#
N:n_H
GbG^
/tMyY
<x'I
/*s?
xg\AB
l5OH
 :y~
KY3|c
--md
uK;QU
o7[Ae
-M4x
(jjNKX'V2
(e!-
V&pA
O<d3
/2r1y`
&]&g 
oFS"g
c4Qk
xepv
B?nuK
)J[C
>Kex
ji9G
7nK!V^
aDmO
-5Nf
U^5V
/%:]m
1(?%
[Za&
tyrT
`R=i
.lMX
=9Mu
]n_^X?
vf-:
vcQg
Cq	R
41XT
Y(RS
z_Md
SPC"
	/F!
%I@Oo
v*!^MQK
eIy%
Y1p2
m0qN{
/_Z"
bWvR
QUV<;
`|'X
;f<<
Zy|;
F_S`
bPd5
ZZHv	
Fy$w
b:Tp
1G?2
&431
FD.S8
LiTl
IooU
k9?w
6oDm4
gO|tZ
(fEB
pYDXZ
:j{9
}{7B
c:MBhKa
88@hm
=(jl
33#nRg
jJ^QP{
E%hin
0k	#w
&0f)
p<2K
	8W[
aKk&
7_2*`
m[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585057692
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
"3DUfw`
_CONSOLE
sY6y|
`V%4
v/W)
2@dX
&1'n
MH-?
+bu;!
0U-R
E 4DkL
fKZl
'b^*
.1~AE
h:''_
1*+:
3NCM
R,VZ
hh}7
YN&?>
,BEY
(D69g
WgTe
,- .Ah
;[')]'1
X<l_
bRp~
> `,`
2asI-
(:QQ
,*Wb
'h*5K
q*&,m
"Od7
mJm0
}w}v)P
BTY/
5sG@
\d l
Jpj?
7`uPe
/mb(%
NA/j
hXVw
ULX}
K_bj
vk|pc
zMkB
xkJl
X%s&U
lh2h
Y`	wN
xL<K
5a?t
S@iV
JU_>s
/.lJ)
pGDB5
9>t)
,waZ
#O^;
Ft_G
K4%et<
 8Jku
=2].
zdH}
!U`1
4DWy
$tYp'%
'6K\
M{o>
sc",
([ua
&-{I
2,(E
Pm`H
wt^~
-C{)"/`5
r!frm
'=U1
vA65@
K^L1V
1BE`1
gah<\3
a	X4
NDL=
5Waw
SJ7xBY)
&Bei&
M8^D
ZKIt
l5ad
.oax
()1WS
@zw1ax
u~IYE
!lT:\
 9PE3
 z6x
m\}j
K$;'EA
Ym 	c
1&w{N
8MS=
{,>e
*T?~B1
mLlV	
Qsb~
:&y<U
IrUm/
PO=/
B{gK
bq/l
bmp"
8]Jy
3LQWvp
U%=D
+eK@
PGL{
23d>
N-j+
t&Ym
'u{K;
1u0]
ETJ 
"LJ7
cXZaiS
}F^n
$90F
~#,__
t>{H
hV\k
.nuy
`	Y,
	$vxR:
4G'(=
ab1L
\4?&Np
=nGC
Wz,#
E/Q4c5S
5pe!
9B72$
_$9{'qE
|\\Rz
q{o\
UQ>1
@1-o
'&l-
m:H>
.U;y#]
mRLO
vZ"}
~{43%
SDZ.
YEa{&
slqIYTC
Z7eQ
u#aLM*Dmk
GtZE
mEu?
\whL.
lv"olb
L?>|FY
@.[~
fcl%
*+Cd/{
z	wv
RmlV
^by.o	N
&r.b
CKw|
12<U
,cuFo~F_!|fJ$
|k{Q
q{=A
~K*}
%~Bt2
hSNF
{rKe0qV
RB{>
]S@J
z}K+\
Thf$
SlB%Q
.3$%
>H8B
np,fb
?@sW
qb;("	kG
d:R|f
HtiV
]iX_
LvKn>m+5
F0vUP
`En`
T}?)s
NQ]J;k9
G-AS
A'g'
a:>I
b<wD*J
V)LP
}j{[M
3_8u
rb}P
{l)s
gg9y`
R?w*
p5Q{
 =S}K
:b9Wz
!G6+ ;
E= [
+0.EUx
W^rn5AH
of]i
M $@
QT$CA
4>5}
aH!v
k C	1
1dO7
*]gi
 |,3-
h@-jBH
1F=-'
~ML^HM
U868
;{LQ7
8yc{
iV:{
QIb'
-0G4
wlDYji
f~h0R
Z=SR
s@tT
qCPJ
Rr>/1
b Bq
;\NYZ
N(j]4
,g`3
bv-0
?G3f
vGSt
wdR/
$(k|
5aHW
(	7y
p $:
\	0]6
FR3Z
rzHN
sSu-/
&<5y
<v%hC
Mv_5
n	!.[Z
4]ef
Yc[<
42zX
nFjJ6
z8.3*
Y-p%p
Qq]0*R?
'4!$
zS_Z
2yu}dX
u-=l
T<dKa
lL?r~
4),I
A!Hhtr
(&xX&
V,pP
w;0G
@CW{
Ff'[
l'T	(
tJ]B
m{gh
a%};.V
K4mn
x%T*w
*_Dt
tOHi
z7/M
!2F_!
O	d~
L:$WE'
*^8x
CfFU
A'|s
>}T3
OqBU
tT;i_
"3DUfw`
&B5gz
_CONSOLE
Gz>0
	'D3%~
^M~)<
)w^'A
G{gL
$}I2
M~g,
vC`j
qhV,z
Q8qZ
]'C]	8
_I#-
l6)ib
<Npu
s,iN
j_=n	
nkQ>l
>8=O
Yy9"
wyK	Lx
[$nF
][Zf
f=3wc~b"7
?`D4
$3.H
Giax
-aGy
xa`G
sW%pP
s$?c
1t(:
ek(w
:& {G;(W
aSVE
(u35
#Kh|#
	Ia+
1}s&
^c, 
|A.v
KU\/
2.\z
.aM^
T(aw
t!QE:l
1(ss
4'/=
XgtCU
dbm1=
3}80
rMl%
L@{#^b
y'E?O
n6~`
yZXn
\ct9
xO7G
3:)u
vgjZ[F
ks37
?|DC%
D-{Z
dys	
qd!^r
>?>I
xw0sg
@vDR
Za8>
|t)0
Q*.r
2&r9
'D	6
=%kj
#Inl
b Zs!
%<Ga
*c=&z
Mj#*
mCnW0
VAr@
NE";
9F$2
G&O{
  Y'
caOv
9;v'K
~~	RZ
asd;N/7'
0	oQ
C|~/
Zr5d
QYP[)[y
!GzH
e8v~
>n<*
@E=J]
U?d$
`(K%H
{w>: 
-X1"o
GS_oY 
%vh#
<Pa"4
~Q>?$
WqkPO-
o1/M6H
?Laj
<F'!
!>ZX
BeTm
}<P|
g/)F
t90$oP
F+9,
MPZ 
[t*X
`ytj
dO,0
+:"L;).'
	`f>G
9t{Aw
xjNt
B;ww}
zA\F
%t,$a
	rrZ&
!WZ&
T@XD
qvP0m5
hPq:V
8tx0'
^S&*
oVV,=
S'@!b?
6^>k
8w"Y
)/3~j
b}!c'
&+_N
3z}f
8mZE
497Pmy
/U	t
n/q{
i=/m
^H:a
Mm\&
laZ#&
C.sD
nlZq[X
fE2|
"F?IO|
9[S@/
eP"F
XAS-
Ww?#
!9>n-
OyEg
F'@eDs
K>	FyS
mm"/
{vC~
`af7
NV\5f-
;l6yq
D{Zw
A;w#
/ajG)!
QB	0
r@A=M
)/Jz
-cvp
@?Ff.
%-d:
)P-3
)*'x
JgJa
v1|w4
c&HG
X[}5
pGVA1R^<i
6ES=T
b#]J
g1m8
Q.+n
WAG=
yuf[	
u)aL
RIky 
EO"%
N/2}
)hA#A
.="RT
h46rV
iq)u*
hEv[
pC|o
X7Vz^g
**W{
.I0+
2W{\
 pH4
^MHi
BmSw%
{79f
VUqR
YL*+
XbIw
]n1)_
%REI
.xPJWkK
~;,p
jj7!Xf
!	zLo
''3i+
jv`G
RoE!
sga>o
\8Ie|\o
u~Du
]",%
vsD57)
_4=A
[E)#
pP0-Q
'qG\
e%)E
N-f>qp\U
"iO['
G{,K,
qne\
"T}[
-1QP
; m@
W4JF
C=KHr
T`yg
u%7-
G\4)
)ERV
`d9l
(&5\
4i'{
JUt3
2%$*
eI/2>
;$lH
2RmB
)oGM
7ng6'
nf4p
1K;T
V0xbV
ELAU
x2oa
hrEw
2'IK
2ygN&e
u^qyP
!K|uJA
 7/>
qv`K
7}aS%
h%0vmj(
OV#!R
$fNa
nGcM
eQ(}
uAmi(#L
M0=!~
~Jmg
>%Ar
{-*G
I^`+
!e+i
Gq1$
OQ8z+x6
O(?-w#
X(yr
Fk<C'
=[^G
mrWU
L$90
T;802
E%(A
bjoz;
)+Z;0
'{ &^
wYXN
x>lUR
O0z/
 \qF
&'r9
j>Je
M`ke
8	\Tm#
(xEB
tc#5..
Z=.V
6Jb%i>
{<+3
?|Rr
07b<
"3DUfw`
_CONSOLE
NTe>^X
Z>-R
F*}k6
30VD
y0 [
w;Al1
=*#T
:=!^
%v.Wc
3sne4
k/[FH
b;4:
I36U
ib%A*
doOs 
+Kbl-
M_?=A
hx}4$
11!v
%	et	W
gtv5
HYa~
|W >
oa F#
 (DN
cBe*9$o\
+>T'|2I
NK_y
#nu?
?3Ac
aqF3X
uf&2T
sSoz
vE"q
%I[a
Ly6p
G\F&@
t!Ix^
	#xM
Iv#&c
Ue>^
@KG	
tOTa
5)Wb8
	kb,+
R/\H
9xbW
"3DUfw`j
_CONSOLE
.Te|
}dw7W"V
5A'C*A
Y,W	6
rAO]k
9J<!
QOVF
{!;X
F62?
!:q,
Z{mg
!e;u
l!_|
Gj:;p}
A:=;
%{K{
F5mZ
uM,i
)qKD
hV:Q
nA7\
qCCrPV
&R6?
Jy}NE
k	hN
QK,g
Xc	P
|Do*N
E9-3a
cR?U
|mb9
4i<X
XGW-
b4@z
h!U8
uZlX
L##It
*t{g
yt%h
 FrTn
EKQu
~n*'
S!]$7f
f,#Y
G7,j
_g_+
s/r11ZA
?Z)q
mAu 
JDMl
?p!W
	Ec8
W5VtZR
@(Cuc&
M:j*L
F,\E
8|!sL&
D!i$
%IO/
a8eFU_
Qm#'
+2o+
hGmj^
Hk=JC3.
KZTq
=k9f
!<o/u
t~[))
Ez`q
dLgv
O-<f
.*(m
41"$K
Eor.
WQ?I
`077
ymZj
u]7&
><qH
k>;	_
GE.F
tH"2a
E04X
Bk'D
Wc [
WAxX-m
AYBB
O%dn$
Jgi^(
Z]i%
<\?	(S
|x(,
#3x>>
W$Vx
uZF}7
yvl#w\
!tu;
EO=\8
ZjtU
c/N-
_`sc
K{cb
5v-	
}kbZ
b	H/
ytu^
rabc
9%cp
73Ew
n!Qm
@1X%
Z[6h
\]DV
@MMA
~'$B
&7c9
T1o4
;!	k5
v4ViHK
u5'D
jMcj5
*M@b
'S;A3
mKJy
~!E7
Cg<_
AR<I
QU'%a&
Ep)B?
*A[~
0 TyQ
E_J*W
j$Uv
*pDj:
Nu"f
cr~z
V2F(
!z~t%
,XN>{
Iiv&
#:l{
 6`(p
P}8 $
k_9z|
B,uvt
\nwZ
F:1w
D&5P
:-sZT
2'v|!
B7#!,
F`b:
8`~x
<"b)
cM}y{l
BUGi1
`<{7C
OQ3I
v0&=
iJ@"
JG'g:c
=zDq
gLLr=
^Cy0
lZDg
ya{@
gm|SM*
.$,L/	j3
w;/.
Px[N
^G7@u<m
],*TH
$;	^(8[v
b`Cg<
8s)j'
4[ZaD
3DsKGtW
E[jvC
LgJCG
T&I8
eHu3
\2to
P>^Y
#uoG
Aurh
5{_^=
$UAB
@mK@
9 $j
Rp(!{g
E":{
`F3y
e.M;
y-1Z
%Qx`
x~7i
$&yt
<.&s'_{
{_GG
6Ae5
2g@+6
2Nd4k
0pD]
(zDq
Z1!#
Y^&F
8=-~t
@,{	
<Z\o
	5,3
r9hK
O:o%#>A
m`V^
7	JB
pUOg
;6^U
qS3l
ic"D
&~;gjT
j4LP
K!Lc
`9(HA
}o*^d
C%o4
y7aM
t$aK
~,?R
o{dx
vgAq
1DO<
}e@!
@P]O
vs4#,O
Xz750
'TcM
o?#ZF
%]%X
u4xqb
{3(M[
BF=t#
?;$X
P88/
u_"8s
8WoT
+&4Sz
~%}v
C8u]X
SLfp
y0b|
uo<$
]djiC
:hhJ
sH?,
Tp2S{@$
|!?]
:.D;
#V^Q\
;M3=
z6B6	
x,~_
p7P3
@LH?
mEHyh
qh;8
_JfrX
nk5Z
HbTj
&	3y
0)rv80
T	fA
8]M%9
v12Rr
o|+ 
&"[.
Zkon
.sjgc
w$`+%!
MmWm
"3DUfw`J
_CONSOLE
<;[T
+G"M`R
c:o8
71%4
%!sBR?
c|=+#
[$V'
(dUi
iHq0
m$WN
UD;(K
LD~N
N,#*
DiHG
Vkibq;
Tj%O
e~oN
V*2 
HU]6
}yMh2
MW2d
]@m^z
?!'u
*0DY
(\M+
h}=3q
tXlMg9j,
+O}=
zluJD
K'99
wX|W
r4F{
WRs2
+5$o
eE|l
9,]j
Mk%%_b
(TMP5e9!eb1
Uc,9
6<Z/
("v.
<15i*>
ornc
% Qk
YO}L
O<(#tB]
nP w
<tAu
#6Na
IgGw
QeQg
E~'U
;qi*|
ovIi
7oY"
t]p!p
3O,i/D0
u=:X/
d:c74
 X?DR
lN&XC
hrc%
#hFC%
+ZO[Uz5+X
j16*b-
C&nW
WO-n
pY>v
+Nr{{$
\\Fg
d;Y,
P>pc
c'ZO#
tPvd 
We~c:<
S3nz
z7M~
. )dhJ
8N*6H
5~&*
UT.^
	PHQ
P;h4y
a  s7z
(.p|J
w1M"
&T9$@
59|}
D[#(
+R,@
0%"M
C/A?
9Y	?
]Pk;
Tj?F
9	n*
bbf]g
4cK&
Pi2+
,_F!
b2;D*
{	yX
EVX;
A;%$}
^"K^r-
V4]A
w10_
Vk	Z
8]\@
w'GJ
F1<9f9
1se(I
94=X
nBtbA
	|0eCLk
T~Y	LE
a5V1
}n	)6
x23:w
Ya|TC
\NKr
$IQK
1o,E
{2/a
:D}L1
"BH%
g$ej
a-?.
@SQ(d
i=+2"&;
	sZh
7q7>>1
%FO!
HC`A
-J8L
~Z[:
Swg5uh
^<gH\
^L9S$
4|-$
t<:o	ue
Kk[$<L
fqoz
4b^TO 9w
l^;b
(y)p
.a3L
g	Aa*
bO\f
EY$"
[A<d
XPgu^^
uN5be
[mKs
3IYb
gC5y
 Eva
pfII?
]KPR
MvZ"
1u(.
WBF,.V@
Cr+{
!e=P?AN
6SLI&i\
kMNw
$i!$
z.)$
SbZ?
4hcm
TWlb
N`Ic
Apu9
x41L
,(0z
fPjN
BQ{ez`<4
m'sl
munoP8
kfK]
&$Cj])ht
JoG_
(oq4<+
j2U#!
{siq
W3}&3
"3Ht
YD6D
,>1^
4%r=6
Lc6]
c5cE
pjAs
}b@#6_
?WdV
A?'6
@o"^#
$..&
tQom
1&{h
v*TA
F5PM
<V]&L^f
Y]@I
xdnuj
RX")I
`u,e
(xd@
,	d2IF
*3p\
O!I,
CHsQ
_$/+
z,1O
7E6ms
0EB]
NX:Z
4NXb	
f;`3B
uo|r
&@vC
F(I#$g^
EV	v
mn|@n
+xjl5
0FZU
SM'a
f<(@
-6tm$q
}=r@"f
,A9h(xZ
R"qU
xodI
5gD!
S- >
ecER
M8X&x}
R(:u\
CuwXv;a
:}D0
FWE)ZX
bp r,Q
74(e
E'vS
_Q61*
|^m3
Ue`N
uE#H
/m&;
K/BP
W=gu
zIt~
weQ{
J_	s
'fb&l
cf:{
gZ#s
1Hyj
l]iS
yY*|
8 Yz
wqV^
zGy1
UC1^
1F?o
us 0)
rUT~
os3D
\O6}
4?5w
S.N1
<&Zz
RlF`
1YwbDiD
G1ZC
[/~*
Gdv#
'KxU
tT%d
RnMSQ
bRA8
'RJh
IZh{
E#)^
]3<5
M~9A&^
)>*2o
pQ%`
NBE	o
)sIdi_
nxCpw
2)b})5*
T~sj
.hb58
	C6g
n*~3l
"3DUfw`
ww)H
_CONSOLE
0X"{K
H1TP
h,"L
;'Ik
Wf)z
Esl3&]~
.KI(j
^fj&
q3ad
,n}k 
1g p
CFE5
(27b
5HN<
rpyp
gp[p
3npg
mb$}
r7T+
s)[4
'9=Q
hioi
{7Hw
Kfc9
Tq7]
)`xA
8;<P
zg.7m
aAY5BD~;
xJ#Yw
B[*aO<
x7+vI
UCBak=
vR>{
nYI}
$c;d
v+Dm
 *xfd$
$Hmc
.c^m"f
U.ax8Tt
0,Dz
"u!5;
'1LL
!a)/2
%&ppV
lC+*
CF3%$
&vVaK
Xfy?
tkMer
a!-z
w(cK2
V}5)0
""A{L
b9fD0q
8MOD?K
47*^6_
Cj"P
;:_&
9r6XH7
\&3SgL
E2Z 
FTQz
3W4=
scp%
L|}'
4g/A
EGVN>
(A&P
we[Z
<A(??t
dLa?
7Mcd
	ab)
!E2"
 QJf
Yk8K
F#%%
uZjOV
#MGL
frCTu
[z(C
g'ygx
)gA4
1dYO
i)gj{
F,W\;
Tj[&p
o=5A
2S`n
9iNiqS
2QOO
wc{O
5P)	+
ao}"
I`gx
ZG,p
F`o$
5a~DGv>+
Ria^
-](R
TUP[
)aEP
H}2)7X
awL5
L6Z-s
kG,B)
w'PsV
IJ!4#^
Q:14vv~BN
U|jW
0[iI
}Jhc+YV
EaJ	
[#x)&
a}rl
t22u
(fbn
0bz}<
%Hjk
lGOl|^
VrcO
RT2:
_4JN
}"{`
8{hZ_G_
uAF6
<t1R
~zUN^o
2b?l;O
6P 3?
StJU
zwPTM
z5U8\
"@FO@
k/g4D
?d0Fpi
)Gjq
1fo9
xl H
t6OI?
$9:a
ws%x
~Z))
w{1u4!o
&NYh
 +1bA.
()X30Y!:
tuB_
@<1"p
AoE	
hKVM3k
yxMY
im!F
k<X8
9)=Y
-4^S
 _PXC=
2M	n
jX1+{
5o%BR
vkT:iO
oyxs
sTwAk
P(!J
'h;n
vr-9
cdKH]
2+&f"
T)gb
(g94
.`Hu
J4U{
waj-
/`//
/p5q
(dZ9
M&BHm
9+3ED
F+f9Sv
 CV>
_o)f
BT[N
*CYB
kt.e
`YLB
a"QILZ
0{/p
obSfS
6$/A
Au:n(
gMApH@
U:n0ao
hM>M
.0x	
vACTR3
M.~i
61i3
CUOY 
3WhEd
uf1z_x
F&:mT
'h{5
^Ch1
4ngs
F6XS
8a9I
]3;c6
ZG$1Xx
WU7|B
duDGo
4]O}
2(p'
v={~F=
)L	e
{$lm,H
3&:<
_{U/?
T{'4
X|n*0QJ
7BcB6S
YavU|
R3eXO
("`b
H`Rp
bu0 
}%4%
r>TK
H4:]
78q)p!
LzKz>xt
8IQSs(
=hl!
ze	J
8,\XH
,ZX#
T^)>
-:-k
M4r@U
}IJwt"T
vfp[.
"..g
aTea
Gv%p
~8$fy8]&TI
.i1B
DzUT
Ws4_
~g!x&
wlSO\
|):L
P[+W
cP][%
C dg
-e/;yw~
:h{^
qr:'
:StES
A)Pbl&
#f4pGK
~M0h
(F?N
XWy+
W cq
KNxL
jS*}at
yBPf
xIMx
`5Pb
 !|"
h@"P/
TG]>
L:A7
wE)0
?_%S
F}aY
txi#
3gYTyw
ZOeea
iV3r
9aS#^Q
w>lv
.VdF
;*rw
H@Iu
Y%Y)
n-Fm
A07Y
\"&'
I~GPX
&&h72
>z{%{{!
erz\
8+U[
\TAO
0r6~
1$lE
 Lux
*Nef
xgSB
9"bEu
I4?G
.#mq
bERxS
hOv;
uXuzz
T5.V
\LRKR
=[0^
#B.U
'g,x
W]}J=
?m(,
Zb}j
NEjS6.6
>/Pr
YzQS
b>yPBl
ZfAb
?i"$
FHwU
il=oz
.v(	
"3DUfw`
_CONSOLE
PGYq9
LnA`4
jVi}
N	UTU
7)wIn
au4mo
@OPC
9CGt
S4aq
+rUg{b+
\g0*U
Z{4c)<`
{bUN
28 \pc+
$3k5
 gRE
d(yf
?s?*mYllc
[M1v
"fY,
\!Vq
T-^Q
eCw?u
z87]
Jlv~
GFtQ
=TaT
*Vt0
0j}b
;q	$
Hpu_?
"F3Yo|)%|
Q-0{
WA"P
O6)BD
jN?^
fQ#:<
|%re
u7Ti
R8]TD
OkTVF+j
<paw[Q[u
 !pn
J8&N
|}=-\
ZnuL
8TY*
fa]1J
Q'DE
R zx
fh/R2
@M9U
FXNBr[-	
_gxJ
z~tD
EDdF
"3DUfw`}-
_CONSOLE
y0e?
,4Pj
QjJG
Hq@+
v?29
S]M4
"k<"
Xndf^ge[
aDh|l
^gV`
RU-3
(tG8
 5a02/
\7Tq
[B8"
\\282ip*+qc
cKXL
L7o)
MD*/t
3]H<
>jIS
bA;L
=rL(
Z-s[
?9Y2
sF_urn\s
<]0J
#k=}
F\4?Q1+PH-
q"+_9
l<N^
CkdA
p)S:
(n*y
($La
Ig?~yeq
tKNq
;s_;
Ej:@
BVD]
09j6
Y6%Ph
@klx<
Er_VS
S5Wb)
3y,T
`#g0
ew'6
`f11
D9(gL"
1Iu`
vXvp
*#i'
8%T`
?gHl
:_\h
F	wqL}
p#=JD
C\@zqk
^w=l
5Ti3
X&K3
PNw:
~G!_
f	52
wqTw5j
}L%o
r:cXUV
1k}'
	R/D
xy{%<
Y~V,83
fp:f*d&
hq:r
/,5/_<
UeBT
[xS^/
8cW(
7W<Q
+FyD
I'QmZS
eZz@U
ha~H)ek
1$ud3R
Ud!?
N96<
la	c
PH+*w
V`Qja
]{JaW
G4}J
M2^H
Eb8%
|}N>S}'
pz1L
.bnc
_vA>
~]JU1
8B``!
!oJyk
:4d3
M03i
OO],9
`ah'
U'"A
_8e[
]x-q
cSy|Z
x>Nf
-p[2r
y]k4
h>)V
%R9'
("~K
3~9g
pWQc|#
D=`_Y
;^47
kCh1
-}RP
?|(sB0[
&z^'
Ggb|p
SD|^\
xVxC
XJ%$
*tdof
yCY6{
#ed:7v
>E(=!$
L 	w
W[Y:L
&*,x
L;tX 
)g;{
O.XVo
K}!VI@Q
o'7UI
}yl<@
hJbZ
l;&b
ndOb
$U3u
x|+'P;
{ZAD
XP	6
wzep
FILh
0$L3
" DZ
2T!<"
.`AF6
BF3)S
xyKbV
DDs!q5
DOmG
G2J\D
0VPq
G8l2
W]G0
]O\w
r?&A\
Q>-o
,8Zq_j0
?^eb
o;wK#
)iJ~
	er]
N&\	
"k$@^
u"He
j`aBE
	'}x
+7T<
KEP`\:
dV%A
bHEH
6c"N
lK@ET
tva/
IauS
U&#h
D:FN{
K%>L
Y9Wk
_4\YOl'
d;=SH{
.E%f
I}[=
qq*8uOG
n	Im
?##XP
ry,V,
O(R=}
x[2b
?4hy
+s}P
EU?g
RIc,
\]ZJ
Qni(z
YKBA%&
CzaT
?S8[
e%}	n
bB(F
!OySO
jr*`
qm5t
Py{[~
~bmQ%O7
h	D|FVT
X7\>
-,|bqFq.
5)UK?
6;_n}
hbU!
~'{*
Gn60
6/OJ
/`7H
C;4]t
-a/_
s^H`
*3]bq
c#>k
bvTa
]ApL
&tXq6
J{<}
Z2Nx
xMHHpz
lg`p
UVA!
^j9x
'$|T
kLKSW
5E<&dv#
~kuFT
qb^l
/?*J,
2ayR
}Do{
] a@V
c>_V
Z&UE
xQn#N
WW+L
dqpf
NYY3.B\)
J(~Kvy
}w*F
7#*./
1<nW
7J~j
`$WX
[d<=
~x-m
%KL8
3gg)n
=JxE
bE5#a$+
5S;@=
ZN`X
_\[%1s
c32b]?
)`4Fh
oR13\
6E\"
xF|<1
(`5g
t/vA
l',7
&JLQ
"+DJsG
xJH>l
McRM:
$*~Q
>Cu4HO
Z "@b
pA`e
I(a'-
5z5[7"j:d
@GRX
({tN
!H{Zg
TYfae6
3N]z
|08g!
Q`1x
yN}m%=fnNq
5Gv`
<1WwIS
#eu 
U~L&
`3^HQ_h
v9V~
?2qA
_HT`
\\wD.
JUal
"3DUfw`
_CONSOLE
	%WTn
wL}*8
ine.=
^!egi
"/-~
;]Y]D
h"=P
ySQY
XL3g
&}'2u
xi*fp
-j83E
5Ds1
7X!3Y
U@f@x
htj@
a+qQ;K}
v`47
8!v$
-#IR
JRB7<
R@yV
;cMD
|B0r'[
$sz4
pg,4{i
I4s;lu
"&qizw
?iUVX
$8'!
j-)Z
$R3k
{f#5
RNPK
Oz:hB
k0k;>
5Ug`ej/C
)n2u
**|`[h
Cgq	,;
Led?@<
"$2Ab
rWF'
T,=2
T	.iL+_
Re1$c
.3KU^$BP
ij*!
OOzbZC
"3DUfw`
_CONSOLE
yp/K
HP$s
BI,i
n*fb
?EA f
U|?&
?:Q8g
'|8e
o|3Ef1
, 0[RG
vP5h
6`'c
wL=3
i7c-
"U$2C
d\oE4
zQ3J
j0x}d_
!$r_
wL$L
o,]}P
oY<@
}WIq
)^b|
0~ngK
H"sb
&^p8#{
Jy^Ck
(wl|
R&J<
vOr8d
l-Lb
IlW+
elfX
F$nN
L}LU
]Q!f"
'<":h
O%kAG
*vM6
f)ZH
$I``
"&ZH
R?Ml\
BC>H
#4iE&
w@$	EgZKQ8
.1\/
P$s1
pu$^
tR;-1
Y/vR8
vNja@
$0yBp
8	<Rm*5
0V9/
)lxzG
SkgN
vuuP
@U(|wD
-gfw
x1y(
KVqz
OF&?
CmF8
-bow/
	M}S
ohGH
}KW]
cA`a
bR	7
THpS%
! ?f
"3DUfw`
V/JS
_CONSOLE
^5usK:
wKg|
r[cC
^d\,
56T%0
~]zf
IW{*
C)&O_Bn
R*VE
.t7ziK
H;qzg3
qo>.
,;Ls
[QS9
13Fv4QM%
)[=5
MOBr
osV**a
kXZ(
MK&n
,T:8
[yFm~
u4\0
;Z ~
jFsl
@'HF
W1=7
~(9O~
BJ;f
lRsN
/3i8v
^eMN
/]qQ
B-%UI
S;7<
nFwf[
/st>
V>#v
{>D3
fs=fx
'r0r
GH(#U
'vL!
v) ?
YpR	
>_BW
ae:a
MufXps
b8l=1
|T	O	
j|``
Y',9
|\*(;d
s]Wf:
4ipG
cS-V
-\=?[
"%xJ
=j]2p
&eDP@H
a*F>
l|xD!F
?<Q!
gBf?c
Zk>S
wLSS
MPVh
R4<j
^}eQ
!	`T
Qz_N
Or1#
y5p^;
;/6	h
NHo;
Z\T<
j|2OL
i@@W
_2GJY/
CB'n7
		Jq
v.f5
;($g
O	>J]
QUATlx:B
0	q&
Sy1b
.wA2
-=v-
zkpr#
B+M1
Y<PD
&I#,
\=qn
$&@V
(==x
+@je
RyFz
M.U7hd
,u<H
e9#h
mg{:
8*wx
k+@fp
8HgAp
Yd%c
oY=K
v^/9
;,0 PI
2MnY
Y#pQK
q=#? 
YET[
UV$]P
0y1E
_%@O
1aLK
3T?7
vh).
}Uk<
;NCz
#ZF=J
nn]9
7^&eV
TH)"
1U2e
r{p8
-a	\
g'#1
a+M'
PxRD
L|1mg
sso>
/xG5%
1,H5R
G_i&T
v=L)IC
'2ZJ
Fu:!
N$2_
yS/TQD
YkiO
@bMk
oo.(
sgjG
*)+N
8!8;
zp$h
q_g+
qYRsQ
5gZ0
QoGjw
"3DUfw`]
JI!:
_CONSOLE
x}RlE
o9Ti
K1zN
ZL{v{
1$:T
_}<F
}%CM
.Dut
novi
.nr2
C/'+R
]Td1
>O?l
Sgx{MZ
tw/6
N>/$
d&g{'-p
9';pL
Eu<j<
$ibY
x!u\&
3pnLnmZ
hETsx
wG2P
`O%6%
Eq,mP
Lg~tT
? Np
]?lt	
;c#Y
r]06
YvUK
Siz!
o15u;
:7F(
	O6rB
t;1s
8H.53
7b[L
,wLF
2s3) 0
p_l-E
ok|V
Eue 
5sub
0ka`
V	0\
Zs^xcD
=7/*
/|Yo
X%>._
N,^Eu
WOHh
Qh_	@x
J}L:
(#Ae^/
v	3*
{hTu
Qan?A-
jEpl
vkA=BE
l7QN[
vjx{
]C8U\
7!q{
$|j.
j*1;
j`!#xL
R8eF
#)aF
q;%|
7y&Z
xJ|cc
865~-
w@$`
:*Wrc*)
h[z8
'Hjt7
xnlFw
CyH}
QZ;+|
=Ls)au
Ym\-B
|2T;o
R8S1
N&l_
xaEf
!s{G
w9_@
7=Lo
5|z3
=oLd
LTZkX:
? & 
5e|!
=SP}
e]G8
pk'5tr)
0gP[x
o;H&
%#QF
=\:7`
i1uP
//$6
lnpo
VD|R>
PfFb
Aq\c
j4U{'C
':Jv
dOf1
hL[j
Jsh-u
tMBI
EgaE
+'V5LG
39qGm
|j}E
Fn`@
/yF+{
s}$1
kC5NM
CpBS
ixzxu
= -t9
"<ew
*eP^1
mO,k
Bx(Z
EE^h*d
gzY%f
9uVV
upn6\I
1jUn&-	
(Bqw
?)9C-
o!0Nm
kc(HtS
OHyJ
J	Rv
Di(q
BMqA
?Tdg
JUH#\
|qu"
^+7AvM
;occ
w.%MQ
U]%2
<_\O
"}cL
8=m;c|D
BRyP
IK2S.(
],-<
U~HEB
TX.;;
UpO&8c
-}	8n
"3DUfw`;:u
_CONSOLE
4%Rjq\
*>}RC
ym:c
3/o{
u`4y48
V0q 
8Fh(
W\Z5
Drom
;._l
{T=-L
-;%n
Le#9
z/tTid
85C}
4Wrm
S)C@=@[/
o!7]3g
B H!
w|7+
c?7y
\LBC:
rF_z<
n{W8
vW}eV@w5
	V^q0
{BY{rJ
ZZIg
T2;'
ar5A(n
L>77uM
@w|d
~lH$
t])ZL{
f&(D
H<AA
/I*$cG
kbTS
qQ=i
p7]B
b] "
Eyi|K}
EEiP	
,an-
%Vp+t<
u#UK
$>Lg5
\=|0
"3DUfw`&e
_CONSOLE
pq.p
[>VK
Zw.U
0 \Rz
w23O
|(PQ
2DzJ
qM{'
AvxAG
S:s8
>w8<k
6DtF
e3}z"T
,/#k
F>iM
t6vF
OL1l
+MU?
C"nt&
7b1Kw
-WoF
P+58
424@b
6^,H
L'L1Y
N6]K
9Lv{
^QB?
KxVL
rrG`;g
SJG	
CgO4
/F60
?}d&0
S7jy7]
=155 G
GjR);
ea#em(
-Ca&
4Q;X/I
P$a1c
M:bO
(`uI
~ge9 p|
<te0k2
}${hf
"E&L
I2Q!
~[$?$	
K)~ktR
$WHZ7HJ
;l_9
s#wL
pyuC&
{l4N
Y9.A
unI`
}{rl
%/0J
')<_
!CgX
&?!:
#S&XQ
'J<"
a|~m
IZI9`+
1zTn
5~U{
BccQ}K
lT<	hmR
4-qY~
xBF&
Q]gm#
Qu/-&
CO..
]Cn/
Oeyym
hK[u
\yO]
T/jt,
54^XM
~sgN
2I.l
TlG!
15|W+U
]_lO
}6>_
w|#yh"
{N25:K
9!y[P
y3C2Kh~M
so8B
uAG87
D9D"W
h#	?
c5N-
MJqp
IFPg
RnQa
HfM|
MAjF
Vs^W
]`=j
B,0D#)
$^Vx
1-VL
aX0@
~"*uQ[
gDOx>	
meJ%_2
N919v"
J`8%
*VNFO
lH|x
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585058892
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
"3DUfw`
_CONSOLE
3s8f
>D2\
|DH#
_![5E
mqa}
qN</-R
qZR(
rZ'_Jt
n7wq
7?VR,fuD
%skD
*=\3
mZ	I
]\7-
mo9E
}IDG
mk]{
Nt.>
TZKu?
:B#i
A=''
+rC?
1NTB5
,M(-
j%ao
l1`[
)ljX
syY0*+
:a_w
S-E1Ny
VGW$
i$g'
01A]
Z7]^
&w2 Z
WIk<7&
wr*NV
-iCvt
?T26
2dubu)I
q10f
$j>A'
Pn4D
"nD"
Q>fO;j
3^K 
V:j 
Dn$X
J/<j
5{+L
? @(
tmkz
Ydpp4
ZHk|
IB}Y.m
yGw'
dCD0
qL0-M
ofPYi
-.I_
>/?o
;pc9
%R;P
)tyz
FrzT(
ON]+|1,
\O]#p
6jC 
Z+N?
jqlo
ZG;-
~tcZ
n^A5
IB&[P0
0iQg
1A^]
1n8z+
WfO%Q
[Ch2.
B=ZA
Y\">B
i=_e
)bX{
:^if
,]_<
DLIZ
Hp;<
l@VG|F
-mzR<
"'JFgK
>?*bA
]		y
=KRL9
xhS)
m6o_
:ZEU
qmZQ>L
ems\
|3	J
u_)c
o9gR
};z+~8
Ut;%
?]gFUEv
AD+N
430} .
dCe~
K`^u
3]E$iv
#yJE
5U#Y
C`FR
M^C&
$5b D
e&WJ
L+KW
3=,1
B;|}e
wCgOU
T#ODI
u9]2Y
zf4]
5g`>Q
?_!<
*2wr
s@%vq
>m,?_
?gW1
T|qg
ta=.
Fa&e
4-@1
WZ"0
p4?]rV
[sp_
G<&,
=|#<
5{Kvnu
)UUF
6tj+
[gvM
<* AR
2=el
.uC{
-+jC
|c9c
manF
~_Ug,
sZR?R*
+]_F
,\7|
\\r5
u'r=\
|"1B
jcZt
"Pyl
`e}g
EP#eZE
x|_ZAS
1$nZ
1-d"~v
p!,Y
Jjvq
T'\PD
no+7
$Jj%
(wEx
	}S9
gF~;
P_%p
K</h
c6U&
yuk{
R+8.l
 jwF
~d,C
!?l@
F).&
:Oj~|
C#~a
#Py0
'.&O
'u-P
p% D
F	@W
BJP"|
j^f0
C5rzLP
-6Jk"
XeA|
=<hG
K-9,
8sEm
=@J=
nb49
ERi.
diul
u]@;+T
_Wv9
4B6J
MzwRb-
z-mA=5
r-~X>
;MVb
0pSp
osX[
a<mZ
4}.V
R	B+
f0rD
E?1}
QD,S
\WxU
Ok`7je
z!{c
[i;vMz'
Wo V
*J`F
{imi'
Ud2^k
CH#<_'
Nr<=
NccY
:0TI
g8R=8
zgW^
+3&C
x6/j=
qKP!
JUD0
8xc*/
jjhvJ
cYz%
OO)]
hs-m
rw	U
uBZm
Pg,=
c4Z/
(yq`
H@]gi
(}?&
p:	E
YF	We
%M+{Q
kbq-i*
xZc9|
h?h4
Lj[U
vF*\Ym
21qy#
x9!b<y
+~F#
P/0E
SV/7
AYe4
4#jr?
%M}UFV
EpHVQ
E}P8
}V!H
Yeiz
SDfg
)$A4
CrB=
 j1v]
c@,W
E(	F
'gU:
6~8RU
F##LF
V<eA
ge.U0
"4OK
.FyI
3PG(c
+sT5
beTn
L:.7{
C[Y.qh
`v+[
{!Na
/M}N
1e'e
[2zN
U%;D
R:&t_
)e{O
-740
Ew&n
2'>M}G2>
}"Nm
6jcQ@
Bs	b
${/X9
hVzC
\&Z+
YD$X
Icr_
2D\F
np7r#
 9cY
-W|zXn=
pUxW
8WB*4
&	y;
	UrI
f=9A
+|'*
=7zr
8_r*
x!&g
W2L)	
%OX9*
g?{zN
(L6Vm
hZ}J
c:'F
I-[e
h|Xo
7fHd	
9r~p
~rcX
qyiF$
`(!u
uq+[
S;bk
~PGZ
=@@)
Lo@&Z
9jM}
,L?3
#~-e
hAX|
aNHv
|%)W
}W(Am9
EvKt
@sD\
^-A,4
G\X!
CT9H
D]|d
k|ry
yEs\s
BGT 
h#qN
>mk_
q (# 
DyL-^M
'RL#
h|bN
	wVO@
^fx	
T2<4
s7t.
|[dQ]
zE4r
b2Hw
"3DUfw`d
MMd@34
_CONSOLE
8;W2
W=gM$EB
h+zS
R'>J
kzLH
"aUQ
	n:5
GwwwAi&(
.ofp&
+Jx)(
l-'C
79u:
t4!f
6! _
=bsN(7
3-S4
jM)_
^KEHf
lJ]i!
V Ne
#g-C71lv%
78Pu
Sg*D
X[]{
otv]
NPX,
2,5'
Keya
%mxh|r
+?+j
u|Ux`
kqYh
~#-)
/9UeX
rp]S
# [s
Xh v
J9[H
_Lf8S}
hI$1
+ w5V
zqcr3
f(Ar
C\_v
nz@f
|N:d
;_nV}
"D{o
C9\9f
kWr%
qAIS
Vlu~
hk$-
-LM%
;:vAs
"1D\
<]Z9
cQ:(
8taV
W?,Q:n
F>|HzgW"
H1TOG	
9W)=)	
X2PW
*N3:
42za
/6FUx
 yQ4
NrT)
lc^1
.+ltL
sbf>
fCk'n
:_c1t
Il>8A
VeGJG@l
DXRBy
]^:%
3`qf
enEh	
qXWE
D)4w
{94|s
\-3-
8D]D
ye>eQj
IxeR
5#:m
1q>#D
e	AT
S-&G
0D.@
JHi+
GU.@
KR&9r
KJE_
+'G#
M$<W<(
)OX8A
rO`U
?#d|i
4_\!
N%<8
vpKU
>6|{[
(7.g
e$4'
<qJn
FH4y[
-|(]
F|!]1}
!?DC
~%L1*
A9tF
u]U5
`]{=3
e7T'8
f(r4E
u`}&
*4la
4L"yS
'{@F
eBIZR
iTz1T
:%4H
[.F3$
sL.L
`iKb
4K%R
}u3B:
fQ:Lw
fsFn
zg9PX
$eZ`
_(QY
js)q
W;H]
H3ia*
T(4~
aOW8'
4A#'
Rn|JG
iH<__X
;MVf
@y-c
2F'#
\i`l
}|VY
& 	A
#@C	W_
jUoq
mDK|Lm"S
_~;IM
pJgd
SlsYq
l+}q
{FQtz
T;q)
(-I_
O1uc
7COr
e9ao
xDNvw
{^;D
Y}he
10zm\
tF+~A3
wZm{
9Sk_
Y;!l
/)kf
(vPd
DVL<D
MHT	
XEB+
`G[-
O'	wW"
GaT/G
2+ 7=
lqnp%
%a*@X0
w$A.
yMEnb?
bQ61`p"X
J7B>
I+:~
l=@@
fqK#
n#PH
W:Ng~
)PZA
	JaC<n
W3A~P4>0
m>LN
R $:kG
;[,DH
+C_sg
r=f]
d;Py
\o\s
DI ;[
up0H
NpxJ
#K21
/Sa lp3
rn	@k
it=W(
"cqG
6vvXo
+XJ>
2&j#
yChe
aw4x
SQu^
R+k}
	+y@k
N*fm
;Z`<
XD	A.
	K/$
gxuO
'W&~
}AO&]4
<$TJ
oGFV
^V,Pf
8Ia[{,
cY48
Uz~JZ
*fEb
CqL\
SF&5
OgCU
6fm1
Bwp g7	
(+Maf
x)0R
=M+l
P?DTn
^a;FMa
l1y@
X4,9sw58^
R#Xs
t$}	
,3T*H
+C8b
3nu^
P,8*7!
$,5J
ma}H
#>#?
aIN^R3
!_yg
?T\g
Q(l+
^/#d@
"r;;
q0C!
JoA[j
z|PW
wIC0
oMsU
=2Q"f
sMv0W
[SWhd_
Whw,
u@QE
VO3m
e[]qi
sfzm+
`,;:B2
X87-
!0Fa
z[hn&l
xaw,
#a6y
P5yHy
a$_B
~i~q
UVW_
n-/-
Th_r
&YeUAX(
hvT	
0^V3(
rZx"b
OZ;b
R*+n<
<_~F
6?EX
R:?g
PXn>a
"1p5
}#AX
@V.L
j76t8OR
ixp%y
t\%r
`:@3
m<['"f
4UE-
GUGVZ
"3DUfw`Z
_CONSOLE
:~ukn
y1WI
y'rQ
0,Vx
nuZW<Y
54v\
X0=1
-"T'
L^3l
{MN(
|^;H
Mz{8
( &'
YP5,KL4
<L*V6
y,LA
EyyN!
[W1)
~6+Uj
PGz	
_|:(
yAuN
!avC
hKv8
,A(B
gIaqF
ttyOM3PUnf
8Yhi
*KYk-
NOJzC
NhR|2
5.Dt
MM/w
N*Aa
d}PSP
a7v=
ssEk
R{5K
=B(vX
%2()K
3TNd
?@eJ
	F#B
X>,8
En~3
/XDD
.}AN!
{A0o
Asjf
)l?S
O=r)
9Nz^$
$WJ!>g-
oY=%
*Vra_R%
Ah=ky
F{y:{t
	y_O
xzn%
E3tF
dj6,
FZSl$
t!*)2
zdx;/
[WUJ
LS|fG
cxJ@
:n(XU
HKOrG&*Hc
:j]&%
|+BQb
baS1~
x!E\
v>QY
g`}g
J}Ry
^~V=6
j~18B
UH*t<nU
V`5u$'
?Ezhn
nXzf
R^5Ct
 0v7
9r@=-
w]rJM
 (j(
+(@43i#Xo0@
-VY'Ig
QmF/
O)R6Y
kj]5U
k[Zr
FDKzi
fBjI
\?-pJ
+'j`"Y
"oIZ
F*y4Z
p@GwY
1g(u
~0[L
|UUn
dE-d
f$~A[*c
AKgn
#a4a
J7B.y
\5x6
Wy'O
h# Te
k'\W
PwA2
@7l6
QSw:
+ES&zN
(BrT
VMb _*
P`EML
c/ J5b
TN6x
'mOZ
M?#~
2J0k
&8&^
4,)g
'`ec 
*1zY
}0[i
cZ_V
4'	o
`DK3
>3aM
`oP*
-+-%B
yeFF
%U/zo
!XQv
k2F 7
I0f2
6(}X
Opr\
K)wWk
0!AE;
yYYo
O:O2bG
X&-B
3yn~
h$.m 9
)/Y$hPo
s|1P
U(XIc
R3+4
:#sO
?b}-
q+G@
 <Hp
{zC-
&|qr
^i<2> lJ$$
Q"o"
m`XO
rlsk6(
R<Xg
_b,0
h[@E
GFvT)
V`Kv&
-	JG_/
N;^'	
(d6,
~ZxK
b`zt
Ucg9	
Zo$Z
du)a&
DF/q
e$l=
*a;k
=OVE
_*B+~
JGBU
xg4Rg
6N,	
`@Qq
Rbj*
~f|hL
$oSs
P'*Qi
c9rjd!
='p2u
Cj)"'
]`/[
#t4b
'Rn'
*H U]
F`	W
k\FK
 94e
vA!Z
>]H+
3:?=)
	d!Aiz
%nQO
4,j2
f_B	
FM%w"
{hLdD
T)^65
03Fr
a'i_
'G}{|:3
op/-
X.:<
8[cp
\cEB
`?Ig
6MDr
!2<8O
DjDu
7%,a
y"Sh
hOi/Dfm
2I8tv
M'bT
5('t
8OFOY
)^k7s@!
uHUc
C7+X
Iv.Ew
q\2|L
(1kKD
DJ=c
>=bJy
g5J]
0d8X
_1^.
>GIH
ZTZ_)B}-oG~S
K1A(z
,Ht[
!7/pa_J
xK)u
sYz\E8
}l`k1/*
WF76x
JgYN
?:K=1a0
`v$0
?H\Y
S378W
gL( 
Fb.W<8
7 10
*MOx
xq|bc
jDd}
U}zx
T=p ^
H(U1
l$=|
kS10
K{pN
,,\X
4{jp
v=q<
Y +/s
` Y:
DFOo3^
S0'K
c	*R.e"
4;f5.
RGm-
U+~$Et
]0[#
WC6j
$]Zm
5I90f)
k|JR
~	=k
Pl_c
fBCn
TDK0
c@j)aU
xG:|
";-L
\w{?g
97&W
o?3x
9{),
}5MMsf
3F3{
>qJ&
Nq]'s<
F6r2(
fQS-
,)K^
8}k|t
TxD1
( nF
:P/5
P-XR
W|oA
o88*Ks
[+F%G
>MrK
36S<
74`Y
7ib0
"(7}
!x>Cb
S-Bt+
&o,Ap
exm.
_K+"Z
AfVf
aXCk
{~.:
puhu
@NVn
.UlB
BUnT
G11P
$*L4
9>@fR
#jak
cf8!]
SXo$$=
MO~.@
iV`G
"3DUfw`
_CONSOLE
@=KE
TDx?R
Etir@{
[,zQ
)BmLC4z
^kaj
me@~9:9
nf\|=
mMtu
,9uR
+@BE
e/ws
NvK	
EDP>
)|L]
;pq1fP
olo 
Vz6`
|%+I
T]?5r
V{,k
JPJV0
iS/nt
cID$
0	Y_
MP0&
p_6to
MkxS9
Qto;
aKX,-
G6$4
@:=_b
bRYwao
yFBi
|7*x
fsq[=P
[_3E4
Ed?T
FCWH
f)&v
+cJ 
VgMo
.*?Z
hk":B/
Vp@W
8<Ki	
&F =8
<flP
>):g3zRx
V;^5
{fc\rN
_%op
ta'{ALK
ww#Ab
xVT6
OH,` d1
aL7[
[wT,W
Szd'
l\5(
<hTI
<=1'
Cl7I
r>iu
HX~q4
1!U1
+M3?
Of^F
C=enZ
kfs#Z
<Ewk%
~u?e
N.<z|c
G"?|e
M$a2
\!m|
"2oj
9d(m
zAy>
=[xp9
qgTP
R	.D
Dy^e
M*A#
L8M9
,:~-
yxNV
@S}xR(kM
hZxR
12WpB
wGZ-a6co
Emzv
Mj9(
rwv?
y2B=J;
eX3'
Joc)"
ax6"
Pmxy
]!96
(dk)
QZbB
sG 	X2
eRW-Y
8u(D
/X:B
3U3Q
p1v.
T8Gc
<KA%w'
lv3jp
R*	B
zy%IA
x?5~
lc&>
x"ig
BLW9B:{P#3
QNPK
B}[^
35Xo^
^Hlc
'Tko
2j6/2@^q4>,o;
GkMA
%!xq
rv!@Z&
+YaP#
70b|
*7{YB
	xJ[
vv{x
}/\S
CKXW
>Zk7
j?XM
mRh+
Xw"l
-xFvB
>>P*
em.%
	6_w
7'Qv*m]}$
[R)j
*;(5-
|dKY
hvfb"B
.$3y6
piU8
Mv?D
=}A,!
+N71
>^>}
A=<i
U@M$
IVH	
#&FM
Kyyy
B#]?
^Il$
6V-6
L^W`
]_2t
sh5X
p]{8
"5%(
Izw!"
*n	8
RrQ|9
,qPf!
rc+.
L,vUs
AUnQ
rjqc
g+?R
 4pn
otQ';!
'mTg
z'q:
h;u2
r$<'
$gJi
$=Tjg
gu%3T
_(]>(5e
N[)>B#
dQl,a
1?_;
xh%D
`|!y
I	*a
(mW@%u
_M&8
\m!>
iz27
"W6F4;}
z0oh
B	]l
LP@e
>h%J_
g~V"}?p
}!SA
<E9d
"thW
bh7	_
AhR%
j>vcc
/^{p
gX:S
 -A@
Ul='
kNpj
~m&V
h?{71
N+C0 A
%~:K
W99}
cR7y
CQvh
H4V:_qx
ia}n
yb4}
[F(X
{*#K
&OH^
vYL;#
g`U	KDOhZ
 -&G,
v+Lfb
`xoMJ
.]\-
BPI5)
t*#4
A97}
bHc6h
vC#R
tJUnVI2
"w,[,
T7BeBl
%xUm
6J5b
@'Ys5
|aHM
*sjK:
)NJ7
YS,{
&F{.
l2iO
ECGS|
Uz`k
ybx))8m
A'j1
+<R~
f?Y`
;BTBZ
C[o-A
8 2[.
:(Be
&P		
+l1B
mlys
&/NZ
]R|{+
K97!
W:Zp
Ob%K
	Y_h
D	k|R$
"G9[
F\y,
E9Xe&
p(HQddN
iLRdh
b0i,
}F\+oL
`@Zk/LZ
=-nC
[kN7
t=dl
AzfH
l!F%s
l1:$
z{;C
oEuM"
.kpq
vD6xr<
*k@G
E(-?Mk
Ul^Y
WZ7<V
UpSOj>
)hkU,
ry"#J
HYm#
Iy3%j
[GZP
fPUx
`p[#
7Zd<
070\
Q~k_^
M]TW
;u.&
"3DUfw`I
_CONSOLE
+q`$
ZzLt
{x&K
BW6h
*b+@
dU=v
><3GC
1Zm'
yRO-
yb>K
7m7rk
t#dQA
]bS[T:
.\Hc
v6]H
;>>U
". !HA
?GKN]+)?
9o(Gei
,='a
PQ]he
Byg\
K(+W
1yj"'
32Uy9
+T*,
K:yWW
.-)yr
k"}~?egM
KEYT
ARt$joy
z7wJ
d*3r
wK7g1B
JIEm
?p8c
xrym0
mYMw6
#ylZQ
9NM}$-
e2/i
zHL&H
CTMA
Hg%5
.Irb
&3#jq
LbXj+
z %t
T7+[
	D4JY
 h&*
=|_	
N2d|N
'q?Q
|Sh*
$UN%
7=I|
	n-A?
PueE
jgpL#<X
"AjL
^	0s
u@iv
^eV3yp::
N0}d
m~|rVQ
Hc/U
TQxs:
s0jn
%@b|.
>Y'~
\~7G
LoWz8,vAbuw
-Pa{
[h99
!([p
K	n]
=nQhQ
]"9R
yu-{
Ku7Y
T`hk$
t:CqE
y6lm#
sPM#0
&VjN
|9Gv
t</s
t[<q
2b9e
QPNG.$
:;r|
ls<.
McJ3H
( ~aO
N=>mb
V\yYd
')2k
/'7Y
HrpG
#OQaU6
D (p
aSIn
z/--d
'6Zs
/Z:UA2f
;]w>
CR[s'
OUTn;
E*>	e
A.vNv
@;5f
l{ $
(!,K
2b7-
.lQ"
vUvJ
PN4q5
fYH7
 `It
0Swo
>;?|
@+Xb
T%`!D
e}Kl
2{]b$sT
]|{O
$Lga
"OKb%
@$;>}
ZF\H
t+m*
GwFt
B9+{"
DS>~,
pC2g
FF?S
GB$s
FNi6j
_?	<
E$f`*
\O^jB
Vdk4
>)-(
zFD 
.e=8-
V6l.
$xo(
aOe|J
IF#>U@m
O*)(pD
Tt?(
Hf<|
5u,f
SHs&+x
W4n@
R/7[]K
}svc
KF*e
^p:c
X?	)
r'eE
$TJ4KJ]
#\fn%
i?XA
" $5>
g!RA
9|G9
`P+;g!@
QNW!j
&|DC
wp5x
]a(z
$MC2	
DuY!
C@] 
U_sa
.*"|
n(Jf
86#n
DmnW=
"*TnW
srGG
kD>6
dU]B
+X*'
4}&=B
p+=_
}|#<
3x`^v
<Vc=
+0_0
4rL&
e}{Yc>
"%3(u
u]BO@
3|xP
%Q;!
p}%Z
q/>(
$yeo V
mbuJ
NH.AQ`YX,
f ;L
w68b
%3Fd
5?3H2
56z\WB
"SC.
PMw6`
u$<{t
>+|6
:~@/
P|\<	
A5a#{
7cGlEX
6OtZj
NpV?
aOz`8{
F bp
xU<3
5U}x
TJ_t
'f`e
~&in~Q
'#ju
RH'N
`SWB
<Y|?a
8"m>
S@gy
p*"OI
ax+G
E2 A
=VzZb
,\4?Z
(YfPh
b6OrY
pumZ	M
p@,0
WgS-
GR{R8
hsot/
D8sJ
I,v:gl
BGcN
bVkM
uts,
Gj,&
Uo:'
^f+*$
jv5c9Qm
ApC^
rh0Z6
_ws1
vcZ,
H`J0
aUf("
<eIG
a?TL[
5fF*
Ji<d
 s"V^Q
x4@q
O$OkF
P6)x
@g<j
@6?P
EOs{,
GL8[yE
>]Lp
)Ek?M
#Woq{|
=kiW
={Xp0
V_d9i
Xfadb
`FcK
7=f=
6mW<V
'yjcH
_VT@
8M)H
cU~/
%L'e-
p;|M
F'>q
,`nS
Df D
h[W"$
nfZ{
f,j}
d\1mPYo
Z^0{
f3*f
# 1 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
# 2 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 3 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 5 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 6 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 7 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 8 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
# 9 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
// WIFI includes and variables section START
# 14 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
WiFiMulti wifiMulti; // this should support more different AP's // ToDo
// command and control IP addresses for server A and server B (redundant server)
int IPudpServerAa = 192;
int IPudpServerAb = 168;
int IPudpServerAc = 88;
int IPudpServerAd = 32;
int IPudpServerBa = 192;
int IPudpServerBb = 168;
int IPudpServerBc = 88;
int IPudpServerBd = 33;
int udpServerPort = 443; // UDP/443 because, well, we can
static uint8_t wifiDebugOn = 0;
static uint8_t wifiConnFlag = 0;
static uint8_t wifiWebserverFlag = 0;
static uint8_t wifiBeginFlag = 0;
static uint8_t wifiConnectionAttempts = 0;
// Set the local access point IP address, the netmask is assumed to be /24
IPAddress SetAPIP = {192,168,5,1}; // REMEMBER TO CHANGE THIS FOR EVERY AP YOU PLANT TO INTROD"UCE TO THE NETWORK
#define MY_NAME "e32cam001s01"
#define HEARTBEAT_DATA "e32cam001s01,heartbeat,0,0,0,0,0,0"
// Set these to your desired credentials.
const char *ssid = "e32cam001s01"; // for the local AP  // REMEMBER TO CHANGE THE SSID AS WELL, THE NET PART CONTAINS THE THIRD BYTE OF THE AP IP ADDRESS (the network LSByte)
const char *password = "giampippetto";
WiFiServer serverSTA(8080); // adding a second server on the STA interface? Let's try
// loop() control section
uint32_t loopCounter = 0;
// NETWORK section
// processing variables subsection
uint8_t payloadCurrContent[128] = {0};
uint8_t hashCurrContent[64] = {0};
uint8_t payHeaderCurrContent[32] = {0};
// NAt processing subsection
uint32_t payloadTypeF = 0;
uint32_t srcIPext = 0; // STA side
uint32_t dstIPext = 0;
uint32_t srcIPint = 0; // AP side
uint32_t dstIPint = 0;
uint32_t srcIPpay = 0; // payload side
uint32_t dstIPpay = 0;
// in the NAT table, the folloving are converted to uint32_t 
uint16_t srcPortext = 0; // STA side
uint16_t dstPortext = 0;
uint16_t srcPortint = 0; // AP side
uint16_t dstPortint = 0;
uint16_t srcPortpay = 0; // payload side
uint16_t dstPortpay = 0;
uint16_t expiryCounter = 0;
// NAT table subsection
uint32_t NATline[16] = {0}; // there are 14 fields actually, as per the above list, plus 2 reserved fields
uint32_t NATtable[256][16] = {0};
uint16_t NATlinePointer = 0; // do we allow up to 256 flows only?
// routing table subsection
uint16_t RoutelinePointer = 0; // do we allow up to 16 routes only?
uint32_t routetable[16][8] = {0}; // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
//packet buffer sub-section
uint8_t payloadToProcessFlag = 0; // if the LSB bit0 == 1, there is a payload that needs processing, other values / bits set may mean other operations.
uint8_t * payloadBuffer = 
# 104 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                         __null
# 104 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                             ;
//structure of the packet buffer:
Size = 224Bytes = 32B header + 128B payload + 64B hash
4B = Type Field( 4 bytes ) = reqtype(1B), protocolNum(1B), Reserved(1B), Reserved(1B)
4B = DST IP
4B = SRC IP 
2B = DST PORT
2B = SRC PORT
2B = PayloadLen
2B = Reserved
4B = Reserved
4B = Reserved
4B = Reserved
128B = actual payload
64B = sha256Hash_reserved(32B raw or 64B hex)
// LED section
#define LED_BUILTIN 2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/
// deep sleep section
#define uS_TO_S_FACTOR 1000000ULL /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP 60 /* Time ESP32 will go to sleep (in seconds) */
__attribute__((section(".rtc.data"))) int bootCount = 0;
Method to print the reason by which ESP32
has been awaken from sleep
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch(wakeup_reason)
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
// update the routing table
void routeTableUpdate() {
// RoutelinePointer // do we allow up to 16 routes only?
//uint32_t *routetable[16][8] // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
uint32_t ImyLocalIP = 0;
uint32_t ImyLocalSubnet = 0;
uint32_t ImyAPIP = 0;
uint32_t ImyAPSubnet = 0;
uint32_t ImyLocalSubnetMask = 0;
uint32_t ImyAPSubnetMask = (255 >> 24) + (255 >> 16) + (255 >> 8);
uint32_t ImyLocalGateway = 0;
IPAddress myLocalIP = {0,0,0,0};
IPAddress myLocalSubnet = {0,0,0,0};
IPAddress myLocalSubnetMask = {0,0,0,0};
IPAddress myLocalGateway = {0,0,0,0};
IPAddress myAPIP = WiFi.softAPIP();
ImyAPIP = (uint32_t)((myAPIP[0] << 24) + (myAPIP[1] << 24) + (myAPIP[2] << 24) + myAPIP[3]);
ImyAPSubnet = ImyAPIP & ImyAPSubnetMask;
// the first lines
// line 0 local AP  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
routetable[0][0] = ImyAPSubnet;
routetable[0][1] = ImyAPSubnetMask;
routetable[0][2] = ImyAPIP;
routetable[0][3] = 0; // gateway of course set to 0 for the AP side
routetable[0][4] = 0; // interface ID set to zero, for the moment.
routetable[0][5] = 0;
routetable[0][6] = 0;
routetable[0][7] = 0;
if (wifiConnFlag == 1) {
  myLocalIP = WiFi.localIP();
  myLocalSubnet = WiFi.subnetMask();
  myLocalGateway = WiFi.gatewayIP();
  ImyLocalIP = (myLocalIP[0] << 24) + (myLocalIP[1] << 24) + (myLocalIP[2] << 24) + myLocalIP[3];
  ImyLocalSubnetMask = (myLocalSubnetMask[0] << 24) + (myLocalSubnetMask[1] << 24) + (myLocalSubnetMask[2] << 24) + myLocalSubnetMask[3];
  ImyLocalGateway = (myLocalGateway[0] << 24) + (myLocalGateway[1] << 24) + (myLocalGateway[2] << 24) + myLocalGateway[3];
  ImyLocalSubnet = ImyLocalIP & ImyLocalSubnetMask;
  // line 1 STA  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
  routetable[1][0] = ImyLocalSubnet;
  routetable[1][1] = ImyLocalSubnetMask;
  routetable[1][2] = ImyLocalIP;
  routetable[1][3] = ImyLocalGateway;
  routetable[1][4] = 1; // interface ID set to 1, for the moment.
  routetable[1][5] = 0;
  routetable[1][6] = 0;
  routetable[1][7] = 0;
} else {
  routetable[1][0] = 0; // nullifying the STA route
  routetable[1][1] = 0; // nullifying the STA route
  routetable[1][2] = 0; // nullifying the STA route
  routetable[1][3] = 0; // nullifying the STA route
  routetable[1][4] = 0; // nullifying the STA route
  routetable[1][5] = 0; // nullifying the STA route
  routetable[1][6] = 0; // nullifying the STA route
  routetable[1][7] = 0; // nullifying the STA route
} // end void routetableupdate()
// handle client requests
void clientServe() {
  WiFiClient client = serverSTA.available(); // listen for incoming clients
  if (client) { // if you get a client,
    Serial.println("New Client."); // print a message out the serial port
    String currentLine = ""; // make a String to hold incoming data from the client
    while (client.connected()) { // loop while the client's connected
      if (client.available()) { // if there's bytes to read from the client,
        char c = client.read(); // read a byte, then
        Serial.write(c); // print it out the serial monitor
        if (c == '\n') { // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to turn ON the LED.<br>");
            client.print("Click <a href=\"/L\">here</a> to turn OFF the LED.<br>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else { // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') { // if you got anything else but a carriage return character,
          currentLine += c; // add it to the end of the currentLine
        }
        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          digitalWrite(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x1); // GET /H turns the LED on
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x0); // GET /L turns the LED off
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
void startCameraServer();
void wifiIntManagement() {
    // STA connection and disconnection management
// WIFI DEBUG AND SERVICING SECTION START
  if (wifiDebugOn == 1) {
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("WiFi not connected yet");
    }
    if (WiFi.status() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer(); // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
    }
  if (wifiConnectionAttempts >= 32) { // turning off wifi, there is no point in trying anymore, if past 32 attempts.
    WiFi.mode(WIFI_MODE_NULL); // turning off wifi, then we go to deep sleep for a certain number of seconds.
    esp_deep_sleep_start(); // going to deep sleep
  if ((wifiConnFlag == 0) && (wifiConnectionAttempts < 32)) { // wifiConnectionAttempts must be < 32 
    wifiConnectionAttempts++; // increasing the connection attempts counter
    if (wifiMulti.run() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer(); // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
      Serial2.print("WiFi up and running: ");
      Serial2.print(WiFi.localIP());
      Serial2.println("' to connect");
      wifiConnFlag = 1;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
    if ((WiFi.status() != WL_CONNECTED) && (wifiBeginFlag == 0)) {
      Serial.println("WiFi restarting");
      WiFi.begin(ssid, password);
      wifiBeginFlag = 1;
    }
  if (wifiConnFlag == 1) { // test if the wifi stays alive...
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() != WL_CONNECTED
      Serial.println("WiFi disconnected");
      wifiConnFlag = 0;
      wifiBeginFlag = 0;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
  if (((wifiConnFlag == 1) && (wifiWebserverFlag == 0)) || (ESP.getFreeHeap() < 44000)) { // servicing the webserver on connection up for the first time
      // >>>>>>>> START SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      // >>>>>>>> END SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      wifiWebserverFlag = 1;
  // WIFI DEBUG AND SERVICING SECTION END 
// UDP Async client, sends keep heartbeat messages to the server and retrieves commands
AsyncUDP udp; // for server A
AsyncUDP udpB; // for server B
void udpCommandClient() {
  if( ! udp.connected()) {
    udp.connect(IPAddress(IPudpServerAa,IPudpServerAa,IPudpServerAa,IPudpServerAa), udpServerPort);
  if(udp.connected()) {
        Serial.println("UDP sending to server A");
        //Send unicast
        udp.print("e32cam001s01,heartbeat,0,0,0,0,0,0"); // simple protocol with 8 fields
        udp.onPacket([](AsyncUDPPacket packet) {
            Serial.print("UDP Packet Type: ");
            Serial.print(packet.isBroadcast()?"Broadcast":packet.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packet.remoteIP());
            Serial.print(":");
            Serial.print(packet.remotePort());
            Serial.print(", To: ");
            Serial.print(packet.localIP());
            Serial.print(":");
            Serial.print(packet.localPort());
            Serial.print(", Length: ");
            Serial.print(packet.length());
            Serial.print(", Data: ");
            Serial.write(packet.data(), packet.length());
            Serial.println();
            //reply to the client
            packet.printf("Got %u bytes of data", packet.length());
            // packet response processing START
            // packet response processing END
        });
    }
void clientsManagement() {
  if ((wifiConnFlag == 1) && (wifiWebserverFlag == 1)) { // HANDLE CLIENT REQUESTS HERE
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    clientServe();
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
  } // end handle client requests if
// WARNING!!! Make sure that you have either selected ESP32 Wrover Module,
//            or another board which has PSRAM enabled
// Select camera model
//#define CAMERA_MODEL_WROVER_KIT
//#define CAMERA_MODEL_ESP_EYE
//#define CAMERA_MODEL_M5STACK_PSRAM
//#define CAMERA_MODEL_M5STACK_WIDE
#define CAMERA_MODEL_AI_THINKER 
# 494 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
// of course this is the default and should be modified
//const char* ssid = "G5SE_7499";  // this is the network to connect to, so the esp32-cam is a supplicant. // edit to your liking
//const char* password = "pippopluto";
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
// wakeup and init part 
  // packet / payload buffer allocation
  payloadBuffer = (uint8_t *)malloc(256 * sizeof(uint8_t)); // the actual size is 224 (see in the declarations), the maximum payload size for ESP-NOW is 250.
  pinMode(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x02);
  // deep sleep boots
  ++bootCount;
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  /*
  First we configure the wake up source
  We set our ESP32 to wake up every 5 seconds
  */
  esp_sleep_enable_timer_wakeup(60 /* Time ESP32 will go to sleep (in seconds) */ * 1000000ULL /* Conversion factor for micro seconds to seconds */);
// camera part
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != 0 /*!< esp_err_t value indicating success (no error) */) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == (0x36)) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
// WIFI SECTION
  Serial.println();
  Serial.println("Configuring access point...");
  WiFi.mode(WIFI_MODE_APSTA); // added by me // selecting the AP+STA mode
  wifiMulti.addAP("e32ap001s01border", "giampippetto"); // the connection part is verified as follows: wifiMulti.run() == WL_CONNECTED
  wifiMulti.addAP("G5SE_7499", "pippopluto");
  wifiMulti.addAP("internet-gw.iw1gpe.it.ampr.o", "heisakuukanwohiraite");
  wifiMulti.addAP("inverse", "heisakuukanwohiraite");
  wifiMulti.addAP("e32ap002s01border", "giampippetto");
  wifiMulti.addAP("e32ap003s01border", "giampippetto");
  wifiMulti.addAP("e32ap004s01border", "giampippetto");
  wifiMulti.addAP("e32ap001s02border", "giampippetto");
  wifiMulti.addAP("e32ap002s02border", "giampippetto");
  wifiMulti.addAP("e32ap003s02border", "giampippetto");
  wifiMulti.addAP("e32ap004s02border", "giampippetto");
  // You can remove the password parameter if you want the AP to be open.
  WiFi.softAP(ssid, password);
  delay(200); // wait at least 100ms until the AP has started
  if(!WiFi.softAPConfig(SetAPIP, SetAPIP, IPAddress(255, 255, 255, 0))){
      Serial.println("AP Config Failed");
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  // the STA part is configured here and managed in loop()
// old wifi section
  //WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  Serial.println("");
  Serial.println("WiFi connected");
  startCameraServer();
  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  */
void loop() {
  // put your main code here, to run repeatedly:
 // loopCounter check
  if (loopCounter > 16) {
    loopCounter = 0;
  clientsManagement(); // web client requests are handled always 
  if(loopCounter == 1) {
    wifiIntManagement();
  if(loopCounter == 2) {
    routeTableUpdate();
  if(loopCounter == 3) {
    udpCommandClient();
    udp.broadcastTo("e32cam001s01", 1234);
  // loopCounter increase
  loopCounter++;
  delay(1000);
"3DUfw`.
_CONSOLE
/p<]
]byg
Xy(*
7ptN
]R7A
]E:G#b
,>|A
[)&2
LMquq
i k?
=R	|
j#J<
,Pl9
D'sP
)2l}
:!O!
@m#Q
Y{Po
Xo	.
{\P|.
Y,i0
QQN7
tZzt$CBH
xDF$pV
pZTlz
~&	}qG
GCn^
qLGd
{@NS^
jC3y
zKWz
HRg 
o+yg
f@AeV
.2e9
bik6
Z)UB:0A
\;m5dm,
yt|Wd
q^&zr
RRav _
DxJE
;lFg
~7?NhT
8"\t
`	eD
VyFc
%tY&
c0HG
bf{	
~7|1
AEOX
<$/j)DE
d?UnP
DO#e	}
gG	mtO#8x
'@SYZ
18.y
wc,dgM
\@@v
IG7Z
-WvhK
DQ9$
=)(0",
E#'mv
V0*(B
}ATlj
xswO
7S?J 
	_AY
\vRl
n*OiR?
>)lt	L
* sTB
8-,_-u
m6NX
(8G'
~_@;
pno5h
LY*L!zp
>Z! |
'g2>
W=O-tM
	<Ae
2Id7U
6S+w
lzOE
.d9g
 7*(
Zx4k
PZ1(wd
""KwS
9pz1
SlO0"
x~A&
^.bB
Tbv1X7
M[\P
7'Vl
_A(!\
}(2Xq
	Ae|
d6~8
9Xba
l$ywF
o&@o$
RM[5
a%<`
~s]r
_buhb
azBIJ
nt1k
Q*Bh
`K5q
Ev'H
ZHor
sqCK9H
ZWXr^
9{lD%
:bt*S
7FY+
CGD|I
KH'V
,`gfbR
}	YL
:k1v
Qy)	
1-:A
7@E#
=8 /
EpK\
=4}T
CA'Px
ZAMp
lq*1
\N}wn1
2Qnu
5:Bks
G#G&
QTn8a?
4{G+
K@:H6
v-;R^
AT9H
,D2JP
%oLl
+cSW
	vR6E
 N1c_
P/?&
]72m
6[<N
MU*X~1
R3L9
.`U Q
(35w
fFLw
1>_N
MuZ1
Pdn(
*# E
Z,Y*
Z1cb
	c~Y!
^]h	
"UYU
Eoh1
boK+
G|&"k
B96DM
Hj+.
zz'q
)NWk/
mmIx
%uGm[
.'p!
50asPQ
=Z5E
^?}>{V
V="2e9
!LI\#
34^Wu
~,Akr
z/R;
RJM)
C?Y.
_S%}
uFFS
ZE4V
mg/"
<qdNu{#
"ne6
g[fa
\"?2
k6	#
!Ez2
b1IIGNE
V~A#
CCs-
=%D*
/aN&
&.;O
(UKu
)*|aXdB
 7yti
T|O!
f	__
;D:r
v=Gx
=*K/
gg<Yu
gnCh y
F%g@r"
72i(o
#}C#
M[h-iP
,T^U0
b@KS
45.b
dR.i-V'
'OL2
_lw<H'
MlGi
)eeeX
xKT~
}c8t{
K%l`B
,cucG
py7z
v?VlP
+yc:
Bm!g
BQ=>
?;co
g(}q
;.00
g*)1Q
T7wH7
J?}#
]7B21
(55O
onr=
*sf!
Vl>;
g!P	DG
3>t+
)MoQ
~fcK.x
z` *
E[\ln
Q wW
xg_h
QK;?^
y5V4
F4a0
g5;?'
pG"3
{Q8y
,s-'
EoeSa
N^?UT 
kn	NB
;O)6'
x#Qb
O`598S5
r?d5
%VJ.
9OM['
:q/O
6O:$
Dp2r
NYaM
!m]~
F2T^
RM5{
Xq^m(
ou2|
hI$;
>PNf
AgoK
YP<	
.Pxkf
otadata
app0
spiffs
h&!,[3
  "additionalFiles": "..,..,..",
  "builtInLibrariesFolders": "/home/inverse/arduino-1.8.12/libraries",
  "builtInToolsFolders": "/home/inverse/arduino-1.8.12/tools-builder,/home/inverse/arduino-1.8.12/hardware/tools/avr,/home/inverse/.arduino15/packages",
  "customBuildProperties": "build.warn_data_percentage=75,runtime.tools.mkspiffs.path=/home/inverse/.arduino15/packages/esp32/tools/mkspiffs/0.2.3,runtime.tools.mkspiffs-0.2.3.path=/home/inverse/.arduino15/packages/esp32/tools/mkspiffs/0.2.3,runtime.tools.esptool_py.path=/home/inverse/.arduino15/packages/esp32/tools/esptool_py/2.6.1,runtime.tools.esptool_py-2.6.1.path=/home/inverse/.arduino15/packages/esp32/tools/esptool_py/2.6.1,runtime.tools.xtensa-esp32-elf-gcc.path=/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0,runtime.tools.xtensa-esp32-elf-gcc-1.22.0-80-g6c4433a-5.2.0.path=/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0",
  "fqbn": "esp32:esp32:esp32cam",
  "hardwareFolders": "/home/inverse/arduino-1.8.12/hardware,/home/inverse/.arduino15/packages,/home/inverse/Arduino/hardware",
  "otherLibrariesFolders": "/home/inverse/Arduino/libraries",
  "runtime.ide.version": "10812",
  "sketchLocation": "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
  "additionalFiles": "..,..,..",
  "builtInLibrariesFolders": "/home/inverse/arduino-1.8.12/libraries",
  "builtInToolsFolders": "/home/inverse/arduino-1.8.12/tools-builder,/home/inverse/arduino-1.8.12/hardware/tools/avr,/home/inverse/.arduino15/packages",
  "customBuildProperties": "build.warn_data_percentage=75,runtime.tools.mkspiffs.path=/home/inverse/.arduino15/packages/esp32/tools/mkspiffs/0.2.3,runtime.tools.mkspiffs-0.2.3.path=/home/inverse/.arduino15/packages/esp32/tools/mkspiffs/0.2.3,runtime.tools.esptool_py.path=/home/inverse/.arduino15/packages/esp32/tools/esptool_py/2.6.1,runtime.tools.esptool_py-2.6.1.path=/home/inverse/.arduino15/packages/esp32/tools/esptool_py/2.6.1,runtime.tools.xtensa-esp32-elf-gcc.path=/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0,runtime.tools.xtensa-esp32-elf-gcc-1.22.0-80-g6c4433a-5.2.0.path=/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0",
  "fqbn": "esp32:esp32:esp32cam",
  "hardwareFolders": "/home/inverse/arduino-1.8.12/hardware,/home/inverse/.arduino15/packages,/home/inverse/Arduino/hardware",
  "otherLibrariesFolders": "/home/inverse/Arduino/libraries",
  "runtime.ide.version": "10812",
  "sketchLocation": "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585062792
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
 ftypisom
isomiso2avc1mp41
free
mdat
x264 - core 152 r2854 e9a5903 - H.264/MPEG-4 AVC codec - Copyleft 2003-2017 - http://www.videolan.org/x264.html - options: cabac=1 ref=16 deblock=1:0:0 analyse=0x3:0x133 me=umh subme=10 psy=1 psy_rd=1.00:0.00 mixed_ref=1 me_range=24 chroma_me=1 trellis=2 8x8dct=1 cqm=0 deadzone=21,11 fast_pskip=1 chroma_qp_offset=-2 threads=2 lookahead_threads=1 sliced_threads=0 nr=0 decimate=1 interlaced=0 bluray_compat=0 constrained_intra=0 bframes=8 b_pyramid=2 b_adapt=2 b_bias=0 direct=3 weightb=1 open_gop=0 weightp=2 keyint=250 keyint_min=1 scenecut=40 intra_refresh=0 rc_lookahead=60 rc=crf mbtree=1 crf=23.0 qcomp=0.60 qpmin=0 qpmax=69 qpstep=4 ip_ratio=1.40 aq=1:1.00
moov
lmvhd
Htrak
\tkhd
$edts
elst
mdia
 mdhd
-hdlr
vide
VideoHandler
kminf
vmhd
$dinf
dref
url 
+stbl
stsd
avc1
5avcC
pasp
stts
stss
stsc
stsz
stco
budta
Zmeta
!hdlr
mdirappl
-ilst
data
Lavf58.19.100
"3DUfw`
_CONSOLE
=YL)
xY><P
A':h
*{sn
k9QG
RC"je.
;xismk
FBsB
y&*$
q4jX
q%n1M	'j
^j/h
+GoN
8;-)a
(hh"+$
iE+hZ
-!yEW
9@jF
s!%f
bl}.
e8='|
ixfe<
{tuh
Kwd<
d&[[
kn:N
]4Hy
N]}5i
s\U,
kB1L@
U29u
lZ/R
M(\v
P-*o"
;h B
`Gcng
3O9[kM
F\p^
D2M;
l,}D?
(A%I
]XPM.
x.\h%
r?tCp!"
.'&My
bwBpw
W$hX	
z`	c
sTe\
`I-z/
+c&d
Jtnb
erhk
d@(1(h
,y6*
ACxb
7TV.
Gdbu
R;hGO("
D*Ym
3%\X+
'G<$
{}P3Z
Giv/
@'R"
+q79
/.,!f
SHa]
|3WSW
?'7c
J]WAV
de b
)1k5
gU?F
\DyK
x_{j
&\\c
Z\C#
0N9%
9W23)
.##w-?V
zPN.
<Cme
/?L>&
G_V?Yz
wbnY
"NQo
34/B
E.i	
*x~_
}$tX
OGFU
&Uk0
E6Og
vKh)1W
3C6n
,A{Y
GUvM
"7[}P
V iBO
tv48
}jqK
[ +2h
{aXC
X[IY
a[_4@
OA<H<o
+~nN\
.}G:
@b<a
1BzJ
|_S[
kJQ^}Q
:1O(b
x<u-
tAPv
^{`@ta
JS5U
|9{ka
7[nbB
c'~G
HF"]
Mv9FTA
]kOU
P]6x
fjE8
EK'G
1{oQ
[$KDDS
R}9KJ
zs}8Z
T`qp5
udlJ1
*d|;
CII'
2OTt
uH:$
5zz[
-?pe
J1wQ
&Qea
:(B0
Rnjd
0#zF>
bXXU
aU/$
=_Ov
VEcS(
i|F~
.!!2q
d|Ge-
2<lk
?\_O(dU
J]<{
WCdS
.Im2
xtRY
O>[G;
m	:xC
R~<F
i_)6
&KsB
+l h
IS5\T
$aA%
P)2)
yz66
&d 1
<oTv&
kWw=J%N
Hw()
V:	m@
boJO
:H	)
P)jqu
1tcLW
<mw	
~^VDn
^u~=
0"3z
4=u"
jdvzRo
a8Ii
Zn!?
xW1x
Pd=1X
?~rZU
D\:n
;{A#
4Mxh
'	U05-
0nZO
uCgL5+t
"6tk
-"1|>
kn(P'
5eRg
]LQL-ZP
qi:=
]q*`
f+@ D
Mw'>
/*)I
)/)d
Zg4|
.AaK
j}gn
W{U$YF
8eE	
("nsyE
d7)0x
xOA<
'^-[l
7<yx
J\LH
d?6(
$9mv}wh
:/x5
`fm/
P4;?
y9YU
)UtG
whU:
jo<|c
TU<9
g?3IrG#
N}q3
T?:*7
>7wu
U]qB
i>SfL=B 
{X^{
$Mzt
jQq2
uF_]
CP&_g
+n{|y
EG7GY
PXH*
DJ4A
e9!C|l/
+`;u
)nr'
ZE <
_[x;
E>|=4
Csf)O
9Jg!.{
@9	:JH}
QMl!
Tg4d
yYw|r
2qC5
y0>M
(;sn
W?Tqu
bRI8
Y%~~
>(d=
/T"2
7V/ 
~?)I
mz^O
UR"l
qFm	
j"MO
N6~-
K;~U
j8S4	/a
x:n7s
kL5|r
Ar;	#
:?!|L>
m8R4qv{
2^Alx+
3po1
'Wu`
Jf(4
=UQO
pQFD
09?/*
!\M[
r b#
Ms3n
<8bA
Y32F
-.w9
9]2z
kJ{S
AZ	g
:l33
Gvi|{k,
 ?L:
FuN	C
e*!{(]
D ;:
p+$#
}e+r
2o0	|C
X>3Y
NA-K,
[+Yn-
aq#-
9 R"b^
LF(8
?uts@
a6D{
[timestamps]
4f6719b5-55a3-4adb-87be-8baa5abaf791=1565035840
0ee5fa09-0e59-494a-94b5-8c9148df99ac=1563742630
26dbdd73-43c7-44a2-83b6-2b1d4e6e52eb=1515430819
b428a653-4521-4ed5-8c7d-66c62a6ddb86=0
941723cb-a5d6-473e-939a-bc72cbb2ad3c=1516742159
2f111c15-6af3-4e05-8a9a-628ca22b672f=0
633e12d0-055a-4049-b4fb-24ede0dc3eb2=1578416001
5a5ccb20-681d-412a-8c54-7ab58ecc03f8=1518990843
8d6fc269-38e9-44e6-ba81-1c20ea7d08d3=0
631aba9e-6126-406a-97a5-cc4baa935d88=1526199180
b0405f6d-7211-4101-9887-147ad9899416=1526199264
da8f3a9f-cb37-4ae0-a00c-7f68bb7b97aa=1526164901
f3cd92e8-7764-4d26-a27b-25c82c087dc3=1584974327
f67fe9a1-2233-41f7-ba98-70fbe37ff3c5=1545927251
4f68ccea-b287-4771-94ef-892319160432=1560350434
15d1b798-5f37-4482-b425-79a4d888e9f0=1560368675
e7a31308-199b-48ec-a68d-4fd01356bd0e=1560370520
43504c22-a88e-4e6f-b1fe-e4ca0ff1b5b0=1565046290
b3eafa93-b04f-4b71-b4f4-91448433072b=1560374660
41d49bec-f852-47a0-a838-0d4851be0020=1563628061
9501db43-c552-4463-8f8d-e041d4228757=1563628509
6cfa2a6d-ede6-4b97-aee1-7cc0c30178ab=1563743178
8f438e50-77e3-4475-a4ae-1e502fd78e14=1565036379
bee3d07c-1cd6-43fb-b342-21a344308df7=1585474226
e9caef65-bf18-4241-b349-b9b862c1142c=0
07839c9b-ca13-443e-8f64-a5d04c2048ed=0
fe06a69c-da07-4aef-adc2-842fb41b314f=1580162582
9ec809a0-7fdc-4741-93bd-742367281826=1584279670
7f3b06d0-8cec-4c4a-9a50-3c0dea96cc06=1584736657
0c989941-629c-4706-9da7-d52811430216=1584744129
2acf0e48-4499-4085-87e7-aba806bd1e26=1584742544
f795d2fb-e602-4c1d-a5ee-76a4a44e4c3a=1584743980
a7aff734-829b-4b4f-9c9d-4d039c51f355=1584871124
912535e6-3d9c-4659-a6ef-a6b89e1b858d=1584974152
"3DUfw`?/E0f
a|/WD
_CONSOLE
f7hD
jSAj/
5|j$!
	r5B
x1%I
jNyD~P
mEz1
.~4n
7'P[
0i 7
(G/M
9]yL,tj
"$}E,
GG>%
J@'Qw!M
`[3#N
RG1\=
P`@+dS
;jhCk
h`z:
(O_m
=bX6
#AK(f
JcJ*#>\
* ~\
1X~v`
	5h'
Zv|W
>"}T
0w)Q*
&*y7X
[en)
^_:J=
Hz:%%
#<?I$6a1y
n<5)
`j3<'
{L&,
wFe7
\8x@
{aM0
&nTZ
x}-pNWVC
jMiqA
HE)Y?
f-/l
 0p/L
h!6f
EMVFbvX
9.X:
Q_%Nho
4vHn
9X'Q
we(B
cP'7
6iCb_
;^2>
73G)
qDq0
Xa-]HD
Gx,D)'b
DqV-
8F:8
d?=M#@
4|,!W0
'qLS 
TM`S
*/R)c
^J3m
=L>u
 ?LK
.v~x
EaBr
b~.?X$|'
6pNG1Q
oLrI
l]G-
!?1%?
K7Hk
M}ai
'N	$O
?iyx
x?8@1
Q?N?
8jCj9
:>@w
uJ3i
Y;qn
&,n|
c-A#?
BlY!
o+u!g7X
+t{F
t4Yz$
QK|Lo
m|gND
Z?`2z
a2!#7
-8Z0[
@X81
!nF[D
qS&M#/
PS[z)
TM i
Uc!Y2\
\A~qc
NfmV
!YW^[
o2S%
yowG
l uv
$#&%_
#&sz
Uifa
]<\qG
aZ1]
0m8s
"}C>
jB_G.y
6R=9*
aE*l
4(Zhd
j!6!
Q#, 
x(yH
%:to
;/8|
I-zd
Md%fV
iOLf@
/:#d
{6}4
4 B*
p\4DP
b@^z
zZuiO~
mw?;
E	G'
ps"Zmc
bkO`f
hK|J
'b'y
<7Y"
?(zW
@_={m~
`)Zr
Vj17u!
E	&]E
Z}tHQ
IlVV'N
m.6;P
6bQ\+B,
hXQMo
[=Lu
M~m#
NfA&
~6hY
f$`1J
{/SgYi
(+iCv 
CM9R
kKW<0`
osk+%!GT$,
QY-4a
JN'0e
p.{fM
8}y1
9&.x
E4Ii,
#0a@H/6#
u3j\k
sW:Fe
p0\n
*=]%-4L
u.fLu.
y&]Y
9ZIud(Mm
e	Q7
~RU1\
BV-J
in-v
_122
vj]Q
hfrAe
s_+Vl'
nNed
gkHc
}M1NN
l!L/0
4v'6
(i%+
AYVa
Wc[@
.47<7
&&)n
3%rkg
jp:{
F?eqQ\Z
uju*N
#{-u{
IM k
[d:x
kG@J
/V=A
1K6f?
N@ep!
=Ooo
Pa])
CM+X
CL0u
cBr^w
tMi@
a+\ 
,b;b
)FJl
P?C:
?.'@
w"O*
`t!P
_~59A
g@mj
Q. "
V>#u{|
b-\9
9Mrs
IG?!J
cy sl"
3_nAo
&nb'
QUJz
<	)k{
.XhS
$DSt
~wBT
^Oik
]ef=
+EDd7
U(Qp
Cw;<W
+#F4
L^dH=
vsdKX
k@G/
!1jEw
y,0e
`1(b+
`c7uK
80Tv
`j[`
z@D#i
e0=RT
M<VP
'7o~
$u`G9
j~9[
HRSy
0XZNof
40M,p
,g`vpm
 d@d
f72Cx6
J(Fn:
pO$#
?I_v
ysy 
5}2Z^~
VSHaFU
q`{J
q_W`@
2.)"=^
%I	8u[\j
yw+.
ayYL
NDiC2
Rl9^
 {cUY
{MKcx
2e-R
gK^V
EiZ>
"3DUfw`-
_CONSOLE
4(FnT
6oA39
^#v0
s6%nz
1$Mh
`DiY
JNu{
#EJhm
!f#`
AX63<
o);ie
g8G#
.'u:
)m tN
VN|Q
\@Ar
y#$X
.u	GM
tIq(
#$)t
]t0Lm
x%hd#
[daV5
Y2{~
j1jb
Hnh|
Oy!K
_[M-
u<2$
Lk)(
ysk#
}jc	
!ekB
Yc)`QD
$lPiS
2.5J
hCh=
rU@A
=oCR4wjz~zUN
V-wX
zx3kJ
J|P_
tF#(3
+L*[
L*LU
{lXX
gpOFr[
?[9\
auEQ
9vva
~p@Nm
\[6?
T	gm
U*g1
m(d42
uA-]9
$NLX
A1Wc
A]N]+
%Lyf
)Y#s
Z!{N
,|$a
t6%y
|I;$
!Y*^y
'JPC
L;X+
t dz*
^Wz&I#
SR5a
%hM]
@gyV
Obk*Y){
,7e34
+k0rJh
0;{)
vV:-
\5=$
G&3t
xY%x
 h~?
,7jpY5vIY
pi}f
DP,z$%
pT#*?x
o`z?
y@|qN
lhZ	
*\F=
tw&q
{oTrNSw
.,lz
G$Q_
8$D|
3YS5EPX
5{<:
q<NZ
r`^1
5JBU
Vh`p
!{'b
_:;oP
gleN
x]+t
_<u])
}	W.
l57Da
	W	'D
GjI.
yVPL
Nhi"
-z='g:
j}$f`
Tv2Z~
"1F+
2ORJ
ElcQ
0<^*u
wR|I#r
^ne'&@^
i8!^5
W]e1
tXki+
m*sW
#N{c!
5CSo2q
rx#%
%#2.
 4l^/{
B#S>e
uv6w
{~3h
$r~<!
*3]E
RT8]Q
x2pXO
VL&l6 a
*bU}
px&]m
1Tq]Z5
E1LB
$l\|
9'qb8$(
Cs`X
LL1O
'-egv
R42z
%BF?)
hW;E
 *JR
-Mh9
1)V0
R+~t
Mm4ax$
P7Z$z
<gh'or
k_[w|
R)b^
4iQ{
?ZT<
wV,:)B
d;+(>
tL8*7
H>c(
it1,'
bmJ(
JP=Kw~
}3CB
 KCk'
P2G Qx
dM_'
aerz
8Y~9Hy
QP^; F
Gs`=}
[otf
S)b#
\W1F3
U	;Pu
3aQ>X#
cN\v
+ODA
~"&e
Wml}
} )uv
D	{y
l!&8MY
sD:z
CC[w
Xqj!l
$IleAc
[=ct
k{Gw
z`W"
WOas
5^'&)
yw8z
*!3fcbl
Kgmd6
P/9j
mbkW(
VX(\
m&xH
1+Sz
O"Y2
|ZTB/
v$Ca
	EDHew
u,\a
`!"%
4(6Lp
'".5
#|:)
	F*c
swpu
u)v)
1$=Gb
@(rZ#x
?*93B
Fs*#
w`dr
4ME.
F*_p-6
i}Jf
B:A\
jmd@
l9'!tl
:*$2
T$P:
Brpa
e<"S	
/{-<
T]6|X
vR$g*
 UT"
^aXB
=V{@
H`D.
!8!Q
?Cxx
kHNK
Dlc 
.t:Q
	|O6 v
lnt'
kTk(W
QLdi
&<&c
6jf P	
*[?H
Xjy?Ci+,
BmK=6
<[rBe
	TJ7l
C6Cc~
Q2FSi
eSvr
pC#(
zy4!1
JCC^
[I@-o
{=Zx
UN8pl~%K
lF+C
P6yp
OB41=
*"nv
@%o{K
sKXR
'Bi`.5(o
>F#q
TCeh
LzM}
`!oO
?$nK
)Ck$
vKsT
WyTZ
~2Qc0w
b~*)
m~pQa
/6"[k
g<x~
CHhw
U#Hp
i>0~
<X5b
gJnf
7{Nzw
62{R
H$={E
3Bw,
`)0J
fM}r
_F	U
6DPn
Ti>U2
hj?3<
-!Su
e8f2
/\d&
s.gQ
WD-Ci
U)p 75
U@@4
NygP
Jsd>
#U#O
iz>Z
(^%g\
mDA=
(MUX[
@/st
d4=deV
"3DUfw`
_CONSOLE
e, q'K
o+DE(G
8*z`
da@~
N$p9
lU: 2O
v^,t
Hx=;~
PK  
-o[(
dGtH
>aH,
WU?z
7l0V
6Am)
%TsT
H[Ll
NfH/U)
"Xeg7
D[j/
A+PD
tp-!)
VG[Oc
KK;B
2?R$
6c2d
W;GE&
k3*$
ym+5
m(b p
gE+=
V]Ri
kp5v
D`#[
7|J\
k|i-
K84J
.r<:m
$DP"
?wgT
Afl@
=|39
V=E-
DIl"9
q^!H
M6Og
omGa
3X,Q
FFaQCd
A 4F
I<<E:
fy+_6
R/Bm
1[cGo
:~`}
4fo2
GjU.
RqP8
y'CR
v	[d
~O;Dd`3
h&:*
v:pT
ZHcsk
c3"Wg
 Ae %
P2-h
]UNU
O!`#C3Sa
>hkA),B
?iuX
2*2l@
?zxL
o9[3
o~*M
hjUHm!C
{7<U9
,S-(R
/Nds
X'9s
#xP#
BK/[*
pP,=
k4|5'D
EwqL
P+Ia
D1-8
+QU	
MnRM<
c"A-
bFc`
kkPO
A*|Q
+)"S
S%4t
%:w+
^O1u\O
@G8^6
=n{'
#@PiJ
CGZ4
#$PL
BF_\
Y5`{\
XA~"
r99n
OTV7
AwOP
[pF%1:Q]
4L80
e^}[
lBI_
e$7(
GL}m
z5.A
3e/u
UPoK
X_F.
:O/]8z 
68DH
@dhS
-!-a
,q4o
$Jwp
AoCx
yErb
WBfg
j<v,I
:U@c
fV'4
yJ)U8
WoLf
-,_;
71rX
 d-3t
 zQh6
@Eu9l'
$XSQ@o
/Yv {
}	Fv
pc$'M
KOri
N-.h1
EVU:
);-n\
LiM[
=\;}_Fh'
K,`R
>:!^
elg:
q@;^-
pvU1
^]-{ 
' &x
i.ON 
HHBoz
Y!y6
>k!L
*Kt3
*:i\
1-vr
!]>H
)JnG
-pXz
(,1Q
S\#5
ws+%
!3TY
.qwF4W
"z=,%
k3na
)?zo
-#M{
xjoSOr
VLA(r
<}?1
2TBiHT
H~7}r"
-9^?"g$Pq
orno
F&lmM1D
jby]
SR5F
vUuDJXk
b[\^GP
l{7g
	VZZj
Lw^k
sHA*
)i$|
=Vp|
]B\1gB
lH(R<
NU_q
!nI[k
0ns\G
vPvudj
K(DW
ig	"
QF.n
Jz]\
$Y:j
HSl7
>E[8F
4~anxs
SPn96
`l6=$
Hd<8
Db<e.
pzw:jw
#Ey$
5_.1}
m\JJZ
b1Qj
^T],
%u6\
,Y6c6
2\^@
}i2c
eVq^c+
BO@X
hC!YV
_x@<
!h*c
|S	GA
Qx9$
9{q3cG
2ur9
Z5@w
p0!p
,q"S
>{_l4
-38"
@Akp
I2;,.N
cdyM
,6`[
9yf4>
8J@u
l(H@
Kc]bn
'/F[
;JugH
L\ze>
nG?v
XpgP
)WI+\
9ca]
WDJ9b
awnh
:Q#B
jcYj
B|,G*--52
6v2$
8B+lV
$2TK
0grwP
}rqiO
s&AB
~yM%
4,FXb
dFCE
&d!r
=%Y(m
VCCG
nDB^
izE"4
l'7m
7iSv
8P&!%
C@8	
K}N!
6m%QS
jKuR
[K]d
hk:G!
uADq+MX
t*4A"T
fv	}=p
MK1rIP{
`eAS
0Tm1n!
4W\f
f;~p%
fr[6
wv`Y
03Et1
WySc
d HH
XjEb
I]_v
WwDw
.\8jp<
H+~/
h+"t+|$
}6sl|~NZ
B*ngH69
sIL@
8&^G*
GdA>
WhW7<J7
B.`r
/B<4v
VIFc
pzSo
N^aqH
O1|0
t,&Z
"LsD
xY5YVf
3Xs!
Hh^,
y9wPH
HB%jT
kMl8
"3DUfw`G
m~`)
_CONSOLE
N!}*=`r
MZ]e
-3q:
H8l<
{MUr
@>J=sM
z-"gt
nXRs^}
k Pc
!8(4No.
+}T@
Vi@3
mC?{KM!'V
^	Yv\)
;:^.Y
6qVJ4
;"8dh
x&fE
=&iG|4
nh|W
DRc2J
QEWB
N:St
0~o/O
Po:g
U'=`
&_Elq
F=Z(~/Kw
>f:Z
)eMg
ecme&
<vgM
*}uKk
|f-qA+
B4sb[0'
U|Gs
/zAx
vcG2
O#up
|fbv
IO/lzA
i,>u
yf*|
gO$d
Z&!#
X{^F4
4b2Y
Ge=u
"hMe
j:1& 
w5#F
d7$\
y!_w
!T@z
d[}#;
d^?R
E6z(
'z.A
XWf/
.-<c
GU^F2
NxaG
6(* T
RNL5
@5qo
JI>T
Hy [
b^Mm
-@:Kaj!
Ny`2
7cTUo:
HGh7
C+mL
E`HD
R`h9}R
G,6i
Bl%Gd
<?I0D
C{@L
UtMs
&hUv
1U)s'
\w3A<+X6{
~(#nD
p+YK
wd(~
Zy<e
 Y%_ZL
"6pPh
;Eb/
	#{Pw
p630r
Hy`C/
|MCP
p?<G
=Mfo
5	_<
dA)bJr[9A
qm D
gs\>rJ
=mwBZb
84Ip
mkBG"P
"}$&
H02B
4xt%
OSt<
#h4N
b;i.
}.-b
(`5}
nI3I
"w.V
^}5R
<vJy"r
EiO:8
h }$
vi/wed
Gq 4;
t1q^\
W~=*
4d.U
(fOe7VC
"jFYm
0894
qjX=
XIlW
\wc_P
d_QA
UZ1{
T_Wh
:7=\Y
"HP^a
YMZ+
ofD?u	}
*W6RN
	E8l
~Ytj
{h?yJ
UX|%
?c~6w
l-HnP
]Nnn
|*	,
+^Y`
zCx#X
bam~'
"J'7w
sV-VwoZs:
~$.d
 jr|f
vbN[
|CE(,
W@Ym
K%0f
D6S)
qp+9
T*<cd
6N1r
c<w!>
@-	|
@%%j
A?eB
I4S3
iihQ
lA-	
q.j>
JM.h
(G6\l?
+E6+S
OX:Y
X0jc
!Zbb
:g'X
s@Am8
\\*dK
nm9]
o@" 
{F^q
k@d{
;1DBQ[J
]kd\
O@9%
By7u2H
b@W>
x;IkJ
Y\Fm
Dw'ekQO
Fdkw
:9mU
Lob!
-Rsy
_D79J
E+P?
{YG1
f9[8K-bM1
M *<
'D#;Ee#
$wn25y
JMpi
rm$I
ib>,
.Es#
*m?W
KQui
C0)5G
V]/Q%E
=fgM
[{\m0
Q~su
S}s8%
CXc~
3M.3
n^,/9v
 e7k
',695
U-w&
+7}nu?
&eQ-
B*M#/
k9y(
h>>n
sF0>o]~R
SJt9
!S&<
W#.72q`w_
K"DQ5eJ
W >.	:3
{$;Aq
@[eX
FS/.
<u^6
	WAw
|o*/
LL8J
R@Y;
{n'D
E&Y^
TyoF
G	eu
90Hw
N5XvG
Gc_v	
W+ip
%:lbE
wwrr;
v9Qzi
n>R*
!3<IH
^7/Jx
?k/!
#,mI+
pbMa
dIsS
Bax]
~M]#
TvsU
H=sC
,pjX
G[77
?ni	
bUWC
TKYwc
A"jX
o[2*
8I`p
sy+u
H[p_&U
LuZD
^FpSc
^%mJ
0Q2L
=YfH'
~:[g
k,iq
Nr=~d
`xT#
2phmV<:
T/Us
C|}v
l9),
N_qY
XAN,	o
,BL~
"8[K
[TH^
d{ml
=D*R
6#,T
~Phn$
%Q$~
(2di	
f7{x
'.=k
k;)P
<##t
r<J'
t?z.
/tmp/arduino_build_383460/sketch/esp32_cam_node.ino.cpp.o: \
 /tmp/arduino_build_383460/sketch/esp32_cam_node.ino.cpp \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Arduino.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdint.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/_default_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/features.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/_intsup.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/_ansi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/newlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/ieeefp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core-isa.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/cdefs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/reent.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/_ansi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/lock.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/sched.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/stdio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/stdlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/alloca.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/string.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/string.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/inttypes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/FreeRTOS.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/config/sdkconfig.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/hal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtensa-versions.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core-matmap.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/tie.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/system.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_context.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/corebits.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime-frames.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/ets_sys.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_assert.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/assert.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/projdefs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/deprecated_definitions.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portmacro.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/specreg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_crosscore_int.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_timer.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_err.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/heap/esp_heap_caps.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/heap/multi_heap.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc_memory_layout.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_attr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portbenchmark.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/mpu_wrappers.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_system.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_sleep.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_struct.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/rtc_io_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/io_mux_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_sig_map.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_pins.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_intr_alloc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_periph.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/touch_pad.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_intr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/ets_sys.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_api.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/touch_channel.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/task.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/limits.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/list.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/semphr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/queue.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/math.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-log.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/log/esp_log.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/log/esp_log_internal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-matrix.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-uart.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-touch.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-dac.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-adc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-spi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-i2c.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/event_groups.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/timers.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/task.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-ledc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-rmt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-sigmadelta.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-timer.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-bt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-psram.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-cpu.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp8266-compat.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/stdlib_noniso.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/binary.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WCharacter.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WString.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/pgmspace.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Stream.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Print.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Printable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/IPAddress.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WString.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Printable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Client.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Server.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Udp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Stream.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/IPAddress.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/HardwareSerial.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Esp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/variants/esp32/pins_arduino.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/esp_camera.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/ledc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/periph_ctrl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/dport_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/dport_access.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_dport_access.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/uart_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/periph_defs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/sensor.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/img_converters.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Print.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/IPv6Address.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiType.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiSTA.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiGeneric.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_event_loop.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp_event/esp_event.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/queue.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp_event/esp_event_base.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_event_legacy.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_wifi_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_private/esp_wifi_types_private.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/queue.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_interface.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/tcpip_adapter/tcpip_adapter.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_wifi_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/ip_addr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/opt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwipopts.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/time.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/fcntl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/_default_fcntl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/stat.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/vfs/sys/ioctl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/select.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_task.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/netif/dhcp_state.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/debug.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/arch.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/arch/cc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/errno.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/errno.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/arch/sys_arch.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/arch/vfs_lwip.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/def.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/ip4_addr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/ip6_addr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/def.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/dhcpserver/dhcpserver.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiAP.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiScan.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiClient.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Client.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiServer.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Server.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiUdp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Udp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/cbuf.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiClient.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiAP.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiUdp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/AsyncUDP/src/AsyncUDP.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/api.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/netbuf.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/pbuf.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/err.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/sys.h \
 /tmp/arduino_build_383460/sketch/ArduinoNvs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/spi_flash/esp_partition.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/spi_flash/esp_spi_flash.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/nvs_flash/nvs_flash.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/nvs_flash/nvs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/nvs_flash/nvs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiMulti.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFi.h \
 /tmp/arduino_build_383460/sketch/camera_pins.h \
 /tmp/arduino_build_383460/sketch/UniversalTelegramBotRZO.h \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson.h \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Configuration.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayRef.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Collection/CollectionData.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Namespace.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/version.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/assert.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayIterator.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/SlotFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/StringAdapters.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ConstRamStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/safe_strcmp.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/IsString.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/conditional.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/enable_if.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/integral_constant.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_array.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_base_of.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_class.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/declval.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_const.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_convertible.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_enum.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_floating_point.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_integral.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_same.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_signed.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_unsigned.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/type_identity.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_const.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_reference.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/StoragePolicy.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/RamStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/Alignment.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StringSlot.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/mpl/max.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/gsl/not_null.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/Float.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/Integer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/SizedRamStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/StlStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ArduinoStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/FlashStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/SizedFlashStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/convertNumber.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/alias_cast.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/math.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/limits.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantRef.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Misc/Visitable.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantOperators.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantCasts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/attributes.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantComparisons.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantOr.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantAs.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/IsWriteableString.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantShortcuts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayShortcuts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectShortcuts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectRef.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectIterator.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/Pair.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/String.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/DynamicJsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantTo.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/StaticJsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantAsImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/parseFloat.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/parseNumber.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/ctype.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/parseInteger.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/deserialize.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/NestingLimit.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Reader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/IteratorReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/RamReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStreamReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStringReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/StdStreamReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/StringStorage/StringStorage.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StringBuilder.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/StringStorage/StringMover.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/EscapeSequence.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/Latch.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/Utf16.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/Utf8.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/FloatParts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/measure.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/DummyWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/serialize.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/StaticStringWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStringWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/ArduinoStringWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStreamWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/PrintWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/PrettyJsonSerializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/endianess.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/utility.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/ieee754.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/compatibility.hpp \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/core_version.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/WiFiClientSecure.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/ssl_client.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/esp_mem.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/check_config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform_time.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net_sockets.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl_ciphersuites.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/pk.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/md.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/rsa.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecdsa.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/asn1.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecdh.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/debug.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/entropy.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/sha512.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ctr_drbg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/aes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/aes_alt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/hwcrypto/aes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/aes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/error.h
/tmp/arduino_build_383460/sketch/esp32_cam_node.ino.cpp.o: \
 /tmp/arduino_build_383460/sketch/esp32_cam_node.ino.cpp \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Arduino.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdint.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/_default_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/features.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/_intsup.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/_ansi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/newlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/ieeefp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core-isa.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/cdefs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/reent.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/_ansi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/lock.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/sched.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/stdio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/machine/stdlib.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/alloca.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/string.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/string.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/inttypes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/FreeRTOS.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/config/sdkconfig.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/hal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtensa-versions.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/core-matmap.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/tie.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/system.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_context.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/corebits.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime-frames.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/ets_sys.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_assert.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/assert.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/projdefs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/deprecated_definitions.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portmacro.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/config/specreg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/xtensa/xtruntime-core-state.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_crosscore_int.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_timer.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_err.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/heap/esp_heap_caps.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/heap/multi_heap.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc_memory_layout.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_attr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/portbenchmark.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/mpu_wrappers.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_system.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_sleep.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/soc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_struct.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/rtc_io_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/io_mux_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_sig_map.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_pins.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_intr_alloc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/gpio_periph.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/touch_pad.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_intr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/ets_sys.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/xtensa_api.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/touch_channel.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/task.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/limits.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/list.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/semphr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/queue.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/math.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-log.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/log/esp_log.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/log/esp_log_internal.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-matrix.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-uart.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-gpio.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-touch.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-dac.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-adc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-spi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-i2c.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/event_groups.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/timers.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/task.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-ledc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-rmt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-sigmadelta.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-timer.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-bt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-psram.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp32-hal-cpu.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/esp8266-compat.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/stdlib_noniso.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/binary.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WCharacter.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WString.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/pgmspace.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Stream.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Print.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Printable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/IPAddress.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/WString.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Printable.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Client.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Server.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Udp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Stream.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/IPAddress.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/HardwareSerial.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Esp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/variants/esp32/pins_arduino.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/esp_camera.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/ledc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/driver/driver/periph_ctrl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/dport_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/dport_access.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_dport_access.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/uart_reg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/soc/soc/periph_defs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/sensor.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32-camera/img_converters.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFi.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Print.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/IPv6Address.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiType.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiSTA.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiGeneric.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_event_loop.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp_event/esp_event.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/queue.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp_event/esp_event_base.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_event_legacy.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_wifi_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_private/esp_wifi_types_private.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/queue.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_interface.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/tcpip_adapter/tcpip_adapter.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_wifi_types.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/ip_addr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/opt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwipopts.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/time.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/fcntl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/_default_fcntl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/stat.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/vfs/sys/ioctl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/select.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_task.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/freertos/freertos/FreeRTOSConfig.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/netif/dhcp_state.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/debug.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/arch.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/arch/cc.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/errno.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/sys/errno.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/arch/sys_arch.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/arch/vfs_lwip.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/def.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/ip4_addr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/ip6_addr.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/def.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/dhcpserver/dhcpserver.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiAP.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiScan.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiClient.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Client.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiServer.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Server.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiUdp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/Udp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/cbuf.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiClient.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiAP.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiUdp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/AsyncUDP/src/AsyncUDP.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/api.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/netbuf.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/pbuf.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/err.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/lwip/lwip/sys.h \
 /tmp/arduino_build_383460/sketch/ArduinoNvs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/spi_flash/esp_partition.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/spi_flash/esp_spi_flash.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/nvs_flash/nvs_flash.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/nvs_flash/nvs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/nvs_flash/nvs.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFiMulti.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFi/src/WiFi.h \
 /tmp/arduino_build_383460/sketch/camera_pins.h \
 /tmp/arduino_build_383460/sketch/UniversalTelegramBotRZO.h \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson.h \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Configuration.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayRef.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Collection/CollectionData.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Namespace.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/version.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/assert.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayIterator.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/SlotFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantData.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Misc/SerializedValue.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/StringAdapters.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ConstRamStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/safe_strcmp.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/IsString.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/conditional.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/enable_if.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/integral_constant.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_array.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_base_of.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_class.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/declval.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_const.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_convertible.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_enum.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_floating_point.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_integral.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_same.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_signed.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/is_unsigned.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/make_unsigned.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/type_identity.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_const.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/type_traits/remove_reference.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/StoragePolicy.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/RamStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/MemoryPool.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/Alignment.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StringSlot.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/mpl/max.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantSlot.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/gsl/not_null.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantContent.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/Float.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/Integer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/SizedRamStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/StlStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ArduinoStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/FlashStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/pgmspace.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/SizedFlashStringAdapter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/convertNumber.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/FloatTraits.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/alias_cast.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/math.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/limits.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantRef.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Misc/Visitable.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantOperators.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantCasts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/attributes.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantComparisons.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantOr.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantAs.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/IsWriteableString.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Operators/VariantShortcuts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayShortcuts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectShortcuts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectRef.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectFunctions.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectIterator.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/Pair.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/String.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/DynamicJsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/BasicJsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/JsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ElementProxy.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantTo.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/MemberProxy.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Document/StaticJsonDocument.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/ArrayImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Array/Utilities.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Collection/CollectionImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Object/ObjectImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantAsImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Variant/VariantImpl.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/parseFloat.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/parseNumber.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/ctype.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/parseInteger.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/deserialize.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/DeserializationError.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Filter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/NestingLimit.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Reader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/IteratorReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/RamReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStreamReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/ArduinoStringReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/FlashReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Deserialization/Readers/StdStreamReader.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/StringStorage/StringStorage.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/StringStorage/StringCopier.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StringBuilder.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/StringStorage/StringMover.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/EscapeSequence.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/Latch.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/Utf16.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/Utf8.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonSerializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/TextFormatter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Numbers/FloatParts.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/measure.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/DummyWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/serialize.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/StaticStringWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStringWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/ArduinoStringWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/StdStreamWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Serialization/Writers/PrintWriter.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/PrettyJsonSerializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackDeserializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/endianess.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/Polyfills/utility.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/ieee754.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/MsgPack/MsgPackSerializer.hpp \
 /home/inverse/Arduino/libraries/ArduinoJson/src/ArduinoJson/compatibility.hpp \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/cores/esp32/core_version.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/WiFiClientSecure.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/ssl_client.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/esp_mem.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/check_config.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform_time.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net_sockets.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecp.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl_ciphersuites.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/pk.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/md.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/rsa.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecdsa.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/asn1.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecdh.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/debug.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/entropy.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/sha512.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ctr_drbg.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/aes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/aes_alt.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/hwcrypto/aes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/aes.h \
 /home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/error.h
otadata
app0
spiffs
h&!,[3
#include <Arduino.h>
#line 1 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
// ESP32_cam_node, upgraded with una additional udp layer 5 control protocol and configurable telegram bot
// PLEASE ALSO INSTALL THE ArduinoJson library by Benoit Blanchon
#include "esp_camera.h"
#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiAP.h>
#include <WiFiUdp.h>
#include "AsyncUDP.h"
#include "lwip/api.h"
// NVS includes, non volatile storage
#include "ArduinoNvs.h"
// WIFI includes and variables section START
#define MY_NAME "e32cam001s01"
#define HEARTBEAT_DATA "e32cam001s01,HEARTBEAT,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ACK_DATA "e32cam001s01,ACK,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ERR_DATA "e32cam001s01,ERR,0,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#define ERRNVS_DATA "e32cam001s01,ERR,ERROR saving data to NVS,0,0,0,0,0" // udp - layer 5 control protocol predefined messages
#include <WiFiMulti.h> // this should support more different AP's // ToDo
WiFiMulti wifiMulti; // this should support more different AP's // ToDo
// Non volatile storage - incorporated in the project folder
#include "ArduinoNvs.h"
// CAMERA: camera configuration and initialization
camera_config_t config;
uint8_t cameraInitType = 0; // 0 = camera off, not initialized; 1 = default init, the main webserver; 2 = motion detector; 3 = color blob detector
#define ALARMS_ENABLED 1  // by default, the device works as a motion detector in case the contact with the command and control server is lost. 
// WARNING!!! Make sure that you have either selected ESP32 Wrover Module,
//            or another board which has PSRAM enabled
// Select camera model
//#define CAMERA_MODEL_WROVER_KIT
//#define CAMERA_MODEL_ESP_EYE
//#define CAMERA_MODEL_M5STACK_PSRAM
//#define CAMERA_MODEL_M5STACK_WIDE
#define CAMERA_MODEL_AI_THINKER
#include "camera_pins.h"
// of course this is the default and should be modified
#line 57 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void cameraInitConfig();
#line 145 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void cameraInitConfigMotionDetect();
#line 344 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void cameraInitConfigColorDetector();
#line 433 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
bool isMoreDataAvailable();
#line 437 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
uint8_t photoNextByte();
#line 442 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void take_send_photo(String TChatId);
#line 587 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
String convertToString(char* a, int size);
#line 609 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void print_wakeup_reason();
#line 629 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void routeTableUpdate();
#line 718 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void clientServe();
#line 806 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void wifiIntManagement();
#line 929 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void UresetudpData();
#line 947 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
int UfillinudpData(uint8_t *pktDataField, int pktLen);
#line 983 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void UprocessudpCommand(AsyncUDPPacket packet);
#line 1084 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void udpCommandClient();
#line 1153 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void udpBCommandClient();
#line 1220 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void clientsManagement();
#line 1238 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void setup();
#line 1356 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void loop();
#line 57 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
void cameraInitConfig() {
  // camera part
  cameraInitType = 1;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// MOTION DETECTION SPECIFIC CAMERA DEFINES and buffers
#define WIDTH 320
#define HEIGHT 240
#define BLOCK_SIZE 10
#define W (WIDTH / BLOCK_SIZE)
#define H (HEIGHT / BLOCK_SIZE)
#define BLOCK_DIFF_THRESHOLD 0.2
#define IMAGE_DIFF_THRESHOLD 0.1
#define DEBUG 1
bool capture_still(); // declare functions
bool motion_detect();
void update_frame();
void print_frame(uint16_t frame[H][W]);
uint16_t prev_frame[H][W] = { 0 };  // these are actually 32*24 * 16bit, more than acceptable, no problem.
uint16_t current_frame[H][W] = { 0 };
uint8_t motionDetectON = 0;  // motion detection is normally kept off. The idea is to activate it in case the command & control servers do not respond, or to activate it on demand / on alarm.
uint8_t alarmEnabled = ALARMS_ENABLED; // motion detection activation is enabled by default to 1, some other kinds of usage may require this is off, for example the color blob detection mode and the webcam / telegram modes. 
// MOTION DETECTION SPECIFIC CAMERA CONFIG INIT FUNCTION (first, remember to do a deinit!!!)
void cameraInitConfigMotionDetect() {
  // camera part
  cameraInitType = 2;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_GRAYSCALE;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// CAMERA MOTION DETECTION SPECIFIC FUNCTIONS
 * Capture image and do down-sampling
bool capture_still() {
    camera_fb_t *frame_buffer = esp_camera_fb_get();
    if (!frame_buffer)
        return false;
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    //sensor_t *sensor = esp_camera_sensor_get();
    //Serial.print("Switch to JPEG: ");
    //Serial.println(sensor->set_pixformat(sensor, PIXFORMAT_RGB565));
    config.pixel_format = PIXFORMAT_RGB565;
    Serial.print("Switch ok? ");
    Serial.println(esp_camera_init(&config) == ESP_OK ? "yes" : "no");
    frame_buffer = esp_camera_fb_get();
    Serial.print("JPEG len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    //sensor->set_pixformat(sensor, PIXFORMAT_GRAYSCALE);
    frame_buffer = esp_camera_fb_get();
    Serial.print("GRAY len: ");
    Serial.println(frame_buffer != NULL ? frame_buffer->len : 0);
    while (1) delay(50000);
    // set all 0s in current frame
    for (int y = 0; y < H; y++)
        for (int x = 0; x < W; x++)
            current_frame[y][x] = 0;
    // down-sample image in blocks
    for (uint32_t i = 0; i < WIDTH * HEIGHT; i++) {
        const uint16_t x = i % WIDTH;
        const uint16_t y = floor(i / WIDTH);
        const uint8_t block_x = floor(x / BLOCK_SIZE);
        const uint8_t block_y = floor(y / BLOCK_SIZE);
        const uint8_t pixel = frame_buffer->buf[i];
        const uint16_t current = current_frame[block_y][block_x];
        // average pixels in block (accumulate)
        current_frame[block_y][block_x] += pixel;
    }
    // average pixels in block (rescale)
    for (int y = 0; y < H; y++)
        for (int x = 0; x < W; x++)
            current_frame[y][x] /= BLOCK_SIZE * BLOCK_SIZE;
#if DEBUG
    Serial.println("Current frame:");
    print_frame(current_frame);
    Serial.println("---------------");
#endif
    return true;
 * Compute the number of different blocks
 * If there are enough, then motion happened
bool motion_detect() {
    uint16_t changes = 0;
    const uint16_t blocks = (WIDTH * HEIGHT) / (BLOCK_SIZE * BLOCK_SIZE);
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            float current = current_frame[y][x];
            float prev = prev_frame[y][x];
            float delta = abs(current - prev) / prev;
            if (delta >= BLOCK_DIFF_THRESHOLD) {
#if DEBUG
                Serial.print("diff\t");
                Serial.print(y);
                Serial.print('\t');
                Serial.println(x);
#endif
                changes += 1;
            }
        }
    }
    Serial.print("Changed ");
    Serial.print(changes);
    Serial.print(" out of ");
    Serial.println(blocks);
    return (1.0 * changes / blocks) > IMAGE_DIFF_THRESHOLD;
 * Copy current frame to previous
void update_frame() {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            prev_frame[y][x] = current_frame[y][x];
        }
    }
 * For serial debugging
 * @param frame
void print_frame(uint16_t frame[H][W]) {
    for (int y = 0; y < H; y++) {
        for (int x = 0; x < W; x++) {
            Serial.print(frame[y][x]);
            Serial.print('\t');
        }
        Serial.println();
    }
// CAMERA COLOR BLOB DETECTOR, INIT FUNCTION
// color-based blob detection - I plan to use this as part of a larger project, the idea is to help detect certain insects and pests in agricultural settings
// this camera will then become an additional sensor communicating with a robot designed to remove pests from invaded plants. 
void cameraInitConfigColorDetector() {  // specific for color-based target recognition, remember to do a deinit first!!!
  // camera part
  cameraInitType = 3;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_RGB888;
  //init with high specs to pre-allocate larger buffers
  if(psramFound()){
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_QVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
// different camera module models
#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif
  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  sensor_t * s = esp_camera_sensor_get();
  //initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1);//flip it back
    s->set_brightness(s, 1);//up the blightness just a bit
    s->set_saturation(s, -2);//lower the saturation
  //drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);
#if defined(CAMERA_MODEL_M5STACK_WIDE)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif
// Telegram section
#include "UniversalTelegramBotRZO.h"
#include <WiFiClientSecure.h>
char* TBotToken = "810218086:AAFPJNDbolU0tzj_Xx6lXOsatDlYnWYaa80";
char* TChatId = "537093554";
WiFiClientSecure client;
UniversalTelegramBot TBotCambot(TBotToken, client);
int Bot_mtbs = 3000; //mean time between scan messages
long Bot_lasttime;   //last time messages' scan has been done
// specific camera variables for the telegram bot
//camera_fb_t * TBotCamfb; // moved intra-function
uint8_t* TBotCamfb_buffer;
size_t TBotCamfb_length;
int TBotCamcurrentByte;
// camera functions specific for the telegram bot
bool isMoreDataAvailable() {
  return (TBotCamfb_length - TBotCamcurrentByte);
uint8_t photoNextByte() {
  TBotCamcurrentByte++;
  return (TBotCamfb_buffer[TBotCamcurrentByte - 1]);
void take_send_photo(String TChatId)
  camera_fb_t * TBotCamfb = NULL;
  TBotCamfb = esp_camera_fb_get();
  TBotCamcurrentByte = 0;
  TBotCamfb_length = TBotCamfb->len;
  TBotCamfb_buffer = TBotCamfb->buf;
  TBotCambot.sendPhotoByBinary(TChatId, "image/jpeg", TBotCamfb->len, isMoreDataAvailable, photoNextByte, nullptr, nullptr);
  esp_camera_fb_return(TBotCamfb);
  TBotCamfb_length = NULL;
  TBotCamfb_buffer = NULL;
// UDP Async client, sends keep heartbeat messages to the server and retrieves commands
AsyncUDP udp; // for server A  // udp layer 5 control protocol
AsyncUDP udpB; // for server B
// command and control IP addresses for server A and server B (redundant server), the exchange is done via udp ( the port is defined by int udpServerPort) and the layer 5 transfers commands and status info as comma separated variables
int IPudpServerAa = 192;
int IPudpServerAb = 168;
int IPudpServerAc = 88;
int IPudpServerAd = 32;
int IPudpServerBa = 192;
int IPudpServerBb = 168;
int IPudpServerBc = 88;
int IPudpServerBd = 33;
int udpServerPort = 8443; // UDP/443 because, well, we can
// udp - layer 5 control protocol processing, the layer 5 control protocol consists of 8 CSV fields. The protocol structure is simple: client_name,requested_operation,field1,field2,field3,field4,field5,field6  all unused fields are set to ascii character 0
#define FIELDUA 8
#define FIELDUB 64
char UdataSplit[FIELDUA][FIELDUB];
int UfieldsLen[FIELDUA];
int UdataLen = 0;
int UserverOK = 0; // contact with the server attempted for 3 times in a row, failing. Say, the idea is: ACK from server received: set to 3, send HEARTBEAT: decrease by 1 until zero is reached, then stop decreasing.
static uint8_t wifiDebugOn = 0;
static uint8_t wifiConnFlag = 0;
static uint8_t wifiWebserverFlag = 0;
static uint8_t wifiBeginFlag = 0;
static uint8_t wifiConnectionAttempts = 0;
// Set the local access point IP address, the netmask is assumed to be /24
IPAddress SetAPIP = {192,168,5,1};  // REMEMBER TO CHANGE THIS FOR EVERY AP YOU PLAN TO INTRODUCE TO THE NETWORK
// Set these to your desired credentials.
const char *ssid = MY_NAME;  // for the local AP  // REMEMBER TO CHANGE THE SSID AS WELL, THE NET PART CONTAINS THE THIRD BYTE OF THE AP IP ADDRESS (the network LSByte)
const char *password = "giampippetto";
WiFiServer serverSTA(8080); // adding a second server on the STA interface? Let's try
// loop() control section
uint32_t loopCounter = 0;
// NETWORK section
// processing variables subsection
uint8_t payloadCurrContent[128] = {0};
uint8_t hashCurrContent[64] = {0};
uint8_t payHeaderCurrContent[32] = {0};
// NAt processing subsection
uint32_t payloadTypeF = 0;
uint32_t srcIPext = 0; // STA side
uint32_t dstIPext = 0;
uint32_t srcIPint = 0; // AP side
uint32_t dstIPint = 0;
uint32_t srcIPpay = 0; // payload side
uint32_t dstIPpay = 0;
// in the NAT table, the folloving are converted to uint32_t 
uint16_t srcPortext = 0; // STA side
uint16_t dstPortext = 0;
uint16_t srcPortint = 0; // AP side
uint16_t dstPortint = 0;
uint16_t srcPortpay = 0; // payload side
uint16_t dstPortpay = 0;
uint16_t expiryCounter = 0;
// NAT table subsection
uint32_t NATline[16] = {0};  // there are 14 fields actually, as per the above list, plus 2 reserved fields
uint32_t NATtable[256][16] = {0};
uint16_t NATlinePointer = 0; // do we allow up to 256 flows only?
// routing table subsection
uint16_t RoutelinePointer = 0; // do we allow up to 16 routes only?
uint32_t routetable[16][8] = {0};  // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
//packet buffer sub-section
uint8_t payloadToProcessFlag = 0; // if the LSB bit0 == 1, there is a payload that needs processing, other values / bits set may mean other operations.
uint8_t * payloadBuffer = NULL;
//structure of the packet buffer:
Size = 224Bytes = 32B header + 128B payload + 64B hash
4B = Type Field( 4 bytes ) = reqtype(1B), protocolNum(1B), Reserved(1B), Reserved(1B)
4B = DST IP
4B = SRC IP 
2B = DST PORT
2B = SRC PORT
2B = PayloadLen
2B = Reserved
4B = Reserved
4B = Reserved
4B = Reserved
128B = actual payload
64B = sha256Hash_reserved(32B raw or 64B hex)
// LED section
#define LED_BUILTIN 2   // Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED
// string section 
// converts character array 
// to string and returns it 
String convertToString(char* a, int size) 
    int i; 
    String s = ""; 
    for (i = 0; i < size; i++) { 
        s = s + a[i]; 
    } 
    return s; 
// deep sleep section
#define uS_TO_S_FACTOR 1000000ULL  /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  60        /* Time ESP32 will go to sleep (in seconds) */
RTC_DATA_ATTR int bootCount = 0;
Method to print the reason by which ESP32
has been awaken from sleep
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch(wakeup_reason)
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
// update the routing table
void routeTableUpdate() {
// RoutelinePointer // do we allow up to 16 routes only?
//uint32_t *routetable[16][8] // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
uint32_t ImyLocalIP = 0;
uint32_t ImyLocalSubnet = 0;
uint32_t ImyAPIP = 0;
uint32_t ImyAPSubnet = 0;
uint32_t ImyLocalSubnetMask = 0;
uint32_t ImyAPSubnetMask = (255 >> 24) + (255 >> 16) + (255 >> 8);
uint32_t ImyLocalGateway = 0;
IPAddress myLocalIP = {0,0,0,0};
IPAddress myLocalSubnet = {0,0,0,0};
IPAddress myLocalSubnetMask = {0,0,0,0};
IPAddress myLocalGateway = {0,0,0,0};
IPAddress myAPIP = WiFi.softAPIP();
ImyAPIP = (uint32_t)((myAPIP[0] << 24) + (myAPIP[1] << 24) + (myAPIP[2] << 24) + myAPIP[3]);
ImyAPSubnet = ImyAPIP & ImyAPSubnetMask;
// the first lines
// line 0 local AP  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
routetable[0][0] = ImyAPSubnet;
routetable[0][1] = ImyAPSubnetMask;
routetable[0][2] = ImyAPIP;
routetable[0][3] = 0; // gateway of course set to 0 for the AP side
routetable[0][4] = 0; // interface ID set to zero, for the moment.
routetable[0][5] = 0;
routetable[0][6] = 0;
routetable[0][7] = 0;
if (wifiConnFlag == 1) {
  myLocalIP = WiFi.localIP();
  myLocalSubnet = WiFi.subnetMask();
  myLocalGateway = WiFi.gatewayIP();
  ImyLocalIP = (myLocalIP[0] << 24) + (myLocalIP[1] << 24) + (myLocalIP[2] << 24) + myLocalIP[3];
  ImyLocalSubnetMask = (myLocalSubnetMask[0] << 24) + (myLocalSubnetMask[1] << 24) + (myLocalSubnetMask[2] << 24) + myLocalSubnetMask[3];
  ImyLocalGateway = (myLocalGateway[0] << 24) + (myLocalGateway[1] << 24) + (myLocalGateway[2] << 24) + myLocalGateway[3];
  ImyLocalSubnet = ImyLocalIP & ImyLocalSubnetMask;
  // line 1 STA  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
  routetable[1][0] = ImyLocalSubnet;
  routetable[1][1] = ImyLocalSubnetMask;
  routetable[1][2] = ImyLocalIP;
  routetable[1][3] = ImyLocalGateway;
  routetable[1][4] = 1; // interface ID set to 1, for the moment.
  routetable[1][5] = 0;
  routetable[1][6] = 0;
  routetable[1][7] = 0; 
} else {
  routetable[1][0] = 0; // nullifying the STA route
  routetable[1][1] = 0; // nullifying the STA route
  routetable[1][2] = 0; // nullifying the STA route
  routetable[1][3] = 0; // nullifying the STA route
  routetable[1][4] = 0; // nullifying the STA route
  routetable[1][5] = 0; // nullifying the STA route
  routetable[1][6] = 0; // nullifying the STA route
  routetable[1][7] = 0; // nullifying the STA route
}  // end void routetableupdate()
// handle client requests
void clientServe() {
  WiFiClient client = serverSTA.available();   // listen for incoming clients
  if (client) {                             // if you get a client,
    Serial.println("New Client.");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to take a picture and send it via telegram (configure via udp layer 5 control protocol).<br>");
            client.print("Click <a href=\"/L\">here</a> to restart the device.<br>");
            client.print("Click <a href=\"/W\">here</a> to initialize the camera hardware for the integrated camera webserver.<br>");
            client.print("Click <a href=\"/S\">here</a> to deinitialize the camera hardware and save power.<br>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          //digitalWrite(LED_BUILTIN, HIGH);               // GET /H takes a picture and sends it via telegram
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
          take_send_photo(TChatId);
          digitalWrite(LED_BUILTIN, LOW);  
        }
        if (currentLine.endsWith("GET /W")) {  // init camera for the main camera webserver
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          } 
        }
        if (currentLine.endsWith("GET /S")) {  // deinitialize the camera
          cameraInitType = 0;
          esp_camera_deinit();  // the camera needs a deinit from its current configuration.
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(LED_BUILTIN, LOW);                // GET /L restarts the device
          esp_restart();
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
void startCameraServer();
void wifiIntManagement() {
    // STA connection and disconnection management
// WIFI DEBUG AND SERVICING SECTION START
  if (wifiDebugOn == 1) {
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
    
      Serial.println("WiFi not connected yet");
    }
    if (WiFi.status() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
    
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
    }
  if (wifiConnectionAttempts >= 32) { // turning off wifi, there is no point in trying anymore, if past 32 attempts.
    WiFi.mode(WIFI_OFF); // turning off wifi, then we go to deep sleep for a certain number of seconds.
    
    esp_err_t err = esp_camera_deinit();
    esp_deep_sleep_start();  // going to deep sleep
    
  if ((wifiConnFlag == 0) && (wifiConnectionAttempts < 32)) {  // wifiConnectionAttempts must be < 32 
    wifiConnectionAttempts++; // increasing the connection attempts counter
    
    if (wifiMulti.run() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer();  // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
      Serial2.print("WiFi up and running: ");
      Serial2.print(WiFi.localIP());
      Serial2.println("' to connect");
      wifiConnFlag = 1;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
    if ((WiFi.status() != WL_CONNECTED) && (wifiBeginFlag == 0)) {
    
      Serial.println("WiFi restarting");
      WiFi.begin(ssid, password); 
      
      wifiBeginFlag = 1;
    }
  if (wifiConnFlag == 1) { // test if the wifi stays alive...
    if (WiFi.status() != WL_CONNECTED) {  // wifiMulti.run() == WL_CONNECTED // WiFi.status() != WL_CONNECTED
    
      Serial.println("WiFi disconnected");
      wifiConnFlag = 0;
      wifiBeginFlag = 0;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
  if (((wifiConnFlag == 1) && (wifiWebserverFlag == 0)) || (ESP.getFreeHeap() < 44000)) { // servicing the webserver on connection up for the first time
      // >>>>>>>> START SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      // >>>>>>>> END SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      
      wifiWebserverFlag = 1;
    
  // WIFI DEBUG AND SERVICING SECTION END 
// UDP - layer 5 control protocol
void UresetudpData() {
for(int i = 0; i < FIELDUA; i++){
  for(int j = 0; j < FIELDUB; j++) {
    UdataSplit[i][j] = 0;
for(int i = 0; i < FIELDUA; i++) {
  UfieldsLen[i] = 0;
UdataLen = 0;
} // end resetudpData()
int UfillinudpData(uint8_t *pktDataField, int pktLen) {
int i = 0;
int j = 0;
int k = 0;
UdataLen = pktLen;
for(i = 0; i < UdataLen; i++){
  if(pktDataField[i] == ',') {
    UfieldsLen[j] = k;
    Serial.print("received_udp_control_protocol_data:");
    Serial.print(UdataSplit[j]);
    Serial.print("; data_len:");
    Serial.print(k);
    Serial.print("; field_position:");
    Serial.println(j);
    j++;
    k = 0;
  if(j >= FIELDUA) {
    Serial.print("ERROR: too many commas in the udp layer 5 control protocol");
    return 100;
    
  UdataSplit[j][k] = pktDataField[i];
  k++; 
UfieldsLen[j] = k;
return 0;
} // end fillinudpData()
void UprocessudpCommand(AsyncUDPPacket packet) {
  Serial.print("processing udp layer 5 control protocol command directed to: ");
  Serial.print(UdataSplit[0]);
  Serial.print("; command is: ");
  Serial.println(UdataSplit[1]);
  // commands available at the moment, or planned, are: 
  // ACK (confirmed heartbeat reception, do nothing), TLGS (send picture to telegram), TLGC (configure telegram, field 2 = bot token, field 3 = chat id)
  // RST (reboot the device), DSLP (deep sleep)
  if(UdataSplit[0] == MY_NAME) {  // matched the field 0, the command is directed to me. 
      
      // processing the actual commands
      
      if(UdataSplit[1] == "ACK") {
        // do not reply with an ACK to an ACK, that would be ...disturbing
        UserverOK = 3;
      }
      if(UdataSplit[1] == "TLGS") {  // send picture via telegram
        //TBotToken
        //TChatId
        // technically speaking we should deinit and reinit with acceptable parameters. 
        
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
          if (cameraInitType != 0) {
            esp_camera_deinit();  // the camera needs a deinit from its current configuration.
          }
          delay(1000); // this might not really be necessary
          cameraInitConfig(); // and is setup for the correct motion capture configuration
          delay(3000);
        }
         // this might not really be necessary
        take_send_photo(TChatId);   
      }
      if(UdataSplit[1] == "TLGC") { // configure telegram bot token and chat id
        bool ok; 
        String sToken = convertToString(UdataSplit[2], UfieldsLen[2]); 
        String sChatId = convertToString(UdataSplit[3], UfieldsLen[3]); 
        ok = NVS.setString ("TLGToken", sToken); // Store the data value into the key named "TLGToken" on the NVS
        if(ok) {
          ok = NVS.setString ("TLGChatId", sChatId); // Store the data value into the key named "TLGChatId" on the NVS
          
        }
        if(ok) {
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        } else {
          Serial.println("ERROR saving data to nvs");
          packet.printf(ERRNVS_DATA, packet.length());
        }
        
        
      }
      if(UdataSplit[1] == "RST") {  // restart system
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        esp_restart();
      }
      if(UdataSplit[1] == "DSLP") { // start deep sleep
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf(ACK_DATA, packet.length());
        Serial.println("RECEIVED REQUEST TO DEEP SLEEP, STARTING TO SLEEP DEEP");
        esp_err_t err = esp_camera_deinit();
        esp_deep_sleep_start();  // going to deep sleep
      }
      if(UdataSplit[1] == "WCAM") { // init camera for the webserver
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
        }   
      }
      if(UdataSplit[1] == "SCAM") { // deinitialize the camera
        cameraInitType = 0;
        esp_camera_deinit();  // the camera needs a deinit from its current configuration.
      }
      
      
void udpCommandClient() {
  if( ! udp.connected()) {
    Serial.println("UDP connecting to server A");
    udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
    Serial.println("UDP connected to server A");
  if(udp.connected()) {
        Serial.println("UDP sending to server A");
        //Send unicast
        udp.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udp.onPacket([](AsyncUDPPacket packet) {
            Serial.print("UDP Packet Type: ");
            Serial.print(packet.isBroadcast()?"Broadcast":packet.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packet.remoteIP());
            Serial.print(":");
            Serial.print(packet.remotePort());
            Serial.print(", To: ");
            Serial.print(packet.localIP());
            Serial.print(":");
            Serial.print(packet.localPort());
            Serial.print(", Length: ");
            Serial.print(packet.length());
            Serial.print(", Data: ");
            Serial.write(packet.data(), packet.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packet.data() ,packet.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packet); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
// sending the heartbeat to the backup udp command server
void udpBCommandClient() {
  if( ! udpB.connected()) {
    Serial.println("UDP connecting to server B");
    udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
    Serial.println("UDP connected to server B");
  if(udpB.connected()) {
        Serial.println("UDP sending to server B");
        //Send unicast
        udpB.print(HEARTBEAT_DATA);  // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }    
          }
        }
        udpB.onPacket([](AsyncUDPPacket packetB) {
            Serial.print("UDP B Packet Type: ");
            Serial.print(packetB.isBroadcast()?"Broadcast":packetB.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packetB.remoteIP());
            Serial.print(":");
            Serial.print(packetB.remotePort());
            Serial.print(", To: ");
            Serial.print(packetB.localIP());
            Serial.print(":");
            Serial.print(packetB.localPort());
            Serial.print(", Length: ");
            Serial.print(packetB.length());
            Serial.print(", Data: ");
            Serial.write(packetB.data(), packetB.length());
            Serial.println();
            
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packetB.data() ,packetB.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packetB); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            
            // packet response processing END
            
            
        });
        
    }
    
void clientsManagement() {
  if ((wifiConnFlag == 1) && (wifiWebserverFlag == 1)) { // HANDLE CLIENT REQUESTS HERE
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
    clientServe();
    
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    
  } // end handle client requests if
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
// wakeup and init part 
  // packet / payload buffer allocation
  payloadBuffer = (uint8_t *)malloc(256 * sizeof(uint8_t));  // the actual size is 224 (see in the declarations), the maximum payload size for ESP-NOW is 250.
  pinMode(LED_BUILTIN, OUTPUT);
  // deep sleep boots
  ++bootCount;
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  /*
  First we configure the wake up source
  We set our ESP32 to wake up every 5 seconds
  */
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
// camera init and config
  Serial.println("WARNING, NOT INITIALIZING THE CAMERA IN ORDER TO SAVE POWER. PLEASE DO IT MANUALLY VIA UDP COMMANDS OR VIA THE MANAGEMENT HTTP SERVER ON PORT 8080");
  //cameraInitConfig(); // we want the camera not initialized by default. This saver power.
  /*
 if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
  */
// WIFI SECTION
  Serial.println();
  Serial.println("Configuring access point...");
  WiFi.mode(WIFI_AP_STA); // added by me // selecting the AP+STA mode
  wifiMulti.addAP("e32ap001s01border", "giampippetto");  // the connection part is verified as follows: wifiMulti.run() == WL_CONNECTED
  wifiMulti.addAP("G5SE_7499", "pippopluto");
  wifiMulti.addAP("internet-gw.iw1gpe.it.ampr.o", "heisakuukanwohiraite");
  wifiMulti.addAP("inverse", "heisakuukanwohiraite");
  wifiMulti.addAP("e32ap002s01border", "giampippetto");
  wifiMulti.addAP("e32ap003s01border", "giampippetto");
  wifiMulti.addAP("e32ap004s01border", "giampippetto");
  wifiMulti.addAP("e32ap001s02border", "giampippetto");
  wifiMulti.addAP("e32ap002s02border", "giampippetto");
  wifiMulti.addAP("e32ap003s02border", "giampippetto");
  wifiMulti.addAP("e32ap004s02border", "giampippetto");
  // You can remove the password parameter if you want the AP to be open.
  WiFi.softAP(ssid, password);
  delay(200); // wait at least 100ms until the AP has started
  if(!WiFi.softAPConfig(SetAPIP, SetAPIP, IPAddress(255, 255, 255, 0))){
      Serial.println("AP Config Failed");
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  // the STA part is configured here and managed in loop()
// old wifi section
  //WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  Serial.println("");
  Serial.println("WiFi connected");
  startCameraServer();
  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  */
  // NVS storage init
  NVS.begin();
  // trying to load the bot configuration from NVS 
  //TBotToken
  //TChatId
  // load the telegram bot token if available from NVS
  String loadedstr = NVS.getString ("TLGToken"); // Read the value of the "TLGToken" key from the NVS 
  if(loadedstr.length() > 3) { // at least we make sure the result is not empty...
    TBotToken = {};
    loadedstr.toCharArray(TBotToken, loadedstr.length()); // loading TBotToken
    loadedstr = NVS.getString ("TLGChatId"); // Read the value of the "TLGChatId" key from the NVS 
    if(loadedstr.length() > 3) {
      loadedstr.toCharArray(TChatId, loadedstr.length()); // loading TChatId
      Serial.print("Loaded Telegram BotToken and ChatId from NVS storage with values: ");
      Serial.print(TBotToken);
      Serial.print(" and ");
      Serial.println(TChatId);
    }
} // END setup()
void loop() {
  // put your main code here, to run repeatedly:
 // loopCounter check
  if (loopCounter > 16) {
    loopCounter = 0;
  clientsManagement();  // web client requests are handled always 
  if(loopCounter == 1) {
    wifiIntManagement();
  if(loopCounter == 2) {
    routeTableUpdate();
  if(loopCounter == 3) {
    udpCommandClient();
    udp.broadcastTo(MY_NAME, udpServerPort);
  if(loopCounter == 5) {
  // position number 15, let the device stabilize its connections first...
  if(loopCounter == 15) { // MOTION DETECTOR SECTION
    if ((motionDetectON == 1) || ((UserverOK == 0) && (alarmEnabled == 1)) ){
       if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
      if (!capture_still()) {
        Serial.println("Motion Detector: Failed capture");
        delay(3000);
        return;
      }
      if (motion_detect()) {
        Serial.println("Motion detected");
    }
    update_frame();
    }
  // loopCounter increase
  loopCounter++;
  delay(1000);
"3DUfw`)
_CONSOLE
nIrL
X{QOw
_Xw+
?DuH
y-Tw
v:wZt
N$Ep|
Vp<q
YG-p
{;JV%
#WgN
B,aR
=oN#
.TWg)
zROb=
Aru$
#@sN:b
U4f:
D1LU
3qVt
4y'h&
cRF:
	Zv}
iT3hy#)
qT};c
,Z=J
m%(O<.
,u	A
)*},r
)PE0Za
@s(4&*
zO|>cbn
)9)hd
zB%+
Q$T!
'rfo
GXN2
{BLZ
IB	*Y2
6zyb
pYN-}
Jo%4
r?0Q$h
L	;u
c}6@
<Oy#2x
1Ofo
&j(	Ll
!M{H^
o,.=u
NcR_
w~d4
jEU'n
usI'
y7mG
dF#em|+
\ly7
Z.Qe
;[@G
`N}+?3
<W[u
U:k%
I	ek
R_/R
IDef
,w"Y
lEHo
Tf]7
~,#\
=@Mj
/HR'
J9hu4
WGEF
g)O0|
8D; n
n;7Of
(Qq;
K4:y
	uZv
7G_L
`cPI
#~f{b
-2AB^
l>/Tco
+e0.
\'*!b
{'?V
?xJWS
7[m{"
![DTc
:^~T
2b`F
q#=V
m#~qzH
_&^?
Hw`b6`s;H
UARW
D,|p
rjh0+
b]<fCG
qn+Z
xChg~
`<d0
kQOH
P>{l
rnzk/
]9zwX
Hp/(
":l0},N
@(_G=
\"mH@
yXs*
PF_M6
fyFJA
zU~ 
Uk&6
@FoK
;	j"/+
1!c9
e~bY
$t&j~V
iaNNK
#<jF
[Z;<
x:sP
uzML
heEQn
.71g
w/GE
L<~"
=OFz
IbQp	
Iy-{V
W\"[
G<J_
(F&,.
42e[,
X5}I4|
Aj0K
8KU5
 qyy
p_in[9g
M|2w
\ mfO
%EY 
;4yr
@z m
mpgL{"
O436
hdb*
zo&5
=0+C
bfzP
=+qr
q< EI
jFIT
26^}`k
<<le
j_0>Q"i
9+oBw
={\KOCP&
2vBOV
e~%3
)z-"O/Ng!
q<Q@y
Lr%$
l=hE
|y<~
IS?S
~.UT
^:QA~
d"rx
/w0F
NCgj
0Q92
D^S7O
/	A'
4Q]-
GZ/E
|.S-
/]4ad|B
F1g	
-nhqY6
|HbK
Go[C
g7`wV
sp;(?1^
dst)}m
&*Pp\
Ugk8
3pK|
(Wun
@^xJgnkVE
QqNG
\pUU
:-w%O#
+_G_
#/mhh
#iv2
m2vU><
dD">	
YRM^
&U(@P
0nEq
Rs1V
8p)6
"5_Q"T
<lRV2
}vdf}G
_6Ell
|^65
i'_)
\PK@
HCrV^
5F~=/_
8"5+v
pkEO1
KBg?
zZ`POJ
^Pg4
FlM{[7<
s?\|
S29o
Q2Mvz
Rwaya
KRu?>
y4}j
D{:q'
I<*g
`[@M|+U]<
*;5Q
i5?q
|Agj
X\AM
;QJl
tHQhmV
Q0T6
fsBY
4 l]
@"N	
F}lC
LOotn
)s=Q
(Wi9n
Eh;b
nLGM
G:T5
_F1.v*
s4)D2
$=$Z
{zc]
%A=p
kya~6
yN	L&
|oaU
lB#`
B.]9%"
ABI'
-hW/
";:!
=1txa
[O$q6
[L)W
 .2F
HHKe
H]c"
!?q{
8bei
5%X#
h,p:,8
RFDSb
h6O)
#)cNcnE
nRm	L
#Vs"
qgFI
	=%"
r(KL
06c!
ay}:h
bX(f
$|5"6
m*p`
l,g=
R>rT
P\G2
5jcBMY
k;;zPMz
BR(Y,
k)g$
E=;v,
Fmf[J
{{D%
iJwM
'nV*
"3DUfw`O
 OR(
_CONSOLE
[&~P
;(yk
^rDe}
CP@yBGu\G
PsisN
0#d@N
l7`I
@1QW*
9m{#h
1H^K
sHNl
I^!h6_
^3pM
v@q+
'Cc)
.~fM
9Ptb9wG
LNuj
Yu%pbb
eBhEA
0eKjMv
j#.'m
"C{+
UBl5	
O{u;N
w0+Cc
bYKef
d&:%bZ3
'HRE
h<FT
R@8esM
Mmfh
'gwI
"\yp
+8Jh
E.rx
@AeX
	$Na
gR9iV
pn"OpZ
 =cC
`@wY
l`"2
m5Eu
7SseB0eqQC
%UhJS
_Ki-
//6*D,
l{`V
LVkY
[s@>C	,
>OQ;
cjgHRent
3?Hq
)7;A
-[e%j&q=
qf:?
(t[7
cqp@
`sS]
d9Ac
sbr`(S
J)aZ
P}*6
R	Ph
3~	i
-')AY{r
t>x[
Rk?^
4R>7
_:dq
oQF<
9Mxu
N6oJ
#9*w&
$&^S~
l}&7
@H0r
hv":
QW^>e
2$h4
>K5A
KN`{
b-/8bN
!T&q7
o<E7_
jh]o]vp
/y2)
+.zX
LQA)97,
iyN{
Xm@`
64A&
B1w8
FUYd
&#jKO
+n E
TRsc
>G0t 
yoUV
5S.w
MLBT%v7
Lhhs
1sq	
7e\y
'|[0
*BPu+mU
`{*5
PJ|d
mK82
h-r>
{T2t
p8VT
^vO!Q
.2(E
\!4k]|K
%"{;
&6'0
4]Q_f
&(`(
V8RJX
[TE~{
.9sS>
dqm1>:YDk
n)+lr:
t0{j
`HAF
j\}Yg
;r@w
Q=TY
	Um8
SS9w
Ob9y
7-C*n
6-;4
jO8M,
0*2O*4
I>q{&
RO`i
[	i'
(*'H
4aVleixn
Y[2g
WWo&
2A<iV)9%K
Nd1{?
&]f9
tY|n
@km/
me$E^
.3W-
SXZB
wZa0
8_D}
mhV9
37nQT0
`Zi+
}*"H#
31Rh
lD")
(|f[
jRct
=)$k
M{2 
@Xz&
oHqq
|\E[
N"@Xr
R60"e#
yTdI
`M<\
O?w*
d2C!
E$q""
l[;L
1#r*
nS#\.T
(w(Z
j!,,BM8
)=_-|
.',Q
n^H	
?t}x0
V`):
:$/`
}?34C
1uRl
!;R]
2D/f
l&)%G
,z}^
#}qU
_7EJ(
845c
KkMAl
2NXh
TL<O
`Ipt
K/F;
+bL<l
1'p 
q'W:0
hs6r
5cs|A
L6SL
C(=,
i3jf
E`@e$~h
<J9s&
w:t7
@*pf
wL@DK
G|#s
`cd.
pVrE
Z?9sNz
-NUrX3
RK(7
Z*U9f
=vvjf
r*DY
sfab
R{PI
1tMQ
tb3A
:n.Z,
NN<h
^*1_;=-
=H;7u}
{0J=R
+B600
#+&C
ku3K
Zxq6N
0 "Y
>gBb
7Q/;
ns-Hl
sVi'~O.
ptHq
g(;~
;rqn
\%XO
ZWpb
[vQ%
REqJ
Ev~-
M~!e
'whB
wLQ(
aOxm
1&zAW
^Ru+
.jKQ
+u^(
\!K3
N}ge
?B[j
U|~0
P~J&
`O%?
^/b4
B>77
%s^DG
$:w2
'zn(rE
hl5L
eLb_
+5z=
0(,Y
&"#YC
hn0w
lr""
y&* 
>vdl
:78Y
6~7Y
&yzs
+9Je[CfX
h\Nc%
a'/&
!MF&
9]}H
kg`T
KtMK
3VaL
15*o
8N:H
jzr	
Dim0j
3Vh4
'|u:
Ih32tk
N<5/
Y[b/N
?[:q
CdD&
G>g5Cp-
_8}	
gb{O
QE,gP(8
z`[?
@7[T
3QV'
G2\Gi
v*x@
ZAn#G
SJxCe"
T	TTh+
>7b,e
u6xJ,
06a~xV3?f
-LZK
$k(M6FF
<+Nz
pnt>
`t!O
cMV@o
ppQ;
F'\;)
|F?5
rpyT
=V+Q
VTa(
7S:&
k}b#6
wan Uj=T
_9w5
XzOei
"3DUfw`
iMP]z
_CONSOLE
(|-,
}{%Ss/
l;*8
_Y)n
 'I(
xwJ;i
|qX2
,a@.
~}\p
+3.U
$JjF
a!B/
tG{R
$^@V
%N8~
S-%i
xeV'0
xO3;
H2P8
)j8I
H~RZ
"m&T
sF-)s
{a<%
[B	7
#|,F
p8k>
Sm'Y/
k[a*
Y7.8
1]A3
^=q\
AzYmf
jU\[
=m]|s
j}ex
j<gi
l][GL
xeXD
g'q+
hq	"Q
7E?q
R(a,
u@s4
F8$Mf
V2y$p
q1;1
dfxe
O(>H
Re}h+|
Eni&
	Jc{
KKQZ(
.I	Q
5%gN
V(AA
rFv~x
I(F'*Ogp
VbmJ$
	Z/S{
/Z!6
Dbk#
M>M'
OIp[,
"yhH
#,h5
.fZ>
F!au{
1iPf
f/#*
JI;=u9
m@tp
~;9'
oooJ
&6G"
T{FB
BbY1
=eCa$
_3/:l
?p'Y
q/a/H
6}VX7
<USG
PGJ-
fQlI3
*8Y(
cs'fv
hbe4`
oH)~
0X=n
U{Cr
OVH%_]
_/D9
Ps<{
E9>D
92msE2
E7I|
RdIB]
``Tp
_^X9X ,
,27U[
|Wyz
`nDkv
d}@4:xv
h2>N
+"0L4$
G%oD~G
esDz
c[^O
F]o	
* pN
#igKq
ycF	
7Q+.
9z}K
u[nC
GJ9!-
5u(-"
%)Z4
}'B{
Q<Y`-'nx
ZBsw
:%BuP 
GQ@;Sr
%2]MB
(r4a
1NsF
:}@&
EoTe
 ]+hrY
"vEm
6bD)
?[Q;
lj'Y
C9Y^=
g@3d
^/|c
;~G+
[Rrs
S?8^Q
;~Q]
xJ`V
?1]e
@2v3*
-5@V
9M,q9
UjxYBG
=4#re
c:&p
aN_i
V8D4
p-_f
hTJ<O'
+E8X
"HI&5H
d\@o/
[fhI
7y1+>
S5ao3a
L $6.
#^_;4
V,C9(
2mRM
Eg3)
v\An
>w]]
{p-|
)'[C
<8fS
fCk-
iKiY
CzE~
xt.Z
%,(}
t	=f
Y(W$
O`Z|
oM&Yi
bla]
cw%V
a];<
DVY=
7Au.
%)/O/
QI<9}
RC<Z/
uvK+Y
v/xU
),7)
a&gh
CfMZ
0PyI
c`& 
eF(&
PjH]
D`}'
i&}!
Jf+e=
-)?y
 5z>L
ZT!h
yK5H2
UO&4
	9T}w
41jR
gk	:
rsb	
-XE&|
6Jz&i
y'WaS
IVBL
Jp'K
^7}m
H[{1
+pGz
;9(l
bF"}W
c0hk
SdgSi,~
>	^v
(f=egh
MoIA
QG*J
jzd.
v(n$
798j,
^[34
B4_>
Q~qq
9*	pp
?V@o
Apv\1H
t|`?_r
dWet_
E0i{!E
z7P>5
+"b4Y
)IP>CH
be#P
hFVZ
d#)9
|X1{p$
9<=T
S`Q\
1PbD
Y+ _
oT=w3
6 'R^
	]5E
' ym
iJqh
m'5V
5P5\
<[G8c
zq{W.
SjD<
	FKr
O&WE-
<]/-
XB(v
5HWI
Uq[W5p
Wg*p%
5&GGf
v(W!$@
M+BD
q;x}
s:?%
qva[
lMa%^/
(\v3$.,
8bVD
HlSh
EOuTX
?USm
b>PK
xZS H
d#+u
 ly:
OdQX
rr0$%Y
`RPSZ
&:R,`t
+1!9
C=j-Td
*$Gu
N oJI)
Q.$_
O9{5
<L}$
8QIE
U6zI
y2*C/1O
)	Vr
1p	 
RTkW~
w+\}
_xc*
G@oL
H"Ro	j
xq.B
Qkx	
+IS'
28 0x9e9
	.4byte	.LASF5068
	.byte	0x5
	.uleb128 0x9ed
	.4byte	.LASF5069
	.byte	0x5
	.uleb128 0x9ee
	.4byte	.LASF5070
	.byte	0x5
	.uleb128 0x9ef
	.4byte	.LASF5071
	.byte	0x5
	.uleb128 0x9f0
	.4byte	.LASF5072
	.byte	0x5
	.uleb128 0x9f3
	.4byte	.LASF5073
	.byte	0x5
	.uleb128 0x9f4
	.4byte	.LASF5074
	.byte	0x5
	.uleb128 0x9f5
	.4byte	.LASF5075
	.byte	0x5
	.uleb128 0x9f6
	.4byte	.LASF5076
	.byte	0x5
	.uleb128 0x9f9
	.4byte	.LASF5077
	.byte	0x5
	.uleb128 0x9fa
	.4byte	.LASF5078
	.byte	0x5
	.uleb128 0x9fb
	.4byte	.LASF5079
	.byte	0x5
	.uleb128 0x9fc
	.4byte	.LASF5080
	.byte	0x5
	.uleb128 0x9fe
	.4byte	.LASF5081
	.byte	0x5
	.uleb128 0xa02
	.4byte	.LASF5082
	.byte	0x5
	.uleb128 0xa03
	.4byte	.LASF5083
	.byte	0x5
	.uleb128 0xa04
	.4byte	.LASF5084
	.byte	0x5
	.uleb128 0xa05
	.4byte	.LASF5085
	.byte	0x5
	.uleb128 0xa08
	.4byte	.LASF5086
	.byte	0x5
	.uleb128 0xa09
	.4byte	.LASF5087
	.byte	0x5
	.uleb128 0xa0a
	.4byte	.LASF5088
	.byte	0x5
	.uleb128 0xa0b
	.4byte	.LASF5089
	.byte	0x5
	.uleb128 0xa0e
	.4byte	.LASF5090
	.byte	0x5
	.uleb128 0xa0f
	.4byte	.LASF5091
	.byte	0x5
	.uleb128 0xa10
	.4byte	.LASF5092
	.byte	0x5
	.uleb128 0xa11
	.4byte	.LASF5093
	.byte	0x5
	.uleb128 0xa13
	.4byte	.LASF5094
	.byte	0x5
	.uleb128 0xa17
	.4byte	.LASF5095
	.byte	0x5
	.uleb128 0xa18
	.4byte	.LASF5096
	.byte	0x5
	.uleb128 0xa19
	.4byte	.LASF5097
	.byte	0x5
	.uleb128 0xa1a
	.4byte	.LASF5098
	.byte	0x5
	.uleb128 0xa1d
	.4byte	.LASF5099
	.byte	0x5
	.uleb128 0xa1e
	.4byte	.LASF5100
	.byte	0x5
	.uleb128 0xa1f
	.4byte	.LASF5101
	.byte	0x5
	.uleb128 0xa20
	.4byte	.LASF5102
	.byte	0x5
	.uleb128 0xa23
	.4byte	.LASF5103
	.byte	0x5
	.uleb128 0xa24
	.4byte	.LASF5104
	.byte	0x5
	.uleb128 0xa25
	.4byte	.LASF5105
	.byte	0x5
	.uleb128 0xa26
	.4byte	.LASF5106
	.byte	0x5
	.uleb128 0xa28
	.4byte	.LASF5107
	.byte	0x5
	.uleb128 0xa2c
	.4byte	.LASF5108
	.byte	0x5
	.uleb128 0xa2d
	.4byte	.LASF5109
	.byte	0x5
	.uleb128 0xa2e
	.4byte	.LASF5110
	.byte	0x5
	.uleb128 0xa2f
	.4byte	.LASF5111
	.byte	0x5
	.uleb128 0xa32
	.4byte	.LASF5112
	.byte	0x5
	.uleb128 0xa33
	.4byte	.LASF5113
	.byte	0x5
	.uleb128 0xa34
	.4byte	.LASF5114
	.byte	0x5
	.uleb128 0xa35
	.4byte	.LASF5115
	.byte	0x5
	.uleb128 0xa38
	.4byte	.LASF5116
	.byte	0x5
	.uleb128 0xa39
	.4byte	.LASF5117
	.byte	0x5
	.uleb128 0xa3a
	.4byte	.LASF5118
	.byte	0x5
	.uleb128 0xa3b
	.4byte	.LASF5119
	.byte	0x5
	.uleb128 0xa3d
	.4byte	.LASF5120
	.byte	0x5
	.uleb128 0xa41
	.4byte	.LASF5121
	.byte	0x5
	.uleb128 0xa42
	.4byte	.LASF5122
	.byte	0x5
	.uleb128 0xa43
	.4byte	.LASF5123
	.byte	0x5
	.uleb128 0xa44
	.4byte	.LASF5124
	.byte	0x5
	.uleb128 0xa47
	.4byte	.LASF5125
	.byte	0x5
	.uleb128 0xa48
	.4byte	.LASF5126
	.byte	0x5
	.uleb128 0xa49
	.4byte	.LASF5127
	.byte	0x5
	.uleb128 0xa4a
	.4byte	.LASF5128
	.byte	0x5
	.uleb128 0xa4d
	.4byte	.LASF5129
	.byte	0x5
	.uleb128 0xa4e
	.4byte	.LASF5130
	.byte	0x5
	.uleb128 0xa4f
	.4byte	.LASF5131
	.byte	0x5
	.uleb128 0xa50
	.4byte	.LASF5132
	.byte	0x5
	.uleb128 0xa52
	.4byte	.LASF5133
	.byte	0x5
	.uleb128 0xa56
	.4byte	.LASF5134
	.byte	0x5
	.uleb128 0xa57
	.4byte	.LASF5135
	.byte	0x5
	.uleb128 0xa58
	.4byte	.LASF5136
	.byte	0x5
	.uleb128 0xa59
	.4byte	.LASF5137
	.byte	0x5
	.uleb128 0xa5c
	.4byte	.LASF5138
	.byte	0x5
	.uleb128 0xa5d
	.4byte	.LASF5139
	.byte	0x5
	.uleb128 0xa5e
	.4byte	.LASF5140
	.byte	0x5
	.uleb128 0xa5f
	.4byte	.LASF5141
	.byte	0x5
	.uleb128 0xa62
	.4byte	.LASF5142
	.byte	0x5
	.uleb128 0xa63
	.4byte	.LASF5143
	.byte	0x5
	.uleb128 0xa64
	.4byte	.LASF5144
	.byte	0x5
	.uleb128 0xa65
	.4byte	.LASF5145
	.byte	0x5
	.uleb128 0xa67
	.4byte	.LASF5146
	.byte	0x5
	.uleb128 0xa6b
	.4byte	.LASF5147
	.byte	0x5
	.uleb128 0xa6c
	.4byte	.LASF5148
	.byte	0x5
	.uleb128 0xa6d
	.4byte	.LASF5149
	.byte	0x5
	.uleb128 0xa6e
	.4byte	.LASF5150
	.byte	0x5
	.uleb128 0xa71
	.4byte	.LASF5151
	.byte	0x5
	.uleb128 0xa72
	.4byte	.LASF5152
	.byte	0x5
	.uleb128 0xa73
	.4byte	.LASF5153
	.byte	0x5
	.uleb128 0xa74
	.4byte	.LASF5154
	.byte	0x5
	.uleb128 0xa77
	.4byte	.LASF5155
	.byte	0x5
	.uleb128 0xa78
	.4byte	.LASF5156
	.byte	0x5
	.uleb128 0xa79
	.4byte	.LASF5157
	.byte	0x5
	.uleb128 0xa7a
	.4byte	.LASF5158
	.byte	0x5
	.uleb128 0xa7c
	.4byte	.LASF5159
	.byte	0x5
	.uleb128 0xa80
	.4byte	.LASF5160
	.byte	0x5
	.uleb128 0xa81
	.4byte	.LASF5161
	.byte	0x5
	.uleb128 0xa82
	.4byte	.LASF5162
	.byte	0x5
	.uleb128 0xa83
	.4byte	.LASF5163
	.byte	0x5
	.uleb128 0xa86
	.4byte	.LASF5164
	.byte	0x5
	.uleb128 0xa87
	.4byte	.LASF5165
	.byte	0x5
	.uleb128 0xa88
	.4byte	.LASF5166
	.byte	0x5
	.uleb128 0xa89
	.4byte	.LASF5167
	.byte	0x5
	.uleb128 0xa8c
	.4byte	.LASF5168
	.byte	0x5
	.uleb128 0xa8d
	.4byte	.LASF5169
	.byte	0x5
	.uleb128 0xa8e
	.4byte	.LASF5170
	.byte	0x5
	.uleb128 0xa8f
	.4byte	.LASF5171
	.byte	0x5
	.uleb128 0xa91
	.4byte	.LASF5172
	.byte	0x5
	.uleb128 0xa95
	.4byte	.LASF5173
	.byte	0x5
	.uleb128 0xa96
	.4byte	.LASF5174
	.byte	0x5
	.uleb128 0xa97
	.4byte	.LASF5175
	.byte	0x5
	.uleb128 0xa98
	.4byte	.LASF5176
	.byte	0x5
	.uleb128 0xa9b
	.4byte	.LASF5177
	.byte	0x5
	.uleb128 0xa9c
	.4byte	.LASF5178
	.byte	0x5
	.uleb128 0xa9d
	.4byte	.LASF5179
	.byte	0x5
	.uleb128 0xa9e
	.4byte	.LASF5180
	.byte	0x5
	.uleb128 0xaa1
	.4byte	.LASF5181
	.byte	0x5
	.uleb128 0xaa2
	.4byte	.LASF5182
	.byte	0x5
	.uleb128 0xaa3
	.4byte	.LASF5183
	.byte	0x5
	.uleb128 0xaa4
	.4byte	.LASF5184
	.byte	0x5
	.uleb128 0xaa6
	.4byte	.LASF5185
	.byte	0x5
	.uleb128 0xaaa
	.4byte	.LASF5186
	.byte	0x5
	.uleb128 0xaab
	.4byte	.LASF5187
	.byte	0x5
	.uleb128 0xaac
	.4byte	.LASF5188
	.byte	0x5
	.uleb128 0xaad
	.4byte	.LASF5189
	.byte	0x5
	.uleb128 0xab0
	.4byte	.LASF5190
	.byte	0x5
	.uleb128 0xab1
	.4byte	.LASF5191
	.byte	0x5
	.uleb128 0xab2
	.4byte	.LASF5192
	.byte	0x5
	.uleb128 0xab3
	.4byte	.LASF5193
	.byte	0x5
	.uleb128 0xab6
	.4byte	.LASF5194
	.byte	0x5
	.uleb128 0xab7
	.4byte	.LASF5195
	.byte	0x5
	.uleb128 0xab8
	.4byte	.LASF5196
	.byte	0x5
	.uleb128 0xab9
	.4byte	.LASF5197
	.byte	0x5
	.uleb128 0xabb
	.4byte	.LASF5198
	.byte	0x5
	.uleb128 0xabf
	.4byte	.LASF5199
	.byte	0x5
	.uleb128 0xac0
	.4byte	.LASF5200
	.byte	0x5
	.uleb128 0xac1
	.4byte	.LASF5201
	.byte	0x5
	.uleb128 0xac2
	.4byte	.LASF5202
	.byte	0x5
	.uleb128 0xac5
	.4byte	.LASF5203
	.byte	0x5
	.uleb128 0xac6
	.4byte	.LASF5204
	.byte	0x5
	.uleb128 0xac7
	.4byte	.LASF5205
	.byte	0x5
	.uleb128 0xac8
	.4byte	.LASF5206
	.byte	0x5
	.uleb128 0xacb
	.4byte	.LASF5207
	.byte	0x5
	.uleb128 0xacc
	.4byte	.LASF5208
	.byte	0x5
	.uleb128 0xacd
	.4byte	.LASF5209
	.byte	0x5
	.uleb128 0xace
	.4byte	.LASF5210
	.byte	0x5
	.uleb128 0xad0
	.4byte	.LASF5211
	.byte	0x5
	.uleb128 0xad4
	.4byte	.LASF5212
	.byte	0x5
	.uleb128 0xad5
	.4byte	.LASF5213
	.byte	0x5
	.uleb128 0xad6
	.4byte	.LASF5214
	.byte	0x5
	.uleb128 0xad7
	.4byte	.LASF5215
	.byte	0x5
	.uleb128 0xada
	.4byte	.LASF5216
	.byte	0x5
	.uleb128 0xadb
	.4byte	.LASF5217
	.byte	0x5
	.uleb128 0xadc
	.4byte	.LASF5218
	.byte	0x5
	.uleb128 0xadd
	.4byte	.LASF5219
	.byte	0x5
	.uleb128 0xae0
	.4byte	.LASF5220
	.byte	0x5
	.uleb128 0xae1
	.4byte	.LASF5221
	.byte	0x5
	.uleb128 0xae2
	.4byte	.LASF5222
	.byte	0x5
	.uleb128 0xae3
	.4byte	.LASF5223
	.byte	0x5
	.uleb128 0xae5
	.4byte	.LASF5224
	.byte	0x5
	.uleb128 0xae9
	.4byte	.LASF5225
	.byte	0x5
	.uleb128 0xaea
	.4byte	.LASF5226
	.byte	0x5
	.uleb128 0xaeb
	.4byte	.LASF5227
	.byte	0x5
	.uleb128 0xaec
	.4byte	.LASF5228
	.byte	0x5
	.uleb128 0xaef
	.4byte	.LASF5229
	.byte	0x5
	.uleb128 0xaf0
	.4byte	.LASF5230
	.byte	0x5
	.uleb128 0xaf1
	.4byte	.LASF5231
	.byte	0x5
	.uleb128 0xaf2
	.4byte	.LASF5232
	.byte	0x5
	.uleb128 0xaf5
	.4byte	.LASF5233
	.byte	0x5
	.uleb128 0xaf6
	.4byte	.LASF5234
	.byte	0x5
	.uleb128 0xaf7
	.4byte	.LASF5235
	.byte	0x5
	.uleb128 0xaf8
	.4byte	.LASF5236
	.byte	0x5
	.uleb128 0xafa
	.4byte	.LASF5237
	.byte	0x5
	.uleb128 0xafe
	.4byte	.LASF5238
	.byte	0x5
	.uleb128 0xaff
	.4byte	.LASF5239
	.byte	0x5
	.uleb128 0xb00
	.4byte	.LASF5240
	.byte	0x5
	.uleb128 0xb01
	.4byte	.LASF5241
	.byte	0x5
	.uleb128 0xb04
	.4byte	.LASF5242
	.byte	0x5
	.uleb128 0xb05
	.4byte	.LASF5243
	.byte	0x5
	.uleb128 0xb06
	.4byte	.LASF5244
	.byte	0x5
	.uleb128 0xb07
	.4byte	.LASF5245
	.byte	0x5
	.uleb128 0xb0a
	.4byte	.LASF5246
	.byte	0x5
	.uleb128 0xb0b
	.4byte	.LASF5247
	.byte	0x5
	.uleb128 0xb0c
	.4byte	.LASF5248
	.byte	0x5
	.uleb128 0xb0d
	.4byte	.LASF5249
	.byte	0x5
	.uleb128 0xb0f
	.4byte	.LASF5250
	.byte	0x5
	.uleb128 0xb13
	.4byte	.LASF5251
	.byte	0x5
	.uleb128 0xb14
	.4byte	.LASF5252
	.byte	0x5
	.uleb128 0xb15
	.4byte	.LASF5253
	.byte	0x5
	.uleb128 0xb16
	.4byte	.LASF5254
	.byte	0x5
	.uleb128 0xb19
	.4byte	.LASF5255
	.byte	0x5
	.uleb128 0xb1a
	.4byte	.LASF5256
	.byte	0x5
	.uleb128 0xb1b
	.4byte	.LASF5257
	.byte	0x5
	.uleb128 0xb1c
	.4byte	.LASF5258
	.byte	0x5
	.uleb128 0xb1f
	.4byte	.LASF5259
	.byte	0x5
	.uleb128 0xb20
	.4byte	.LASF5260
	.byte	0x5
	.uleb128 0xb21
	.4byte	.LASF5261
	.byte	0x5
	.uleb128 0xb22
	.4byte	.LASF5262
	.byte	0x5
	.uleb128 0xb24
	.4byte	.LASF5263
	.byte	0x5
	.uleb128 0xb28
	.4byte	.LASF5264
	.byte	0x5
	.uleb128 0xb29
	.4byte	.LASF5265
	.byte	0x5
	.uleb128 0xb2a
	.4byte	.LASF5266
	.byte	0x5
	.uleb128 0xb2b
	.4byte	.LASF5267
	.byte	0x5
	.uleb128 0xb2e
	.4byte	.LASF5268
	.byte	0x5
	.uleb128 0xb2f
	.4byte	.LASF5269
	.byte	0x5
	.uleb128 0xb30
	.4byte	.LASF5270
	.byte	0x5
	.uleb128 0xb31
	.4byte	.LASF5271
	.byte	0x5
	.uleb128 0xb34
	.4byte	.LASF5272
	.byte	0x5
	.uleb128 0xb35
	.4byte	.LASF5273
	.byte	0x5
	.uleb128 0xb36
	.4byte	.LASF5274
	.byte	0x5
	.uleb128 0xb37
	.4byte	.LASF5275
	.byte	0x5
	.uleb128 0xb39
	.4byte	.LASF5276
	.byte	0x5
	.uleb128 0xb3d
	.4byte	.LASF5277
	.byte	0x5
	.uleb128 0xb3e
	.4byte	.LASF5278
	.byte	0x5
	.uleb128 0xb3f
	.4byte	.LASF5279
	.byte	0x5
	.uleb128 0xb40
	.4byte	.LASF5280
	.byte	0x5
	.uleb128 0xb43
	.4byte	.LASF5281
	.byte	0x5
	.uleb128 0xb44
	.4byte	.LASF5282
	.byte	0x5
	.uleb128 0xb45
	.4byte	.LASF5283
	.byte	0x5
	.uleb128 0xb46
	.4byte	.LASF5284
	.byte	0x5
	.uleb128 0xb49
	.4byte	.LASF5285
	.byte	0x5
	.uleb128 0xb4a
	.4byte	.LASF5286
	.byte	0x5
	.uleb128 0xb4b
	.4byte	.LASF5287
	.byte	0x5
	.uleb128 0xb4c
	.4byte	.LASF5288
	.byte	0x5
	.uleb128 0xb4e
	.4byte	.LASF5289
	.byte	0x5
	.uleb128 0xb52
	.4byte	.LASF5290
	.byte	0x5
	.uleb128 0xb53
	.4byte	.LASF5291
	.byte	0x5
	.uleb128 0xb54
	.4byte	.LASF5292
	.byte	0x5
	.uleb128 0xb55
	.4byte	.LASF5293
	.byte	0x5
	.uleb128 0xb58
	.4byte	.LASF5294
	.byte	0x5
	.uleb128 0xb59
	.4byte	.LASF5295
	.byte	0x5
	.uleb128 0xb5a
	.4byte	.LASF5296
	.byte	0x5
	.uleb128 0xb5b
	.4byte	.LASF5297
	.byte	0x5
	.uleb128 0xb5e
	.4byte	.LASF5298
	.byte	0x5
	.uleb128 0xb5f
	.4byte	.LASF5299
	.byte	0x5
	.uleb128 0xb60
	.4byte	.LASF5300
	.byte	0x5
	.uleb128 0xb61
	.4byte	.LASF5301
	.byte	0x5
	.uleb128 0xb63
	.4byte	.LASF5302
	.byte	0x5
	.uleb128 0xb67
	.4byte	.LASF5303
	.byte	0x5
	.uleb128 0xb68
	.4byte	.LASF5304
	.byte	0x5
	.uleb128 0xb69
	.4byte	.LASF5305
	.byte	0x5
	.uleb128 0xb6a
	.4byte	.LASF5306
	.byte	0x5
	.uleb128 0xb6d
	.4byte	.LASF5307
	.byte	0x5
	.uleb128 0xb6e
	.4byte	.LASF5308
	.byte	0x5
	.uleb128 0xb6f
	.4byte	.LASF5309
	.byte	0x5
	.uleb128 0xb70
	.4byte	.LASF5310
	.byte	0x5
	.uleb128 0xb73
	.4byte	.LASF5311
	.byte	0x5
	.uleb128 0xb74
	.4byte	.LASF5312
	.byte	0x5
	.uleb128 0xb75
	.4byte	.LASF5313
	.byte	0x5
	.uleb128 0xb76
	.4byte	.LASF5314
	.byte	0x5
	.uleb128 0xb78
	.4byte	.LASF5315
	.byte	0x5
	.uleb128 0xb7c
	.4byte	.LASF5316
	.byte	0x5
	.uleb128 0xb7d
	.4byte	.LASF5317
	.byte	0x5
	.uleb128 0xb7e
	.4byte	.LASF5318
	.byte	0x5
	.uleb128 0xb7f
	.4byte	.LASF5319
	.byte	0x5
	.uleb128 0xb82
	.4byte	.LASF5320
	.byte	0x5
	.uleb128 0xb83
	.4byte	.LASF5321
	.byte	0x5
	.uleb128 0xb84
	.4byte	.LASF5322
	.byte	0x5
	.uleb128 0xb85
	.4byte	.LASF5323
	.byte	0x5
	.uleb128 0xb88
	.4byte	.LASF5324
	.byte	0x5
	.uleb128 0xb89
	.4byte	.LASF5325
	.byte	0x5
	.uleb128 0xb8a
	.4byte	.LASF5326
	.byte	0x5
	.uleb128 0xb8b
	.4byte	.LASF5327
	.byte	0x5
	.uleb128 0xb8d
	.4byte	.LASF5328
	.byte	0x5
	.uleb128 0xb91
	.4byte	.LASF5329
	.byte	0x5
	.uleb128 0xb92
	.4byte	.LASF5330
	.byte	0x5
	.uleb128 0xb93
	.4byte	.LASF5331
	.byte	0x5
	.uleb128 0xb94
	.4byte	.LASF5332
	.byte	0x5
	.uleb128 0xb97
	.4byte	.LASF5333
	.byte	0x5
	.uleb128 0xb98
	.4byte	.LASF5334
	.byte	0x5
	.uleb128 0xb99
	.4byte	.LASF5335
	.byte	0x5
	.uleb128 0xb9a
	.4byte	.LASF5336
	.byte	0x5
	.uleb128 0xb9d
	.4byte	.LASF5337
	.byte	0x5
	.uleb128 0xb9e
	.4byte	.LASF5338
	.byte	0x5
	.uleb128 0xb9f
	.4byte	.LASF5339
	.byte	0x5
	.uleb128 0xba0
	.4byte	.LASF5340
	.byte	0x5
	.uleb128 0xba2
	.4byte	.LASF5341
	.byte	0x5
	.uleb128 0xba6
	.4byte	.LASF5342
	.byte	0x5
	.uleb128 0xba7
	.4byte	.LASF5343
	.byte	0x5
	.uleb128 0xba8
	.4byte	.LASF5344
	.byte	0x5
	.uleb128 0xba9
	.4byte	.LASF5345
	.byte	0x5
	.uleb128 0xbac
	.4byte	.LASF5346
	.byte	0x5
	.uleb128 0xbad
	.4byte	.LASF5347
	.byte	0x5
	.uleb128 0xbae
	.4byte	.LASF5348
	.byte	0x5
	.uleb128 0xbaf
	.4byte	.LASF5349
	.byte	0x5
	.uleb128 0xbb2
	.4byte	.LASF5350
	.byte	0x5
	.uleb128 0xbb3
	.4byte	.LASF5351
	.byte	0x5
	.uleb128 0xbb4
	.4byte	.LASF5352
	.byte	0x5
	.uleb128 0xbb5
	.4byte	.LASF5353
	.byte	0x5
	.uleb128 0xbb7
	.4byte	.LASF5354
	.byte	0x5
	.uleb128 0xbbb
	.4byte	.LASF5355
	.byte	0x5
	.uleb128 0xbbc
	.4byte	.LASF5356
	.byte	0x5
	.uleb128 0xbbd
	.4byte	.LASF5357
	.byte	0x5
	.uleb128 0xbbe
	.4byte	.LASF5358
	.byte	0x5
	.uleb128 0xbc1
	.4byte	.LASF5359
	.byte	0x5
	.uleb128 0xbc2
	.4byte	.LASF5360
	.byte	0x5
	.uleb128 0xbc3
	.4byte	.LASF5361
	.byte	0x5
	.uleb128 0xbc4
	.4byte	.LASF5362
	.byte	0x5
	.uleb128 0xbc7
	.4byte	.LASF5363
	.byte	0x5
	.uleb128 0xbc8
	.4byte	.LASF5364
	.byte	0x5
	.uleb128 0xbc9
	.4byte	.LASF5365
	.byte	0x5
	.uleb128 0xbca
	.4byte	.LASF5366
	.byte	0x5
	.uleb128 0xbcc
	.4byte	.LASF5367
	.byte	0x5
	.uleb128 0xbd0
	.4byte	.LASF5368
	.byte	0x5
	.uleb128 0xbd1
	.4byte	.LASF5369
	.byte	0x5
	.uleb128 0xbd2
	.4byte	.LASF5370
	.byte	0x5
	.uleb128 0xbd3
	.4byte	.LASF5371
	.byte	0x5
	.uleb128 0xbd6
	.4byte	.LASF5372
	.byte	0x5
	.uleb128 0xbd7
	.4byte	.LASF5373
	.byte	0x5
	.uleb128 0xbd8
	.4byte	.LASF5374
	.byte	0x5
	.uleb128 0xbd9
	.4byte	.LASF5375
	.byte	0x5
	.uleb128 0xbdc
	.4byte	.LASF5376
	.byte	0x5
	.uleb128 0xbdd
	.4byte	.LASF5377
	.byte	0x5
	.uleb128 0xbde
	.4byte	.LASF5378
	.byte	0x5
	.uleb128 0xbdf
	.4byte	.LASF5379
	.byte	0x5
	.uleb128 0xbe1
	.4byte	.LASF5380
	.byte	0x5
	.uleb128 0xbe5
	.4byte	.LASF5381
	.byte	0x5
	.uleb128 0xbe6
	.4byte	.LASF5382
	.byte	0x5
	.uleb128 0xbe7
	.4byte	.LASF5383
	.byte	0x5
	.uleb128 0xbe8
	.4byte	.LASF5384
	.byte	0x5
	.uleb128 0xbeb
	.4byte	.LASF5385
	.byte	0x5
	.uleb128 0xbec
	.4byte	.LASF5386
	.byte	0x5
	.uleb128 0xbed
	.4byte	.LASF5387
	.byte	0x5
	.uleb128 0xbee
	.4byte	.LASF5388
	.byte	0x5
	.uleb128 0xbf1
	.4byte	.LASF5389
	.byte	0x5
	.uleb128 0xbf2
	.4byte	.LASF5390
	.byte	0x5
	.uleb128 0xbf3
	.4byte	.LASF5391
	.byte	0x5
	.uleb128 0xbf4
	.4byte	.LASF5392
	.byte	0x5
	.uleb128 0xbf6
	.4byte	.LASF5393
	.byte	0x5
	.uleb128 0xbfa
	.4byte	.LASF5394
	.byte	0x5
	.uleb128 0xbfb
	.4byte	.LASF5395
	.byte	0x5
	.uleb128 0xbfc
	.4byte	.LASF5396
	.byte	0x5
	.uleb128 0xbfd
	.4byte	.LASF5397
	.byte	0x5
	.uleb128 0xc00
	.4byte	.LASF5398
	.byte	0x5
	.uleb128 0xc01
	.4byte	.LASF5399
	.byte	0x5
	.uleb128 0xc02
	.4byte	.LASF5400
	.byte	0x5
	.uleb128 0xc03
	.4byte	.LASF5401
	.byte	0x5
	.uleb128 0xc06
	.4byte	.LASF5402
	.byte	0x5
	.uleb128 0xc07
	.4byte	.LASF5403
	.byte	0x5
	.uleb128 0xc08
	.4byte	.LASF5404
	.byte	0x5
	.uleb128 0xc09
	.4byte	.LASF5405
	.byte	0x5
	.uleb128 0xc0b
	.4byte	.LASF5406
	.byte	0x5
	.uleb128 0xc0f
	.4byte	.LASF5407
	.byte	0x5
	.uleb128 0xc10
	.4byte	.LASF5408
	.byte	0x5
	.uleb128 0xc11
	.4byte	.LASF5409
	.byte	0x5
	.uleb128 0xc12
	.4byte	.LASF5410
	.byte	0x5
	.uleb128 0xc15
	.4byte	.LASF5411
	.byte	0x5
	.uleb128 0xc16
	.4byte	.LASF5412
	.byte	0x5
	.uleb128 0xc17
	.4byte	.LASF5413
	.byte	0x5
	.uleb128 0xc18
	.4byte	.LASF5414
	.byte	0x5
	.uleb128 0xc1b
	.4byte	.LASF5415
	.byte	0x5
	.uleb128 0xc1c
	.4byte	.LASF5416
	.byte	0x5
	.uleb128 0xc1d
	.4byte	.LASF5417
	.byte	0x5
	.uleb128 0xc1e
	.4byte	.LASF5418
	.byte	0x5
	.uleb128 0xc20
	.4byte	.LASF5419
	.byte	0x5
	.uleb128 0xc24
	.4byte	.LASF5420
	.byte	0x5
	.uleb128 0xc25
	.4byte	.LASF5421
	.byte	0x5
	.uleb128 0xc26
	.4byte	.LASF5422
	.byte	0x5
	.uleb128 0xc27
	.4byte	.LASF5423
	.byte	0x5
	.uleb128 0xc2a
	.4byte	.LASF5424
	.byte	0x5
	.uleb128 0xc2b
	.4byte	.LASF5425
	.byte	0x5
	.uleb128 0xc2c
	.4byte	.LASF5426
	.byte	0x5
	.uleb128 0xc2d
	.4byte	.LASF5427
	.byte	0x5
	.uleb128 0xc30
	.4byte	.LASF5428
	.byte	0x5
	.uleb128 0xc31
	.4byte	.LASF5429
	.byte	0x5
	.uleb128 0xc32
	.4byte	.LASF5430
	.byte	0x5
	.uleb128 0xc33
	.4byte	.LASF5431
	.byte	0x5
	.uleb128 0xc35
	.4byte	.LASF5432
	.byte	0x5
	.uleb128 0xc39
	.4byte	.LASF5433
	.byte	0x5
	.uleb128 0xc3a
	.4byte	.LASF5434
	.byte	0x5
	.uleb128 0xc3b
	.4byte	.LASF5435
	.byte	0x5
	.uleb128 0xc3c
	.4byte	.LASF5436
	.byte	0x5
	.uleb128 0xc3f
	.4byte	.LASF5437
	.byte	0x5
	.uleb128 0xc40
	.4byte	.LASF5438
	.byte	0x5
	.uleb128 0xc41
	.4byte	.LASF5439
	.byte	0x5
	.uleb128 0xc42
	.4byte	.LASF5440
	.byte	0x5
	.uleb128 0xc45
	.4byte	.LASF5441
	.byte	0x5
	.uleb128 0xc46
	.4byte	.LASF5442
	.byte	0x5
	.uleb128 0xc47
	.4byte	.LASF5443
	.byte	0x5
	.uleb128 0xc48
	.4byte	.LASF5444
	.byte	0x5
	.uleb128 0xc4a
	.4byte	.LASF5445
	.byte	0x5
	.uleb128 0xc4e
	.4byte	.LASF5446
	.byte	0x5
	.uleb128 0xc4f
	.4byte	.LASF5447
	.byte	0x5
	.uleb128 0xc50
	.4byte	.LASF5448
	.byte	0x5
	.uleb128 0xc51
	.4byte	.LASF5449
	.byte	0x5
	.uleb128 0xc54
	.4byte	.LASF5450
	.byte	0x5
	.uleb128 0xc55
	.4byte	.LASF5451
	.byte	0x5
	.uleb128 0xc56
	.4byte	.LASF5452
	.byte	0x5
	.uleb128 0xc57
	.4byte	.LASF5453
	.byte	0x5
	.uleb128 0xc5a
	.4byte	.LASF5454
	.byte	0x5
	.uleb128 0xc5b
	.4byte	.LASF5455
	.byte	0x5
	.uleb128 0xc5c
	.4byte	.LASF5456
	.byte	0x5
	.uleb128 0xc5d
	.4byte	.LASF5457
	.byte	0x5
	.uleb128 0xc5f
	.4byte	.LASF5458
	.byte	0x5
	.uleb128 0xc63
	.4byte	.LASF5459
	.byte	0x5
	.uleb128 0xc64
	.4byte	.LASF5460
	.byte	0x5
	.uleb128 0xc65
	.4byte	.LASF5461
	.byte	0x5
	.uleb128 0xc66
	.4byte	.LASF5462
	.byte	0x5
	.uleb128 0xc69
	.4byte	.LASF5463
	.byte	0x5
	.uleb128 0xc6a
	.4byte	.LASF5464
	.byte	0x5
	.uleb128 0xc6b
	.4byte	.LASF5465
	.byte	0x5
	.uleb128 0xc6c
	.4byte	.LASF5466
	.byte	0x5
	.uleb128 0xc6f
	.4byte	.LASF5467
	.byte	0x5
	.uleb128 0xc70
	.4byte	.LASF5468
	.byte	0x5
	.uleb128 0xc71
	.4byte	.LASF5469
	.byte	0x5
	.uleb128 0xc72
	.4byte	.LASF5470
	.byte	0x5
	.uleb128 0xc74
	.4byte	.LASF5471
	.byte	0x5
	.uleb128 0xc78
	.4byte	.LASF5472
	.byte	0x5
	.uleb128 0xc79
	.4byte	.LASF5473
	.byte	0x5
	.uleb128 0xc7a
	.4byte	.LASF5474
	.byte	0x5
	.uleb128 0xc7b
	.4byte	.LASF5475
	.byte	0x5
	.uleb128 0xc7e
	.4byte	.LASF5476
	.byte	0x5
	.uleb128 0xc7f
	.4byte	.LASF5477
	.byte	0x5
	.uleb128 0xc80
	.4byte	.LASF5478
	.byte	0x5
	.uleb128 0xc81
	.4byte	.LASF5479
	.byte	0x5
	.uleb128 0xc84
	.4byte	.LASF5480
	.byte	0x5
	.uleb128 0xc85
	.4byte	.LASF5481
	.byte	0x5
	.uleb128 0xc86
	.4byte	.LASF5482
	.byte	0x5
	.uleb128 0xc87
	.4byte	.LASF5483
	.byte	0x5
	.uleb128 0xc89
	.4byte	.LASF5484
	.byte	0x5
	.uleb128 0xc8d
	.4byte	.LASF5485
	.byte	0x5
	.uleb128 0xc8e
	.4byte	.LASF5486
	.byte	0x5
	.uleb128 0xc8f
	.4byte	.LASF5487
	.byte	0x5
	.uleb128 0xc90
	.4byte	.LASF5488
	.byte	0x5
	.uleb128 0xc93
	.4byte	.LASF5489
	.byte	0x5
	.uleb128 0xc94
	.4byte	.LASF5490
	.byte	0x5
	.uleb128 0xc95
	.4byte	.LASF5491
	.byte	0x5
	.uleb128 0xc96
	.4byte	.LASF5492
	.byte	0x5
	.uleb128 0xc99
	.4byte	.LASF5493
	.byte	0x5
	.uleb128 0xc9a
	.4byte	.LASF5494
	.byte	0x5
	.uleb128 0xc9b
	.4byte	.LASF5495
	.byte	0x5
	.uleb128 0xc9c
	.4byte	.LASF5496
	.byte	0x5
	.uleb128 0xc9e
	.4byte	.LASF5497
	.byte	0x5
	.uleb128 0xca2
	.4byte	.LASF5498
	.byte	0x5
	.uleb128 0xca3
	.4byte	.LASF5499
	.byte	0x5
	.uleb128 0xca4
	.4byte	.LASF5500
	.byte	0x5
	.uleb128 0xca5
	.4byte	.LASF5501
	.byte	0x5
	.uleb128 0xca8
	.4byte	.LASF5502
	.byte	0x5
	.uleb128 0xca9
	.4byte	.LASF5503
	.byte	0x5
	.uleb128 0xcaa
	.4byte	.LASF5504
	.byte	0x5
	.uleb128 0xcab
	.4byte	.LASF5505
	.byte	0x5
	.uleb128 0xcae
	.4byte	.LASF5506
	.byte	0x5
	.uleb128 0xcaf
	.4byte	.LASF5507
	.byte	0x5
	.uleb128 0xcb0
	.4byte	.LASF5508
	.byte	0x5
	.uleb128 0xcb1
	.4byte	.LASF5509
	.byte	0x5
	.uleb128 0xcb3
	.4byte	.LASF5510
	.byte	0x5
	.uleb128 0xcb7
	.4byte	.LASF5511
	.byte	0x5
	.uleb128 0xcb8
	.4byte	.LASF5512
	.byte	0x5
	.uleb128 0xcb9
	.4byte	.LASF5513
	.byte	0x5
	.uleb128 0xcba
	.4byte	.LASF5514
	.byte	0x5
	.uleb128 0xcbd
	.4byte	.LASF5515
	.byte	0x5
	.uleb128 0xcbe
	.4byte	.LASF5516
	.byte	0x5
	.uleb128 0xcbf
	.4byte	.LASF5517
	.byte	0x5
	.uleb128 0xcc0
	.4byte	.LASF5518
	.byte	0x5
	.uleb128 0xcc3
	.4byte	.LASF5519
	.byte	0x5
	.uleb128 0xcc4
	.4byte	.LASF5520
	.byte	0x5
	.uleb128 0xcc5
	.4byte	.LASF5521
	.byte	0x5
	.uleb128 0xcc6
	.4byte	.LASF5522
	.byte	0x5
	.uleb128 0xcc8
	.4byte	.LASF5523
	.byte	0x5
	.uleb128 0xccc
	.4byte	.LASF5524
	.byte	0x5
	.uleb128 0xccd
	.4byte	.LASF5525
	.byte	0x5
	.uleb128 0xcce
	.4byte	.LASF5526
	.byte	0x5
	.uleb128 0xccf
	.4byte	.LASF5527
	.byte	0x5
	.uleb128 0xcd2
	.4byte	.LASF5528
	.byte	0x5
	.uleb128 0xcd3
	.4byte	.LASF5529
	.byte	0x5
	.uleb128 0xcd4
	.4byte	.LASF5530
	.byte	0x5
	.uleb128 0xcd5
	.4byte	.LASF5531
	.byte	0x5
	.uleb128 0xcd8
	.4byte	.LASF5532
	.byte	0x5
	.uleb128 0xcd9
	.4byte	.LASF5533
	.byte	0x5
	.uleb128 0xcda
	.4byte	.LASF5534
	.byte	0x5
	.uleb128 0xcdb
	.4byte	.LASF5535
	.byte	0x5
	.uleb128 0xcdd
	.4byte	.LASF5536
	.byte	0x5
	.uleb128 0xce1
	.4byte	.LASF5537
	.byte	0x5
	.uleb128 0xce2
	.4byte	.LASF5538
	.byte	0x5
	.uleb128 0xce3
	.4byte	.LASF5539
	.byte	0x5
	.uleb128 0xce4
	.4byte	.LASF5540
	.byte	0x5
	.uleb128 0xce7
	.4byte	.LASF5541
	.byte	0x5
	.uleb128 0xce8
	.4byte	.LASF5542
	.byte	0x5
	.uleb128 0xce9
	.4byte	.LASF5543
	.byte	0x5
	.uleb128 0xcea
	.4byte	.LASF5544
	.byte	0x5
	.uleb128 0xced
	.4byte	.LASF5545
	.byte	0x5
	.uleb128 0xcee
	.4byte	.LASF5546
	.byte	0x5
	.uleb128 0xcef
	.4byte	.LASF5547
	.byte	0x5
	.uleb128 0xcf0
	.4byte	.LASF5548
	.byte	0x5
	.uleb128 0xcf2
	.4byte	.LASF5549
	.byte	0x5
	.uleb128 0xcf6
	.4byte	.LASF5550
	.byte	0x5
	.uleb128 0xcf7
	.4byte	.LASF5551
	.byte	0x5
	.uleb128 0xcf8
	.4byte	.LASF5552
	.byte	0x5
	.uleb128 0xcf9
	.4byte	.LASF5553
	.byte	0x5
	.uleb128 0xcfc
	.4byte	.LASF5554
	.byte	0x5
	.uleb128 0xcfd
	.4byte	.LASF5555
	.byte	0x5
	.uleb128 0xcfe
	.4byte	.LASF5556
	.byte	0x5
	.uleb128 0xcff
	.4byte	.LASF5557
	.byte	0x5
	.uleb128 0xd02
	.4byte	.LASF5558
	.byte	0x5
	.uleb128 0xd03
	.4byte	.LASF5559
	.byte	0x5
	.uleb128 0xd04
	.4byte	.LASF5560
	.byte	0x5
	.uleb128 0xd05
	.4byte	.LASF5561
	.byte	0x5
	.uleb128 0xd07
	.4byte	.LASF5562
	.byte	0x5
	.uleb128 0xd0b
	.4byte	.LASF5563
	.byte	0x5
	.uleb128 0xd0c
	.4byte	.LASF5564
	.byte	0x5
	.uleb128 0xd0d
	.4byte	.LASF5565
	.byte	0x5
	.uleb128 0xd0e
	.4byte	.LASF5566
	.byte	0x5
	.uleb128 0xd11
	.4byte	.LASF5567
	.byte	0x5
	.uleb128 0xd12
	.4byte	.LASF5568
	.byte	0x5
	.uleb128 0xd13
	.4byte	.LASF5569
	.byte	0x5
	.uleb128 0xd14
	.4byte	.LASF5570
	.byte	0x5
	.uleb128 0xd17
	.4byte	.LASF5571
	.byte	0x5
	.uleb128 0xd18
	.4byte	.LASF5572
	.byte	0x5
	.uleb128 0xd19
	.4byte	.LASF5573
	.byte	0x5
	.uleb128 0xd1a
	.4byte	.LASF5574
	.byte	0x5
	.uleb128 0xd1c
	.4byte	.LASF5575
	.byte	0x5
	.uleb128 0xd20
	.4byte	.LASF5576
	.byte	0x5
	.uleb128 0xd21
	.4byte	.LASF5577
	.byte	0x5
	.uleb128 0xd22
	.4byte	.LASF5578
	.byte	0x5
	.uleb128 0xd23
	.4byte	.LASF5579
	.byte	0x5
	.uleb128 0xd26
	.4byte	.LASF5580
	.byte	0x5
	.uleb128 0xd27
	.4byte	.LASF5581
	.byte	0x5
	.uleb128 0xd28
	.4byte	.LASF5582
	.byte	0x5
	.uleb128 0xd29
	.4byte	.LASF5583
	.byte	0x5
	.uleb128 0xd2c
	.4byte	.LASF5584
	.byte	0x5
	.uleb128 0xd2d
	.4byte	.LASF5585
	.byte	0x5
	.uleb128 0xd2e
	.4byte	.LASF5586
	.byte	0x5
	.uleb128 0xd2f
	.4byte	.LASF5587
	.byte	0x5
	.uleb128 0xd31
	.4byte	.LASF5588
	.byte	0x5
	.uleb128 0xd35
	.4byte	.LASF5589
	.byte	0x5
	.uleb128 0xd36
	.4byte	.LASF5590
	.byte	0x5
	.uleb128 0xd37
	.4byte	.LASF5591
	.byte	0x5
	.uleb128 0xd38
	.4byte	.LASF5592
	.byte	0x5
	.uleb128 0xd3b
	.4byte	.LASF5593
	.byte	0x5
	.uleb128 0xd3c
	.4byte	.LASF5594
	.byte	0x5
	.uleb128 0xd3d
	.4byte	.LASF5595
	.byte	0x5
	.uleb128 0xd3e
	.4byte	.LASF5596
	.byte	0x5
	.uleb128 0xd41
	.4byte	.LASF5597
	.byte	0x5
	.uleb128 0xd42
	.4byte	.LASF5598
	.byte	0x5
	.uleb128 0xd43
	.4byte	.LASF5599
	.byte	0x5
	.uleb128 0xd44
	.4byte	.LASF5600
	.byte	0x5
	.uleb128 0xd46
	.4byte	.LASF5601
	.byte	0x5
	.uleb128 0xd4a
	.4byte	.LASF5602
	.byte	0x5
	.uleb128 0xd4b
	.4byte	.LASF5603
	.byte	0x5
	.uleb128 0xd4c
	.4byte	.LASF5604
	.byte	0x5
	.uleb128 0xd4d
	.4byte	.LASF5605
	.byte	0x5
	.uleb128 0xd50
	.4byte	.LASF5606
	.byte	0x5
	.uleb128 0xd51
	.4byte	.LASF5607
	.byte	0x5
	.uleb128 0xd52
	.4byte	.LASF5608
	.byte	0x5
	.uleb128 0xd53
	.4byte	.LASF5609
	.byte	0x5
	.uleb128 0xd56
	.4byte	.LASF5610
	.byte	0x5
	.uleb128 0xd57
	.4byte	.LASF5611
	.byte	0x5
	.uleb128 0xd58
	.4byte	.LASF5612
	.byte	0x5
	.uleb128 0xd59
	.4byte	.LASF5613
	.byte	0x5
	.uleb128 0xd5b
	.4byte	.LASF5614
	.byte	0x5
	.uleb128 0xd5f
	.4byte	.LASF5615
	.byte	0x5
	.uleb128 0xd60
	.4byte	.LASF5616
	.byte	0x5
	.uleb128 0xd61
	.4byte	.LASF5617
	.byte	0x5
	.uleb128 0xd62
	.4byte	.LASF5618
	.byte	0x5
	.uleb128 0xd65
	.4byte	.LASF5619
	.byte	0x5
	.uleb128 0xd66
	.4byte	.LASF5620
	.byte	0x5
	.uleb128 0xd67
	.4byte	.LASF5621
	.byte	0x5
	.uleb128 0xd68
	.4byte	.LASF5622
	.byte	0x5
	.uleb128 0xd6b
	.4byte	.LASF5623
	.byte	0x5
	.uleb128 0xd6c
	.4byte	.LASF5624
	.byte	0x5
	.uleb128 0xd6d
	.4byte	.LASF5625
	.byte	0x5
	.uleb128 0xd6e
	.4byte	.LASF5626
	.byte	0x5
	.uleb128 0xd70
	.4byte	.LASF5627
	.byte	0x5
	.uleb128 0xd74
	.4byte	.LASF5628
	.byte	0x5
	.uleb128 0xd75
	.4byte	.LASF5629
	.byte	0x5
	.uleb128 0xd76
	.4byte	.LASF5630
	.byte	0x5
	.uleb128 0xd77
	.4byte	.LASF5631
	.byte	0x5
	.uleb128 0xd7a
	.4byte	.LASF5632
	.byte	0x5
	.uleb128 0xd7b
	.4byte	.LASF5633
	.byte	0x5
	.uleb128 0xd7c
	.4byte	.LASF5634
	.byte	0x5
	.uleb128 0xd7d
	.4byte	.LASF5635
	.byte	0x5
	.uleb128 0xd80
	.4byte	.LASF5636
	.byte	0x5
	.uleb128 0xd81
	.4byte	.LASF5637
	.byte	0x5
	.uleb128 0xd82
	.4byte	.LASF5638
	.byte	0x5
	.uleb128 0xd83
	.4byte	.LASF5639
	.byte	0x5
	.uleb128 0xd85
	.4byte	.LASF5640
	.byte	0x5
	.uleb128 0xd89
	.4byte	.LASF5641
	.byte	0x5
	.uleb128 0xd8a
	.4byte	.LASF5642
	.byte	0x5
	.uleb128 0xd8b
	.4byte	.LASF5643
	.byte	0x5
	.uleb128 0xd8c
	.4byte	.LASF5644
	.byte	0x5
	.uleb128 0xd8f
	.4byte	.LASF5645
	.byte	0x5
	.uleb128 0xd90
	.4byte	.LASF5646
	.byte	0x5
	.uleb128 0xd91
	.4byte	.LASF5647
	.byte	0x5
	.uleb128 0xd92
	.4byte	.LASF5648
	.byte	0x5
	.uleb128 0xd95
	.4byte	.LASF5649
	.byte	0x5
	.uleb128 0xd96
	.4byte	.LASF5650
	.byte	0x5
	.uleb128 0xd97
	.4byte	.LASF5651
	.byte	0x5
	.uleb128 0xd98
	.4byte	.LASF5652
	.byte	0x5
	.uleb128 0xd9a
	.4byte	.LASF5653
	.byte	0x5
	.uleb128 0xd9e
	.4byte	.LASF5654
	.byte	0x5
	.uleb128 0xd9f
	.4byte	.LASF5655
	.byte	0x5
	.uleb128 0xda0
	.4byte	.LASF5656
	.byte	0x5
	.uleb128 0xda1
	.4byte	.LASF5657
	.byte	0x5
	.uleb128 0xda4
	.4byte	.LASF5658
	.byte	0x5
	.uleb128 0xda5
	.4byte	.LASF5659
	.byte	0x5
	.uleb128 0xda6
	.4byte	.LASF5660
	.byte	0x5
	.uleb128 0xda7
	.4byte	.LASF5661
	.byte	0x5
	.uleb128 0xdaa
	.4byte	.LASF5662
	.byte	0x5
	.uleb128 0xdab
	.4byte	.LASF5663
	.byte	0x5
	.uleb128 0xdac
	.4byte	.LASF5664
	.byte	0x5
	.uleb128 0xdad
	.4byte	.LASF5665
	.byte	0x5
	.uleb128 0xdaf
	.4byte	.LASF5666
	.byte	0x5
	.uleb128 0xdb3
	.4byte	.LASF5667
	.byte	0x5
	.uleb128 0xdb4
	.4byte	.LASF5668
	.byte	0x5
	.uleb128 0xdb5
	.4byte	.LASF5669
	.byte	0x5
	.uleb128 0xdb6
	.4byte	.LASF5670
	.byte	0x5
	.uleb128 0xdb9
	.4byte	.LASF5671
	.byte	0x5
	.uleb128 0xdba
	.4byte	.LASF5672
	.byte	0x5
	.uleb128 0xdbb
	.4byte	.LASF5673
	.byte	0x5
	.uleb128 0xdbc
	.4byte	.LASF5674
	.byte	0x5
	.uleb128 0xdbf
	.4byte	.LASF5675
	.byte	0x5
	.uleb128 0xdc0
	.4byte	.LASF5676
	.byte	0x5
	.uleb128 0xdc1
	.4byte	.LASF5677
	.byte	0x5
	.uleb128 0xdc2
	.4byte	.LASF5678
	.byte	0x5
	.uleb128 0xdc4
	.4byte	.LASF5679
	.byte	0x5
	.uleb128 0xdc8
	.4byte	.LASF5680
	.byte	0x5
	.uleb128 0xdc9
	.4byte	.LASF5681
	.byte	0x5
	.uleb128 0xdca
	.4byte	.LASF5682
	.byte	0x5
	.uleb128 0xdcb
	.4byte	.LASF5683
	.byte	0x5
	.uleb128 0xdce
	.4byte	.LASF5684
	.byte	0x5
	.uleb128 0xdcf
	.4byte	.LASF5685
	.byte	0x5
	.uleb128 0xdd0
	.4byte	.LASF5686
	.byte	0x5
	.uleb128 0xdd1
	.4byte	.LASF5687
	.byte	0x5
	.uleb128 0xdd4
	.4byte	.LASF5688
	.byte	0x5
	.uleb128 0xdd5
	.4byte	.LASF5689
	.byte	0x5
	.uleb128 0xdd6
	.4byte	.LASF5690
	.byte	0x5
	.uleb128 0xdd7
	.4byte	.LASF5691
	.byte	0x5
	.uleb128 0xdd9
	.4byte	.LASF5692
	.byte	0x5
	.uleb128 0xddd
	.4byte	.LASF5693
	.byte	0x5
	.uleb128 0xdde
	.4byte	.LASF5694
	.byte	0x5
	.uleb128 0xddf
	.4byte	.LASF5695
	.byte	0x5
	.uleb128 0xde0
	.4byte	.LASF5696
	.byte	0x5
	.uleb128 0xde3
	.4byte	.LASF5697
	.byte	0x5
	.uleb128 0xde4
	.4byte	.LASF5698
	.byte	0x5
	.uleb128 0xde5
	.4byte	.LASF5699
	.byte	0x5
	.uleb128 0xde6
	.4byte	.LASF5700
	.byte	0x5
	.uleb128 0xde9
	.4byte	.LASF5701
	.byte	0x5
	.uleb128 0xdea
	.4byte	.LASF5702
	.byte	0x5
	.uleb128 0xdeb
	.4byte	.LASF5703
	.byte	0x5
	.uleb128 0xdec
	.4byte	.LASF5704
	.byte	0x5
	.uleb128 0xdee
	.4byte	.LASF5705
	.byte	0x5
	.uleb128 0xdf2
	.4byte	.LASF5706
	.byte	0x5
	.uleb128 0xdf3
	.4byte	.LASF5707
	.byte	0x5
	.uleb128 0xdf4
	.4byte	.LASF5708
	.byte	0x5
	.uleb128 0xdf5
	.4byte	.LASF5709
	.byte	0x5
	.uleb128 0xdf8
	.4byte	.LASF5710
	.byte	0x5
	.uleb128 0xdf9
	.4byte	.LASF5711
	.byte	0x5
	.uleb128 0xdfa
	.4byte	.LASF5712
	.byte	0x5
	.uleb128 0xdfb
	.4byte	.LASF5713
	.byte	0x5
	.uleb128 0xdfe
	.4byte	.LASF5714
	.byte	0x5
	.uleb128 0xdff
	.4byte	.LASF5715
	.byte	0x5
	.uleb128 0xe00
	.4byte	.LASF5716
	.byte	0x5
	.uleb128 0xe01
	.4byte	.LASF5717
	.byte	0x5
	.uleb128 0xe03
	.4byte	.LASF5718
	.byte	0x5
	.uleb128 0xe07
	.4byte	.LASF5719
	.byte	0x5
	.uleb128 0xe08
	.4byte	.LASF5720
	.byte	0x5
	.uleb128 0xe09
	.4byte	.LASF5721
	.byte	0x5
	.uleb128 0xe0a
	.4byte	.LASF5722
	.byte	0x5
	.uleb128 0xe0d
	.4byte	.LASF5723
	.byte	0x5
	.uleb128 0xe0e
	.4byte	.LASF5724
	.byte	0x5
	.uleb128 0xe0f
	.4byte	.LASF5725
	.byte	0x5
	.uleb128 0xe10
	.4byte	.LASF5726
	.byte	0x5
	.uleb128 0xe13
	.4byte	.LASF5727
	.byte	0x5
	.uleb128 0xe14
	.4byte	.LASF5728
	.byte	0x5
	.uleb128 0xe15
	.4byte	.LASF5729
	.byte	0x5
	.uleb128 0xe16
	.4byte	.LASF5730
	.byte	0x5
	.uleb128 0xe18
	.4byte	.LASF5731
	.byte	0x5
	.uleb128 0xe1c
	.4byte	.LASF5732
	.byte	0x5
	.uleb128 0xe1d
	.4byte	.LASF5733
	.byte	0x5
	.uleb128 0xe1e
	.4byte	.LASF5734
	.byte	0x5
	.uleb128 0xe1f
	.4byte	.LASF5735
	.byte	0x5
	.uleb128 0xe22
	.4byte	.LASF5736
	.byte	0x5
	.uleb128 0xe23
	.4byte	.LASF5737
	.byte	0x5
	.uleb128 0xe24
	.4byte	.LASF5738
	.byte	0x5
	.uleb128 0xe25
	.4byte	.LASF5739
	.byte	0x5
	.uleb128 0xe28
	.4byte	.LASF5740
	.byte	0x5
	.uleb128 0xe29
	.4byte	.LASF5741
	.byte	0x5
	.uleb128 0xe2a
	.4byte	.LASF5742
	.byte	0x5
	.uleb128 0xe2b
	.4byte	.LASF5743
	.byte	0x5
	.uleb128 0xe2d
	.4byte	.LASF5744
	.byte	0x5
	.uleb128 0xe31
	.4byte	.LASF5745
	.byte	0x5
	.uleb128 0xe32
	.4byte	.LASF5746
	.byte	0x5
	.uleb128 0xe33
	.4byte	.LASF5747
	.byte	0x5
	.uleb128 0xe34
	.4byte	.LASF5748
	.byte	0x5
	.uleb128 0xe37
	.4byte	.LASF5749
	.byte	0x5
	.uleb128 0xe38
	.4byte	.LASF5750
	.byte	0x5
	.uleb128 0xe39
	.4byte	.LASF5751
	.byte	0x5
	.uleb128 0xe3a
	.4byte	.LASF5752
	.byte	0x5
	.uleb128 0xe3d
	.4byte	.LASF5753
	.byte	0x5
	.uleb128 0xe3e
	.4byte	.LASF5754
	.byte	0x5
	.uleb128 0xe3f
	.4byte	.LASF5755
	.byte	0x5
	.uleb128 0xe40
	.4byte	.LASF5756
	.byte	0x5
	.uleb128 0xe42
	.4byte	.LASF5757
	.byte	0x5
	.uleb128 0xe46
	.4byte	.LASF5758
	.byte	0x5
	.uleb128 0xe47
	.4byte	.LASF5759
	.byte	0x5
	.uleb128 0xe48
	.4byte	.LASF5760
	.byte	0x5
	.uleb128 0xe49
	.4byte	.LASF5761
	.byte	0x5
	.uleb128 0xe4c
	.4byte	.LASF5762
	.byte	0x5
	.uleb128 0xe4d
	.4byte	.LASF5763
	.byte	0x5
	.uleb128 0xe4e
	.4byte	.LASF5764
	.byte	0x5
	.uleb128 0xe4f
	.4byte	.LASF5765
	.byte	0x5
	.uleb128 0xe52
	.4byte	.LASF5766
	.byte	0x5
	.uleb128 0xe53
	.4byte	.LASF5767
	.byte	0x5
	.uleb128 0xe54
	.4byte	.LASF5768
	.byte	0x5
	.uleb128 0xe55
	.4byte	.LASF5769
	.byte	0x5
	.uleb128 0xe57
	.4byte	.LASF5770
	.byte	0x5
	.uleb128 0xe5b
	.4byte	.LASF5771
	.byte	0x5
	.uleb128 0xe5c
	.4byte	.LASF5772
	.byte	0x5
	.uleb128 0xe5d
	.4byte	.LASF5773
	.byte	0x5
	.uleb128 0xe5e
	.4byte	.LASF5774
	.byte	0x5
	.uleb128 0xe61
	.4byte	.LASF5775
	.byte	0x5
	.uleb128 0xe62
	.4byte	.LASF5776
	.byte	0x5
	.uleb128 0xe63
	.4byte	.LASF5777
	.byte	0x5
	.uleb128 0xe64
	.4byte	.LASF5778
	.byte	0x5
	.uleb128 0xe67
	.4byte	.LASF5779
	.byte	0x5
	.uleb128 0xe68
	.4byte	.LASF5780
	.byte	0x5
	.uleb128 0xe69
	.4byte	.LASF5781
	.byte	0x5
	.uleb128 0xe6a
	.4byte	.LASF5782
	.byte	0x5
	.uleb128 0xe6c
	.4byte	.LASF5783
	.byte	0x5
	.uleb128 0xe70
	.4byte	.LASF5784
	.byte	0x5
	.uleb128 0xe71
	.4byte	.LASF5785
	.byte	0x5
	.uleb128 0xe72
	.4byte	.LASF5786
	.byte	0x5
	.uleb128 0xe73
	.4byte	.LASF5787
	.byte	0x5
	.uleb128 0xe76
	.4byte	.LASF5788
	.byte	0x5
	.uleb128 0xe77
	.4byte	.LASF5789
	.byte	0x5
	.uleb128 0xe78
	.4byte	.LASF5790
	.byte	0x5
	.uleb128 0xe79
	.4byte	.LASF5791
	.byte	0x5
	.uleb128 0xe7c
	.4byte	.LASF5792
	.byte	0x5
	.uleb128 0xe7d
	.4byte	.LASF5793
	.byte	0x5
	.uleb128 0xe7e
	.4byte	.LASF5794
	.byte	0x5
	.uleb128 0xe7f
	.4byte	.LASF5795
	.byte	0x5
	.uleb128 0xe81
	.4byte	.LASF5796
	.byte	0x5
	.uleb128 0xe85
	.4byte	.LASF5797
	.byte	0x5
	.uleb128 0xe86
	.4byte	.LASF5798
	.byte	0x5
	.uleb128 0xe87
	.4byte	.LASF5799
	.byte	0x5
	.uleb128 0xe88
	.4byte	.LASF5800
	.byte	0x5
	.uleb128 0xe8b
	.4byte	.LASF5801
	.byte	0x5
	.uleb128 0xe8c
	.4byte	.LASF5802
	.byte	0x5
	.uleb128 0xe8d
	.4byte	.LASF5803
	.byte	0x5
	.uleb128 0xe8e
	.4byte	.LASF5804
	.byte	0x5
	.uleb128 0xe91
	.4byte	.LASF5805
	.byte	0x5
	.uleb128 0xe92
	.4byte	.LASF5806
	.byte	0x5
	.uleb128 0xe93
	.4byte	.LASF5807
	.byte	0x5
	.uleb128 0xe94
	.4byte	.LASF5808
	.byte	0x5
	.uleb128 0xe96
	.4byte	.LASF5809
	.byte	0x5
	.uleb128 0xe9a
	.4byte	.LASF5810
	.byte	0x5
	.uleb128 0xe9b
	.4byte	.LASF5811
	.byte	0x5
	.uleb128 0xe9c
	.4byte	.LASF5812
	.byte	0x5
	.uleb128 0xe9d
	.4byte	.LASF5813
	.byte	0x5
	.uleb128 0xea0
	.4byte	.LASF5814
	.byte	0x5
	.uleb128 0xea1
	.4byte	.LASF5815
	.byte	0x5
	.uleb128 0xea2
	.4byte	.LASF5816
	.byte	0x5
	.uleb128 0xea3
	.4byte	.LASF5817
	.byte	0x5
	.uleb128 0xea6
	.4byte	.LASF5818
	.byte	0x5
	.uleb128 0xea7
	.4byte	.LASF5819
	.byte	0x5
	.uleb128 0xea8
	.4byte	.LASF5820
	.byte	0x5
	.uleb128 0xea9
	.4byte	.LASF5821
	.byte	0x5
	.uleb128 0xeab
	.4byte	.LASF5822
	.byte	0x5
	.uleb128 0xeaf
	.4byte	.LASF5823
	.byte	0x5
	.uleb128 0xeb0
	.4byte	.LASF5824
	.byte	0x5
	.uleb128 0xeb1
	.4byte	.LASF5825
	.byte	0x5
	.uleb128 0xeb2
	.4byte	.LASF5826
	.byte	0x5
	.uleb128 0xeb5
	.4byte	.LASF5827
	.byte	0x5
	.uleb128 0xeb6
	.4byte	.LASF5828
	.byte	0x5
	.uleb128 0xeb7
	.4byte	.LASF5829
	.byte	0x5
	.uleb128 0xeb8
	.4byte	.LASF5830
	.byte	0x5
	.uleb128 0xebb
	.4byte	.LASF5831
	.byte	0x5
	.uleb128 0xebc
	.4byte	.LASF5832
	.byte	0x5
	.uleb128 0xebd
	.4byte	.LASF5833
	.byte	0x5
	.uleb128 0xebe
	.4byte	.LASF5834
	.byte	0x5
	.uleb128 0xec0
	.4byte	.LASF5835
	.byte	0x5
	.uleb128 0xec4
	.4byte	.LASF5836
	.byte	0x5
	.uleb128 0xec5
	.4byte	.LASF5837
	.byte	0x5
	.uleb128 0xec6
	.4byte	.LASF5838
	.byte	0x5
	.uleb128 0xec7
	.4byte	.LASF5839
	.byte	0x5
	.uleb128 0xeca
	.4byte	.LASF5840
	.byte	0x5
	.uleb128 0xecb
	.4byte	.LASF5841
	.byte	0x5
	.uleb128 0xecc
	.4byte	.LASF5842
	.byte	0x5
	.uleb128 0xecd
	.4byte	.LASF5843
	.byte	0x5
	.uleb128 0xed0
	.4byte	.LASF5844
	.byte	0x5
	.uleb128 0xed1
	.4byte	.LASF5845
	.byte	0x5
	.uleb128 0xed2
	.4byte	.LASF5846
	.byte	0x5
	.uleb128 0xed3
	.4byte	.LASF5847
	.byte	0x5
	.uleb128 0xed5
	.4byte	.LASF5848
	.byte	0x5
	.uleb128 0xed9
	.4byte	.LASF5849
	.byte	0x5
	.uleb128 0xeda
	.4byte	.LASF5850
	.byte	0x5
	.uleb128 0xedb
	.4byte	.LASF5851
	.byte	0x5
	.uleb128 0xedc
	.4byte	.LASF5852
	.byte	0x5
	.uleb128 0xedf
	.4byte	.LASF5853
	.byte	0x5
	.uleb128 0xee0
	.4byte	.LASF5854
	.byte	0x5
	.uleb128 0xee1
	.4byte	.LASF5855
	.byte	0x5
	.uleb128 0xee2
	.4byte	.LASF5856
	.byte	0x5
	.uleb128 0xee5
	.4byte	.LASF5857
	.byte	0x5
	.uleb128 0xee6
	.4byte	.LASF5858
	.byte	0x5
	.uleb128 0xee7
	.4byte	.LASF5859
	.byte	0x5
	.uleb128 0xee8
	.4byte	.LASF5860
	.byte	0x5
	.uleb128 0xeea
	.4byte	.LASF5861
	.byte	0x5
	.uleb128 0xeee
	.4byte	.LASF5862
	.byte	0x5
	.uleb128 0xeef
	.4byte	.LASF5863
	.byte	0x5
	.uleb128 0xef0
	.4byte	.LASF5864
	.byte	0x5
	.uleb128 0xef1
	.4byte	.LASF5865
	.byte	0x5
	.uleb128 0xef4
	.4byte	.LASF5866
	.byte	0x5
	.uleb128 0xef5
	.4byte	.LASF5867
	.byte	0x5
	.uleb128 0xef6
	.4byte	.LASF5868
	.byte	0x5
	.uleb128 0xef7
	.4byte	.LASF5869
	.byte	0x5
	.uleb128 0xefa
	.4byte	.LASF5870
	.byte	0x5
	.uleb128 0xefb
	.4byte	.LASF5871
	.byte	0x5
	.uleb128 0xefc
	.4byte	.LASF5872
	.byte	0x5
	.uleb128 0xefd
	.4byte	.LASF5873
	.byte	0x5
	.uleb128 0xeff
	.4byte	.LASF5874
	.byte	0x5
	.uleb128 0xf03
	.4byte	.LASF5875
	.byte	0x5
	.uleb128 0xf04
	.4byte	.LASF5876
	.byte	0x5
	.uleb128 0xf05
	.4byte	.LASF5877
	.byte	0x5
	.uleb128 0xf06
	.4byte	.LASF5878
	.byte	0x5
	.uleb128 0xf09
	.4byte	.LASF5879
	.byte	0x5
	.uleb128 0xf0a
	.4byte	.LASF5880
	.byte	0x5
	.uleb128 0xf0b
	.4byte	.LASF5881
	.byte	0x5
	.uleb128 0xf0c
	.4byte	.LASF5882
	.byte	0x5
	.uleb128 0xf0f
	.4byte	.LASF5883
	.byte	0x5
	.uleb128 0xf10
	.4byte	.LASF5884
	.byte	0x5
	.uleb128 0xf11
	.4byte	.LASF5885
	.byte	0x5
	.uleb128 0xf12
	.4byte	.LASF5886
	.byte	0x5
	.uleb128 0xf14
	.4byte	.LASF5887
	.byte	0x5
	.uleb128 0xf18
	.4byte	.LASF5888
	.byte	0x5
	.uleb128 0xf19
	.4byte	.LASF5889
	.byte	0x5
	.uleb128 0xf1a
	.4byte	.LASF5890
	.byte	0x5
	.uleb128 0xf1b
	.4byte	.LASF5891
	.byte	0x5
	.uleb128 0xf1e
	.4byte	.LASF5892
	.byte	0x5
	.uleb128 0xf1f
	.4byte	.LASF5893
	.byte	0x5
	.uleb128 0xf20
	.4byte	.LASF5894
	.byte	0x5
	.uleb128 0xf21
	.4byte	.LASF5895
	.byte	0x5
	.uleb128 0xf24
	.4byte	.LASF5896
	.byte	0x5
	.uleb128 0xf25
	.4byte	.LASF5897
	.byte	0x5
	.uleb128 0xf26
	.4byte	.LASF5898
	.byte	0x5
	.uleb128 0xf27
	.4byte	.LASF5899
	.byte	0x5
	.uleb128 0xf29
	.4byte	.LASF5900
	.byte	0x5
	.uleb128 0xf2d
	.4byte	.LASF5901
	.byte	0x5
	.uleb128 0xf2e
	.4byte	.LASF5902
	.byte	0x5
	.uleb128 0xf2f
	.4byte	.LASF5903
	.byte	0x5
	.uleb128 0xf30
	.4byte	.LASF5904
	.byte	0x5
	.uleb128 0xf33
	.4byte	.LASF5905
	.byte	0x5
	.uleb128 0xf34
	.4byte	.LASF5906
	.byte	0x5
	.uleb128 0xf35
	.4byte	.LASF5907
	.byte	0x5
	.uleb128 0xf36
	.4byte	.LASF5908
	.byte	0x5
	.uleb128 0xf39
	.4byte	.LASF5909
	.byte	0x5
	.uleb128 0xf3a
	.4byte	.LASF5910
	.byte	0x5
	.uleb128 0xf3b
	.4byte	.LASF5911
	.byte	0x5
	.uleb128 0xf3c
	.4byte	.LASF5912
	.byte	0x5
	.uleb128 0xf3e
	.4byte	.LASF5913
	.byte	0x5
	.uleb128 0xf42
	.4byte	.LASF5914
	.byte	0x5
	.uleb128 0xf43
	.4byte	.LASF5915
	.byte	0x5
	.uleb128 0xf44
	.4byte	.LASF5916
	.byte	0x5
	.uleb128 0xf45
	.4byte	.LASF5917
	.byte	0x5
	.uleb128 0xf48
	.4byte	.LASF5918
	.byte	0x5
	.uleb128 0xf49
	.4byte	.LASF5919
	.byte	0x5
	.uleb128 0xf4a
	.4byte	.LASF5920
	.byte	0x5
	.uleb128 0xf4b
	.4byte	.LASF5921
	.byte	0x5
	.uleb128 0xf4e
	.4byte	.LASF5922
	.byte	0x5
	.uleb128 0xf4f
	.4byte	.LASF5923
	.byte	0x5
	.uleb128 0xf50
	.4byte	.LASF5924
	.byte	0x5
	.uleb128 0xf51
	.4byte	.LASF5925
	.byte	0x5
	.uleb128 0xf53
	.4byte	.LASF5926
	.byte	0x5
	.uleb128 0xf57
	.4byte	.LASF5927
	.byte	0x5
	.uleb128 0xf58
	.4byte	.LASF5928
	.byte	0x5
	.uleb128 0xf59
	.4byte	.LASF5929
	.byte	0x5
	.uleb128 0xf5a
	.4byte	.LASF5930
	.byte	0x5
	.uleb128 0xf5d
	.4byte	.LASF5931
	.byte	0x5
	.uleb128 0xf5e
	.4byte	.LASF5932
	.byte	0x5
	.uleb128 0xf5f
	.4byte	.LASF5933
	.byte	0x5
	.uleb128 0xf60
	.4byte	.LASF5934
	.byte	0x5
	.uleb128 0xf63
	.4byte	.LASF5935
	.byte	0x5
	.uleb128 0xf64
	.4byte	.LASF5936
	.byte	0x5
	.uleb128 0xf65
	.4byte	.LASF5937
	.byte	0x5
	.uleb128 0xf66
	.4byte	.LASF5938
	.byte	0x5
	.uleb128 0xf68
	.4byte	.LASF5939
	.byte	0x5
	.uleb128 0xf6c
	.4byte	.LASF5940
	.byte	0x5
	.uleb128 0xf6d
	.4byte	.LASF5941
	.byte	0x5
	.uleb128 0xf6e
	.4byte	.LASF5942
	.byte	0x5
	.uleb128 0xf6f
	.4byte	.LASF5943
	.byte	0x5
	.uleb128 0xf72
	.4byte	.LASF5944
	.byte	0x5
	.uleb128 0xf73
	.4byte	.LASF5945
	.byte	0x5
	.uleb128 0xf74
	.4byte	.LASF5946
	.byte	0x5
	.uleb128 0xf75
	.4byte	.LASF5947
	.byte	0x5
	.uleb128 0xf78
	.4byte	.LASF5948
	.byte	0x5
	.uleb128 0xf79
	.4byte	.LASF5949
	.byte	0x5
	.uleb128 0xf7a
	.4byte	.LASF5950
	.byte	0x5
	.uleb128 0xf7b
	.4byte	.LASF5951
	.byte	0x5
	.uleb128 0xf7d
	.4byte	.LASF5952
	.byte	0x5
	.uleb128 0xf81
	.4byte	.LASF5953
	.byte	0x5
	.uleb128 0xf82
	.4byte	.LASF5954
	.byte	0x5
	.uleb128 0xf83
	.4byte	.LASF5955
	.byte	0x5
	.uleb128 0xf84
	.4byte	.LASF5956
	.byte	0x5
	.uleb128 0xf87
	.4byte	.LASF5957
	.byte	0x5
	.uleb128 0xf88
	.4byte	.LASF5958
	.byte	0x5
	.uleb128 0xf89
	.4byte	.LASF5959
	.byte	0x5
	.uleb128 0xf8a
	.4byte	.LASF5960
	.byte	0x5
	.uleb128 0xf8d
	.4byte	.LASF5961
	.byte	0x5
	.uleb128 0xf8e
	.4byte	.LASF5962
	.byte	0x5
	.uleb128 0xf8f
	.4byte	.LASF5963
	.byte	0x5
	.uleb128 0xf90
	.4byte	.LASF5964
	.byte	0x5
	.uleb128 0xf92
	.4byte	.LASF5965
	.byte	0x5
	.uleb128 0xf96
	.4byte	.LASF5966
	.byte	0x5
	.uleb128 0xf97
	.4byte	.LASF5967
	.byte	0x5
	.uleb128 0xf98
	.4byte	.LASF5968
	.byte	0x5
	.uleb128 0xf99
	.4byte	.LASF5969
	.byte	0x5
	.uleb128 0xf9c
	.4byte	.LASF5970
	.byte	0x5
	.uleb128 0xf9d
	.4byte	.LASF5971
	.byte	0x5
	.uleb128 0xf9e
	.4byte	.LASF5972
	.byte	0x5
	.uleb128 0xf9f
	.4byte	.LASF5973
	.byte	0x5
	.uleb128 0xfa2
	.4byte	.LASF5974
	.byte	0x5
	.uleb128 0xfa3
	.4byte	.LASF5975
	.byte	0x5
	.uleb128 0xfa4
	.4byte	.LASF5976
	.byte	0x5
	.uleb128 0xfa5
	.4byte	.LASF5977
	.byte	0x5
	.uleb128 0xfa7
	.4byte	.LASF5978
	.byte	0x5
	.uleb128 0xfab
	.4byte	.LASF5979
	.byte	0x5
	.uleb128 0xfac
	.4byte	.LASF5980
	.byte	0x5
	.uleb128 0xfad
	.4byte	.LASF5981
	.byte	0x5
	.uleb128 0xfae
	.4byte	.LASF5982
	.byte	0x5
	.uleb128 0xfb1
	.4byte	.LASF5983
	.byte	0x5
	.uleb128 0xfb2
	.4byte	.LASF5984
	.byte	0x5
	.uleb128 0xfb3
	.4byte	.LASF5985
	.byte	0x5
	.uleb128 0xfb4
	.4byte	.LASF5986
	.byte	0x5
	.uleb128 0xfb7
	.4byte	.LASF5987
	.byte	0x5
	.uleb128 0xfb8
	.4byte	.LASF5988
	.byte	0x5
	.uleb128 0xfb9
	.4byte	.LASF5989
	.byte	0x5
	.uleb128 0xfba
	.4byte	.LASF5990
	.byte	0x5
	.uleb128 0xfbc
	.4byte	.LASF5991
	.byte	0x5
	.uleb128 0xfc0
	.4byte	.LASF5992
	.byte	0x5
	.uleb128 0xfc1
	.4byte	.LASF5993
	.byte	0x5
	.uleb128 0xfc2
	.4byte	.LASF5994
	.byte	0x5
	.uleb128 0xfc3
	.4byte	.LASF5995
	.byte	0x5
	.uleb128 0xfc6
	.4byte	.LASF5996
	.byte	0x5
	.uleb128 0xfc7
	.4byte	.LASF5997
	.byte	0x5
	.uleb128 0xfc8
	.4byte	.LASF5998
	.byte	0x5
	.uleb128 0xfc9
	.4byte	.LASF5999
	.byte	0x5
	.uleb128 0xfcc
	.4byte	.LASF6000
	.byte	0x5
	.uleb128 0xfcd
	.4byte	.LASF6001
	.byte	0x5
	.uleb128 0xfce
	.4byte	.LASF6002
	.byte	0x5
	.uleb128 0xfcf
	.4byte	.LASF6003
	.byte	0x5
	.uleb128 0xfd1
	.4byte	.LASF6004
	.byte	0x5
	.uleb128 0xfd5
	.4byte	.LASF6005
	.byte	0x5
	.uleb128 0xfd6
	.4byte	.LASF6006
	.byte	0x5
	.uleb128 0xfd7
	.4byte	.LASF6007
	.byte	0x5
	.uleb128 0xfd8
	.4byte	.LASF6008
	.byte	0x5
	.uleb128 0xfdb
	.4byte	.LASF6009
	.byte	0x5
	.uleb128 0xfdc
	.4byte	.LASF6010
	.byte	0x5
	.uleb128 0xfdd
	.4byte	.LASF6011
	.byte	0x5
	.uleb128 0xfde
	.4byte	.LASF6012
	.byte	0x5
	.uleb128 0xfe1
	.4byte	.LASF6013
	.byte	0x5
	.uleb128 0xfe2
	.4byte	.LASF6014
	.byte	0x5
	.uleb128 0xfe3
	.4byte	.LASF6015
	.byte	0x5
	.uleb128 0xfe4
	.4byte	.LASF6016
	.byte	0x5
	.uleb128 0xfe6
	.4byte	.LASF6017
	.byte	0x5
	.uleb128 0xfea
	.4byte	.LASF6018
	.byte	0x5
	.uleb128 0xfeb
	.4byte	.LASF6019
	.byte	0x5
	.uleb128 0xfec
	.4byte	.LASF6020
	.byte	0x5
	.uleb128 0xfed
	.4byte	.LASF6021
	.byte	0x5
	.uleb128 0xff0
	.4byte	.LASF6022
	.byte	0x5
	.uleb128 0xff1
	.4byte	.LASF6023
	.byte	0x5
	.uleb128 0xff2
	.4byte	.LASF6024
	.byte	0x5
	.uleb128 0xff3
	.4byte	.LASF6025
	.byte	0x5
	.uleb128 0xff6
	.4byte	.LASF6026
	.byte	0x5
	.uleb128 0xff7
	.4byte	.LASF6027
	.byte	0x5
	.uleb128 0xff8
	.4byte	.LASF6028
	.byte	0x5
	.uleb128 0xff9
	.4byte	.LASF6029
	.byte	0x5
	.uleb128 0xffb
	.4byte	.LASF6030
	.byte	0x5
	.uleb128 0xfff
	.4byte	.LASF6031
	.byte	0x5
	.uleb128 0x1000
	.4byte	.LASF6032
	.byte	0x5
	.uleb128 0x1001
	.4byte	.LASF6033
	.byte	0x5
	.uleb128 0x1002
	.4byte	.LASF6034
	.byte	0x5
	.uleb128 0x1005
	.4byte	.LASF6035
	.byte	0x5
	.uleb128 0x1006
	.4byte	.LASF6036
	.byte	0x5
	.uleb128 0x1007
	.4byte	.LASF6037
	.byte	0x5
	.uleb128 0x1008
	.4byte	.LASF6038
	.byte	0x5
	.uleb128 0x100b
	.4byte	.LASF6039
	.byte	0x5
	.uleb128 0x100c
	.4byte	.LASF6040
	.byte	0x5
	.uleb128 0x100d
	.4byte	.LASF6041
	.byte	0x5
	.uleb128 0x100e
	.4byte	.LASF6042
	.byte	0x5
	.uleb128 0x1010
	.4byte	.LASF6043
	.byte	0x5
	.uleb128 0x1014
	.4byte	.LASF6044
	.byte	0x5
	.uleb128 0x1015
	.4byte	.LASF6045
	.byte	0x5
	.uleb128 0x1016
	.4byte	.LASF6046
	.byte	0x5
	.uleb128 0x1017
	.4byte	.LASF6047
	.byte	0x5
	.uleb128 0x101a
	.4byte	.LASF6048
	.byte	0x5
	.uleb128 0x101b
	.4byte	.LASF6049
	.byte	0x5
	.uleb128 0x101c
	.4byte	.LASF6050
	.byte	0x5
	.uleb128 0x101d
	.4byte	.LASF6051
	.byte	0x5
	.uleb128 0x1020
	.4byte	.LASF6052
	.byte	0x5
	.uleb128 0x1021
	.4byte	.LASF6053
	.byte	0x5
	.uleb128 0x1022
	.4byte	.LASF6054
	.byte	0x5
	.uleb128 0x1023
	.4byte	.LASF6055
	.byte	0x5
	.uleb128 0x1025
	.4byte	.LASF6056
	.byte	0x5
	.uleb128 0x1029
	.4byte	.LASF6057
	.byte	0x5
	.uleb128 0x102a
	.4byte	.LASF6058
	.byte	0x5
	.uleb128 0x102b
	.4byte	.LASF6059
	.byte	0x5
	.uleb128 0x102c
	.4byte	.LASF6060
	.byte	0x5
	.uleb128 0x102f
	.4byte	.LASF6061
	.byte	0x5
	.uleb128 0x1030
	.4byte	.LASF6062
	.byte	0x5
	.uleb128 0x1031
	.4byte	.LASF6063
	.byte	0x5
	.uleb128 0x1032
	.4byte	.LASF6064
	.byte	0x5
	.uleb128 0x1035
	.4byte	.LASF6065
	.byte	0x5
	.uleb128 0x1036
	.4byte	.LASF6066
	.byte	0x5
	.uleb128 0x1037
	.4byte	.LASF6067
	.byte	0x5
	.uleb128 0x1038
	.4byte	.LASF6068
	.byte	0x5
	.uleb128 0x103a
	.4byte	.LASF6069
	.byte	0x5
	.uleb128 0x103e
	.4byte	.LASF6070
	.byte	0x5
	.uleb128 0x103f
	.4byte	.LASF6071
	.byte	0x5
	.uleb128 0x1040
	.4byte	.LASF6072
	.byte	0x5
	.uleb128 0x1041
	.4byte	.LASF6073
	.byte	0x5
	.uleb128 0x1044
	.4byte	.LASF6074
	.byte	0x5
	.uleb128 0x1045
	.4byte	.LASF6075
	.byte	0x5
	.uleb128 0x1046
	.4byte	.LASF6076
	.byte	0x5
	.uleb128 0x1047
	.4byte	.LASF6077
	.byte	0x5
	.uleb128 0x104a
	.4byte	.LASF6078
	.byte	0x5
	.uleb128 0x104b
	.4byte	.LASF6079
	.byte	0x5
	.uleb128 0x104c
	.4byte	.LASF6080
	.byte	0x5
	.uleb128 0x104d
	.4byte	.LASF6081
	.byte	0x5
	.uleb128 0x104f
	.4byte	.LASF6082
	.byte	0x5
	.uleb128 0x1053
	.4byte	.LASF6083
	.byte	0x5
	.uleb128 0x1054
	.4byte	.LASF6084
	.byte	0x5
	.uleb128 0x1055
	.4byte	.LASF6085
	.byte	0x5
	.uleb128 0x1056
	.4byte	.LASF6086
	.byte	0x5
	.uleb128 0x1059
	.4byte	.LASF6087
	.byte	0x5
	.uleb128 0x105a
	.4byte	.LASF6088
	.byte	0x5
	.uleb128 0x105b
	.4byte	.LASF6089
	.byte	0x5
	.uleb128 0x105c
	.4byte	.LASF6090
	.byte	0x5
	.uleb128 0x105f
	.4byte	.LASF6091
	.byte	0x5
	.uleb128 0x1060
	.4byte	.LASF6092
	.byte	0x5
	.uleb128 0x1061
	.4byte	.LASF6093
	.byte	0x5
	.uleb128 0x1062
	.4byte	.LASF6094
	.byte	0x5
	.uleb128 0x1064
	.4byte	.LASF6095
	.byte	0x5
	.uleb128 0x1068
	.4byte	.LASF6096
	.byte	0x5
	.uleb128 0x1069
	.4byte	.LASF6097
	.byte	0x5
	.uleb128 0x106a
	.4byte	.LASF6098
	.byte	0x5
	.uleb128 0x106b
	.4byte	.LASF6099
	.byte	0x5
	.uleb128 0x106e
	.4byte	.LASF6100
	.byte	0x5
	.uleb128 0x106f
	.4byte	.LASF6101
	.byte	0x5
	.uleb128 0x1070
	.4byte	.LASF6102
	.byte	0x5
	.uleb128 0x1071
	.4byte	.LASF6103
	.byte	0x5
	.uleb128 0x1074
	.4byte	.LASF6104
	.byte	0x5
	.uleb128 0x1075
	.4byte	.LASF6105
	.byte	0x5
	.uleb128 0x1076
	.4byte	.LASF6106
	.byte	0x5
	.uleb128 0x1077
	.4byte	.LASF6107
	.byte	0x5
	.uleb128 0x1079
	.4byte	.LASF6108
	.byte	0x5
	.uleb128 0x107d
	.4byte	.LASF6109
	.byte	0x5
	.uleb128 0x107e
	.4byte	.LASF6110
	.byte	0x5
	.uleb128 0x107f
	.4byte	.LASF6111
	.byte	0x5
	.uleb128 0x1080
	.4byte	.LASF6112
	.byte	0x5
	.uleb128 0x1083
	.4byte	.LASF6113
	.byte	0x5
	.uleb128 0x1084
	.4byte	.LASF6114
	.byte	0x5
	.uleb128 0x1085
	.4byte	.LASF6115
	.byte	0x5
	.uleb128 0x1086
	.4byte	.LASF6116
	.byte	0x5
	.uleb128 0x1089
	.4byte	.LASF6117
	.byte	0x5
	.uleb128 0x108a
	.4byte	.LASF6118
	.byte	0x5
	.uleb128 0x108b
	.4byte	.LASF6119
	.byte	0x5
	.uleb128 0x108c
	.4byte	.LASF6120
	.byte	0x5
	.uleb128 0x108e
	.4byte	.LASF6121
	.byte	0x5
	.uleb128 0x1092
	.4byte	.LASF6122
	.byte	0x5
	.uleb128 0x1093
	.4byte	.LASF6123
	.byte	0x5
	.uleb128 0x1094
	.4byte	.LASF6124
	.byte	0x5
	.uleb128 0x1095
	.4byte	.LASF6125
	.byte	0x5
	.uleb128 0x1098
	.4byte	.LASF6126
	.byte	0x5
	.uleb128 0x1099
	.4byte	.LASF6127
	.byte	0x5
	.uleb128 0x109a
	.4byte	.LASF6128
	.byte	0x5
	.uleb128 0x109b
	.4byte	.LASF6129
	.byte	0x5
	.uleb128 0x109e
	.4byte	.LASF6130
	.byte	0x5
	.uleb128 0x109f
	.4byte	.LASF6131
	.byte	0x5
	.uleb128 0x10a0
	.4byte	.LASF6132
	.byte	0x5
	.uleb128 0x10a1
	.4byte	.LASF6133
	.byte	0x5
	.uleb128 0x10a3
	.4byte	.LASF6134
	.byte	0x5
	.uleb128 0x10a7
	.4byte	.LASF6135
	.byte	0x5
	.uleb128 0x10a8
	.4byte	.LASF6136
	.byte	0x5
	.uleb128 0x10a9
	.4byte	.LASF6137
	.byte	0x5
	.uleb128 0x10aa
	.4byte	.LASF6138
	.byte	0x5
	.uleb128 0x10ad
	.4byte	.LASF6139
	.byte	0x5
	.uleb128 0x10ae
	.4byte	.LASF6140
	.byte	0x5
	.uleb128 0x10af
	.4byte	.LASF6141
	.byte	0x5
	.uleb128 0x10b0
	.4byte	.LASF6142
	.byte	0x5
	.uleb128 0x10b3
	.4byte	.LASF6143
	.byte	0x5
	.uleb128 0x10b4
	.4byte	.LASF6144
	.byte	0x5
	.uleb128 0x10b5
	.4byte	.LASF6145
	.byte	0x5
	.uleb128 0x10b6
	.4byte	.LASF6146
	.byte	0x5
	.uleb128 0x10b8
	.4byte	.LASF6147
	.byte	0x5
	.uleb128 0x10bc
	.4byte	.LASF6148
	.byte	0x5
	.uleb128 0x10bd
	.4byte	.LASF6149
	.byte	0x5
	.uleb128 0x10be
	.4byte	.LASF6150
	.byte	0x5
	.uleb128 0x10bf
	.4byte	.LASF6151
	.byte	0x5
	.uleb128 0x10c2
	.4byte	.LASF6152
	.byte	0x5
	.uleb128 0x10c3
	.4byte	.LASF6153
	.byte	0x5
	.uleb128 0x10c4
	.4byte	.LASF6154
	.byte	0x5
	.uleb128 0x10c5
	.4byte	.LASF6155
	.byte	0x5
	.uleb128 0x10c8
	.4byte	.LASF6156
	.byte	0x5
	.uleb128 0x10c9
	.4byte	.LASF6157
	.byte	0x5
	.uleb128 0x10ca
	.4byte	.LASF6158
	.byte	0x5
	.uleb128 0x10cb
	.4byte	.LASF6159
	.byte	0x5
	.uleb128 0x10cd
	.4byte	.LASF6160
	.byte	0x5
	.uleb128 0x10d1
	.4byte	.LASF6161
	.byte	0x5
	.uleb128 0x10d2
	.4byte	.LASF6162
	.byte	0x5
	.uleb128 0x10d3
	.4byte	.LASF6163
	.byte	0x5
	.uleb128 0x10d4
	.4byte	.LASF6164
	.byte	0x5
	.uleb128 0x10d7
	.4byte	.LASF6165
	.byte	0x5
	.uleb128 0x10d8
	.4byte	.LASF6166
	.byte	0x5
	.uleb128 0x10d9
	.4byte	.LASF6167
	.byte	0x5
	.uleb128 0x10da
	.4byte	.LASF6168
	.byte	0x5
	.uleb128 0x10dd
	.4byte	.LASF6169
	.byte	0x5
	.uleb128 0x10de
	.4byte	.LASF6170
	.byte	0x5
	.uleb128 0x10df
	.4byte	.LASF6171
	.byte	0x5
	.uleb128 0x10e0
	.4byte	.LASF6172
	.byte	0x5
	.uleb128 0x10e2
	.4byte	.LASF6173
	.byte	0x5
	.uleb128 0x10e6
	.4byte	.LASF6174
	.byte	0x5
	.uleb128 0x10e7
	.4byte	.LASF6175
	.byte	0x5
	.uleb128 0x10e8
	.4byte	.LASF6176
	.byte	0x5
	.uleb128 0x10e9
	.4byte	.LASF6177
	.byte	0x5
	.uleb128 0x10ec
	.4byte	.LASF6178
	.byte	0x5
	.uleb128 0x10ed
	.4byte	.LASF6179
	.byte	0x5
	.uleb128 0x10ee
	.4byte	.LASF6180
	.byte	0x5
	.uleb128 0x10ef
	.4byte	.LASF6181
	.byte	0x5
	.uleb128 0x10f2
	.4byte	.LASF6182
	.byte	0x5
	.uleb128 0x10f3
	.4byte	.LASF6183
	.byte	0x5
	.uleb128 0x10f4
	.4byte	.LASF6184
	.byte	0x5
	.uleb128 0x10f5
	.4byte	.LASF6185
	.byte	0x5
	.uleb128 0x10f7
	.4byte	.LASF6186
	.byte	0x5
	.uleb128 0x10fb
	.4byte	.LASF6187
	.byte	0x5
	.uleb128 0x10fc
	.4byte	.LASF6188
	.byte	0x5
	.uleb128 0x10fd
	.4byte	.LASF6189
	.byte	0x5
	.uleb128 0x10fe
	.4byte	.LASF6190
	.byte	0x5
	.uleb128 0x1101
	.4byte	.LASF6191
	.byte	0x5
	.uleb128 0x1102
	.4byte	.LASF6192
	.byte	0x5
	.uleb128 0x1103
	.4byte	.LASF6193
	.byte	0x5
	.uleb128 0x1104
	.4byte	.LASF6194
	.byte	0x5
	.uleb128 0x1107
	.4byte	.LASF6195
	.byte	0x5
	.uleb128 0x1108
	.4byte	.LASF6196
	.byte	0x5
	.uleb128 0x1109
	.4byte	.LASF6197
	.byte	0x5
	.uleb128 0x110a
	.4byte	.LASF6198
	.byte	0x5
	.uleb128 0x110c
	.4byte	.LASF6199
	.byte	0x5
	.uleb128 0x1110
	.4byte	.LASF6200
	.byte	0x5
	.uleb128 0x1111
	.4byte	.LASF6201
	.byte	0x5
	.uleb128 0x1112
	.4byte	.LASF6202
	.byte	0x5
	.uleb128 0x1113
	.4byte	.LASF6203
	.byte	0x5
	.uleb128 0x1116
	.4byte	.LASF6204
	.byte	0x5
	.uleb128 0x1117
	.4byte	.LASF6205
	.byte	0x5
	.uleb128 0x1118
	.4byte	.LASF6206
	.byte	0x5
	.uleb128 0x1119
	.4byte	.LASF6207
	.byte	0x5
	.uleb128 0x111c
	.4byte	.LASF6208
	.byte	0x5
	.uleb128 0x111d
	.4byte	.LASF6209
	.byte	0x5
	.uleb128 0x111e
	.4byte	.LASF6210
	.byte	0x5
	.uleb128 0x111f
	.4byte	.LASF6211
	.byte	0x5
	.uleb128 0x1121
	.4byte	.LASF6212
	.byte	0x5
	.uleb128 0x1125
	.4byte	.LASF6213
	.byte	0x5
	.uleb128 0x1126
	.4byte	.LASF6214
	.byte	0x5
	.uleb128 0x1127
	.4byte	.LASF6215
	.byte	0x5
	.uleb128 0x1128
	.4byte	.LASF6216
	.byte	0x5
	.uleb128 0x112b
	.4byte	.LASF6217
	.byte	0x5
	.uleb128 0x112c
	.4byte	.LASF6218
	.byte	0x5
	.uleb128 0x112d
	.4byte	.LASF6219
	.byte	0x5
	.uleb128 0x112e
	.4byte	.LASF6220
	.byte	0x5
	.uleb128 0x1131
	.4byte	.LASF6221
	.byte	0x5
	.uleb128 0x1132
	.4byte	.LASF6222
	.byte	0x5
	.uleb128 0x1133
	.4byte	.LASF6223
	.byte	0x5
	.uleb128 0x1134
	.4byte	.LASF6224
	.byte	0x5
	.uleb128 0x1136
	.4byte	.LASF6225
	.byte	0x5
	.uleb128 0x113a
	.4byte	.LASF6226
	.byte	0x5
	.uleb128 0x113b
	.4byte	.LASF6227
	.byte	0x5
	.uleb128 0x113c
	.4byte	.LASF6228
	.byte	0x5
	.uleb128 0x113d
	.4byte	.LASF6229
	.byte	0x5
	.uleb128 0x1140
	.4byte	.LASF6230
	.byte	0x5
	.uleb128 0x1141
	.4byte	.LASF6231
	.byte	0x5
	.uleb128 0x1142
	.4byte	.LASF6232
	.byte	0x5
	.uleb128 0x1143
	.4byte	.LASF6233
	.byte	0x5
	.uleb128 0x1146
	.4byte	.LASF6234
	.byte	0x5
	.uleb128 0x1147
	.4byte	.LASF6235
	.byte	0x5
	.uleb128 0x1148
	.4byte	.LASF6236
	.byte	0x5
	.uleb128 0x1149
	.4byte	.LASF6237
	.byte	0x5
	.uleb128 0x114b
	.4byte	.LASF6238
	.byte	0x5
	.uleb128 0x114f
	.4byte	.LASF6239
	.byte	0x5
	.uleb128 0x1150
	.4byte	.LASF6240
	.byte	0x5
	.uleb128 0x1151
	.4byte	.LASF6241
	.byte	0x5
	.uleb128 0x1152
	.4byte	.LASF6242
	.byte	0x5
	.uleb128 0x1155
	.4byte	.LASF6243
	.byte	0x5
	.uleb128 0x1156
	.4byte	.LASF6244
	.byte	0x5
	.uleb128 0x1157
	.4byte	.LASF6245
	.byte	0x5
	.uleb128 0x1158
	.4byte	.LASF6246
	.byte	0x5
	.uleb128 0x115b
	.4byte	.LASF6247
	.byte	0x5
	.uleb128 0x115c
	.4byte	.LASF6248
	.byte	0x5
	.uleb128 0x115d
	.4byte	.LASF6249
	.byte	0x5
	.uleb128 0x115e
	.4byte	.LASF6250
	.byte	0x5
	.uleb128 0x1160
	.4byte	.LASF6251
	.byte	0x5
	.uleb128 0x1164
	.4byte	.LASF6252
	.byte	0x5
	.uleb128 0x1165
	.4byte	.LASF6253
	.byte	0x5
	.uleb128 0x1166
	.4byte	.LASF6254
	.byte	0x5
	.uleb128 0x1167
	.4byte	.LASF6255
	.byte	0x5
	.uleb128 0x116a
	.4byte	.LASF6256
	.byte	0x5
	.uleb128 0x116b
	.4byte	.LASF6257
	.byte	0x5
	.uleb128 0x116c
	.4byte	.LASF6258
	.byte	0x5
	.uleb128 0x116d
	.4byte	.LASF6259
	.byte	0x5
	.uleb128 0x1170
	.4byte	.LASF6260
	.byte	0x5
	.uleb128 0x1171
	.4byte	.LASF6261
	.byte	0x5
	.uleb128 0x1172
	.4byte	.LASF6262
	.byte	0x5
	.uleb128 0x1173
	.4byte	.LASF6263
	.byte	0x5
	.uleb128 0x1175
	.4byte	.LASF6264
	.byte	0x5
	.uleb128 0x1179
	.4byte	.LASF6265
	.byte	0x5
	.uleb128 0x117a
	.4byte	.LASF6266
	.byte	0x5
	.uleb128 0x117b
	.4byte	.LASF6267
	.byte	0x5
	.uleb128 0x117c
	.4byte	.LASF6268
	.byte	0x5
	.uleb128 0x117f
	.4byte	.LASF6269
	.byte	0x5
	.uleb128 0x1180
	.4byte	.LASF6270
	.byte	0x5
	.uleb128 0x1181
	.4byte	.LASF6271
	.byte	0x5
	.uleb128 0x1182
	.4byte	.LASF6272
	.byte	0x5
	.uleb128 0x1185
	.4byte	.LASF6273
	.byte	0x5
	.uleb128 0x1186
	.4byte	.LASF6274
	.byte	0x5
	.uleb128 0x1187
	.4byte	.LASF6275
	.byte	0x5
	.uleb128 0x1188
	.4byte	.LASF6276
	.byte	0x5
	.uleb128 0x118a
	.4byte	.LASF6277
	.byte	0x5
	.uleb128 0x118e
	.4byte	.LASF6278
	.byte	0x5
	.uleb128 0x118f
	.4byte	.LASF6279
	.byte	0x5
	.uleb128 0x1190
	.4byte	.LASF6280
	.byte	0x5
	.uleb128 0x1191
	.4byte	.LASF6281
	.byte	0x5
	.uleb128 0x1194
	.4byte	.LASF6282
	.byte	0x5
	.uleb128 0x1195
	.4byte	.LASF6283
	.byte	0x5
	.uleb128 0x1196
	.4byte	.LASF6284
	.byte	0x5
	.uleb128 0x1197
	.4byte	.LASF6285
	.byte	0x5
	.uleb128 0x119a
	.4byte	.LASF6286
	.byte	0x5
	.uleb128 0x119b
	.4byte	.LASF6287
	.byte	0x5
	.uleb128 0x119c
	.4byte	.LASF6288
	.byte	0x5
	.uleb128 0x119d
	.4byte	.LASF6289
	.byte	0x5
	.uleb128 0x119f
	.4byte	.LASF6290
	.byte	0x5
	.uleb128 0x11a3
	.4byte	.LASF6291
	.byte	0x5
	.uleb128 0x11a4
	.4byte	.LASF6292
	.byte	0x5
	.uleb128 0x11a5
	.4byte	.LASF6293
	.byte	0x5
	.uleb128 0x11a6
	.4byte	.LASF6294
	.byte	0x5
	.uleb128 0x11a9
	.4byte	.LASF6295
	.byte	0x5
	.uleb128 0x11aa
	.4byte	.LASF6296
	.byte	0x5
	.uleb128 0x11ab
	.4byte	.LASF6297
	.byte	0x5
	.uleb128 0x11ac
	.4byte	.LASF6298
	.byte	0x5
	.uleb128 0x11af
	.4byte	.LASF6299
	.byte	0x5
	.uleb128 0x11b0
	.4byte	.LASF6300
	.byte	0x5
	.uleb128 0x11b1
	.4byte	.LASF6301
	.byte	0x5
	.uleb128 0x11b2
	.4byte	.LASF6302
	.byte	0x5
	.uleb128 0x11b4
	.4byte	.LASF6303
	.byte	0x5
	.uleb128 0x11b8
	.4byte	.LASF6304
	.byte	0x5
	.uleb128 0x11b9
	.4byte	.LASF6305
	.byte	0x5
	.uleb128 0x11ba
	.4byte	.LASF6306
	.byte	0x5
	.uleb128 0x11bb
	.4byte	.LASF6307
	.byte	0x5
	.uleb128 0x11be
	.4byte	.LASF6308
	.byte	0x5
	.uleb128 0x11bf
	.4byte	.LASF6309
	.byte	0x5
	.uleb128 0x11c0
	.4byte	.LASF6310
	.byte	0x5
	.uleb128 0x11c1
	.4byte	.LASF6311
	.byte	0x5
	.uleb128 0x11c4
	.4byte	.LASF6312
	.byte	0x5
	.uleb128 0x11c5
	.4byte	.LASF6313
	.byte	0x5
	.uleb128 0x11c6
	.4byte	.LASF6314
	.byte	0x5
	.uleb128 0x11c7
	.4byte	.LASF6315
	.byte	0x5
	.uleb128 0x11c9
	.4byte	.LASF6316
	.byte	0x5
	.uleb128 0x11cd
	.4byte	.LASF6317
	.byte	0x5
	.uleb128 0x11ce
	.4byte	.LASF6318
	.byte	0x5
	.uleb128 0x11cf
	.4byte	.LASF6319
	.byte	0x5
	.uleb128 0x11d0
	.4byte	.LASF6320
	.byte	0x5
	.uleb128 0x11d3
	.4byte	.LASF6321
	.byte	0x5
	.uleb128 0x11d4
	.4byte	.LASF6322
	.byte	0x5
	.uleb128 0x11d5
	.4byte	.LASF6323
	.byte	0x5
	.uleb128 0x11d6
	.4byte	.LASF6324
	.byte	0x5
	.uleb128 0x11d9
	.4byte	.LASF6325
	.byte	0x5
	.uleb128 0x11da
	.4byte	.LASF6326
	.byte	0x5
	.uleb128 0x11db
	.4byte	.LASF6327
	.byte	0x5
	.uleb128 0x11dc
	.4byte	.LASF6328
	.byte	0x5
	.uleb128 0x11de
	.4byte	.LASF6329
	.byte	0x5
	.uleb128 0x11e2
	.4byte	.LASF6330
	.byte	0x5
	.uleb128 0x11e3
	.4byte	.LASF6331
	.byte	0x5
	.uleb128 0x11e4
	.4byte	.LASF6332
	.byte	0x5
	.uleb128 0x11e5
	.4byte	.LASF6333
	.byte	0x5
	.uleb128 0x11e8
	.4byte	.LASF6334
	.byte	0x5
	.uleb128 0x11e9
	.4byte	.LASF6335
	.byte	0x5
	.uleb128 0x11ea
	.4byte	.LASF6336
	.byte	0x5
	.uleb128 0x11eb
	.4byte	.LASF6337
	.byte	0x5
	.uleb128 0x11ee
	.4byte	.LASF6338
	.byte	0x5
	.uleb128 0x11ef
	.4byte	.LASF6339
	.byte	0x5
	.uleb128 0x11f0
	.4byte	.LASF6340
	.byte	0x5
	.uleb128 0x11f1
	.4byte	.LASF6341
	.byte	0x5
	.uleb128 0x11f3
	.4byte	.LASF6342
	.byte	0x5
	.uleb128 0x11f7
	.4byte	.LASF6343
	.byte	0x5
	.uleb128 0x11f8
	.4byte	.LASF6344
	.byte	0x5
	.uleb128 0x11f9
	.4byte	.LASF6345
	.byte	0x5
	.uleb128 0x11fa
	.4byte	.LASF6346
	.byte	0x5
	.uleb128 0x11fd
	.4byte	.LASF6347
	.byte	0x5
	.uleb128 0x11fe
	.4byte	.LASF6348
	.byte	0x5
	.uleb128 0x11ff
	.4byte	.LASF6349
	.byte	0x5
	.uleb128 0x1200
	.4byte	.LASF6350
	.byte	0x5
	.uleb128 0x1203
	.4byte	.LASF6351
	.byte	0x5
	.uleb128 0x1204
	.4byte	.LASF6352
	.byte	0x5
	.uleb128 0x1205
	.4byte	.LASF6353
	.byte	0x5
	.uleb128 0x1206
	.4byte	.LASF6354
	.byte	0x5
	.uleb128 0x1208
	.4byte	.LASF6355
	.byte	0x5
	.uleb128 0x120c
	.4byte	.LASF6356
	.byte	0x5
	.uleb128 0x120d
	.4byte	.LASF6357
	.byte	0x5
	.uleb128 0x120e
	.4byte	.LASF6358
	.byte	0x5
	.uleb128 0x120f
	.4byte	.LASF6359
	.byte	0x5
	.uleb128 0x1212
	.4byte	.LASF6360
	.byte	0x5
	.uleb128 0x1213
	.4byte	.LASF6361
	.byte	0x5
	.uleb128 0x1214
	.4byte	.LASF6362
	.byte	0x5
	.uleb128 0x1215
	.4byte	.LASF6363
	.byte	0x5
	.uleb128 0x1218
	.4byte	.LASF6364
	.byte	0x5
	.uleb128 0x1219
	.4byte	.LASF6365
	.byte	0x5
	.uleb128 0x121a
	.4byte	.LASF6366
	.byte	0x5
	.uleb128 0x121b
	.4byte	.LASF6367
	.byte	0x5
	.uleb128 0x121d
	.4byte	.LASF6368
	.byte	0x5
	.uleb128 0x1221
	.4byte	.LASF6369
	.byte	0x5
	.uleb128 0x1222
	.4byte	.LASF6370
	.byte	0x5
	.uleb128 0x1223
	.4byte	.LASF6371
	.byte	0x5
	.uleb128 0x1224
	.4byte	.LASF6372
	.byte	0x5
	.uleb128 0x1227
	.4byte	.LASF6373
	.byte	0x5
	.uleb128 0x1228
	.4byte	.LASF6374
	.byte	0x5
	.uleb128 0x1229
	.4byte	.LASF6375
	.byte	0x5
	.uleb128 0x122a
	.4byte	.LASF6376
	.byte	0x5
	.uleb128 0x122d
	.4byte	.LASF6377
	.byte	0x5
	.uleb128 0x122e
	.4byte	.LASF6378
	.byte	0x5
	.uleb128 0x122f
	.4byte	.LASF6379
	.byte	0x5
	.uleb128 0x1230
	.4byte	.LASF6380
	.byte	0x5
	.uleb128 0x1232
	.4byte	.LASF6381
	.byte	0x5
	.uleb128 0x1236
	.4byte	.LASF6382
	.byte	0x5
	.uleb128 0x1237
	.4byte	.LASF6383
	.byte	0x5
	.uleb128 0x1238
	.4byte	.LASF6384
	.byte	0x5
	.uleb128 0x1239
	.4byte	.LASF6385
	.byte	0x5
	.uleb128 0x123c
	.4byte	.LASF6386
	.byte	0x5
	.uleb128 0x123d
	.4byte	.LASF6387
	.byte	0x5
	.uleb128 0x123e
	.4byte	.LASF6388
	.byte	0x5
	.uleb128 0x123f
	.4byte	.LASF6389
	.byte	0x5
	.uleb128 0x1242
	.4byte	.LASF6390
	.byte	0x5
	.uleb128 0x1243
	.4byte	.LASF6391
	.byte	0x5
	.uleb128 0x1244
	.4byte	.LASF6392
	.byte	0x5
	.uleb128 0x1245
	.4byte	.LASF6393
	.byte	0x5
	.uleb128 0x1247
	.4byte	.LASF6394
	.byte	0x5
	.uleb128 0x124b
	.4byte	.LASF6395
	.byte	0x5
	.uleb128 0x124c
	.4byte	.LASF6396
	.byte	0x5
	.uleb128 0x124d
	.4byte	.LASF6397
	.byte	0x5
	.uleb128 0x124e
	.4byte	.LASF6398
	.byte	0x5
	.uleb128 0x1251
	.4byte	.LASF6399
	.byte	0x5
	.uleb128 0x1252
	.4byte	.LASF6400
	.byte	0x5
	.uleb128 0x1253
	.4byte	.LASF6401
	.byte	0x5
	.uleb128 0x1254
	.4byte	.LASF6402
	.byte	0x5
	.uleb128 0x1257
	.4byte	.LASF6403
	.byte	0x5
	.uleb128 0x1258
	.4byte	.LASF6404
	.byte	0x5
	.uleb128 0x1259
	.4byte	.LASF6405
	.byte	0x5
	.uleb128 0x125a
	.4byte	.LASF6406
	.byte	0x5
	.uleb128 0x125c
	.4byte	.LASF6407
	.byte	0x5
	.uleb128 0x1260
	.4byte	.LASF6408
	.byte	0x5
	.uleb128 0x1261
	.4byte	.LASF6409
	.byte	0x5
	.uleb128 0x1262
	.4byte	.LASF6410
	.byte	0x5
	.uleb128 0x1263
	.4byte	.LASF6411
	.byte	0x5
	.uleb128 0x1266
	.4byte	.LASF6412
	.byte	0x5
	.uleb128 0x1267
	.4byte	.LASF6413
	.byte	0x5
	.uleb128 0x1268
	.4byte	.LASF6414
	.byte	0x5
	.uleb128 0x1269
	.4byte	.LASF6415
	.byte	0x5
	.uleb128 0x126c
	.4byte	.LASF6416
	.byte	0x5
	.uleb128 0x126d
	.4byte	.LASF6417
	.byte	0x5
	.uleb128 0x126e
	.4byte	.LASF6418
	.byte	0x5
	.uleb128 0x126f
	.4byte	.LASF6419
	.byte	0x5
	.uleb128 0x1271
	.4byte	.LASF6420
	.byte	0x5
	.uleb128 0x1275
	.4byte	.LASF6421
	.byte	0x5
	.uleb128 0x1276
	.4byte	.LASF6422
	.byte	0x5
	.uleb128 0x1277
	.4byte	.LASF6423
	.byte	0x5
	.uleb128 0x1278
	.4byte	.LASF6424
	.byte	0x5
	.uleb128 0x127b
	.4byte	.LASF6425
	.byte	0x5
	.uleb128 0x127c
	.4byte	.LASF6426
	.byte	0x5
	.uleb128 0x127d
	.4byte	.LASF6427
	.byte	0x5
	.uleb128 0x127e
	.4byte	.LASF6428
	.byte	0x5
	.uleb128 0x1281
	.4byte	.LASF6429
	.byte	0x5
	.uleb128 0x1282
	.4byte	.LASF6430
	.byte	0x5
	.uleb128 0x1283
	.4byte	.LASF6431
	.byte	0x5
	.uleb128 0x1284
	.4byte	.LASF6432
	.byte	0x5
	.uleb128 0x1286
	.4byte	.LASF6433
	.byte	0x5
	.uleb128 0x128a
	.4byte	.LASF6434
	.byte	0x5
	.uleb128 0x128b
	.4byte	.LASF6435
	.byte	0x5
	.uleb128 0x128c
	.4byte	.LASF6436
	.byte	0x5
	.uleb128 0x128d
	.4byte	.LASF6437
	.byte	0x5
	.uleb128 0x1290
	.4byte	.LASF6438
	.byte	0x5
	.uleb128 0x1291
	.4byte	.LASF6439
	.byte	0x5
	.uleb128 0x1292
	.4byte	.LASF6440
	.byte	0x5
	.uleb128 0x1293
	.4byte	.LASF6441
	.byte	0x5
	.uleb128 0x1296
	.4byte	.LASF6442
	.byte	0x5
	.uleb128 0x1297
	.4byte	.LASF6443
	.byte	0x5
	.uleb128 0x1298
	.4byte	.LASF6444
	.byte	0x5
	.uleb128 0x1299
	.4byte	.LASF6445
	.byte	0x5
	.uleb128 0x129b
	.4byte	.LASF6446
	.byte	0x5
	.uleb128 0x129f
	.4byte	.LASF6447
	.byte	0x5
	.uleb128 0x12a0
	.4byte	.LASF6448
	.byte	0x5
	.uleb128 0x12a1
	.4byte	.LASF6449
	.byte	0x5
	.uleb128 0x12a2
	.4byte	.LASF6450
	.byte	0x5
	.uleb128 0x12a5
	.4byte	.LASF6451
	.byte	0x5
	.uleb128 0x12a6
	.4byte	.LASF6452
	.byte	0x5
	.uleb128 0x12a7
	.4byte	.LASF6453
	.byte	0x5
	.uleb128 0x12a8
	.4byte	.LASF6454
	.byte	0x5
	.uleb128 0x12ab
	.4byte	.LASF6455
	.byte	0x5
	.uleb128 0x12ac
	.4byte	.LASF6456
	.byte	0x5
	.uleb128 0x12ad
	.4byte	.LASF6457
	.byte	0x5
	.uleb128 0x12ae
	.4byte	.LASF6458
	.byte	0x5
	.uleb128 0x12b0
	.4byte	.LASF6459
	.byte	0x5
	.uleb128 0x12b4
	.4byte	.LASF6460
	.byte	0x5
	.uleb128 0x12b5
	.4byte	.LASF6461
	.byte	0x5
	.uleb128 0x12b6
	.4byte	.LASF6462
	.byte	0x5
	.uleb128 0x12b7
	.4byte	.LASF6463
	.byte	0x5
	.uleb128 0x12ba
	.4byte	.LASF6464
	.byte	0x5
	.uleb128 0x12bb
	.4byte	.LASF6465
	.byte	0x5
	.uleb128 0x12bc
	.4byte	.LASF6466
	.byte	0x5
	.uleb128 0x12bd
	.4byte	.LASF6467
	.byte	0x5
	.uleb128 0x12c0
	.4byte	.LASF6468
	.byte	0x5
	.uleb128 0x12c1
	.4byte	.LASF6469
	.byte	0x5
	.uleb128 0x12c2
	.4byte	.LASF6470
	.byte	0x5
	.uleb128 0x12c3
	.4byte	.LASF6471
	.byte	0x5
	.uleb128 0x12c5
	.4byte	.LASF6472
	.byte	0x5
	.uleb128 0x12c9
	.4byte	.LASF6473
	.byte	0x5
	.uleb128 0x12ca
	.4byte	.LASF6474
	.byte	0x5
	.uleb128 0x12cb
	.4byte	.LASF6475
	.byte	0x5
	.uleb128 0x12cc
	.4byte	.LASF6476
	.byte	0x5
	.uleb128 0x12cf
	.4byte	.LASF6477
	.byte	0x5
	.uleb128 0x12d0
	.4byte	.LASF6478
	.byte	0x5
	.uleb128 0x12d1
	.4byte	.LASF6479
	.byte	0x5
	.uleb128 0x12d2
	.4byte	.LASF6480
	.byte	0x5
	.uleb128 0x12d5
	.4byte	.LASF6481
	.byte	0x5
	.uleb128 0x12d6
	.4byte	.LASF6482
	.byte	0x5
	.uleb128 0x12d7
	.4byte	.LASF6483
	.byte	0x5
	.uleb128 0x12d8
	.4byte	.LASF6484
	.byte	0x5
	.uleb128 0x12da
	.4byte	.LASF6485
	.byte	0x5
	.uleb128 0x12de
	.4byte	.LASF6486
	.byte	0x5
	.uleb128 0x12df
	.4byte	.LASF6487
	.byte	0x5
	.uleb128 0x12e0
	.4byte	.LASF6488
	.byte	0x5
	.uleb128 0x12e1
	.4byte	.LASF6489
	.byte	0x5
	.uleb128 0x12e4
	.4byte	.LASF6490
	.byte	0x5
	.uleb128 0x12e5
	.4byte	.LASF6491
	.byte	0x5
	.uleb128 0x12e6
	.4byte	.LASF6492
	.byte	0x5
	.uleb128 0x12e7
	.4byte	.LASF6493
	.byte	0x5
	.uleb128 0x12ea
	.4byte	.LASF6494
	.byte	0x5
	.uleb128 0x12eb
	.4byte	.LASF6495
	.byte	0x5
	.uleb128 0x12ec
	.4byte	.LASF6496
	.byte	0x5
	.uleb128 0x12ed
	.4byte	.LASF6497
	.byte	0x5
	.uleb128 0x12ef
	.4byte	.LASF6498
	.byte	0x5
	.uleb128 0x12f3
	.4byte	.LASF6499
	.byte	0x5
	.uleb128 0x12f4
	.4byte	.LASF6500
	.byte	0x5
	.uleb128 0x12f5
	.4byte	.LASF6501
	.byte	0x5
	.uleb128 0x12f6
	.4byte	.LASF6502
	.byte	0x5
	.uleb128 0x12f9
	.4byte	.LASF6503
	.byte	0x5
	.uleb128 0x12fa
	.4byte	.LASF6504
	.byte	0x5
	.uleb128 0x12fb
	.4byte	.LASF6505
	.byte	0x5
	.uleb128 0x12fc
	.4byte	.LASF6506
	.byte	0x5
	.uleb128 0x12ff
	.4byte	.LASF6507
	.byte	0x5
	.uleb128 0x1300
	.4byte	.LASF6508
	.byte	0x5
	.uleb128 0x1301
	.4byte	.LASF6509
	.byte	0x5
	.uleb128 0x1302
	.4byte	.LASF6510
	.byte	0x5
	.uleb128 0x1304
	.4byte	.LASF6511
	.byte	0x5
	.uleb128 0x1308
	.4byte	.LASF6512
	.byte	0x5
	.uleb128 0x1309
	.4byte	.LASF6513
	.byte	0x5
	.uleb128 0x130a
	.4byte	.LASF6514
	.byte	0x5
	.uleb128 0x130b
	.4byte	.LASF6515
	.byte	0x5
	.uleb128 0x130e
	.4byte	.LASF6516
	.byte	0x5
	.uleb128 0x130f
	.4byte	.LASF6517
	.byte	0x5
	.uleb128 0x1310
	.4byte	.LASF6518
	.byte	0x5
	.uleb128 0x1311
	.4byte	.LASF6519
	.byte	0x5
	.uleb128 0x1314
	.4byte	.LASF6520
	.byte	0x5
	.uleb128 0x1315
	.4byte	.LASF6521
	.byte	0x5
	.uleb128 0x1316
	.4byte	.LASF6522
	.byte	0x5
	.uleb128 0x1317
	.4byte	.LASF6523
	.byte	0x5
	.uleb128 0x1319
	.4byte	.LASF6524
	.byte	0x5
	.uleb128 0x131d
	.4byte	.LASF6525
	.byte	0x5
	.uleb128 0x131e
	.4byte	.LASF6526
	.byte	0x5
	.uleb128 0x131f
	.4byte	.LASF6527
	.byte	0x5
	.uleb128 0x1320
	.4byte	.LASF6528
	.byte	0x5
	.uleb128 0x1323
	.4byte	.LASF6529
	.byte	0x5
	.uleb128 0x1324
	.4byte	.LASF6530
	.byte	0x5
	.uleb128 0x1325
	.4byte	.LASF6531
	.byte	0x5
	.uleb128 0x1326
	.4byte	.LASF6532
	.byte	0x5
	.uleb128 0x1329
	.4byte	.LASF6533
	.byte	0x5
	.uleb128 0x132a
	.4byte	.LASF6534
	.byte	0x5
	.uleb128 0x132b
	.4byte	.LASF6535
	.byte	0x5
	.uleb128 0x132c
	.4byte	.LASF6536
	.byte	0x5
	.uleb128 0x132e
	.4byte	.LASF6537
	.byte	0x5
	.uleb128 0x1332
	.4byte	.LASF6538
	.byte	0x5
	.uleb128 0x1333
	.4byte	.LASF6539
	.byte	0x5
	.uleb128 0x1334
	.4byte	.LASF6540
	.byte	0x5
	.uleb128 0x1335
	.4byte	.LASF6541
	.byte	0x5
	.uleb128 0x1338
	.4byte	.LASF6542
	.byte	0x5
	.uleb128 0x1339
	.4byte	.LASF6543
	.byte	0x5
	.uleb128 0x133a
	.4byte	.LASF6544
	.byte	0x5
	.uleb128 0x133b
	.4byte	.LASF6545
	.byte	0x5
	.uleb128 0x133e
	.4byte	.LASF6546
	.byte	0x5
	.uleb128 0x133f
	.4byte	.LASF6547
	.byte	0x5
	.uleb128 0x1340
	.4byte	.LASF6548
	.byte	0x5
	.uleb128 0x1341
	.4byte	.LASF6549
	.byte	0x5
	.uleb128 0x1343
	.4byte	.LASF6550
	.byte	0x5
	.uleb128 0x1347
	.4byte	.LASF6551
	.byte	0x5
	.uleb128 0x1348
	.4byte	.LASF6552
	.byte	0x5
	.uleb128 0x1349
	.4byte	.LASF6553
	.byte	0x5
	.uleb128 0x134a
	.4byte	.LASF6554
	.byte	0x5
	.uleb128 0x134d
	.4byte	.LASF6555
	.byte	0x5
	.uleb128 0x134e
	.4byte	.LASF6556
	.byte	0x5
	.uleb128 0x134f
	.4byte	.LASF6557
	.byte	0x5
	.uleb128 0x1350
	.4byte	.LASF6558
	.byte	0x5
	.uleb128 0x1353
	.4byte	.LASF6559
	.byte	0x5
	.uleb128 0x1354
	.4byte	.LASF6560
	.byte	0x5
	.uleb128 0x1355
	.4byte	.LASF6561
	.byte	0x5
	.uleb128 0x1356
	.4byte	.LASF6562
	.byte	0x5
	.uleb128 0x1358
	.4byte	.LASF6563
	.byte	0x5
	.uleb128 0x135c
	.4byte	.LASF6564
	.byte	0x5
	.uleb128 0x135d
	.4byte	.LASF6565
	.byte	0x5
	.uleb128 0x135e
	.4byte	.LASF6566
	.byte	0x5
	.uleb128 0x135f
	.4byte	.LASF6567
	.byte	0x5
	.uleb128 0x1362
	.4byte	.LASF6568
	.byte	0x5
	.uleb128 0x1363
	.4byte	.LASF6569
	.byte	0x5
	.uleb128 0x1364
	.4byte	.LASF6570
	.byte	0x5
	.uleb128 0x1365
	.4byte	.LASF6571
	.byte	0x5
	.uleb128 0x1368
	.4byte	.LASF6572
	.byte	0x5
	.uleb128 0x1369
	.4byte	.LASF6573
	.byte	0x5
	.uleb128 0x136a
	.4byte	.LASF6574
	.byte	0x5
	.uleb128 0x136b
	.4byte	.LASF6575
	.byte	0x5
	.uleb128 0x136d
	.4byte	.LASF6576
	.byte	0x5
	.uleb128 0x1371
	.4byte	.LASF6577
	.byte	0x5
	.uleb128 0x1372
	.4byte	.LASF6578
	.byte	0x5
	.uleb128 0x1373
	.4byte	.LASF6579
	.byte	0x5
	.uleb128 0x1374
	.4byte	.LASF6580
	.byte	0x5
	.uleb128 0x1377
	.4byte	.LASF6581
	.byte	0x5
	.uleb128 0x1378
	.4byte	.LASF6582
	.byte	0x5
	.uleb128 0x1379
	.4byte	.LASF6583
	.byte	0x5
	.uleb128 0x137a
	.4byte	.LASF6584
	.byte	0x5
	.uleb128 0x137d
	.4byte	.LASF6585
	.byte	0x5
	.uleb128 0x137e
	.4byte	.LASF6586
	.byte	0x5
	.uleb128 0x137f
	.4byte	.LASF6587
	.byte	0x5
	.uleb128 0x1380
	.4byte	.LASF6588
	.byte	0x5
	.uleb128 0x1382
	.4byte	.LASF6589
	.byte	0x5
	.uleb128 0x1386
	.4byte	.LASF6590
	.byte	0x5
	.uleb128 0x1387
	.4byte	.LASF6591
	.byte	0x5
	.uleb128 0x1388
	.4byte	.LASF6592
	.byte	0x5
	.uleb128 0x1389
	.4byte	.LASF6593
	.byte	0x5
	.uleb128 0x138c
	.4byte	.LASF6594
	.byte	0x5
	.uleb128 0x138d
	.4byte	.LASF6595
	.byte	0x5
	.uleb128 0x138e
	.4byte	.LASF6596
	.byte	0x5
	.uleb128 0x138f
	.4byte	.LASF6597
	.byte	0x5
	.uleb128 0x1392
	.4byte	.LASF6598
	.byte	0x5
	.uleb128 0x1393
	.4byte	.LASF6599
	.byte	0x5
	.uleb128 0x1394
	.4byte	.LASF6600
	.byte	0x5
	.uleb128 0x1395
	.4byte	.LASF6601
	.byte	0x5
	.uleb128 0x1397
	.4byte	.LASF6602
	.byte	0x5
	.uleb128 0x139b
	.4byte	.LASF6603
	.byte	0x5
	.uleb128 0x139c
	.4byte	.LASF6604
	.byte	0x5
	.uleb128 0x139d
	.4byte	.LASF6605
	.byte	0x5
	.uleb128 0x139e
	.4byte	.LASF6606
	.byte	0x5
	.uleb128 0x13a1
	.4byte	.LASF6607
	.byte	0x5
	.uleb128 0x13a2
	.4byte	.LASF6608
	.byte	0x5
	.uleb128 0x13a3
	.4byte	.LASF6609
	.byte	0x5
	.uleb128 0x13a4
	.4byte	.LASF6610
	.byte	0x5
	.uleb128 0x13a7
	.4byte	.LASF6611
	.byte	0x5
	.uleb128 0x13a8
	.4byte	.LASF6612
	.byte	0x5
	.uleb128 0x13a9
	.4byte	.LASF6613
	.byte	0x5
	.uleb128 0x13aa
	.4byte	.LASF6614
	.byte	0x5
	.uleb128 0x13ac
	.4byte	.LASF6615
	.byte	0x5
	.uleb128 0x13b0
	.4byte	.LASF6616
	.byte	0x5
	.uleb128 0x13b1
	.4byte	.LASF6617
	.byte	0x5
	.uleb128 0x13b2
	.4byte	.LASF6618
	.byte	0x5
	.uleb128 0x13b3
	.4byte	.LASF6619
	.byte	0x5
	.uleb128 0x13b6
	.4byte	.LASF6620
	.byte	0x5
	.uleb128 0x13b7
	.4byte	.LASF6621
	.byte	0x5
	.uleb128 0x13b8
	.4byte	.LASF6622
	.byte	0x5
	.uleb128 0x13b9
	.4byte	.LASF6623
	.byte	0x5
	.uleb128 0x13bc
	.4byte	.LASF6624
	.byte	0x5
	.uleb128 0x13bd
	.4byte	.LASF6625
	.byte	0x5
	.uleb128 0x13be
	.4byte	.LASF6626
	.byte	0x5
	.uleb128 0x13bf
	.4byte	.LASF6627
	.byte	0x5
	.uleb128 0x13c1
	.4byte	.LASF6628
	.byte	0x5
	.uleb128 0x13c5
	.4byte	.LASF6629
	.byte	0x5
	.uleb128 0x13c6
	.4byte	.LASF6630
	.byte	0x5
	.uleb128 0x13c7
	.4byte	.LASF6631
	.byte	0x5
	.uleb128 0x13c8
	.4byte	.LASF6632
	.byte	0x5
	.uleb128 0x13cb
	.4byte	.LASF6633
	.byte	0x5
	.uleb128 0x13cc
	.4byte	.LASF6634
	.byte	0x5
	.uleb128 0x13cd
	.4byte	.LASF6635
	.byte	0x5
	.uleb128 0x13ce
	.4byte	.LASF6636
	.byte	0x5
	.uleb128 0x13d1
	.4byte	.LASF6637
	.byte	0x5
	.uleb128 0x13d2
	.4byte	.LASF6638
	.byte	0x5
	.uleb128 0x13d3
	.4byte	.LASF6639
	.byte	0x5
	.uleb128 0x13d4
	.4byte	.LASF6640
	.byte	0x5
	.uleb128 0x13d6
	.4byte	.LASF6641
	.byte	0x5
	.uleb128 0x13da
	.4byte	.LASF6642
	.byte	0x5
	.uleb128 0x13db
	.4byte	.LASF6643
	.byte	0x5
	.uleb128 0x13dc
	.4byte	.LASF6644
	.byte	0x5
	.uleb128 0x13dd
	.4byte	.LASF6645
	.byte	0x5
	.uleb128 0x13e0
	.4byte	.LASF6646
	.byte	0x5
	.uleb128 0x13e1
	.4byte	.LASF6647
	.byte	0x5
	.uleb128 0x13e2
	.4byte	.LASF6648
	.byte	0x5
	.uleb128 0x13e3
	.4byte	.LASF6649
	.byte	0x5
	.uleb128 0x13e6
	.4byte	.LASF6650
	.byte	0x5
	.uleb128 0x13e7
	.4byte	.LASF6651
	.byte	0x5
	.uleb128 0x13e8
	.4byte	.LASF6652
	.byte	0x5
	.uleb128 0x13e9
	.4byte	.LASF6653
	.byte	0x5
	.uleb128 0x13eb
	.4byte	.LASF6654
	.byte	0x5
	.uleb128 0x13ef
	.4byte	.LASF6655
	.byte	0x5
	.uleb128 0x13f0
	.4byte	.LASF6656
	.byte	0x5
	.uleb128 0x13f1
	.4byte	.LASF6657
	.byte	0x5
	.uleb128 0x13f2
	.4byte	.LASF6658
	.byte	0x5
	.uleb128 0x13f5
	.4byte	.LASF6659
	.byte	0x5
	.uleb128 0x13f6
	.4byte	.LASF6660
	.byte	0x5
	.uleb128 0x13f7
	.4byte	.LASF6661
	.byte	0x5
	.uleb128 0x13f8
	.4byte	.LASF6662
	.byte	0x5
	.uleb128 0x13fb
	.4byte	.LASF6663
	.byte	0x5
	.uleb128 0x13fc
	.4byte	.LASF6664
	.byte	0x5
	.uleb128 0x13fd
	.4byte	.LASF6665
	.byte	0x5
	.uleb128 0x13fe
	.4byte	.LASF6666
	.byte	0x5
	.uleb128 0x1400
	.4byte	.LASF6667
	.byte	0x5
	.uleb128 0x1404
	.4byte	.LASF6668
	.byte	0x5
	.uleb128 0x1405
	.4byte	.LASF6669
	.byte	0x5
	.uleb128 0x1406
	.4byte	.LASF6670
	.byte	0x5
	.uleb128 0x1407
	.4byte	.LASF6671
	.byte	0x5
	.uleb128 0x140a
	.4byte	.LASF6672
	.byte	0x5
	.uleb128 0x140b
	.4byte	.LASF6673
	.byte	0x5
	.uleb128 0x140c
	.4byte	.LASF6674
	.byte	0x5
	.uleb128 0x140d
	.4byte	.LASF6675
	.byte	0x5
	.uleb128 0x1410
	.4byte	.LASF6676
	.byte	0x5
	.uleb128 0x1411
	.4byte	.LASF6677
	.byte	0x5
	.uleb128 0x1412
	.4byte	.LASF6678
	.byte	0x5
	.uleb128 0x1413
	.4byte	.LASF6679
	.byte	0x5
	.uleb128 0x1415
	.4byte	.LASF6680
	.byte	0x5
	.uleb128 0x1419
	.4byte	.LASF6681
	.byte	0x5
	.uleb128 0x141a
	.4byte	.LASF6682
	.byte	0x5
	.uleb128 0x141b
	.4byte	.LASF6683
	.byte	0x5
	.uleb128 0x141c
	.4byte	.LASF6684
	.byte	0x5
	.uleb128 0x141f
	.4byte	.LASF6685
	.byte	0x5
	.uleb128 0x1420
	.4byte	.LASF6686
	.byte	0x5
	.uleb128 0x1421
	.4byte	.LASF6687
	.byte	0x5
	.uleb128 0x1422
	.4byte	.LASF6688
	.byte	0x5
	.uleb128 0x1425
	.4byte	.LASF6689
	.byte	0x5
	.uleb128 0x1426
	.4byte	.LASF6690
	.byte	0x5
	.uleb128 0x1427
	.4byte	.LASF6691
	.byte	0x5
	.uleb128 0x1428
	.4byte	.LASF6692
	.byte	0x5
	.uleb128 0x142a
	.4byte	.LASF6693
	.byte	0x5
	.uleb128 0x142e
	.4byte	.LASF6694
	.byte	0x5
	.uleb128 0x142f
	.4byte	.LASF6695
	.byte	0x5
	.uleb128 0x1430
	.4byte	.LASF6696
	.byte	0x5
	.uleb128 0x1431
	.4byte	.LASF6697
	.byte	0x5
	.uleb128 0x1434
	.4byte	.LASF6698
	.byte	0x5
	.uleb128 0x1435
	.4byte	.LASF6699
	.byte	0x5
	.uleb128 0x1436
	.4byte	.LASF6700
	.byte	0x5
	.uleb128 0x1437
	.4byte	.LASF6701
	.byte	0x5
	.uleb128 0x143a
	.4byte	.LASF6702
	.byte	0x5
	.uleb128 0x143b
	.4byte	.LASF6703
	.byte	0x5
	.uleb128 0x143c
	.4byte	.LASF6704
	.byte	0x5
	.uleb128 0x143d
	.4byte	.LASF6705
	.byte	0x5
	.uleb128 0x143f
	.4byte	.LASF6706
	.byte	0x5
	.uleb128 0x1443
	.4byte	.LASF6707
	.byte	0x5
	.uleb128 0x1444
	.4byte	.LASF6708
	.byte	0x5
	.uleb128 0x1445
	.4byte	.LASF6709
	.byte	0x5
	.uleb128 0x1446
	.4byte	.LASF6710
	.byte	0x5
	.uleb128 0x1449
	.4byte	.LASF6711
	.byte	0x5
	.uleb128 0x144a
	.4byte	.LASF6712
	.byte	0x5
	.uleb128 0x144b
	.4byte	.LASF6713
	.byte	0x5
	.uleb128 0x144c
	.4byte	.LASF6714
	.byte	0x5
	.uleb128 0x144f
	.4byte	.LASF6715
	.byte	0x5
	.uleb128 0x1450
	.4byte	.LASF6716
	.byte	0x5
	.uleb128 0x1451
	.4byte	.LASF6717
	.byte	0x5
	.uleb128 0x1452
	.4byte	.LASF6718
	.byte	0x5
	.uleb128 0x1454
	.4byte	.LASF6719
	.byte	0x5
	.uleb128 0x1458
	.4byte	.LASF6720
	.byte	0x5
	.uleb128 0x1459
	.4byte	.LASF6721
	.byte	0x5
	.uleb128 0x145a
	.4byte	.LASF6722
	.byte	0x5
	.uleb128 0x145b
	.4byte	.LASF6723
	.byte	0x5
	.uleb128 0x145e
	.4byte	.LASF6724
	.byte	0x5
	.uleb128 0x145f
	.4byte	.LASF6725
	.byte	0x5
	.uleb128 0x1460
	.4byte	.LASF6726
	.byte	0x5
	.uleb128 0x1461
	.4byte	.LASF6727
	.byte	0x5
	.uleb128 0x1464
	.4byte	.LASF6728
	.byte	0x5
	.uleb128 0x1465
	.4byte	.LASF6729
	.byte	0x5
	.uleb128 0x1466
	.4byte	.LASF6730
	.byte	0x5
	.uleb128 0x1467
	.4byte	.LASF6731
	.byte	0x5
	.uleb128 0x1469
	.4byte	.LASF6732
	.byte	0x5
	.uleb128 0x146d
	.4byte	.LASF6733
	.byte	0x5
	.uleb128 0x146e
	.4byte	.LASF6734
	.byte	0x5
	.uleb128 0x146f
	.4byte	.LASF6735
	.byte	0x5
	.uleb128 0x1470
	.4byte	.LASF6736
	.byte	0x5
	.uleb128 0x1473
	.4byte	.LASF6737
	.byte	0x5
	.uleb128 0x1474
	.4byte	.LASF6738
	.byte	0x5
	.uleb128 0x1475
	.4byte	.LASF6739
	.byte	0x5
	.uleb128 0x1476
	.4byte	.LASF6740
	.byte	0x5
	.uleb128 0x1479
	.4byte	.LASF6741
	.byte	0x5
	.uleb128 0x147a
	.4byte	.LASF6742
	.byte	0x5
	.uleb128 0x147b
	.4byte	.LASF6743
	.byte	0x5
	.uleb128 0x147c
	.4byte	.LASF6744
	.byte	0x5
	.uleb128 0x147e
	.4byte	.LASF6745
	.byte	0x5
	.uleb128 0x1482
	.4byte	.LASF6746
	.byte	0x5
	.uleb128 0x1483
	.4byte	.LASF6747
	.byte	0x5
	.uleb128 0x1484
	.4byte	.LASF6748
	.byte	0x5
	.uleb128 0x1485
	.4byte	.LASF6749
	.byte	0x5
	.uleb128 0x1488
	.4byte	.LASF6750
	.byte	0x5
	.uleb128 0x1489
	.4byte	.LASF6751
	.byte	0x5
	.uleb128 0x148a
	.4byte	.LASF6752
	.byte	0x5
	.uleb128 0x148b
	.4byte	.LASF6753
	.byte	0x5
	.uleb128 0x148e
	.4byte	.LASF6754
	.byte	0x5
	.uleb128 0x148f
	.4byte	.LASF6755
	.byte	0x5
	.uleb128 0x1490
	.4byte	.LASF6756
	.byte	0x5
	.uleb128 0x1491
	.4byte	.LASF6757
	.byte	0x5
	.uleb128 0x1493
	.4byte	.LASF6758
	.byte	0x5
	.uleb128 0x1497
	.4byte	.LASF6759
	.byte	0x5
	.uleb128 0x1498
	.4byte	.LASF6760
	.byte	0x5
	.uleb128 0x1499
	.4byte	.LASF6761
	.byte	0x5
	.uleb128 0x149a
	.4byte	.LASF6762
	.byte	0x5
	.uleb128 0x149d
	.4byte	.LASF6763
	.byte	0x5
	.uleb128 0x149e
	.4byte	.LASF6764
	.byte	0x5
	.uleb128 0x149f
	.4byte	.LASF6765
	.byte	0x5
	.uleb128 0x14a0
	.4byte	.LASF6766
	.byte	0x5
	.uleb128 0x14a3
	.4byte	.LASF6767
	.byte	0x5
	.uleb128 0x14a4
	.4byte	.LASF6768
	.byte	0x5
	.uleb128 0x14a5
	.4byte	.LASF6769
	.byte	0x5
	.uleb128 0x14a6
	.4byte	.LASF6770
	.byte	0x5
	.uleb128 0x14a8
	.4byte	.LASF6771
	.byte	0x5
	.uleb128 0x14ac
	.4byte	.LASF6772
	.byte	0x5
	.uleb128 0x14ad
	.4byte	.LASF6773
	.byte	0x5
	.uleb128 0x14ae
	.4byte	.LASF6774
	.byte	0x5
	.uleb128 0x14af
	.4byte	.LASF6775
	.byte	0x5
	.uleb128 0x14b2
	.4byte	.LASF6776
	.byte	0x5
	.uleb128 0x14b3
	.4byte	.LASF6777
	.byte	0x5
	.uleb128 0x14b4
	.4byte	.LASF6778
	.byte	0x5
	.uleb128 0x14b5
	.4byte	.LASF6779
	.byte	0x5
	.uleb128 0x14b8
	.4byte	.LASF6780
	.byte	0x5
	.uleb128 0x14b9
	.4byte	.LASF6781
	.byte	0x5
	.uleb128 0x14ba
	.4byte	.LASF6782
	.byte	0x5
	.uleb128 0x14bb
	.4byte	.LASF6783
	.byte	0x5
	.uleb128 0x14bd
	.4byte	.LASF6784
	.byte	0x5
	.uleb128 0x14c1
	.4byte	.LASF6785
	.byte	0x5
	.uleb128 0x14c2
	.4byte	.LASF6786
	.byte	0x5
	.uleb128 0x14c3
	.4byte	.LASF6787
	.byte	0x5
	.uleb128 0x14c4
	.4byte	.LASF6788
	.byte	0x5
	.uleb128 0x14c7
	.4byte	.LASF6789
	.byte	0x5
	.uleb128 0x14c8
	.4byte	.LASF6790
	.byte	0x5
	.uleb128 0x14c9
	.4byte	.LASF6791
	.byte	0x5
	.uleb128 0x14ca
	.4byte	.LASF6792
	.byte	0x5
	.uleb128 0x14cd
	.4byte	.LASF6793
	.byte	0x5
	.uleb128 0x14ce
	.4byte	.LASF6794
	.byte	0x5
	.uleb128 0x14cf
	.4byte	.LASF6795
	.byte	0x5
	.uleb128 0x14d0
	.4byte	.LASF6796
	.byte	0x5
	.uleb128 0x14d2
	.4byte	.LASF6797
	.byte	0x5
	.uleb128 0x14d6
	.4byte	.LASF6798
	.byte	0x5
	.uleb128 0x14d7
	.4byte	.LASF6799
	.byte	0x5
	.uleb128 0x14d8
	.4byte	.LASF6800
	.byte	0x5
	.uleb128 0x14d9
	.4byte	.LASF6801
	.byte	0x5
	.uleb128 0x14dc
	.4byte	.LASF6802
	.byte	0x5
	.uleb128 0x14dd
	.4byte	.LASF6803
	.byte	0x5
	.uleb128 0x14de
	.4byte	.LASF6804
	.byte	0x5
	.uleb128 0x14df
	.4byte	.LASF6805
	.byte	0x5
	.uleb128 0x14e2
	.4byte	.LASF6806
	.byte	0x5
	.uleb128 0x14e3
	.4byte	.LASF6807
	.byte	0x5
	.uleb128 0x14e4
	.4byte	.LASF6808
	.byte	0x5
	.uleb128 0x14e5
	.4byte	.LASF6809
	.byte	0x5
	.uleb128 0x14e7
	.4byte	.LASF6810
	.byte	0x5
	.uleb128 0x14eb
	.4byte	.LASF6811
	.byte	0x5
	.uleb128 0x14ec
	.4byte	.LASF6812
	.byte	0x5
	.uleb128 0x14ed
	.4byte	.LASF6813
	.byte	0x5
	.uleb128 0x14ee
	.4byte	.LASF6814
	.byte	0x5
	.uleb128 0x14f1
	.4byte	.LASF6815
	.byte	0x5
	.uleb128 0x14f2
	.4byte	.LASF6816
	.byte	0x5
	.uleb128 0x14f3
	.4byte	.LASF6817
	.byte	0x5
	.uleb128 0x14f4
	.4byte	.LASF6818
	.byte	0x5
	.uleb128 0x14f7
	.4byte	.LASF6819
	.byte	0x5
	.uleb128 0x14f8
	.4byte	.LASF6820
	.byte	0x5
	.uleb128 0x14f9
	.4byte	.LASF6821
	.byte	0x5
	.uleb128 0x14fa
	.4byte	.LASF6822
	.byte	0x5
	.uleb128 0x14fc
	.4byte	.LASF6823
	.byte	0x5
	.uleb128 0x1500
	.4byte	.LASF6824
	.byte	0x5
	.uleb128 0x1501
	.4byte	.LASF6825
	.byte	0x5
	.uleb128 0x1502
	.4byte	.LASF6826
	.byte	0x5
	.uleb128 0x1503
	.4byte	.LASF6827
	.byte	0x5
	.uleb128 0x1506
	.4byte	.LASF6828
	.byte	0x5
	.uleb128 0x1507
	.4byte	.LASF6829
	.byte	0x5
	.uleb128 0x1508
	.4byte	.LASF6830
	.byte	0x5
	.uleb128 0x1509
	.4byte	.LASF6831
	.byte	0x5
	.uleb128 0x150c
	.4byte	.LASF6832
	.byte	0x5
	.uleb128 0x150d
	.4byte	.LASF6833
	.byte	0x5
	.uleb128 0x150e
	.4byte	.LASF6834
	.byte	0x5
	.uleb128 0x150f
	.4byte	.LASF6835
	.byte	0x5
	.uleb128 0x1511
	.4byte	.LASF6836
	.byte	0x5
	.uleb128 0x1515
	.4byte	.LASF6837
	.byte	0x5
	.uleb128 0x1516
	.4byte	.LASF6838
	.byte	0x5
	.uleb128 0x1517
	.4byte	.LASF6839
	.byte	0x5
	.uleb128 0x1518
	.4byte	.LASF6840
	.byte	0x5
	.uleb128 0x151b
	.4byte	.LASF6841
	.byte	0x5
	.uleb128 0x151c
	.4byte	.LASF6842
	.byte	0x5
	.uleb128 0x151d
	.4byte	.LASF6843
	.byte	0x5
	.uleb128 0x151e
	.4byte	.LASF6844
	.byte	0x5
	.uleb128 0x1521
	.4byte	.LASF6845
	.byte	0x5
	.uleb128 0x1522
	.4byte	.LASF6846
	.byte	0x5
	.uleb128 0x1523
	.4byte	.LASF6847
	.byte	0x5
	.uleb128 0x1524
	.4byte	.LASF6848
	.byte	0x5
	.uleb128 0x1526
	.4byte	.LASF6849
	.byte	0x5
	.uleb128 0x152a
	.4byte	.LASF6850
	.byte	0x5
	.uleb128 0x152b
	.4byte	.LASF6851
	.byte	0x5
	.uleb128 0x152c
	.4byte	.LASF6852
	.byte	0x5
	.uleb128 0x152d
	.4byte	.LASF6853
	.byte	0x5
	.uleb128 0x1530
	.4byte	.LASF6854
	.byte	0x5
	.uleb128 0x1531
	.4byte	.LASF6855
	.byte	0x5
	.uleb128 0x1532
	.4byte	.LASF6856
	.byte	0x5
	.uleb128 0x1533
	.4byte	.LASF6857
	.byte	0x5
	.uleb128 0x1536
	.4byte	.LASF6858
	.byte	0x5
	.uleb128 0x1537
	.4byte	.LASF6859
	.byte	0x5
	.uleb128 0x1538
	.4byte	.LASF6860
	.byte	0x5
	.uleb128 0x1539
	.4byte	.LASF6861
	.byte	0x5
	.uleb128 0x153b
	.4byte	.LASF6862
	.byte	0x5
	.uleb128 0x153f
	.4byte	.LASF6863
	.byte	0x5
	.uleb128 0x1540
	.4byte	.LASF6864
	.byte	0x5
	.uleb128 0x1541
	.4byte	.LASF6865
	.byte	0x5
	.uleb128 0x1542
	.4byte	.LASF6866
	.byte	0x5
	.uleb128 0x1545
	.4byte	.LASF6867
	.byte	0x5
	.uleb128 0x1546
	.4byte	.LASF6868
	.byte	0x5
	.uleb128 0x1547
	.4byte	.LASF6869
	.byte	0x5
	.uleb128 0x1548
	.4byte	.LASF6870
	.byte	0x5
	.uleb128 0x154b
	.4byte	.LASF6871
	.byte	0x5
	.uleb128 0x154c
	.4byte	.LASF6872
	.byte	0x5
	.uleb128 0x154d
	.4byte	.LASF6873
	.byte	0x5
	.uleb128 0x154e
	.4byte	.LASF6874
	.byte	0x5
	.uleb128 0x1550
	.4byte	.LASF6875
	.byte	0x5
	.uleb128 0x1554
	.4byte	.LASF6876
	.byte	0x5
	.uleb128 0x1555
	.4byte	.LASF6877
	.byte	0x5
	.uleb128 0x1556
	.4byte	.LASF6878
	.byte	0x5
	.uleb128 0x1557
	.4byte	.LASF6879
	.byte	0x5
	.uleb128 0x155a
	.4byte	.LASF6880
	.byte	0x5
	.uleb128 0x155b
	.4byte	.LASF6881
	.byte	0x5
	.uleb128 0x155c
	.4byte	.LASF6882
	.byte	0x5
	.uleb128 0x155d
	.4byte	.LASF6883
	.byte	0x5
	.uleb128 0x1560
	.4byte	.LASF6884
	.byte	0x5
	.uleb128 0x1561
	.4byte	.LASF6885
	.byte	0x5
	.uleb128 0x1562
	.4byte	.LASF6886
	.byte	0x5
	.uleb128 0x1563
	.4byte	.LASF6887
	.byte	0x5
	.uleb128 0x1565
	.4byte	.LASF6888
	.byte	0x5
	.uleb128 0x1569
	.4byte	.LASF6889
	.byte	0x5
	.uleb128 0x156a
	.4byte	.LASF6890
	.byte	0x5
	.uleb128 0x156b
	.4byte	.LASF6891
	.byte	0x5
	.uleb128 0x156c
	.4byte	.LASF6892
	.byte	0x5
	.uleb128 0x156f
	.4byte	.LASF6893
	.byte	0x5
	.uleb128 0x1570
	.4byte	.LASF6894
	.byte	0x5
	.uleb128 0x1571
	.4byte	.LASF6895
	.byte	0x5
	.uleb128 0x1572
	.4byte	.LASF6896
	.byte	0x5
	.uleb128 0x1575
	.4byte	.LASF6897
	.byte	0x5
	.uleb128 0x1576
	.4byte	.LASF6898
	.byte	0x5
	.uleb128 0x1577
	.4byte	.LASF6899
	.byte	0x5
	.uleb128 0x1578
	.4byte	.LASF6900
	.byte	0x5
	.uleb128 0x157a
	.4byte	.LASF6901
	.byte	0x5
	.uleb128 0x157e
	.4byte	.LASF6902
	.byte	0x5
	.uleb128 0x157f
	.4byte	.LASF6903
	.byte	0x5
	.uleb128 0x1580
	.4byte	.LASF6904
	.byte	0x5
	.uleb128 0x1581
	.4byte	.LASF6905
	.byte	0x5
	.uleb128 0x1584
	.4byte	.LASF6906
	.byte	0x5
	.uleb128 0x1585
	.4byte	.LASF6907
	.byte	0x5
	.uleb128 0x1586
	.4byte	.LASF6908
	.byte	0x5
	.uleb128 0x1587
	.4byte	.LASF6909
	.byte	0x5
	.uleb128 0x158a
	.4byte	.LASF6910
	.byte	0x5
	.uleb128 0x158b
	.4byte	.LASF6911
	.byte	0x5
	.uleb128 0x158c
	.4byte	.LASF6912
	.byte	0x5
	.uleb128 0x158d
	.4byte	.LASF6913
	.byte	0x5
	.uleb128 0x158f
	.4byte	.LASF6914
	.byte	0x5
	.uleb128 0x1593
	.4byte	.LASF6915
	.byte	0x5
	.uleb128 0x1594
	.4byte	.LASF6916
	.byte	0x5
	.uleb128 0x1595
	.4byte	.LASF6917
	.byte	0x5
	.uleb128 0x1596
	.4byte	.LASF6918
	.byte	0x5
	.uleb128 0x1599
	.4byte	.LASF6919
	.byte	0x5
	.uleb128 0x159a
	.4byte	.LASF6920
	.byte	0x5
	.uleb128 0x159b
	.4byte	.LASF6921
	.byte	0x5
	.uleb128 0x159c
	.4byte	.LASF6922
	.byte	0x5
	.uleb128 0x159f
	.4byte	.LASF6923
	.byte	0x5
	.uleb128 0x15a0
	.4byte	.LASF6924
	.byte	0x5
	.uleb128 0x15a1
	.4byte	.LASF6925
	.byte	0x5
	.uleb128 0x15a2
	.4byte	.LASF6926
	.byte	0x5
	.uleb128 0x15a4
	.4byte	.LASF6927
	.byte	0x5
	.uleb128 0x15a8
	.4byte	.LASF6928
	.byte	0x5
	.uleb128 0x15a9
	.4byte	.LASF6929
	.byte	0x5
	.uleb128 0x15aa
	.4byte	.LASF6930
	.byte	0x5
	.uleb128 0x15ab
	.4byte	.LASF6931
	.byte	0x5
	.uleb128 0x15ae
	.4byte	.LASF6932
	.byte	0x5
	.uleb128 0x15af
	.4byte	.LASF6933
	.byte	0x5
	.uleb128 0x15b0
	.4byte	.LASF6934
	.byte	0x5
	.uleb128 0x15b1
	.4byte	.LASF6935
	.byte	0x5
	.uleb128 0x15b4
	.4byte	.LASF6936
	.byte	0x5
	.uleb128 0x15b5
	.4byte	.LASF6937
	.byte	0x5
	.uleb128 0x15b6
	.4byte	.LASF6938
	.byte	0x5
	.uleb128 0x15b7
	.4byte	.LASF6939
	.byte	0x5
	.uleb128 0x15b9
	.4byte	.LASF6940
	.byte	0x5
	.uleb128 0x15bd
	.4byte	.LASF6941
	.byte	0x5
	.uleb128 0x15be
	.4byte	.LASF6942
	.byte	0x5
	.uleb128 0x15bf
	.4byte	.LASF6943
	.byte	0x5
	.uleb128 0x15c0
	.4byte	.LASF6944
	.byte	0x5
	.uleb128 0x15c3
	.4byte	.LASF6945
	.byte	0x5
	.uleb128 0x15c4
	.4byte	.LASF6946
	.byte	0x5
	.uleb128 0x15c5
	.4byte	.LASF6947
	.byte	0x5
	.uleb128 0x15c6
	.4byte	.LASF6948
	.byte	0x5
	.uleb128 0x15c9
	.4byte	.LASF6949
	.byte	0x5
	.uleb128 0x15ca
	.4byte	.LASF6950
	.byte	0x5
	.uleb128 0x15cb
	.4byte	.LASF6951
	.byte	0x5
	.uleb128 0x15cc
	.4byte	.LASF6952
	.byte	0x5
	.uleb128 0x15ce
	.4byte	.LASF6953
	.byte	0x5
	.uleb128 0x15d2
	.4byte	.LASF6954
	.byte	0x5
	.uleb128 0x15d3
	.4byte	.LASF6955
	.byte	0x5
	.uleb128 0x15d4
	.4byte	.LASF6956
	.byte	0x5
	.uleb128 0x15d5
	.4byte	.LASF6957
	.byte	0x5
	.uleb128 0x15d8
	.4byte	.LASF6958
	.byte	0x5
	.uleb128 0x15d9
	.4byte	.LASF6959
	.byte	0x5
	.uleb128 0x15da
	.4byte	.LASF6960
	.byte	0x5
	.uleb128 0x15db
	.4byte	.LASF6961
	.byte	0x5
	.uleb128 0x15de
	.4byte	.LASF6962
	.byte	0x5
	.uleb128 0x15df
	.4byte	.LASF6963
	.byte	0x5
	.uleb128 0x15e0
	.4byte	.LASF6964
	.byte	0x5
	.uleb128 0x15e1
	.4byte	.LASF6965
	.byte	0x5
	.uleb128 0x15e3
	.4byte	.LASF6966
	.byte	0x5
	.uleb128 0x15e7
	.4byte	.LASF6967
	.byte	0x5
	.uleb128 0x15e8
	.4byte	.LASF6968
	.byte	0x5
	.uleb128 0x15e9
	.4byte	.LASF6969
	.byte	0x5
	.uleb128 0x15ea
	.4byte	.LASF6970
	.byte	0x5
	.uleb128 0x15ed
	.4byte	.LASF6971
	.byte	0x5
	.uleb128 0x15ee
	.4byte	.LASF6972
	.byte	0x5
	.uleb128 0x15ef
	.4byte	.LASF6973
	.byte	0x5
	.uleb128 0x15f0
	.4byte	.LASF6974
	.byte	0x5
	.uleb128 0x15f3
	.4byte	.LASF6975
	.byte	0x5
	.uleb128 0x15f4
	.4byte	.LASF6976
	.byte	0x5
	.uleb128 0x15f5
	.4byte	.LASF6977
	.byte	0x5
	.uleb128 0x15f6
	.4byte	.LASF6978
	.byte	0x5
	.uleb128 0x15f8
	.4byte	.LASF6979
	.byte	0x5
	.uleb128 0x15fc
	.4byte	.LASF6980
	.byte	0x5
	.uleb128 0x15fd
	.4byte	.LASF6981
	.byte	0x5
	.uleb128 0x15fe
	.4byte	.LASF6982
	.byte	0x5
	.uleb128 0x15ff
	.4byte	.LASF6983
	.byte	0x5
	.uleb128 0x1602
	.4byte	.LASF6984
	.byte	0x5
	.uleb128 0x1603
	.4byte	.LASF6985
	.byte	0x5
	.uleb128 0x1604
	.4byte	.LASF6986
	.byte	0x5
	.uleb128 0x1605
	.4byte	.LASF6987
	.byte	0x5
	.uleb128 0x1608
	.4byte	.LASF6988
	.byte	0x5
	.uleb128 0x1609
	.4byte	.LASF6989
	.byte	0x5
	.uleb128 0x160a
	.4byte	.LASF6990
	.byte	0x5
	.uleb128 0x160b
	.4byte	.LASF6991
	.byte	0x5
	.uleb128 0x160d
	.4byte	.LASF6992
	.byte	0x5
	.uleb128 0x1611
	.4byte	.LASF6993
	.byte	0x5
	.uleb128 0x1612
	.4byte	.LASF6994
	.byte	0x5
	.uleb128 0x1613
	.4byte	.LASF6995
	.byte	0x5
	.uleb128 0x1614
	.4byte	.LASF6996
	.byte	0x5
	.uleb128 0x1617
	.4byte	.LASF6997
	.byte	0x5
	.uleb128 0x1618
	.4byte	.LASF6998
	.byte	0x5
	.uleb128 0x1619
	.4byte	.LASF6999
	.byte	0x5
	.uleb128 0x161a
	.4byte	.LASF7000
	.byte	0x5
	.uleb128 0x161d
	.4byte	.LASF7001
	.byte	0x5
	.uleb128 0x161e
	.4byte	.LASF7002
	.byte	0x5
	.uleb128 0x161f
	.4byte	.LASF7003
	.byte	0x5
	.uleb128 0x1620
	.4byte	.LASF7004
	.byte	0x5
	.uleb128 0x1622
	.4byte	.LASF7005
	.byte	0x5
	.uleb128 0x1626
	.4byte	.LASF7006
	.byte	0x5
	.uleb128 0x1627
	.4byte	.LASF7007
	.byte	0x5
	.uleb128 0x1628
	.4byte	.LASF7008
	.byte	0x5
	.uleb128 0x1629
	.4byte	.LASF7009
	.byte	0x5
	.uleb128 0x162c
	.4byte	.LASF7010
	.byte	0x5
	.uleb128 0x162d
	.4byte	.LASF7011
	.byte	0x5
	.uleb128 0x162e
	.4byte	.LASF7012
	.byte	0x5
	.uleb128 0x162f
	.4byte	.LASF7013
	.byte	0x5
	.uleb128 0x1632
	.4byte	.LASF7014
	.byte	0x5
	.uleb128 0x1633
	.4byte	.LASF7015
	.byte	0x5
	.uleb128 0x1634
	.4byte	.LASF7016
	.byte	0x5
	.uleb128 0x1635
	.4byte	.LASF7017
	.byte	0x5
	.uleb128 0x1637
	.4byte	.LASF7018
	.byte	0x5
	.uleb128 0x163b
	.4byte	.LASF7019
	.byte	0x5
	.uleb128 0x163c
	.4byte	.LASF7020
	.byte	0x5
	.uleb128 0x163d
	.4byte	.LASF7021
	.byte	0x5
	.uleb128 0x163e
	.4byte	.LASF7022
	.byte	0x5
	.uleb128 0x1641
	.4byte	.LASF7023
	.byte	0x5
	.uleb128 0x1642
	.4byte	.LASF7024
	.byte	0x5
	.uleb128 0x1643
	.4byte	.LASF7025
	.byte	0x5
	.uleb128 0x1644
	.4byte	.LASF7026
	.byte	0x5
	.uleb128 0x1647
	.4byte	.LASF7027
	.byte	0x5
	.uleb128 0x1648
	.4byte	.LASF7028
	.byte	0x5
	.uleb128 0x1649
	.4byte	.LASF7029
	.byte	0x5
	.uleb128 0x164a
	.4byte	.LASF7030
	.byte	0x5
	.uleb128 0x164c
	.4byte	.LASF7031
	.byte	0x5
	.uleb128 0x1650
	.4byte	.LASF7032
	.byte	0x5
	.uleb128 0x1651
	.4byte	.LASF7033
	.byte	0x5
	.uleb128 0x1652
	.4byte	.LASF7034
	.byte	0x5
	.uleb128 0x1653
	.4byte	.LASF7035
	.byte	0x5
	.uleb128 0x1656
	.4byte	.LASF7036
	.byte	0x5
	.uleb128 0x1657
	.4byte	.LASF7037
	.byte	0x5
	.uleb128 0x1658
	.4byte	.LASF7038
	.byte	0x5
	.uleb128 0x1659
	.4byte	.LASF7039
	.byte	0x5
	.uleb128 0x165c
	.4byte	.LASF7040
	.byte	0x5
	.uleb128 0x165d
	.4byte	.LASF7041
	.byte	0x5
	.uleb128 0x165e
	.4byte	.LASF7042
	.byte	0x5
	.uleb128 0x165f
	.4byte	.LASF7043
	.byte	0x5
	.uleb128 0x1661
	.4byte	.LASF7044
	.byte	0x5
	.uleb128 0x1665
	.4byte	.LASF7045
	.byte	0x5
	.uleb128 0x1666
	.4byte	.LASF7046
	.byte	0x5
	.uleb128 0x1667
	.4byte	.LASF7047
	.byte	0x5
	.uleb128 0x1668
	.4byte	.LASF7048
	.byte	0x5
	.uleb128 0x166b
	.4byte	.LASF7049
	.byte	0x5
	.uleb128 0x166c
	.4byte	.LASF7050
	.byte	0x5
	.uleb128 0x166d
	.4byte	.LASF7051
	.byte	0x5
	.uleb128 0x166e
	.4byte	.LASF7052
	.byte	0x5
	.uleb128 0x1671
	.4byte	.LASF7053
	.byte	0x5
	.uleb128 0x1672
	.4byte	.LASF7054
	.byte	0x5
	.uleb128 0x1673
	.4byte	.LASF7055
	.byte	0x5
	.uleb128 0x1674
	.4byte	.LASF7056
	.byte	0x5
	.uleb128 0x1676
	.4byte	.LASF7057
	.byte	0x5
	.uleb128 0x167a
	.4byte	.LASF7058
	.byte	0x5
	.uleb128 0x167b
	.4byte	.LASF7059
	.byte	0x5
	.uleb128 0x167c
	.4byte	.LASF7060
	.byte	0x5
	.uleb128 0x167d
	.4byte	.LASF7061
	.byte	0x5
	.uleb128 0x1680
	.4byte	.LASF7062
	.byte	0x5
	.uleb128 0x1681
	.4byte	.LASF7063
	.byte	0x5
	.uleb128 0x1682
	.4byte	.LASF7064
	.byte	0x5
	.uleb128 0x1683
	.4byte	.LASF7065
	.byte	0x5
	.uleb128 0x1686
	.4byte	.LASF7066
	.byte	0x5
	.uleb128 0x1687
	.4byte	.LASF7067
	.byte	0x5
	.uleb128 0x1688
	.4byte	.LASF7068
	.byte	0x5
	.uleb128 0x1689
	.4byte	.LASF7069
	.byte	0x5
	.uleb128 0x168b
	.4byte	.LASF7070
	.byte	0x5
	.uleb128 0x168f
	.4byte	.LASF7071
	.byte	0x5
	.uleb128 0x1690
	.4byte	.LASF7072
	.byte	0x5
	.uleb128 0x1691
	.4byte	.LASF7073
	.byte	0x5
	.uleb128 0x1692
	.4byte	.LASF7074
	.byte	0x5
	.uleb128 0x1695
	.4byte	.LASF7075
	.byte	0x5
	.uleb128 0x1696
	.4byte	.LASF7076
	.byte	0x5
	.uleb128 0x1697
	.4byte	.LASF7077
	.byte	0x5
	.uleb128 0x1698
	.4byte	.LASF7078
	.byte	0x5
	.uleb128 0x169b
	.4byte	.LASF7079
	.byte	0x5
	.uleb128 0x169c
	.4byte	.LASF7080
	.byte	0x5
	.uleb128 0x169d
	.4byte	.LASF7081
	.byte	0x5
	.uleb128 0x169e
	.4byte	.LASF7082
	.byte	0x5
	.uleb128 0x16a0
	.4byte	.LASF7083
	.byte	0x5
	.uleb128 0x16a4
	.4byte	.LASF7084
	.byte	0x5
	.uleb128 0x16a5
	.4byte	.LASF7085
	.byte	0x5
	.uleb128 0x16a6
	.4byte	.LASF7086
	.byte	0x5
	.uleb128 0x16a7
	.4byte	.LASF7087
	.byte	0x5
	.uleb128 0x16aa
	.4byte	.LASF7088
	.byte	0x5
	.uleb128 0x16ab
	.4byte	.LASF7089
	.byte	0x5
	.uleb128 0x16ac
	.4byte	.LASF7090
	.byte	0x5
	.uleb128 0x16ad
	.4byte	.LASF7091
	.byte	0x5
	.uleb128 0x16b0
	.4byte	.LASF7092
	.byte	0x5
	.uleb128 0x16b1
	.4byte	.LASF7093
	.byte	0x5
	.uleb128 0x16b2
	.4byte	.LASF7094
	.byte	0x5
	.uleb128 0x16b3
	.4byte	.LASF7095
	.byte	0x5
	.uleb128 0x16b5
	.4byte	.LASF7096
	.byte	0x5
	.uleb128 0x16b9
	.4byte	.LASF7097
	.byte	0x5
	.uleb128 0x16ba
	.4byte	.LASF7098
	.byte	0x5
	.uleb128 0x16bb
	.4byte	.LASF7099
	.byte	0x5
	.uleb128 0x16bc
	.4byte	.LASF7100
	.byte	0x5
	.uleb128 0x16bf
	.4byte	.LASF7101
	.byte	0x5
	.uleb128 0x16c0
	.4byte	.LASF7102
	.byte	0x5
	.uleb128 0x16c1
	.4byte	.LASF7103
	.byte	0x5
	.uleb128 0x16c2
	.4byte	.LASF7104
	.byte	0x5
	.uleb128 0x16c5
	.4byte	.LASF7105
	.byte	0x5
	.uleb128 0x16c6
	.4byte	.LASF7106
	.byte	0x5
	.uleb128 0x16c7
	.4byte	.LASF7107
	.byte	0x5
	.uleb128 0x16c8
	.4byte	.LASF7108
	.byte	0x5
	.uleb128 0x16ca
	.4byte	.LASF7109
	.byte	0x5
	.uleb128 0x16ce
	.4byte	.LASF7110
	.byte	0x5
	.uleb128 0x16cf
	.4byte	.LASF7111
	.byte	0x5
	.uleb128 0x16d0
	.4byte	.LASF7112
	.byte	0x5
	.uleb128 0x16d1
	.4byte	.LASF7113
	.byte	0x5
	.uleb128 0x16d4
	.4byte	.LASF7114
	.byte	0x5
	.uleb128 0x16d5
	.4byte	.LASF7115
	.byte	0x5
	.uleb128 0x16d6
	.4byte	.LASF7116
	.byte	0x5
	.uleb128 0x16d7
	.4byte	.LASF7117
	.byte	0x5
	.uleb128 0x16da
	.4byte	.LASF7118
	.byte	0x5
	.uleb128 0x16db
	.4byte	.LASF7119
	.byte	0x5
	.uleb128 0x16dc
	.4byte	.LASF7120
	.byte	0x5
	.uleb128 0x16dd
	.4byte	.LASF7121
	.byte	0x5
	.uleb128 0x16df
	.4byte	.LASF7122
	.byte	0x5
	.uleb128 0x16e3
	.4byte	.LASF7123
	.byte	0x5
	.uleb128 0x16e4
	.4byte	.LASF7124
	.byte	0x5
	.uleb128 0x16e5
	.4byte	.LASF7125
	.byte	0x5
	.uleb128 0x16e6
	.4byte	.LASF7126
	.byte	0x5
	.uleb128 0x16e9
	.4byte	.LASF7127
	.byte	0x5
	.uleb128 0x16ea
	.4byte	.LASF7128
	.byte	0x5
	.uleb128 0x16eb
	.4byte	.LASF7129
	.byte	0x5
	.uleb128 0x16ec
	.4byte	.LASF7130
	.byte	0x5
	.uleb128 0x16ef
	.4byte	.LASF7131
	.byte	0x5
	.uleb128 0x16f0
	.4byte	.LASF7132
	.byte	0x5
	.uleb128 0x16f1
	.4byte	.LASF7133
	.byte	0x5
	.uleb128 0x16f2
	.4byte	.LASF7134
	.byte	0x5
	.uleb128 0x16f4
	.4byte	.LASF7135
	.byte	0x5
	.uleb128 0x16f8
	.4byte	.LASF7136
	.byte	0x5
	.uleb128 0x16f9
	.4byte	.LASF7137
	.byte	0x5
	.uleb128 0x16fa
	.4byte	.LASF7138
	.byte	0x5
	.uleb128 0x16fb
	.4byte	.LASF7139
	.byte	0x5
	.uleb128 0x16fe
	.4byte	.LASF7140
	.byte	0x5
	.uleb128 0x16ff
	.4byte	.LASF7141
	.byte	0x5
	.uleb128 0x1700
	.4byte	.LASF7142
	.byte	0x5
	.uleb128 0x1701
	.4byte	.LASF7143
	.byte	0x5
	.uleb128 0x1704
	.4byte	.LASF7144
	.byte	0x5
	.uleb128 0x1705
	.4byte	.LASF7145
	.byte	0x5
	.uleb128 0x1706
	.4byte	.LASF7146
	.byte	0x5
	.uleb128 0x1707
	.4byte	.LASF7147
	.byte	0x5
	.uleb128 0x1709
	.4byte	.LASF7148
	.byte	0x5
	.uleb128 0x170d
	.4byte	.LASF7149
	.byte	0x5
	.uleb128 0x170e
	.4byte	.LASF7150
	.byte	0x5
	.uleb128 0x170f
	.4byte	.LASF7151
	.byte	0x5
	.uleb128 0x1710
	.4byte	.LASF7152
	.byte	0x5
	.uleb128 0x1713
	.4byte	.LASF7153
	.byte	0x5
	.uleb128 0x1714
	.4byte	.LASF7154
	.byte	0x5
	.uleb128 0x1715
	.4byte	.LASF7155
	.byte	0x5
	.uleb128 0x1716
	.4byte	.LASF7156
	.byte	0x5
	.uleb128 0x1719
	.4byte	.LASF7157
	.byte	0x5
	.uleb128 0x171a
	.4byte	.LASF7158
	.byte	0x5
	.uleb128 0x171b
	.4byte	.LASF7159
	.byte	0x5
	.uleb128 0x171c
	.4byte	.LASF7160
	.byte	0x5
	.uleb128 0x171e
	.4byte	.LASF7161
	.byte	0x5
	.uleb128 0x1722
	.4byte	.LASF7162
	.byte	0x5
	.uleb128 0x1723
	.4byte	.LASF7163
	.byte	0x5
	.uleb128 0x1724
	.4byte	.LASF7164
	.byte	0x5
	.uleb128 0x1725
	.4byte	.LASF7165
	.byte	0x5
	.uleb128 0x1728
	.4byte	.LASF7166
	.byte	0x5
	.uleb128 0x1729
	.4byte	.LASF7167
	.byte	0x5
	.uleb128 0x172a
	.4byte	.LASF7168
	.byte	0x5
	.uleb128 0x172b
	.4byte	.LASF7169
	.byte	0x5
	.uleb128 0x172e
	.4byte	.LASF7170
	.byte	0x5
	.uleb128 0x172f
	.4byte	.LASF7171
	.byte	0x5
	.uleb128 0x1730
	.4byte	.LASF7172
	.byte	0x5
	.uleb128 0x1731
	.4byte	.LASF7173
	.byte	0x5
	.uleb128 0x1733
	.4byte	.LASF7174
	.byte	0x5
	.uleb128 0x1737
	.4byte	.LASF7175
	.byte	0x5
	.uleb128 0x1738
	.4byte	.LASF7176
	.byte	0x5
	.uleb128 0x1739
	.4byte	.LASF7177
	.byte	0x5
	.uleb128 0x173a
	.4byte	.LASF7178
	.byte	0x5
	.uleb128 0x173d
	.4byte	.LASF7179
	.byte	0x5
	.uleb128 0x173e
	.4byte	.LASF7180
	.byte	0x5
	.uleb128 0x173f
	.4byte	.LASF7181
	.byte	0x5
	.uleb128 0x1740
	.4byte	.LASF7182
	.byte	0x5
	.uleb128 0x1743
	.4byte	.LASF7183
	.byte	0x5
	.uleb128 0x1744
	.4byte	.LASF7184
	.byte	0x5
	.uleb128 0x1745
	.4byte	.LASF7185
	.byte	0x5
	.uleb128 0x1746
	.4byte	.LASF7186
	.byte	0x5
	.uleb128 0x1748
	.4byte	.LASF7187
	.byte	0x5
	.uleb128 0x174c
	.4byte	.LASF7188
	.byte	0x5
	.uleb128 0x174d
	.4byte	.LASF7189
	.byte	0x5
	.uleb128 0x174e
	.4byte	.LASF7190
	.byte	0x5
	.uleb128 0x174f
	.4byte	.LASF7191
	.byte	0x5
	.uleb128 0x1752
	.4byte	.LASF7192
	.byte	0x5
	.uleb128 0x1753
	.4byte	.LASF7193
	.byte	0x5
	.uleb128 0x1754
	.4byte	.LASF7194
	.byte	0x5
	.uleb128 0x1755
	.4byte	.LASF7195
	.byte	0x5
	.uleb128 0x1758
	.4byte	.LASF7196
	.byte	0x5
	.uleb128 0x1759
	.4byte	.LASF7197
	.byte	0x5
	.uleb128 0x175a
	.4byte	.LASF7198
	.byte	0x5
	.uleb128 0x175b
	.4byte	.LASF7199
	.byte	0x5
	.uleb128 0x175d
	.4byte	.LASF7200
	.byte	0x5
	.uleb128 0x1761
	.4byte	.LASF7201
	.byte	0x5
	.uleb128 0x1762
	.4byte	.LASF7202
	.byte	0x5
	.uleb128 0x1763
	.4byte	.LASF7203
	.byte	0x5
	.uleb128 0x1764
	.4byte	.LASF7204
	.byte	0x5
	.uleb128 0x1767
	.4byte	.LASF7205
	.byte	0x5
	.uleb128 0x1768
	.4byte	.LASF7206
	.byte	0x5
	.uleb128 0x1769
	.4byte	.LASF7207
	.byte	0x5
	.uleb128 0x176a
	.4byte	.LASF7208
	.byte	0x5
	.uleb128 0x176d
	.4byte	.LASF7209
	.byte	0x5
	.uleb128 0x176e
	.4byte	.LASF7210
	.byte	0x5
	.uleb128 0x176f
	.4byte	.LASF7211
	.byte	0x5
	.uleb128 0x1770
	.4byte	.LASF7212
	.byte	0x5
	.uleb128 0x1772
	.4byte	.LASF7213
	.byte	0x5
	.uleb128 0x1776
	.4byte	.LASF7214
	.byte	0x5
	.uleb128 0x1777
	.4byte	.LASF7215
	.byte	0x5
	.uleb128 0x1778
	.4byte	.LASF7216
	.byte	0x5
	.uleb128 0x1779
	.4byte	.LASF7217
	.byte	0x5
	.uleb128 0x177c
	.4byte	.LASF7218
	.byte	0x5
	.uleb128 0x177d
	.4byte	.LASF7219
	.byte	0x5
	.uleb128 0x177e
	.4byte	.LASF7220
	.byte	0x5
	.uleb128 0x177f
	.4byte	.LASF7221
	.byte	0x5
	.uleb128 0x1782
	.4byte	.LASF7222
	.byte	0x5
	.uleb128 0x1783
	.4byte	.LASF7223
	.byte	0x5
	.uleb128 0x1784
	.4byte	.LASF7224
	.byte	0x5
	.uleb128 0x1785
	.4byte	.LASF7225
	.byte	0x5
	.uleb128 0x1787
	.4byte	.LASF7226
	.byte	0x5
	.uleb128 0x178b
	.4byte	.LASF7227
	.byte	0x5
	.uleb128 0x178c
	.4byte	.LASF7228
	.byte	0x5
	.uleb128 0x178d
	.4byte	.LASF7229
	.byte	0x5
	.uleb128 0x178e
	.4byte	.LASF7230
	.byte	0x5
	.uleb128 0x1791
	.4byte	.LASF7231
	.byte	0x5
	.uleb128 0x1792
	.4byte	.LASF7232
	.byte	0x5
	.uleb128 0x1793
	.4byte	.LASF7233
	.byte	0x5
	.uleb128 0x1794
	.4byte	.LASF7234
	.byte	0x5
	.uleb128 0x1797
	.4byte	.LASF7235
	.byte	0x5
	.uleb128 0x1798
	.4byte	.LASF7236
	.byte	0x5
	.uleb128 0x1799
	.4byte	.LASF7237
	.byte	0x5
	.uleb128 0x179a
	.4byte	.LASF7238
	.byte	0x5
	.uleb128 0x179c
	.4byte	.LASF7239
	.byte	0x5
	.uleb128 0x17a0
	.4byte	.LASF7240
	.byte	0x5
	.uleb128 0x17a1
	.4byte	.LASF7241
	.byte	0x5
	.uleb128 0x17a2
	.4byte	.LASF7242
	.byte	0x5
	.uleb128 0x17a3
	.4byte	.LASF7243
	.byte	0x5
	.uleb128 0x17a6
	.4byte	.LASF7244
	.byte	0x5
	.uleb128 0x17a7
	.4byte	.LASF7245
	.byte	0x5
	.uleb128 0x17a8
	.4byte	.LASF7246
	.byte	0x5
	.uleb128 0x17a9
	.4byte	.LASF7247
	.byte	0x5
	.uleb128 0x17ac
	.4byte	.LASF7248
	.byte	0x5
	.uleb128 0x17ad
	.4byte	.LASF7249
	.byte	0x5
	.uleb128 0x17ae
	.4byte	.LASF7250
	.byte	0x5
	.uleb128 0x17af
	.4byte	.LASF7251
	.byte	0x5
	.uleb128 0x17b1
	.4byte	.LASF7252
	.byte	0x5
	.uleb128 0x17b5
	.4byte	.LASF7253
	.byte	0x5
	.uleb128 0x17b6
	.4byte	.LASF7254
	.byte	0x5
	.uleb128 0x17b7
	.4byte	.LASF7255
	.byte	0x5
	.uleb128 0x17b8
	.4byte	.LASF7256
	.byte	0x5
	.uleb128 0x17bb
	.4byte	.LASF7257
	.byte	0x5
	.uleb128 0x17bc
	.4byte	.LASF7258
	.byte	0x5
	.uleb128 0x17bd
	.4byte	.LASF7259
	.byte	0x5
	.uleb128 0x17be
	.4byte	.LASF7260
	.byte	0x5
	.uleb128 0x17c1
	.4byte	.LASF7261
	.byte	0x5
	.uleb128 0x17c2
	.4byte	.LASF7262
	.byte	0x5
	.uleb128 0x17c3
	.4byte	.LASF7263
	.byte	0x5
	.uleb128 0x17c4
	.4byte	.LASF7264
	.byte	0x5
	.uleb128 0x17c6
	.4byte	.LASF7265
	.byte	0x5
	.uleb128 0x17ca
	.4byte	.LASF7266
	.byte	0x5
	.uleb128 0x17cb
	.4byte	.LASF7267
	.byte	0x5
	.uleb128 0x17cc
	.4byte	.LASF7268
	.byte	0x5
	.uleb128 0x17cd
	.4byte	.LASF7269
	.byte	0x5
	.uleb128 0x17d0
	.4byte	.LASF7270
	.byte	0x5
	.uleb128 0x17d1
	.4byte	.LASF7271
	.byte	0x5
	.uleb128 0x17d2
	.4byte	.LASF7272
	.byte	0x5
	.uleb128 0x17d3
	.4byte	.LASF7273
	.byte	0x5
	.uleb128 0x17d6
	.4byte	.LASF7274
	.byte	0x5
	.uleb128 0x17d7
	.4byte	.LASF7275
	.byte	0x5
	.uleb128 0x17d8
	.4byte	.LASF7276
	.byte	0x5
	.uleb128 0x17d9
	.4byte	.LASF7277
	.byte	0x5
	.uleb128 0x17db
	.4byte	.LASF7278
	.byte	0x5
	.uleb128 0x17df
	.4byte	.LASF7279
	.byte	0x5
	.uleb128 0x17e0
	.4byte	.LASF7280
	.byte	0x5
	.uleb128 0x17e1
	.4byte	.LASF7281
	.byte	0x5
	.uleb128 0x17e2
	.4byte	.LASF7282
	.byte	0x5
	.uleb128 0x17e5
	.4byte	.LASF7283
	.byte	0x5
	.uleb128 0x17e6
	.4byte	.LASF7284
	.byte	0x5
	.uleb128 0x17e7
	.4byte	.LASF7285
	.byte	0x5
	.uleb128 0x17e8
	.4byte	.LASF7286
	.byte	0x5
	.uleb128 0x17eb
	.4byte	.LASF7287
	.byte	0x5
	.uleb128 0x17ec
	.4byte	.LASF7288
	.byte	0x5
	.uleb128 0x17ed
	.4byte	.LASF7289
	.byte	0x5
	.uleb128 0x17ee
	.4byte	.LASF7290
	.byte	0x5
	.uleb128 0x17f0
	.4byte	.LASF7291
	.byte	0x5
	.uleb128 0x17f4
	.4byte	.LASF7292
	.byte	0x5
	.uleb128 0x17f5
	.4byte	.LASF7293
	.byte	0x5
	.uleb128 0x17f6
	.4byte	.LASF7294
	.byte	0x5
	.uleb128 0x17f7
	.4byte	.LASF7295
	.byte	0x5
	.uleb128 0x17fa
	.4byte	.LASF7296
	.byte	0x5
	.uleb128 0x17fb
	.4byte	.LASF7297
	.byte	0x5
	.uleb128 0x17fc
	.4byte	.LASF7298
	.byte	0x5
	.uleb128 0x17fd
	.4byte	.LASF7299
	.byte	0x5
	.uleb128 0x1800
	.4byte	.LASF7300
	.byte	0x5
	.uleb128 0x1801
	.4byte	.LASF7301
	.byte	0x5
	.uleb128 0x1802
	.4byte	.LASF7302
	.byte	0x5
	.uleb128 0x1803
	.4byte	.LASF7303
	.byte	0x5
	.uleb128 0x1805
	.4byte	.LASF7304
	.byte	0x5
	.uleb128 0x1809
	.4byte	.LASF7305
	.byte	0x5
	.uleb128 0x180a
	.4byte	.LASF7306
	.byte	0x5
	.uleb128 0x180b
	.4byte	.LASF7307
	.byte	0x5
	.uleb128 0x180c
	.4byte	.LASF7308
	.byte	0x5
	.uleb128 0x180f
	.4byte	.LASF7309
	.byte	0x5
	.uleb128 0x1810
	.4byte	.LASF7310
	.byte	0x5
	.uleb128 0x1811
	.4byte	.LASF7311
	.byte	0x5
	.uleb128 0x1812
	.4byte	.LASF7312
	.byte	0x5
	.uleb128 0x1815
	.4byte	.LASF7313
	.byte	0x5
	.uleb128 0x1816
	.4byte	.LASF7314
	.byte	0x5
	.uleb128 0x1817
	.4byte	.LASF7315
	.byte	0x5
	.uleb128 0x1818
	.4byte	.LASF7316
	.byte	0x5
	.uleb128 0x181a
	.4byte	.LASF7317
	.byte	0x5
	.uleb128 0x181e
	.4byte	.LASF7318
	.byte	0x5
	.uleb128 0x181f
	.4byte	.LASF7319
	.byte	0x5
	.uleb128 0x1820
	.4byte	.LASF7320
	.byte	0x5
	.uleb128 0x1821
	.4byte	.LASF7321
	.byte	0x5
	.uleb128 0x1824
	.4byte	.LASF7322
	.byte	0x5
	.uleb128 0x1825
	.4byte	.LASF7323
	.byte	0x5
	.uleb128 0x1826
	.4byte	.LASF7324
	.byte	0x5
	.uleb128 0x1827
	.4byte	.LASF7325
	.byte	0x5
	.uleb128 0x182a
	.4byte	.LASF7326
	.byte	0x5
	.uleb128 0x182b
	.4byte	.LASF7327
	.byte	0x5
	.uleb128 0x182c
	.4byte	.LASF7328
	.byte	0x5
	.uleb128 0x182d
	.4byte	.LASF7329
	.byte	0x5
	.uleb128 0x182f
	.4byte	.LASF7330
	.byte	0x5
	.uleb128 0x1833
	.4byte	.LASF7331
	.byte	0x5
	.uleb128 0x1834
	.4byte	.LASF7332
	.byte	0x5
	.uleb128 0x1835
	.4byte	.LASF7333
	.byte	0x5
	.uleb128 0x1836
	.4byte	.LASF7334
	.byte	0x5
	.uleb128 0x1839
	.4byte	.LASF7335
	.byte	0x5
	.uleb128 0x183a
	.4byte	.LASF7336
	.byte	0x5
	.uleb128 0x183b
	.4byte	.LASF7337
	.byte	0x5
	.uleb128 0x183c
	.4byte	.LASF7338
	.byte	0x5
	.uleb128 0x183f
	.4byte	.LASF7339
	.byte	0x5
	.uleb128 0x1840
	.4byte	.LASF7340
	.byte	0x5
	.uleb128 0x1841
	.4byte	.LASF7341
	.byte	0x5
	.uleb128 0x1842
	.4byte	.LASF7342
	.byte	0x5
	.uleb128 0x1844
	.4byte	.LASF7343
	.byte	0x5
	.uleb128 0x1848
	.4byte	.LASF7344
	.byte	0x5
	.uleb128 0x1849
	.4byte	.LASF7345
	.byte	0x5
	.uleb128 0x184a
	.4byte	.LASF7346
	.byte	0x5
	.uleb128 0x184b
	.4byte	.LASF7347
	.byte	0x5
	.uleb128 0x184e
	.4byte	.LASF7348
	.byte	0x5
	.uleb128 0x184f
	.4byte	.LASF7349
	.byte	0x5
	.uleb128 0x1850
	.4byte	.LASF7350
	.byte	0x5
	.uleb128 0x1851
	.4byte	.LASF7351
	.byte	0x5
	.uleb128 0x1854
	.4byte	.LASF7352
	.byte	0x5
	.uleb128 0x1855
	.4byte	.LASF7353
	.byte	0x5
	.uleb128 0x1856
	.4byte	.LASF7354
	.byte	0x5
	.uleb128 0x1857
	.4byte	.LASF7355
	.byte	0x5
	.uleb128 0x1859
	.4byte	.LASF7356
	.byte	0x5
	.uleb128 0x185d
	.4byte	.LASF7357
	.byte	0x5
	.uleb128 0x185e
	.4byte	.LASF7358
	.byte	0x5
	.uleb128 0x185f
	.4byte	.LASF7359
	.byte	0x5
	.uleb128 0x1860
	.4byte	.LASF7360
	.byte	0x5
	.uleb128 0x1863
	.4byte	.LASF7361
	.byte	0x5
	.uleb128 0x1864
	.4byte	.LASF7362
	.byte	0x5
	.uleb128 0x1865
	.4byte	.LASF7363
	.byte	0x5
	.uleb128 0x1866
	.4byte	.LASF7364
	.byte	0x5
	.uleb128 0x1869
	.4byte	.LASF7365
	.byte	0x5
	.uleb128 0x186a
	.4byte	.LASF7366
	.byte	0x5
	.uleb128 0x186b
	.4byte	.LASF7367
	.byte	0x5
	.uleb128 0x186c
	.4byte	.LASF7368
	.byte	0x5
	.uleb128 0x186e
	.4byte	.LASF7369
	.byte	0x5
	.uleb128 0x1872
	.4byte	.LASF7370
	.byte	0x5
	.uleb128 0x1873
	.4byte	.LASF7371
	.byte	0x5
	.uleb128 0x1874
	.4byte	.LASF7372
	.byte	0x5
	.uleb128 0x1875
	.4byte	.LASF7373
	.byte	0x5
	.uleb128 0x1878
	.4byte	.LASF7374
	.byte	0x5
	.uleb128 0x1879
	.4byte	.LASF7375
	.byte	0x5
	.uleb128 0x187a
	.4byte	.LASF7376
	.byte	0x5
	.uleb128 0x187b
	.4byte	.LASF7377
	.byte	0x5
	.uleb128 0x187e
	.4byte	.LASF7378
	.byte	0x5
	.uleb128 0x187f
	.4byte	.LASF7379
	.byte	0x5
	.uleb128 0x1880
	.4byte	.LASF7380
	.byte	0x5
	.uleb128 0x1881
	.4byte	.LASF7381
	.byte	0x5
	.uleb128 0x1883
	.4byte	.LASF7382
	.byte	0x5
	.uleb128 0x1887
	.4byte	.LASF7383
	.byte	0x5
	.uleb128 0x1888
	.4byte	.LASF7384
	.byte	0x5
	.uleb128 0x1889
	.4byte	.LASF7385
	.byte	0x5
	.uleb128 0x188a
	.4byte	.LASF7386
	.byte	0x5
	.uleb128 0x188d
	.4byte	.LASF7387
	.byte	0x5
	.uleb128 0x188e
	.4byte	.LASF7388
	.byte	0x5
	.uleb128 0x188f
	.4byte	.LASF7389
	.byte	0x5
	.uleb128 0x1890
	.4byte	.LASF7390
	.byte	0x5
	.uleb128 0x1893
	.4byte	.LASF7391
	.byte	0x5
	.uleb128 0x1894
	.4byte	.LASF7392
	.byte	0x5
	.uleb128 0x1895
	.4byte	.LASF7393
	.byte	0x5
	.uleb128 0x1896
	.4byte	.LASF7394
	.byte	0x5
	.uleb128 0x1898
	.4byte	.LASF7395
	.byte	0x5
	.uleb128 0x189c
	.4byte	.LASF7396
	.byte	0x5
	.uleb128 0x189d
	.4byte	.LASF7397
	.byte	0x5
	.uleb128 0x189e
	.4byte	.LASF7398
	.byte	0x5
	.uleb128 0x189f
	.4byte	.LASF7399
	.byte	0x5
	.uleb128 0x18a2
	.4byte	.LASF7400
	.byte	0x5
	.uleb128 0x18a3
	.4byte	.LASF7401
	.byte	0x5
	.uleb128 0x18a4
	.4byte	.LASF7402
	.byte	0x5
	.uleb128 0x18a5
	.4byte	.LASF7403
	.byte	0x5
	.uleb128 0x18a8
	.4byte	.LASF7404
	.byte	0x5
	.uleb128 0x18a9
	.4byte	.LASF7405
	.byte	0x5
	.uleb128 0x18aa
	.4byte	.LASF7406
	.byte	0x5
	.uleb128 0x18ab
	.4byte	.LASF7407
	.byte	0x5
	.uleb128 0x18ad
	.4byte	.LASF7408
	.byte	0x5
	.uleb128 0x18b1
	.4byte	.LASF7409
	.byte	0x5
	.uleb128 0x18b2
	.4byte	.LASF7410
	.byte	0x5
	.uleb128 0x18b3
	.4byte	.LASF7411
	.byte	0x5
	.uleb128 0x18b4
	.4byte	.LASF7412
	.byte	0x5
	.uleb128 0x18b7
	.4byte	.LASF7413
	.byte	0x5
	.uleb128 0x18b8
	.4byte	.LASF7414
	.byte	0x5
	.uleb128 0x18b9
	.4byte	.LASF7415
	.byte	0x5
	.uleb128 0x18ba
	.4byte	.LASF7416
	.byte	0x5
	.uleb128 0x18bd
	.4byte	.LASF7417
	.byte	0x5
	.uleb128 0x18be
	.4byte	.LASF7418
	.byte	0x5
	.uleb128 0x18bf
	.4byte	.LASF7419
	.byte	0x5
	.uleb128 0x18c0
	.4byte	.LASF7420
	.byte	0x5
	.uleb128 0x18c2
	.4byte	.LASF7421
	.byte	0x5
	.uleb128 0x18c6
	.4byte	.LASF7422
	.byte	0x5
	.uleb128 0x18c7
	.4byte	.LASF7423
	.byte	0x5
	.uleb128 0x18c8
	.4byte	.LASF7424
	.byte	0x5
	.uleb128 0x18c9
	.4byte	.LASF7425
	.byte	0x5
	.uleb128 0x18cc
	.4byte	.LASF7426
	.byte	0x5
	.uleb128 0x18cd
	.4byte	.LASF7427
	.byte	0x5
	.uleb128 0x18ce
	.4byte	.LASF7428
	.byte	0x5
	.uleb128 0x18cf
	.4byte	.LASF7429
	.byte	0x5
	.uleb128 0x18d2
	.4byte	.LASF7430
	.byte	0x5
	.uleb128 0x18d3
	.4byte	.LASF7431
	.byte	0x5
	.uleb128 0x18d4
	.4byte	.LASF7432
	.byte	0x5
	.uleb128 0x18d5
	.4byte	.LASF7433
	.byte	0x5
	.uleb128 0x18d7
	.4byte	.LASF7434
	.byte	0x5
	.uleb128 0x18db
	.4byte	.LASF7435
	.byte	0x5
	.uleb128 0x18dc
	.4byte	.LASF7436
	.byte	0x5
	.uleb128 0x18dd
	.4byte	.LASF7437
	.byte	0x5
	.uleb128 0x18de
	.4byte	.LASF7438
	.byte	0x5
	.uleb128 0x18e1
	.4byte	.LASF7439
	.byte	0x5
	.uleb128 0x18e2
	.4byte	.LASF7440
	.byte	0x5
	.uleb128 0x18e3
	.4byte	.LASF7441
	.byte	0x5
	.uleb128 0x18e4
	.4byte	.LASF7442
	.byte	0x5
	.uleb128 0x18e7
	.4byte	.LASF7443
	.byte	0x5
	.uleb128 0x18e8
	.4byte	.LASF7444
	.byte	0x5
	.uleb128 0x18e9
	.4byte	.LASF7445
	.byte	0x5
	.uleb128 0x18ea
	.4byte	.LASF7446
	.byte	0x5
	.uleb128 0x18ec
	.4byte	.LASF7447
	.byte	0x5
	.uleb128 0x18f0
	.4byte	.LASF7448
	.byte	0x5
	.uleb128 0x18f1
	.4byte	.LASF7449
	.byte	0x5
	.uleb128 0x18f2
	.4byte	.LASF7450
	.byte	0x5
	.uleb128 0x18f3
	.4byte	.LASF7451
	.byte	0x5
	.uleb128 0x18f6
	.4byte	.LASF7452
	.byte	0x5
	.uleb128 0x18f7
	.4byte	.LASF7453
	.byte	0x5
	.uleb128 0x18f8
	.4byte	.LASF7454
	.byte	0x5
	.uleb128 0x18f9
	.4byte	.LASF7455
	.byte	0x5
	.uleb128 0x18fc
	.4byte	.LASF7456
	.byte	0x5
	.uleb128 0x18fd
	.4byte	.LASF7457
	.byte	0x5
	.uleb128 0x18fe
	.4byte	.LASF7458
	.byte	0x5
	.uleb128 0x18ff
	.4byte	.LASF7459
	.byte	0x5
	.uleb128 0x1901
	.4byte	.LASF7460
	.byte	0x5
	.uleb128 0x1905
	.4byte	.LASF7461
	.byte	0x5
	.uleb128 0x1906
	.4byte	.LASF7462
	.byte	0x5
	.uleb128 0x1907
	.4byte	.LASF7463
	.byte	0x5
	.uleb128 0x1908
	.4byte	.LASF7464
	.byte	0x5
	.uleb128 0x190b
	.4byte	.LASF7465
	.byte	0x5
	.uleb128 0x190c
	.4byte	.LASF7466
	.byte	0x5
	.uleb128 0x190d
	.4byte	.LASF7467
	.byte	0x5
	.uleb128 0x190e
	.4byte	.LASF7468
	.byte	0x5
	.uleb128 0x1911
	.4byte	.LASF7469
	.byte	0x5
	.uleb128 0x1912
	.4byte	.LASF7470
	.byte	0x5
	.uleb128 0x1913
	.4byte	.LASF7471
	.byte	0x5
	.uleb128 0x1914
	.4byte	.LASF7472
	.byte	0x5
	.uleb128 0x1916
	.4byte	.LASF7473
	.byte	0x5
	.uleb128 0x191a
	.4byte	.LASF7474
	.byte	0x5
	.uleb128 0x191b
	.4byte	.LASF7475
	.byte	0x5
	.uleb128 0x191c
	.4byte	.LASF7476
	.byte	0x5
	.uleb128 0x191d
	.4byte	.LASF7477
	.byte	0x5
	.uleb128 0x1920
	.4byte	.LASF7478
	.byte	0x5
	.uleb128 0x1921
	.4byte	.LASF7479
	.byte	0x5
	.uleb128 0x1922
	.4byte	.LASF7480
	.byte	0x5
	.uleb128 0x1923
	.4byte	.LASF7481
	.byte	0x5
	.uleb128 0x1926
	.4byte	.LASF7482
	.byte	0x5
	.uleb128 0x1927
	.4byte	.LASF7483
	.byte	0x5
	.uleb128 0x1928
	.4byte	.LASF7484
	.byte	0x5
	.uleb128 0x1929
	.4byte	.LASF7485
	.byte	0x5
	.uleb128 0x192b
	.4byte	.LASF7486
	.byte	0x5
	.uleb128 0x192f
	.4byte	.LASF7487
	.byte	0x5
	.uleb128 0x1930
	.4byte	.LASF7488
	.byte	0x5
	.uleb128 0x1931
	.4byte	.LASF7489
	.byte	0x5
	.uleb128 0x1932
	.4byte	.LASF7490
	.byte	0x5
	.uleb128 0x1935
	.4byte	.LASF7491
	.byte	0x5
	.uleb128 0x1936
	.4byte	.LASF7492
	.byte	0x5
	.uleb128 0x1937
	.4byte	.LASF7493
	.byte	0x5
	.uleb128 0x1938
	.4byte	.LASF7494
	.byte	0x5
	.uleb128 0x193b
	.4byte	.LASF7495
	.byte	0x5
	.uleb128 0x193c
	.4byte	.LASF7496
	.byte	0x5
	.uleb128 0x193d
	.4byte	.LASF7497
	.byte	0x5
	.uleb128 0x193e
	.4byte	.LASF7498
	.byte	0x5
	.uleb128 0x1940
	.4byte	.LASF7499
	.byte	0x5
	.uleb128 0x1944
	.4byte	.LASF7500
	.byte	0x5
	.uleb128 0x1945
	.4byte	.LASF7501
	.byte	0x5
	.uleb128 0x1946
	.4byte	.LASF7502
	.byte	0x5
	.uleb128 0x1947
	.4byte	.LASF7503
	.byte	0x5
	.uleb128 0x194a
	.4byte	.LASF7504
	.byte	0x5
	.uleb128 0x194b
	.4byte	.LASF7505
	.byte	0x5
	.uleb128 0x194c
	.4byte	.LASF7506
	.byte	0x5
	.uleb128 0x194d
	.4byte	.LASF7507
	.byte	0x5
	.uleb128 0x1950
	.4byte	.LASF7508
	.byte	0x5
	.uleb128 0x1951
	.4byte	.LASF7509
	.byte	0x5
	.uleb128 0x1952
	.4byte	.LASF7510
	.byte	0x5
	.uleb128 0x1953
	.4byte	.LASF7511
	.byte	0x5
	.uleb128 0x1955
	.4byte	.LASF7512
	.byte	0x5
	.uleb128 0x1959
	.4byte	.LASF7513
	.byte	0x5
	.uleb128 0x195a
	.4byte	.LASF7514
	.byte	0x5
	.uleb128 0x195b
	.4byte	.LASF7515
	.byte	0x5
	.uleb128 0x195c
	.4byte	.LASF7516
	.byte	0x5
	.uleb128 0x195f
	.4byte	.LASF7517
	.byte	0x5
	.uleb128 0x1960
	.4byte	.LASF7518
	.byte	0x5
	.uleb128 0x1961
	.4byte	.LASF7519
	.byte	0x5
	.uleb128 0x1962
	.4byte	.LASF7520
	.byte	0x5
	.uleb128 0x1965
	.4byte	.LASF7521
	.byte	0x5
	.uleb128 0x1966
	.4byte	.LASF7522
	.byte	0x5
	.uleb128 0x1967
	.4byte	.LASF7523
	.byte	0x5
	.uleb128 0x1968
	.4byte	.LASF7524
	.byte	0x5
	.uleb128 0x196a
	.4byte	.LASF7525
	.byte	0x5
	.uleb128 0x196e
	.4byte	.LASF7526
	.byte	0x5
	.uleb128 0x196f
	.4byte	.LASF7527
	.byte	0x5
	.uleb128 0x1970
	.4byte	.LASF7528
	.byte	0x5
	.uleb128 0x1971
	.4byte	.LASF7529
	.byte	0x5
	.uleb128 0x1974
	.4byte	.LASF7530
	.byte	0x5
	.uleb128 0x1975
	.4byte	.LASF7531
	.byte	0x5
	.uleb128 0x1976
	.4byte	.LASF7532
	.byte	0x5
	.uleb128 0x1977
	.4byte	.LASF7533
	.byte	0x5
	.uleb128 0x197a
	.4byte	.LASF7534
	.byte	0x5
	.uleb128 0x197b
	.4byte	.LASF7535
	.byte	0x5
	.uleb128 0x197c
	.4byte	.LASF7536
	.byte	0x5
	.uleb128 0x197d
	.4byte	.LASF7537
	.byte	0x5
	.uleb128 0x197f
	.4byte	.LASF7538
	.byte	0x5
	.uleb128 0x1983
	.4byte	.LASF7539
	.byte	0x5
	.uleb128 0x1984
	.4byte	.LASF7540
	.byte	0x5
	.uleb128 0x1985
	.4byte	.LASF7541
	.byte	0x5
	.uleb128 0x1986
	.4byte	.LASF7542
	.byte	0x5
	.uleb128 0x1989
	.4byte	.LASF7543
	.byte	0x5
	.uleb128 0x198a
	.4byte	.LASF7544
	.byte	0x5
	.uleb128 0x198b
	.4byte	.LASF7545
	.byte	0x5
	.uleb128 0x198c
	.4byte	.LASF7546
	.byte	0x5
	.uleb128 0x198f
	.4byte	.LASF7547
	.byte	0x5
	.uleb128 0x1990
	.4byte	.LASF7548
	.byte	0x5
	.uleb128 0x1991
	.4byte	.LASF7549
	.byte	0x5
	.uleb128 0x1992
	.4byte	.LASF7550
	.byte	0x5
	.uleb128 0x1994
	.4byte	.LASF7551
	.byte	0x5
	.uleb128 0x1998
	.4byte	.LASF7552
	.byte	0x5
	.uleb128 0x1999
	.4byte	.LASF7553
	.byte	0x5
	.uleb128 0x199a
	.4byte	.LASF7554
	.byte	0x5
	.uleb128 0x199b
	.4byte	.LASF7555
	.byte	0x5
	.uleb128 0x199e
	.4byte	.LASF7556
	.byte	0x5
	.uleb128 0x199f
	.4byte	.LASF7557
	.byte	0x5
	.uleb128 0x19a0
	.4byte	.LASF7558
	.byte	0x5
	.uleb128 0x19a1
	.4byte	.LASF7559
	.byte	0x5
	.uleb128 0x19a4
	.4byte	.LASF7560
	.byte	0x5
	.uleb128 0x19a5
	.4byte	.LASF7561
	.byte	0x5
	.uleb128 0x19a6
	.4byte	.LASF7562
	.byte	0x5
	.uleb128 0x19a7
	.4byte	.LASF7563
	.byte	0x5
	.uleb128 0x19a9
	.4byte	.LASF7564
	.byte	0x5
	.uleb128 0x19ad
	.4byte	.LASF7565
	.byte	0x5
	.uleb128 0x19ae
	.4byte	.LASF7566
	.byte	0x5
	.uleb128 0x19af
	.4byte	.LASF7567
	.byte	0x5
	.uleb128 0x19b0
	.4byte	.LASF7568
	.byte	0x5
	.uleb128 0x19b3
	.4byte	.LASF7569
	.byte	0x5
	.uleb128 0x19b4
	.4byte	.LASF7570
	.byte	0x5
	.uleb128 0x19b5
	.4byte	.LASF7571
	.byte	0x5
	.uleb128 0x19b6
	.4byte	.LASF7572
	.byte	0x5
	.uleb128 0x19b9
	.4byte	.LASF7573
	.byte	0x5
	.uleb128 0x19ba
	.4byte	.LASF7574
	.byte	0x5
	.uleb128 0x19bb
	.4byte	.LASF7575
	.byte	0x5
	.uleb128 0x19bc
	.4byte	.LASF7576
	.byte	0x5
	.uleb128 0x19be
	.4byte	.LASF7577
	.byte	0x5
	.uleb128 0x19c2
	.4byte	.LASF7578
	.byte	0x5
	.uleb128 0x19c3
	.4byte	.LASF7579
	.byte	0x5
	.uleb128 0x19c4
	.4byte	.LASF7580
	.byte	0x5
	.uleb128 0x19c5
	.4byte	.LASF7581
	.byte	0x5
	.uleb128 0x19c8
	.4byte	.LASF7582
	.byte	0x5
	.uleb128 0x19c9
	.4byte	.LASF7583
	.byte	0x5
	.uleb128 0x19ca
	.4byte	.LASF7584
	.byte	0x5
	.uleb128 0x19cb
	.4byte	.LASF7585
	.byte	0x5
	.uleb128 0x19ce
	.4byte	.LASF7586
	.byte	0x5
	.uleb128 0x19cf
	.4byte	.LASF7587
	.byte	0x5
	.uleb128 0x19d0
	.4byte	.LASF7588
	.byte	0x5
	.uleb128 0x19d1
	.4byte	.LASF7589
	.byte	0x5
	.uleb128 0x19d3
	.4byte	.LASF7590
	.byte	0x5
	.uleb128 0x19d7
	.4byte	.LASF7591
	.byte	0x5
	.uleb128 0x19d8
	.4byte	.LASF7592
	.byte	0x5
	.uleb128 0x19d9
	.4byte	.LASF7593
	.byte	0x5
	.uleb128 0x19da
	.4byte	.LASF7594
	.byte	0x5
	.uleb128 0x19dd
	.4byte	.LASF7595
	.byte	0x5
	.uleb128 0x19de
	.4byte	.LASF7596
	.byte	0x5
	.uleb128 0x19df
	.4byte	.LASF7597
	.byte	0x5
	.uleb128 0x19e0
	.4byte	.LASF7598
	.byte	0x5
	.uleb128 0x19e3
	.4byte	.LASF7599
	.byte	0x5
	.uleb128 0x19e4
	.4byte	.LASF7600
	.byte	0x5
	.uleb128 0x19e5
	.4byte	.LASF7601
	.byte	0x5
	.uleb128 0x19e6
	.4byte	.LASF7602
	.byte	0x5
	.uleb128 0x19e8
	.4byte	.LASF7603
	.byte	0x5
	.uleb128 0x19ec
	.4byte	.LASF7604
	.byte	0x5
	.uleb128 0x19ed
	.4byte	.LASF7605
	.byte	0x5
	.uleb128 0x19ee
	.4byte	.LASF7606
	.byte	0x5
	.uleb128 0x19ef
	.4byte	.LASF7607
	.byte	0x5
	.uleb128 0x19f2
	.4byte	.LASF7608
	.byte	0x5
	.uleb128 0x19f3
	.4byte	.LASF7609
	.byte	0x5
	.uleb128 0x19f4
	.4byte	.LASF7610
	.byte	0x5
	.uleb128 0x19f5
	.4byte	.LASF7611
	.byte	0x5
	.uleb128 0x19f8
	.4byte	.LASF7612
	.byte	0x5
	.uleb128 0x19f9
	.4byte	.LASF7613
	.byte	0x5
	.uleb128 0x19fa
	.4byte	.LASF7614
	.byte	0x5
	.uleb128 0x19fb
	.4byte	.LASF7615
	.byte	0x5
	.uleb128 0x19fd
	.4byte	.LASF7616
	.byte	0x5
	.uleb128 0x1a01
	.4byte	.LASF7617
	.byte	0x5
	.uleb128 0x1a02
	.4byte	.LASF7618
	.byte	0x5
	.uleb128 0x1a03
	.4byte	.LASF7619
	.byte	0x5
	.uleb128 0x1a04
	.4byte	.LASF7620
	.byte	0x5
	.uleb128 0x1a07
	.4byte	.LASF7621
	.byte	0x5
	.uleb128 0x1a08
	.4byte	.LASF7622
	.byte	0x5
	.uleb128 0x1a09
	.4byte	.LASF7623
	.byte	0x5
	.uleb128 0x1a0a
	.4byte	.LASF7624
	.byte	0x5
	.uleb128 0x1a0d
	.4byte	.LASF7625
	.byte	0x5
	.uleb128 0x1a0e
	.4byte	.LASF7626
	.byte	0x5
	.uleb128 0x1a0f
	.4byte	.LASF7627
	.byte	0x5
	.uleb128 0x1a10
	.4byte	.LASF7628
	.byte	0x5
	.uleb128 0x1a12
	.4byte	.LASF7629
	.byte	0x5
	.uleb128 0x1a16
	.4byte	.LASF7630
	.byte	0x5
	.uleb128 0x1a17
	.4byte	.LASF7631
	.byte	0x5
	.uleb128 0x1a18
	.4byte	.LASF7632
	.byte	0x5
	.uleb128 0x1a19
	.4byte	.LASF7633
	.byte	0x5
	.uleb128 0x1a1c
	.4byte	.LASF7634
	.byte	0x5
	.uleb128 0x1a1d
	.4byte	.LASF7635
	.byte	0x5
	.uleb128 0x1a1e
	.4byte	.LASF7636
	.byte	0x5
	.uleb128 0x1a1f
	.4byte	.LASF7637
	.byte	0x5
	.uleb128 0x1a22
	.4byte	.LASF7638
	.byte	0x5
	.uleb128 0x1a23
	.4byte	.LASF7639
	.byte	0x5
	.uleb128 0x1a24
	.4byte	.LASF7640
	.byte	0x5
	.uleb128 0x1a25
	.4byte	.LASF7641
	.byte	0x5
	.uleb128 0x1a27
	.4byte	.LASF7642
	.byte	0x5
	.uleb128 0x1a2b
	.4byte	.LASF7643
	.byte	0x5
	.uleb128 0x1a2c
	.4byte	.LASF7644
	.byte	0x5
	.uleb128 0x1a2d
	.4byte	.LASF7645
	.byte	0x5
	.uleb128 0x1a2e
	.4byte	.LASF7646
	.byte	0x5
	.uleb128 0x1a31
	.4byte	.LASF7647
	.byte	0x5
	.uleb128 0x1a32
	.4byte	.LASF7648
	.byte	0x5
	.uleb128 0x1a33
	.4byte	.LASF7649
	.byte	0x5
	.uleb128 0x1a34
	.4byte	.LASF7650
	.byte	0x5
	.uleb128 0x1a37
	.4byte	.LASF7651
	.byte	0x5
	.uleb128 0x1a38
	.4byte	.LASF7652
	.byte	0x5
	.uleb128 0x1a39
	.4byte	.LASF7653
	.byte	0x5
	.uleb128 0x1a3a
	.4byte	.LASF7654
	.byte	0x5
	.uleb128 0x1a3c
	.4byte	.LASF7655
	.byte	0x5
	.uleb128 0x1a40
	.4byte	.LASF7656
	.byte	0x5
	.uleb128 0x1a41
	.4byte	.LASF7657
	.byte	0x5
	.uleb128 0x1a42
	.4byte	.LASF7658
	.byte	0x5
	.uleb128 0x1a43
	.4byte	.LASF7659
	.byte	0x5
	.uleb128 0x1a46
	.4byte	.LASF7660
	.byte	0x5
	.uleb128 0x1a47
	.4byte	.LASF7661
	.byte	0x5
	.uleb128 0x1a48
	.4byte	.LASF7662
	.byte	0x5
	.uleb128 0x1a49
	.4byte	.LASF7663
	.byte	0x5
	.uleb128 0x1a4c
	.4byte	.LASF7664
	.byte	0x5
	.uleb128 0x1a4d
	.4byte	.LASF7665
	.byte	0x5
	.uleb128 0x1a4e
	.4byte	.LASF7666
	.byte	0x5
	.uleb128 0x1a4f
	.4byte	.LASF7667
	.byte	0x5
	.uleb128 0x1a51
	.4byte	.LASF7668
	.byte	0x5
	.uleb128 0x1a55
	.4byte	.LASF7669
	.byte	0x5
	.uleb128 0x1a56
	.4byte	.LASF7670
	.byte	0x5
	.uleb128 0x1a57
	.4byte	.LASF7671
	.byte	0x5
	.uleb128 0x1a58
	.4byte	.LASF7672
	.byte	0x5
	.uleb128 0x1a5b
	.4byte	.LASF7673
	.byte	0x5
	.uleb128 0x1a5c
	.4byte	.LASF7674
	.byte	0x5
	.uleb128 0x1a5d
	.4byte	.LASF7675
	.byte	0x5
	.uleb128 0x1a5e
	.4byte	.LASF7676
	.byte	0x5
	.uleb128 0x1a61
	.4byte	.LASF7677
	.byte	0x5
	.uleb128 0x1a62
	.4byte	.LASF7678
	.byte	0x5
	.uleb128 0x1a63
	.4byte	.LASF7679
	.byte	0x5
	.uleb128 0x1a64
	.4byte	.LASF7680
	.byte	0x5
	.uleb128 0x1a66
	.4byte	.LASF7681
	.byte	0x5
	.uleb128 0x1a6a
	.4byte	.LASF7682
	.byte	0x5
	.uleb128 0x1a6b
	.4byte	.LASF7683
	.byte	0x5
	.uleb128 0x1a6c
	.4byte	.LASF7684
	.byte	0x5
	.uleb128 0x1a6d
	.4byte	.LASF7685
	.byte	0x5
	.uleb128 0x1a70
	.4byte	.LASF7686
	.byte	0x5
	.uleb128 0x1a71
	.4byte	.LASF7687
	.byte	0x5
	.uleb128 0x1a72
	.4byte	.LASF7688
	.byte	0x5
	.uleb128 0x1a73
	.4byte	.LASF7689
	.byte	0x5
	.uleb128 0x1a76
	.4byte	.LASF7690
	.byte	0x5
	.uleb128 0x1a77
	.4byte	.LASF7691
	.byte	0x5
	.uleb128 0x1a78
	.4byte	.LASF7692
	.byte	0x5
	.uleb128 0x1a79
	.4byte	.LASF7693
	.byte	0x5
	.uleb128 0x1a7b
	.4byte	.LASF7694
	.byte	0x5
	.uleb128 0x1a7f
	.4byte	.LASF7695
	.byte	0x5
	.uleb128 0x1a80
	.4byte	.LASF7696
	.byte	0x5
	.uleb128 0x1a81
	.4byte	.LASF7697
	.byte	0x5
	.uleb128 0x1a82
	.4byte	.LASF7698
	.byte	0x5
	.uleb128 0x1a85
	.4byte	.LASF7699
	.byte	0x5
	.uleb128 0x1a86
	.4byte	.LASF7700
	.byte	0x5
	.uleb128 0x1a87
	.4byte	.LASF7701
	.byte	0x5
	.uleb128 0x1a88
	.4byte	.LASF7702
	.byte	0x5
	.uleb128 0x1a8b
	.4byte	.LASF7703
	.byte	0x5
	.uleb128 0x1a8c
	.4byte	.LASF7704
	.byte	0x5
	.uleb128 0x1a8d
	.4byte	.LASF7705
	.byte	0x5
	.uleb128 0x1a8e
	.4byte	.LASF7706
	.byte	0x5
	.uleb128 0x1a90
	.4byte	.LASF7707
	.byte	0x5
	.uleb128 0x1a94
	.4byte	.LASF7708
	.byte	0x5
	.uleb128 0x1a95
	.4byte	.LASF7709
	.byte	0x5
	.uleb128 0x1a96
	.4byte	.LASF7710
	.byte	0x5
	.uleb128 0x1a97
	.4byte	.LASF7711
	.byte	0x5
	.uleb128 0x1a9a
	.4byte	.LASF7712
	.byte	0x5
	.uleb128 0x1a9b
	.4byte	.LASF7713
	.byte	0x5
	.uleb128 0x1a9c
	.4byte	.LASF7714
	.byte	0x5
	.uleb128 0x1a9d
	.4byte	.LASF7715
	.byte	0x5
	.uleb128 0x1aa0
	.4byte	.LASF7716
	.byte	0x5
	.uleb128 0x1aa1
	.4byte	.LASF7717
	.byte	0x5
	.uleb128 0x1aa2
	.4byte	.LASF7718
	.byte	0x5
	.uleb128 0x1aa3
	.4byte	.LASF7719
	.byte	0x5
	.uleb128 0x1aa5
	.4byte	.LASF7720
	.byte	0x5
	.uleb128 0x1aa9
	.4byte	.LASF7721
	.byte	0x5
	.uleb128 0x1aaa
	.4byte	.LASF7722
	.byte	0x5
	.uleb128 0x1aab
	.4byte	.LASF7723
	.byte	0x5
	.uleb128 0x1aac
	.4byte	.LASF7724
	.byte	0x5
	.uleb128 0x1aaf
	.4byte	.LASF7725
	.byte	0x5
	.uleb128 0x1ab0
	.4byte	.LASF7726
	.byte	0x5
	.uleb128 0x1ab1
	.4byte	.LASF7727
	.byte	0x5
	.uleb128 0x1ab2
	.4byte	.LASF7728
	.byte	0x5
	.uleb128 0x1ab5
	.4byte	.LASF7729
	.byte	0x5
	.uleb128 0x1ab6
	.4byte	.LASF7730
	.byte	0x5
	.uleb128 0x1ab7
	.4byte	.LASF7731
	.byte	0x5
	.uleb128 0x1ab8
	.4byte	.LASF7732
	.byte	0x5
	.uleb128 0x1aba
	.4byte	.LASF7733
	.byte	0x5
	.uleb128 0x1abe
	.4byte	.LASF7734
	.byte	0x5
	.uleb128 0x1abf
	.4byte	.LASF7735
	.byte	0x5
	.uleb128 0x1ac0
	.4byte	.LASF7736
	.byte	0x5
	.uleb128 0x1ac1
	.4byte	.LASF7737
	.byte	0x5
	.uleb128 0x1ac4
	.4byte	.LASF7738
	.byte	0x5
	.uleb128 0x1ac5
	.4byte	.LASF7739
	.byte	0x5
	.uleb128 0x1ac6
	.4byte	.LASF7740
	.byte	0x5
	.uleb128 0x1ac7
	.4byte	.LASF7741
	.byte	0x5
	.uleb128 0x1aca
	.4byte	.LASF7742
	.byte	0x5
	.uleb128 0x1acb
	.4byte	.LASF7743
	.byte	0x5
	.uleb128 0x1acc
	.4byte	.LASF7744
	.byte	0x5
	.uleb128 0x1acd
	.4byte	.LASF7745
	.byte	0x5
	.uleb128 0x1acf
	.4byte	.LASF7746
	.byte	0x5
	.uleb128 0x1ad3
	.4byte	.LASF7747
	.byte	0x5
	.uleb128 0x1ad4
	.4byte	.LASF7748
	.byte	0x5
	.uleb128 0x1ad5
	.4byte	.LASF7749
	.byte	0x5
	.uleb128 0x1ad6
	.4byte	.LASF7750
	.byte	0x5
	.uleb128 0x1ad9
	.4byte	.LASF7751
	.byte	0x5
	.uleb128 0x1ada
	.4byte	.LASF7752
	.byte	0x5
	.uleb128 0x1adb
	.4byte	.LASF7753
	.byte	0x5
	.uleb128 0x1adc
	.4byte	.LASF7754
	.byte	0x5
	.uleb128 0x1adf
	.4byte	.LASF7755
	.byte	0x5
	.uleb128 0x1ae0
	.4byte	.LASF7756
	.byte	0x5
	.uleb128 0x1ae1
	.4byte	.LASF7757
	.byte	0x5
	.uleb128 0x1ae2
	.4byte	.LASF7758
	.byte	0x5
	.uleb128 0x1ae4
	.4byte	.LASF7759
	.byte	0x5
	.uleb128 0x1ae8
	.4byte	.LASF7760
	.byte	0x5
	.uleb128 0x1ae9
	.4byte	.LASF7761
	.byte	0x5
	.uleb128 0x1aea
	.4byte	.LASF7762
	.byte	0x5
	.uleb128 0x1aeb
	.4byte	.LASF7763
	.byte	0x5
	.uleb128 0x1aee
	.4byte	.LASF7764
	.byte	0x5
	.uleb128 0x1aef
	.4byte	.LASF7765
	.byte	0x5
	.uleb128 0x1af0
	.4byte	.LASF7766
	.byte	0x5
	.uleb128 0x1af1
	.4byte	.LASF7767
	.byte	0x5
	.uleb128 0x1af4
	.4byte	.LASF7768
	.byte	0x5
	.uleb128 0x1af5
	.4byte	.LASF7769
	.byte	0x5
	.uleb128 0x1af6
	.4byte	.LASF7770
	.byte	0x5
	.uleb128 0x1af7
	.4byte	.LASF7771
	.byte	0x5
	.uleb128 0x1af9
	.4byte	.LASF7772
	.byte	0x5
	.uleb128 0x1afd
	.4byte	.LASF7773
	.byte	0x5
	.uleb128 0x1afe
	.4byte	.LASF7774
	.byte	0x5
	.uleb128 0x1aff
	.4byte	.LASF7775
	.byte	0x5
	.uleb128 0x1b00
	.4byte	.LASF7776
	.byte	0x5
	.uleb128 0x1b03
	.4byte	.LASF7777
	.byte	0x5
	.uleb128 0x1b04
	.4byte	.LASF7778
	.byte	0x5
	.uleb128 0x1b05
	.4byte	.LASF7779
	.byte	0x5
	.uleb128 0x1b06
	.4byte	.LASF7780
	.byte	0x5
	.uleb128 0x1b09
	.4byte	.LASF7781
	.byte	0x5
	.uleb128 0x1b0a
	.4byte	.LASF7782
	.byte	0x5
	.uleb128 0x1b0b
	.4byte	.LASF7783
	.byte	0x5
	.uleb128 0x1b0c
	.4byte	.LASF7784
	.byte	0x5
	.uleb128 0x1b0e
	.4byte	.LASF7785
	.byte	0x5
	.uleb128 0x1b12
	.4byte	.LASF7786
	.byte	0x5
	.uleb128 0x1b13
	.4byte	.LASF7787
	.byte	0x5
	.uleb128 0x1b14
	.4byte	.LASF7788
	.byte	0x5
	.uleb128 0x1b15
	.4byte	.LASF7789
	.byte	0x5
	.uleb128 0x1b18
	.4byte	.LASF7790
	.byte	0x5
	.uleb128 0x1b19
	.4byte	.LASF7791
	.byte	0x5
	.uleb128 0x1b1a
	.4byte	.LASF7792
	.byte	0x5
	.uleb128 0x1b1b
	.4byte	.LASF7793
	.byte	0x5
	.uleb128 0x1b1e
	.4byte	.LASF7794
	.byte	0x5
	.uleb128 0x1b1f
	.4byte	.LASF7795
	.byte	0x5
	.uleb128 0x1b20
	.4byte	.LASF7796
	.byte	0x5
	.uleb128 0x1b21
	.4byte	.LASF7797
	.byte	0x5
	.uleb128 0x1b23
	.4byte	.LASF7798
	.byte	0x5
	.uleb128 0x1b27
	.4byte	.LASF7799
	.byte	0x5
	.uleb128 0x1b28
	.4byte	.LASF7800
	.byte	0x5
	.uleb128 0x1b29
	.4byte	.LASF7801
	.byte	0x5
	.uleb128 0x1b2a
	.4byte	.LASF7802
	.byte	0x5
	.uleb128 0x1b2d
	.4byte	.LASF7803
	.byte	0x5
	.uleb128 0x1b2e
	.4byte	.LASF7804
	.byte	0x5
	.uleb128 0x1b2f
	.4byte	.LASF7805
	.byte	0x5
	.uleb128 0x1b30
	.4byte	.LASF7806
	.byte	0x5
	.uleb128 0x1b33
	.4byte	.LASF7807
	.byte	0x5
	.uleb128 0x1b34
	.4byte	.LASF7808
	.byte	0x5
	.uleb128 0x1b35
	.4byte	.LASF7809
	.byte	0x5
	.uleb128 0x1b36
	.4byte	.LASF7810
	.byte	0x5
	.uleb128 0x1b38
	.4byte	.LASF7811
	.byte	0x5
	.uleb128 0x1b3c
	.4byte	.LASF7812
	.byte	0x5
	.uleb128 0x1b3d
	.4byte	.LASF7813
	.byte	0x5
	.uleb128 0x1b3e
	.4byte	.LASF7814
	.byte	0x5
	.uleb128 0x1b3f
	.4byte	.LASF7815
	.byte	0x5
	.uleb128 0x1b42
	.4byte	.LASF7816
	.byte	0x5
	.uleb128 0x1b43
	.4byte	.LASF7817
	.byte	0x5
	.uleb128 0x1b44
	.4byte	.LASF7818
	.byte	0x5
	.uleb128 0x1b45
	.4byte	.LASF7819
	.byte	0x5
	.uleb128 0x1b48
	.4byte	.LASF7820
	.byte	0x5
	.uleb128 0x1b49
	.4byte	.LASF7821
	.byte	0x5
	.uleb128 0x1b4a
	.4byte	.LASF7822
	.byte	0x5
	.uleb128 0x1b4b
	.4byte	.LASF7823
	.byte	0x5
	.uleb128 0x1b4d
	.4byte	.LASF7824
	.byte	0x5
	.uleb128 0x1b51
	.4byte	.LASF7825
	.byte	0x5
	.uleb128 0x1b52
	.4byte	.LASF7826
	.byte	0x5
	.uleb128 0x1b53
	.4byte	.LASF7827
	.byte	0x5
	.uleb128 0x1b54
	.4byte	.LASF7828
	.byte	0x5
	.uleb128 0x1b57
	.4byte	.LASF7829
	.byte	0x5
	.uleb128 0x1b58
	.4byte	.LASF7830
	.byte	0x5
	.uleb128 0x1b59
	.4byte	.LASF7831
	.byte	0x5
	.uleb128 0x1b5a
	.4byte	.LASF7832
	.byte	0x5
	.uleb128 0x1b5d
	.4byte	.LASF7833
	.byte	0x5
	.uleb128 0x1b5e
	.4byte	.LASF7834
	.byte	0x5
	.uleb128 0x1b5f
	.4byte	.LASF7835
	.byte	0x5
	.uleb128 0x1b60
	.4byte	.LASF7836
	.byte	0x5
	.uleb128 0x1b62
	.4byte	.LASF7837
	.byte	0x5
	.uleb128 0x1b66
	.4byte	.LASF7838
	.byte	0x5
	.uleb128 0x1b67
	.4byte	.LASF7839
	.byte	0x5
	.uleb128 0x1b68
	.4byte	.LASF7840
	.byte	0x5
	.uleb128 0x1b69
	.4byte	.LASF7841
	.byte	0x5
	.uleb128 0x1b6c
	.4byte	.LASF7842
	.byte	0x5
	.uleb128 0x1b6d
	.4byte	.LASF7843
	.byte	0x5
	.uleb128 0x1b6e
	.4byte	.LASF7844
	.byte	0x5
	.uleb128 0x1b6f
	.4byte	.LASF7845
	.byte	0x5
	.uleb128 0x1b72
	.4byte	.LASF7846
	.byte	0x5
	.uleb128 0x1b73
	.4byte	.LASF7847
	.byte	0x5
	.uleb128 0x1b74
	.4byte	.LASF7848
	.byte	0x5
	.uleb128 0x1b75
	.4byte	.LASF7849
	.byte	0x5
	.uleb128 0x1b77
	.4byte	.LASF7850
	.byte	0x5
	.uleb128 0x1b7b
	.4byte	.LASF7851
	.byte	0x5
	.uleb128 0x1b7c
	.4byte	.LASF7852
	.byte	0x5
	.uleb128 0x1b7d
	.4byte	.LASF7853
	.byte	0x5
	.uleb128 0x1b7e
	.4byte	.LASF7854
	.byte	0x5
	.uleb128 0x1b81
	.4byte	.LASF7855
	.byte	0x5
	.uleb128 0x1b82
	.4byte	.LASF7856
	.byte	0x5
	.uleb128 0x1b83
	.4byte	.LASF7857
	.byte	0x5
	.uleb128 0x1b84
	.4byte	.LASF7858
	.byte	0x5
	.uleb128 0x1b87
	.4byte	.LASF7859
	.byte	0x5
	.uleb128 0x1b88
	.4byte	.LASF7860
	.byte	0x5
	.uleb128 0x1b89
	.4byte	.LASF7861
	.byte	0x5
	.uleb128 0x1b8a
	.4byte	.LASF7862
	.byte	0x5
	.uleb128 0x1b8c
	.4byte	.LASF7863
	.byte	0x5
	.uleb128 0x1b90
	.4byte	.LASF7864
	.byte	0x5
	.uleb128 0x1b91
	.4byte	.LASF7865
	.byte	0x5
	.uleb128 0x1b92
	.4byte	.LASF7866
	.byte	0x5
	.uleb128 0x1b93
	.4byte	.LASF7867
	.byte	0x5
	.uleb128 0x1b96
	.4byte	.LASF7868
	.byte	0x5
	.uleb128 0x1b97
	.4byte	.LASF7869
	.byte	0x5
	.uleb128 0x1b98
	.4byte	.LASF7870
	.byte	0x5
	.uleb128 0x1b99
	.4byte	.LASF7871
	.byte	0x5
	.uleb128 0x1b9c
	.4byte	.LASF7872
	.byte	0x5
	.uleb128 0x1b9d
	.4byte	.LASF7873
	.byte	0x5
	.uleb128 0x1b9e
	.4byte	.LASF7874
	.byte	0x5
	.uleb128 0x1b9f
	.4byte	.LASF7875
	.byte	0x5
	.uleb128 0x1ba1
	.4byte	.LASF7876
	.byte	0x5
	.uleb128 0x1ba5
	.4byte	.LASF7877
	.byte	0x5
	.uleb128 0x1ba6
	.4byte	.LASF7878
	.byte	0x5
	.uleb128 0x1ba7
	.4byte	.LASF7879
	.byte	0x5
	.uleb128 0x1ba8
	.4byte	.LASF7880
	.byte	0x5
	.uleb128 0x1bac
	.4byte	.LASF7881
	.byte	0x5
	.uleb128 0x1bad
	.4byte	.LASF7882
	.byte	0x5
	.uleb128 0x1bae
	.4byte	.LASF7883
	.byte	0x5
	.uleb128 0x1baf
	.4byte	.LASF7884
	.byte	0x5
	.uleb128 0x1bb3
	.4byte	.LASF7885
	.byte	0x5
	.uleb128 0x1bb4
	.4byte	.LASF7886
	.byte	0x5
	.uleb128 0x1bb5
	.4byte	.LASF7887
	.byte	0x5
	.uleb128 0x1bb6
	.4byte	.LASF7888
	.byte	0x5
	.uleb128 0x1bb9
	.4byte	.LASF7889
	.byte	0x5
	.uleb128 0x1bba
	.4byte	.LASF7890
	.byte	0x5
	.uleb128 0x1bbb
	.4byte	.LASF7891
	.byte	0x5
	.uleb128 0x1bbc
	.4byte	.LASF7892
	.byte	0x5
	.uleb128 0x1bbe
	.4byte	.LASF7893
	.byte	0x5
	.uleb128 0x1bc2
	.4byte	.LASF7894
	.byte	0x5
	.uleb128 0x1bc3
	.4byte	.LASF7895
	.byte	0x5
	.uleb128 0x1bc4
	.4byte	.LASF7896
	.byte	0x5
	.uleb128 0x1bc5
	.4byte	.LASF7897
	.byte	0x5
	.uleb128 0x1bc9
	.4byte	.LASF7898
	.byte	0x5
	.uleb128 0x1bca
	.4byte	.LASF7899
	.byte	0x5
	.uleb128 0x1bcb
	.4byte	.LASF7900
	.byte	0x5
	.uleb128 0x1bcc
	.4byte	.LASF7901
	.byte	0x5
	.uleb128 0x1bd0
	.4byte	.LASF7902
	.byte	0x5
	.uleb128 0x1bd1
	.4byte	.LASF7903
	.byte	0x5
	.uleb128 0x1bd2
	.4byte	.LASF7904
	.byte	0x5
	.uleb128 0x1bd3
	.4byte	.LASF7905
	.byte	0x5
	.uleb128 0x1bd6
	.4byte	.LASF7906
	.byte	0x5
	.uleb128 0x1bd7
	.4byte	.LASF7907
	.byte	0x5
	.uleb128 0x1bd8
	.4byte	.LASF7908
	.byte	0x5
	.uleb128 0x1bd9
	.4byte	.LASF7909
	.byte	0x5
	.uleb128 0x1bdb
	.4byte	.LASF7910
	.byte	0x5
	.uleb128 0x1bdf
	.4byte	.LASF7911
	.byte	0x5
	.uleb128 0x1be0
	.4byte	.LASF7912
	.byte	0x5
	.uleb128 0x1be1
	.4byte	.LASF7913
	.byte	0x5
	.uleb128 0x1be2
	.4byte	.LASF7914
	.byte	0x5
	.uleb128 0x1be6
	.4byte	.LASF7915
	.byte	0x5
	.uleb128 0x1be7
	.4byte	.LASF7916
	.byte	0x5
	.uleb128 0x1be8
	.4byte	.LASF7917
	.byte	0x5
	.uleb128 0x1be9
	.4byte	.LASF7918
	.byte	0x5
	.uleb128 0x1bed
	.4byte	.LASF7919
	.byte	0x5
	.uleb128 0x1bee
	.4byte	.LASF7920
	.byte	0x5
	.uleb128 0x1bef
	.4byte	.LASF7921
	.byte	0x5
	.uleb128 0x1bf0
	.4byte	.LASF7922
	.byte	0x5
	.uleb128 0x1bf3
	.4byte	.LASF7923
	.byte	0x5
	.uleb128 0x1bf4
	.4byte	.LASF7924
	.byte	0x5
	.uleb128 0x1bf5
	.4byte	.LASF7925
	.byte	0x5
	.uleb128 0x1bf6
	.4byte	.LASF7926
	.byte	0x5
	.uleb128 0x1bf8
	.4byte	.LASF7927
	.byte	0x5
	.uleb128 0x1bfc
	.4byte	.LASF7928
	.byte	0x5
	.uleb128 0x1bfd
	.4byte	.LASF7929
	.byte	0x5
	.uleb128 0x1bfe
	.4byte	.LASF7930
	.byte	0x5
	.uleb128 0x1bff
	.4byte	.LASF7931
	.byte	0x5
	.uleb128 0x1c03
	.4byte	.LASF7932
	.byte	0x5
	.uleb128 0x1c04
	.4byte	.LASF7933
	.byte	0x5
	.uleb128 0x1c05
	.4byte	.LASF7934
	.byte	0x5
	.uleb128 0x1c06
	.4byte	.LASF7935
	.byte	0x5
	.uleb128 0x1c0a
	.4byte	.LASF7936
	.byte	0x5
	.uleb128 0x1c0b
	.4byte	.LASF7937
	.byte	0x5
	.uleb128 0x1c0c
	.4byte	.LASF7938
	.byte	0x5
	.uleb128 0x1c0d
	.4byte	.LASF7939
	.byte	0x5
	.uleb128 0x1c10
	.4byte	.LASF7940
	.byte	0x5
	.uleb128 0x1c11
	.4byte	.LASF7941
	.byte	0x5
	.uleb128 0x1c12
	.4byte	.LASF7942
	.byte	0x5
	.uleb128 0x1c13
	.4byte	.LASF7943
	.byte	0x5
	.uleb128 0x1c15
	.4byte	.LASF7944
	.byte	0x5
	.uleb128 0x1c19
	.4byte	.LASF7945
	.byte	0x5
	.uleb128 0x1c1a
	.4byte	.LASF7946
	.byte	0x5
	.uleb128 0x1c1b
	.4byte	.LASF7947
	.byte	0x5
	.uleb128 0x1c1c
	.4byte	.LASF7948
	.byte	0x5
	.uleb128 0x1c20
	.4byte	.LASF7949
	.byte	0x5
	.uleb128 0x1c21
	.4byte	.LASF7950
	.byte	0x5
	.uleb128 0x1c22
	.4byte	.LASF7951
	.byte	0x5
	.uleb128 0x1c23
	.4byte	.LASF7952
	.byte	0x5
	.uleb128 0x1c27
	.4byte	.LASF7953
	.byte	0x5
	.uleb128 0x1c28
	.4byte	.LASF7954
	.byte	0x5
	.uleb128 0x1c29
	.4byte	.LASF7955
	.byte	0x5
	.uleb128 0x1c2a
	.4byte	.LASF7956
	.byte	0x5
	.uleb128 0x1c2d
	.4byte	.LASF7957
	.byte	0x5
	.uleb128 0x1c2e
	.4byte	.LASF7958
	.byte	0x5
	.uleb128 0x1c2f
	.4byte	.LASF7959
	.byte	0x5
	.uleb128 0x1c30
	.4byte	.LASF7960
	.byte	0x5
	.uleb128 0x1c32
	.4byte	.LASF7961
	.byte	0x5
	.uleb128 0x1c36
	.4byte	.LASF7962
	.byte	0x5
	.uleb128 0x1c37
	.4byte	.LASF7963
	.byte	0x5
	.uleb128 0x1c38
	.4byte	.LASF7964
	.byte	0x5
	.uleb128 0x1c39
	.4byte	.LASF7965
	.byte	0x5
	.uleb128 0x1c3d
	.4byte	.LASF7966
	.byte	0x5
	.uleb128 0x1c3e
	.4byte	.LASF7967
	.byte	0x5
	.uleb128 0x1c3f
	.4byte	.LASF7968
	.byte	0x5
	.uleb128 0x1c40
	.4byte	.LASF7969
	.byte	0x5
	.uleb128 0x1c44
	.4byte	.LASF7970
	.byte	0x5
	.uleb128 0x1c45
	.4byte	.LASF7971
	.byte	0x5
	.uleb128 0x1c46
	.4byte	.LASF7972
	.byte	0x5
	.uleb128 0x1c47
	.4byte	.LASF7973
	.byte	0x5
	.uleb128 0x1c4a
	.4byte	.LASF7974
	.byte	0x5
	.uleb128 0x1c4b
	.4byte	.LASF7975
	.byte	0x5
	.uleb128 0x1c4c
	.4byte	.LASF7976
	.byte	0x5
	.uleb128 0x1c4d
	.4byte	.LASF7977
	.byte	0x5
	.uleb128 0x1c4f
	.4byte	.LASF7978
	.byte	0x5
	.uleb128 0x1c53
	.4byte	.LASF7979
	.byte	0x5
	.uleb128 0x1c54
	.4byte	.LASF7980
	.byte	0x5
	.uleb128 0x1c55
	.4byte	.LASF7981
	.byte	0x5
	.uleb128 0x1c56
	.4byte	.LASF7982
	.byte	0x5
	.uleb128 0x1c5a
	.4byte	.LASF7983
	.byte	0x5
	.uleb128 0x1c5b
	.4byte	.LASF7984
	.byte	0x5
	.uleb128 0x1c5c
	.4byte	.LASF7985
	.byte	0x5
	.uleb128 0x1c5d
	.4byte	.LASF7986
	.byte	0x5
	.uleb128 0x1c61
	.4byte	.LASF7987
	.byte	0x5
	.uleb128 0x1c62
	.4byte	.LASF7988
	.byte	0x5
	.uleb128 0x1c63
	.4byte	.LASF7989
	.byte	0x5
	.uleb128 0x1c64
	.4byte	.LASF7990
	.byte	0x5
	.uleb128 0x1c67
	.4byte	.LASF7991
	.byte	0x5
	.uleb128 0x1c68
	.4byte	.LASF7992
	.byte	0x5
	.uleb128 0x1c69
	.4byte	.LASF7993
	.byte	0x5
	.uleb128 0x1c6a
	.4byte	.LASF7994
	.byte	0x5
	.uleb128 0x1c6c
	.4byte	.LASF7995
	.byte	0x5
	.uleb128 0x1c70
	.4byte	.LASF7996
	.byte	0x5
	.uleb128 0x1c71
	.4byte	.LASF7997
	.byte	0x5
	.uleb128 0x1c72
	.4byte	.LASF7998
	.byte	0x5
	.uleb128 0x1c73
	.4byte	.LASF7999
	.byte	0x5
	.uleb128 0x1c77
	.4byte	.LASF8000
	.byte	0x5
	.uleb128 0x1c78
	.4byte	.LASF8001
	.byte	0x5
	.uleb128 0x1c79
	.4byte	.LASF8002
	.byte	0x5
	.uleb128 0x1c7a
--
 * This module is required for the SSL/TLS 1.2 PRF function.
#define MBEDTLS_SHA256_C 
 * \def MBEDTLS_SHA512_C
 * Enable the SHA-384 and SHA-512 cryptographic hash algorithms.
 * Module:  library/mbedtls_sha512.c
 * Caller:  library/entropy.c
 *          library/mbedtls_md.c
 *          library/ssl_cli.c
 *          library/ssl_srv.c
 * This module adds support for SHA-384 and SHA-512.
#define MBEDTLS_SHA512_C 
 * \def MBEDTLS_SSL_CACHE_C
 * Enable simple SSL cache implementation.
 * Module:  library/ssl_cache.c
 * Caller:
 * Requires: MBEDTLS_SSL_CACHE_C
#define MBEDTLS_SSL_CACHE_C 
 * \def MBEDTLS_SSL_COOKIE_C
 * Enable basic implementation of DTLS cookies for hello verification.
 * Module:  library/ssl_cookie.c
 * Caller:
#define MBEDTLS_SSL_COOKIE_C 
 * \def MBEDTLS_SSL_TICKET_C
 * Enable an implementation of TLS server-side callbacks for session tickets.
 * Module:  library/ssl_ticket.c
 * Caller:
 * Requires: MBEDTLS_CIPHER_C
#define MBEDTLS_SSL_TICKET_C 
 * \def MBEDTLS_SSL_CLI_C
 * Enable the SSL/TLS client code.
 * Module:  library/ssl_cli.c
 * Caller:
 * Requires: MBEDTLS_SSL_TLS_C
 * This module is required for SSL/TLS client support.
#define MBEDTLS_SSL_CLI_C 
 * \def MBEDTLS_SSL_SRV_C
 * Enable the SSL/TLS server code.
 * Module:  library/ssl_srv.c
 * Caller:
 * Requires: MBEDTLS_SSL_TLS_C
 * This module is required for SSL/TLS server support.
#define MBEDTLS_SSL_SRV_C 
 * \def MBEDTLS_SSL_TLS_C
 * Enable the generic SSL/TLS code.
 * Module:  library/ssl_tls.c
 * Caller:  library/ssl_cli.c
 *          library/ssl_srv.c
 * Requires: MBEDTLS_CIPHER_C, MBEDTLS_MD_C
 *           and at least one of the MBEDTLS_SSL_PROTO_XXX defines
 * This module is required for SSL/TLS.
#define MBEDTLS_SSL_TLS_C 
 * \def MBEDTLS_THREADING_C
 * Enable the threading abstraction layer.
 * By default mbed TLS assumes it is used in a non-threaded environment or that
 * contexts are not shared between threads. If you do intend to use contexts
 * between threads, you will need to enable this layer to prevent race
 * conditions.
 * Module:  library/threading.c
 * This allows different threading implementations (self-implemented or
 * provided).
 * You will have to enable either MBEDTLS_THREADING_ALT or
 * MBEDTLS_THREADING_PTHREAD.
 * Enable this layer to allow use of mutexes within mbed TLS
//#define MBEDTLS_THREADING_C
 * \def MBEDTLS_TIMING_C
 * Enable the portable timing interface.
 * Module:  library/timing.c
 * Caller:  library/havege.c
 * This module is used by the HAVEGE random number generator.
//#define MBEDTLS_TIMING_C
 * \def MBEDTLS_VERSION_C
 * Enable run-time version information.
 * Module:  library/version.c
 * This module provides run-time version information.
#define MBEDTLS_VERSION_C 
 * \def MBEDTLS_X509_USE_C
 * Enable X.509 core for using certificates.
 * Module:  library/x509.c
 * Caller:  library/mbedtls_x509_crl.c
 *          library/mbedtls_x509_crt.c
 *          library/mbedtls_x509_csr.c
 * Requires: MBEDTLS_ASN1_PARSE_C, MBEDTLS_BIGNUM_C, MBEDTLS_OID_C,
 *           MBEDTLS_PK_PARSE_C
 * This module is required for the X.509 parsing modules.
#define MBEDTLS_X509_USE_C 
 * \def MBEDTLS_X509_CRT_PARSE_C
 * Enable X.509 certificate parsing.
 * Module:  library/mbedtls_x509_crt.c
 * Caller:  library/ssl_cli.c
 *          library/ssl_srv.c
 *          library/ssl_tls.c
 * Requires: MBEDTLS_X509_USE_C
 * This module is required for X.509 certificate parsing.
#define MBEDTLS_X509_CRT_PARSE_C 
 * \def MBEDTLS_X509_CRL_PARSE_C
 * Enable X.509 CRL parsing.
 * Module:  library/mbedtls_x509_crl.c
 * Caller:  library/mbedtls_x509_crt.c
 * Requires: MBEDTLS_X509_USE_C
 * This module is required for X.509 CRL parsing.
#define MBEDTLS_X509_CRL_PARSE_C 
 * \def MBEDTLS_X509_CSR_PARSE_C
 * Enable X.509 Certificate Signing Request (CSR) parsing.
 * Module:  library/mbedtls_x509_csr.c
 * Caller:  library/x509_crt_write.c
 * Requires: MBEDTLS_X509_USE_C
 * This module is used for reading X.509 certificate request.
#define MBEDTLS_X509_CSR_PARSE_C 
 * \def MBEDTLS_X509_CREATE_C
 * Enable X.509 core for creating certificates.
 * Module:  library/x509_create.c
 * Requires: MBEDTLS_BIGNUM_C, MBEDTLS_OID_C, MBEDTLS_PK_WRITE_C
 * This module is the basis for creating X.509 certificates and CSRs.
#define MBEDTLS_X509_CREATE_C 
 * \def MBEDTLS_X509_CRT_WRITE_C
 * Enable creating X.509 certificates.
 * Module:  library/x509_crt_write.c
 * Requires: MBEDTLS_X509_CREATE_C
 * This module is required for X.509 certificate creation.
#define MBEDTLS_X509_CRT_WRITE_C 
 * \def MBEDTLS_X509_CSR_WRITE_C
 * Enable creating X.509 Certificate Signing Requests (CSR).
 * Module:  library/x509_csr_write.c
 * Requires: MBEDTLS_X509_CREATE_C
 * This module is required for X.509 certificate request writing.
#define MBEDTLS_X509_CSR_WRITE_C 
 * \def MBEDTLS_XTEA_C
 * Enable the XTEA block cipher.
 * Module:  library/xtea.c
 * Caller:
/* \} name SECTION: mbed TLS modules */
 * \name SECTION: Module configuration options
 * This section allows for the setting of module specific sizes and
 * configuration options. The default values are already present in the
 * relevant header files and should suffice for the regular use cases.
 * Our advice is to enable options and change their values here
 * only if you have a good reason and know the consequences.
 * Please check the respective header file for documentation on these
 * parameters (to prevent duplicate documentation).
 * \{
/* MPI / BIGNUM options */
//#define MBEDTLS_MPI_WINDOW_SIZE            6 /**< Maximum windows size used. */
//#define MBEDTLS_MPI_MAX_SIZE            1024 /**< Maximum number of bytes for usable MPIs. */
/* CTR_DRBG options */
//#define MBEDTLS_CTR_DRBG_ENTROPY_LEN               48 /**< Amount of entropy used per seed by default (48 with SHA-512, 32 with SHA-256) */
//#define MBEDTLS_CTR_DRBG_RESEED_INTERVAL        10000 /**< Interval before reseed is performed by default */
//#define MBEDTLS_CTR_DRBG_MAX_INPUT                256 /**< Maximum number of additional input bytes */
//#define MBEDTLS_CTR_DRBG_MAX_REQUEST             1024 /**< Maximum number of requested bytes per call */
//#define MBEDTLS_CTR_DRBG_MAX_SEED_INPUT           384 /**< Maximum size of (re)seed buffer */
/* HMAC_DRBG options */
//#define MBEDTLS_HMAC_DRBG_RESEED_INTERVAL   10000 /**< Interval before reseed is performed by default */
//#define MBEDTLS_HMAC_DRBG_MAX_INPUT           256 /**< Maximum number of additional input bytes */
//#define MBEDTLS_HMAC_DRBG_MAX_REQUEST        1024 /**< Maximum number of requested bytes per call */
//#define MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT      384 /**< Maximum size of (re)seed buffer */
/* ECP options */
//#define MBEDTLS_ECP_MAX_BITS             521 /**< Maximum bit size of groups */
//#define MBEDTLS_ECP_WINDOW_SIZE            6 /**< Maximum window size used */
//#define MBEDTLS_ECP_FIXED_POINT_OPTIM      1 /**< Enable fixed-point speed-up */
/* Entropy options */
//#define MBEDTLS_ENTROPY_MAX_SOURCES                20 /**< Maximum number of sources supported */
//#define MBEDTLS_ENTROPY_MAX_GATHER                128 /**< Maximum amount requested from entropy sources */
/* Memory buffer allocator options */
//#define MBEDTLS_MEMORY_ALIGN_MULTIPLE      4 /**< Align on multiples of this value */
/* Platform options */
//#define MBEDTLS_PLATFORM_STD_MEM_HDR   <stdlib.h> /**< Header to include if MBEDTLS_PLATFORM_NO_STD_FUNCTIONS is defined. Don't define if no header is needed. */
//#define MBEDTLS_PLATFORM_STD_CALLOC        calloc /**< Default allocator to use, can be undefined */
//#define MBEDTLS_PLATFORM_STD_FREE            free /**< Default free to use, can be undefined */
//#define MBEDTLS_PLATFORM_STD_EXIT            exit /**< Default exit to use, can be undefined */
//#define MBEDTLS_PLATFORM_STD_FPRINTF      fprintf /**< Default fprintf to use, can be undefined */
//#define MBEDTLS_PLATFORM_STD_PRINTF        printf /**< Default printf to use, can be undefined */
/* Note: your snprintf must correclty zero-terminate the buffer! */
//#define MBEDTLS_PLATFORM_STD_SNPRINTF    snprintf /**< Default snprintf to use, can be undefined */
/* To Use Function Macros MBEDTLS_PLATFORM_C must be enabled */
/* MBEDTLS_PLATFORM_XXX_MACRO and MBEDTLS_PLATFORM_XXX_ALT cannot both be defined */
//#define MBEDTLS_PLATFORM_CALLOC_MACRO        calloc /**< Default allocator macro to use, can be undefined */
//#define MBEDTLS_PLATFORM_FREE_MACRO            free /**< Default free macro to use, can be undefined */
//#define MBEDTLS_PLATFORM_EXIT_MACRO            exit /**< Default exit macro to use, can be undefined */
//#define MBEDTLS_PLATFORM_FPRINTF_MACRO      fprintf /**< Default fprintf macro to use, can be undefined */
//#define MBEDTLS_PLATFORM_PRINTF_MACRO        printf /**< Default printf macro to use, can be undefined */
/* Note: your snprintf must correclty zero-terminate the buffer! */
//#define MBEDTLS_PLATFORM_SNPRINTF_MACRO    snprintf /**< Default snprintf macro to use, can be undefined */
/* SSL Cache options */
//#define MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT       86400 /**< 1 day  */
//#define MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES      50 /**< Maximum entries in cache */
/* SSL options */
#define MBEDTLS_SSL_MAX_CONTENT_LEN CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN /**< Maxium fragment length in bytes, determines the size of each of the two internal I/O buffers */
# 2666 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h"
//#define MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME     86400 /**< Lifetime of session tickets (if enabled) */
//#define MBEDTLS_PSK_MAX_LEN               32 /**< Max size of TLS pre-shared keys, in bytes (default 256 bits) */
//#define MBEDTLS_SSL_COOKIE_TIMEOUT        60 /**< Default expiration delay of DTLS cookies, in seconds if HAVE_TIME, or in number of cookies issued */
 * Complete list of ciphersuites to use, in order of preference.
 * \warning No dependency checking is done on that field! This option can only
 * be used to restrict the set of available ciphersuites. It is your
 * responsibility to make sure the needed modules are active.
 * Use this to save a few hundred bytes of ROM (default ordering of all
 * available ciphersuites) and a few to a few hundred bytes of RAM.
 * The value below is only an example, not the default.
//#define MBEDTLS_SSL_CIPHERSUITES MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
/* X509 options */
//#define MBEDTLS_X509_MAX_INTERMEDIATE_CA   8   /**< Maximum number of intermediate CAs in a verification chain. */
 * Allow SHA-1 in the default TLS configuration for TLS 1.2 handshake
 * signature and ciphersuite selection. Without this build-time option, SHA-1
 * support must be activated explicitly through mbedtls_ssl_conf_sig_hashes.
 * The use of SHA-1 in TLS <= 1.1 and in HMAC-SHA-1 is always allowed by
 * default. At the time of writing, there is no practical attack on the use
 * of SHA-1 in handshake signatures, hence this option is turned on by default
 * for compatibility with existing peers.
#define MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_KEY_EXCHANGE 
/* \} name SECTION: Module configuration options */
 * Allow user to override any previous default.
 * Use two macro names for that, as:
 * - with yotta the prefix YOTTA_CFG_ is forced
 * - without yotta is looks weird to have a YOTTA prefix.
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/check_config.h" 1
 * \file check_config.h
 * \brief Consistency checks for configuration options
 *  Copyright (C) 2006-2018, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
 * It is recommended to include this file from your config.h
 * in order to catch dependency issues early.
#define MBEDTLS_CHECK_CONFIG_H 
 * We assume CHAR_BIT is 8 in many places. In practice, this is true on our
 * target platforms, so not an issue, but let's just be extra sure.
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/limits.h" 1
# 38 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/check_config.h" 2
# 629 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/check_config.h"
#undef MBEDTLS_THREADING_IMPL
# 676 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/check_config.h"
 * Avoid warning from -pedantic. This is a convenient place for this
 * workaround since this is included by every single file before the
 * #if defined(MBEDTLS_xxx_C) that results in emtpy translation units.
typedef int mbedtls_iso_c_forbids_empty_translation_units;
# 2718 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 2
# 40 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform_time.h" 1
 * \file platform_time.h
 * \brief mbed TLS Platform time abstraction
 *  Copyright (C) 2006-2016, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
#define MBEDTLS_PLATFORM_TIME_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 31 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform_time.h" 2
extern "C" {
 * \name SECTION: Module settings
 * The configuration options you can set for this module are in this section.
 * Either change them in config.h or define them on the compiler command line.
 * \{
 * The time_t datatype
/* For time_t */
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/time.h" 1
 * time.h
 * Struct and function declarations for dealing with time.
# 53 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform_time.h" 2
typedef time_t mbedtls_time_t;
 * The function pointers for time
# 74 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform_time.h"
#define mbedtls_time time
# 44 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h" 2
extern "C" {
 * \name SECTION: Module settings
 * The configuration options you can set for this module are in this section.
 * Either change them in config.h or define them on the compiler command line.
 * \{
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdio.h" 1
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *	@(#)stdio.h	5.3 (Berkeley) 3/15/86
 * NB: to fit things in six character monocase externals, the
 * stdio code uses the prefix `__s' for stdio objects, typically
 * followed by a three-character attempt at a mnemonic.
# 60 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdlib.h" 1
 * stdlib.h
 * Definitions for common types, variables, and functions.
# 61 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/time.h" 1
 * time.h
 * Struct and function declarations for dealing with time.
# 62 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h" 2
#define MBEDTLS_PLATFORM_STD_SNPRINTF snprintf /**< The default \c snprintf function to use.  */
#define MBEDTLS_PLATFORM_STD_PRINTF printf /**< The default \c printf function to use. */
#define MBEDTLS_PLATFORM_STD_FPRINTF fprintf /**< The default \c fprintf function to use. */
# 82 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h"
#define MBEDTLS_PLATFORM_STD_EXIT exit /**< The default \c exit function to use. */
#define MBEDTLS_PLATFORM_STD_TIME time /**< The default \c time function to use. */
#define MBEDTLS_PLATFORM_STD_EXIT_SUCCESS EXIT_SUCCESS /**< The default exit value to use. */
#define MBEDTLS_PLATFORM_STD_EXIT_FAILURE EXIT_FAILURE /**< The default exit value to use. */
#define MBEDTLS_PLATFORM_STD_NV_SEED_READ mbedtls_platform_std_nv_seed_read
#define MBEDTLS_PLATFORM_STD_NV_SEED_WRITE mbedtls_platform_std_nv_seed_write
#define MBEDTLS_PLATFORM_STD_NV_SEED_FILE "seedfile"
# 111 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h"
/* \} name SECTION: Module settings */
 * The function pointers for calloc and free.
/* For size_t */
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 1 3 4
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 3 4
/* Copyright (C) 1989-2015 Free Software Foundation, Inc.
This file is part of GCC.
GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.
GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.
You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
# 124 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h" 2
# 124 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h"
extern void *mbedtls_calloc( size_t n, size_t size );
extern void mbedtls_free( void *ptr );
 * \brief               This function dynamically sets the memory-management
 *                      functions used by the library, during runtime.
 * \param calloc_func   The \c calloc function implementation.
 * \param free_func     The \c free function implementation.
 * \return              \c 0.
int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) );
 * The function pointers for fprintf
# 167 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h"
#define mbedtls_fprintf fprintf
 * The function pointers for printf
# 191 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h"
#define mbedtls_printf printf
 * The function pointers for snprintf
 * The snprintf implementation should conform to C99:
 * - it *must* always correctly zero-terminate the buffer
 *   (except when n == 0, then it must leave the buffer untouched)
 * - however it is acceptable to return -1 instead of the required length when
 *   the destination buffer is too short.
# 226 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h"
#define mbedtls_snprintf MBEDTLS_PLATFORM_STD_SNPRINTF
 * The function pointers for exit
# 250 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h"
#define mbedtls_exit exit
 * The default exit values
#define MBEDTLS_EXIT_SUCCESS MBEDTLS_PLATFORM_STD_EXIT_SUCCESS
#define MBEDTLS_EXIT_FAILURE MBEDTLS_PLATFORM_STD_EXIT_FAILURE
 * The function pointers for reading from and writing a seed file to
 * Non-Volatile storage (NV) in a platform-independent way
 * Only enabled when the NV seed entropy source is enabled
# 312 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform.h"
 * \brief   The platform context structure.
 * \note    This structure may be used to assist platform-specific
 *          setup or teardown operations.
typedef struct mbedtls_platform_context
    char dummy; /**< A placeholder member, as empty structs are not portable. */
mbedtls_platform_context;
 * \brief   This function performs any platform-specific initialization
 *          operations.
 * \note    This function should be called before any other library functions.
 *          Its implementation is platform-specific, and unless
 *          platform-specific code is provided, it does nothing.
 * \note    The usage and necessity of this function is dependent on the platform.
 * \param   ctx     The platform context.
 * \return  \c 0 on success.
int mbedtls_platform_setup( mbedtls_platform_context *ctx );
 * \brief   This function performs any platform teardown operations.
 * \note    This function should be called after every other Mbed TLS module
 *          has been correctly freed using the appropriate free function.
 *          Its implementation is platform-specific, and unless
 *          platform-specific code is provided, it does nothing.
 * \note    The usage and necessity of this function is dependent on the platform.
 * \param   ctx     The platform context.
void mbedtls_platform_teardown( mbedtls_platform_context *ctx );
# 8 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/ssl_client.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net.h" 1
 * \file net.h
 * \brief Deprecated header file that includes net_sockets.h
 * \deprecated Superseded by mbedtls/net_sockets.h
 *  Copyright (C) 2006-2016, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net_sockets.h" 1
 * \file net_sockets.h
 * \brief   Network sockets abstraction layer to integrate Mbed TLS into a
 *          BSD-style sockets API.
 *          The network sockets module provides an example integration of the
 *          Mbed TLS library into a BSD sockets implementation. The module is
 *          intended to be an example of how Mbed TLS can be integrated into a
 *          networking stack, as well as to be Mbed TLS's network integration
 *          for its supported platforms.
 *          The module is intended only to be used with the Mbed TLS library and
 *          is not intended to be used by third party application software
 *          directly.
 *          The supported platforms are as follows:
 *              * Microsoft Windows and Windows CE
 *              * POSIX/Unix platforms including Linux, OS X
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
#define MBEDTLS_NET_SOCKETS_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 47 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net_sockets.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h" 1
 * \file ssl.h
 * \brief SSL/TLS functions.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
#define MBEDTLS_SSL_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 31 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h" 1
 * \file bignum.h
 * \brief Multi-precision integer library
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
#define MBEDTLS_BIGNUM_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 31 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 1 3 4
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 3 4
/* Copyright (C) 1989-2015 Free Software Foundation, Inc.
This file is part of GCC.
GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.
GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.
You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
# 34 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdint.h" 1
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdint.h"
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
# 35 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdio.h" 1
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *	@(#)stdio.h	5.3 (Berkeley) 3/15/86
 * NB: to fit things in six character monocase externals, the
 * stdio code uses the prefix `__s' for stdio objects, typically
 * followed by a three-character attempt at a mnemonic.
# 38 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h" 2
#define MBEDTLS_ERR_MPI_FILE_IO_ERROR -0x0002 /**< An error occurred while reading from or writing to a file. */
#define MBEDTLS_ERR_MPI_BAD_INPUT_DATA -0x0004 /**< Bad input parameters to function. */
#define MBEDTLS_ERR_MPI_INVALID_CHARACTER -0x0006 /**< There is an invalid character in the digit string. */
#define MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL -0x0008 /**< The buffer is too small to write to. */
#define MBEDTLS_ERR_MPI_NEGATIVE_VALUE -0x000A /**< The input arguments are negative or result in illegal output. */
#define MBEDTLS_ERR_MPI_DIVISION_BY_ZERO -0x000C /**< The input argument for division is zero, which is not allowed. */
#define MBEDTLS_ERR_MPI_NOT_ACCEPTABLE -0x000E /**< The input arguments are not acceptable. */
#define MBEDTLS_ERR_MPI_ALLOC_FAILED -0x0010 /**< Memory allocation failed. */
#define MBEDTLS_MPI_CHK(f) do { if( ( ret = f ) != 0 ) goto cleanup; } while( 0 )
 * Maximum size MPIs are allowed to grow to in number of limbs.
#define MBEDTLS_MPI_MAX_LIMBS 10000
 * Maximum window size used for modular exponentiation. Default: 6
 * Minimum value: 1. Maximum value: 6.
 * Result is an array of ( 2 << MBEDTLS_MPI_WINDOW_SIZE ) MPIs used
 * for the sliding window calculation. (So 64 by default)
 * Reduction in size, reduces speed.
#define MBEDTLS_MPI_WINDOW_SIZE 6 /**< Maximum windows size used. */
 * Maximum size of MPIs allowed in bits and bytes for user-MPIs.
 * ( Default: 512 bytes => 4096 bits, Maximum tested: 2048 bytes => 16384 bits )
 * Note: Calculations can temporarily result in larger MPIs. So the number
 * of limbs required (MBEDTLS_MPI_MAX_LIMBS) is higher.
#define MBEDTLS_MPI_MAX_SIZE 1024 /**< Maximum number of bytes for usable MPIs. */
#define MBEDTLS_MPI_MAX_BITS ( 8 * MBEDTLS_MPI_MAX_SIZE ) /**< Maximum number of bits for usable MPIs. */
 * When reading from files with mbedtls_mpi_read_file() and writing to files with
 * mbedtls_mpi_write_file() the buffer should have space
 * for a (short) label, the MPI (in the provided radix), the newline
 * characters and the '\0'.
 * By default we assume at least a 10 char label, a minimum radix of 10
 * (decimal) and a maximum of 4096 bit numbers (1234 decimal chars).
 * Autosized at compile time for at least a 10 char label, a minimum radix
 * of 10 (decimal) for a number of MBEDTLS_MPI_MAX_BITS size.
 * This used to be statically sized to 1250 for a maximum of 4096 bit
 * numbers (1234 decimal chars).
 * Calculate using the formula:
 *  MBEDTLS_MPI_RW_BUFFER_SIZE = ceil(MBEDTLS_MPI_MAX_BITS / ln(10) * ln(2)) +
 *                                LabelSize + 6
#define MBEDTLS_MPI_MAX_BITS_SCALE100 ( 100 * MBEDTLS_MPI_MAX_BITS )
#define MBEDTLS_LN_2_DIV_LN_10_SCALE100 332
#define MBEDTLS_MPI_RW_BUFFER_SIZE ( ((MBEDTLS_MPI_MAX_BITS_SCALE100 + MBEDTLS_LN_2_DIV_LN_10_SCALE100 - 1) / MBEDTLS_LN_2_DIV_LN_10_SCALE100) + 10 + 6 )
 * Define the base integer type, architecture-wise.
 * 32 or 64-bit integer types can be forced regardless of the underlying
 * architecture by defining MBEDTLS_HAVE_INT32 or MBEDTLS_HAVE_INT64
 * respectively and undefining MBEDTLS_HAVE_ASM.
 * Double-width integers (e.g. 128-bit in 64-bit architectures) can be
 * disabled by defining MBEDTLS_NO_UDBL_DIVISION.
# 163 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h"
    /* Default to 32-bit compilation */
#define MBEDTLS_HAVE_INT32 
    typedef int32_t mbedtls_mpi_sint;
    typedef uint32_t mbedtls_mpi_uint;
        typedef uint64_t mbedtls_t_udbl;
#define MBEDTLS_HAVE_UDBL 
extern "C" {
 * \brief          MPI structure
typedef struct mbedtls_mpi
    int s; /*!<  integer sign      */
    size_t n; /*!<  total # of limbs  */
    mbedtls_mpi_uint *p; /*!<  pointer to limbs  */
mbedtls_mpi;
 * \brief           Initialize one MPI (make internal references valid)
 *                  This just makes it ready to be set or freed,
 *                  but does not define a value for the MPI.
 * \param X         One MPI to initialize.
void mbedtls_mpi_init( mbedtls_mpi *X );
 * \brief          Unallocate one MPI
 * \param X        One MPI to unallocate.
void mbedtls_mpi_free( mbedtls_mpi *X );
 * \brief          Enlarge to the specified number of limbs
 *                 This function does nothing if the MPI is already large enough.
 * \param X        MPI to grow
 * \param nblimbs  The target number of limbs
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs );
 * \brief          Resize down, keeping at least the specified number of limbs
 *                 If \c X is smaller than \c nblimbs, it is resized up
 *                 instead.
 * \param X        MPI to shrink
 * \param nblimbs  The minimum number of limbs to keep
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
 *                 (this can only happen when resizing up).
int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs );
 * \brief          Copy the contents of Y into X
 * \param X        Destination MPI. It is enlarged if necessary.
 * \param Y        Source MPI.
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y );
 * \brief          Swap the contents of X and Y
 * \param X        First MPI value
 * \param Y        Second MPI value
void mbedtls_mpi_swap( mbedtls_mpi *X, mbedtls_mpi *Y );
 * \brief          Safe conditional assignement X = Y if assign is 1
 * \param X        MPI to conditionally assign to
 * \param Y        Value to be assigned
 * \param assign   1: perform the assignment, 0: keep X's original value
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed,
 * \note           This function is equivalent to
 *                      if( assign ) mbedtls_mpi_copy( X, Y );
 *                 except that it avoids leaking any information about whether
 *                 the assignment was done or not (the above code may leak
 *                 information through branch prediction and/or memory access
 *                 patterns analysis).
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign );
 * \brief          Safe conditional swap X <-> Y if swap is 1
 * \param X        First mbedtls_mpi value
 * \param Y        Second mbedtls_mpi value
 * \param assign   1: perform the swap, 0: keep X and Y's original values
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed,
 * \note           This function is equivalent to
 *                      if( assign ) mbedtls_mpi_swap( X, Y );
 *                 except that it avoids leaking any information about whether
 *                 the assignment was done or not (the above code may leak
 *                 information through branch prediction and/or memory access
 *                 patterns analysis).
int mbedtls_mpi_safe_cond_swap( mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char assign );
 * \brief          Set value from integer
 * \param X        MPI to set
 * \param z        Value to use
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z );
 * \brief          Get a specific bit from X
 * \param X        MPI to use
 * \param pos      Zero-based index of the bit in X
 * \return         Either a 0 or a 1
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos );
 * \brief          Set a bit of X to a specific value of 0 or 1
 * \note           Will grow X if necessary to set a bit to 1 in a not yet
 *                 existing limb. Will not grow if bit should be set to 0
 * \param X        MPI to use
 * \param pos      Zero-based index of the bit in X
 * \param val      The value to set the bit to (0 or 1)
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed,
 *                 MBEDTLS_ERR_MPI_BAD_INPUT_DATA if val is not 0 or 1
int mbedtls_mpi_set_bit( mbedtls_mpi *X, size_t pos, unsigned char val );
 * \brief          Return the number of zero-bits before the least significant
 *                 '1' bit
 * Note: Thus also the zero-based index of the least significant '1' bit
 * \param X        MPI to use
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X );
 * \brief          Return the number of bits up to and including the most
 *                 significant '1' bit'
 * Note: Thus also the one-based index of the most significant '1' bit
 * \param X        MPI to use
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X );
 * \brief          Return the total size in bytes
 * \param X        MPI to use
size_t mbedtls_mpi_size( const mbedtls_mpi *X );
 * \brief          Import from an ASCII string
 * \param X        Destination MPI
 * \param radix    Input numeric base
 * \param s        Null-terminated string buffer
 * \return         0 if successful, or a MBEDTLS_ERR_MPI_XXX error code
int mbedtls_mpi_read_string( mbedtls_mpi *X, int radix, const char *s );
 * \brief          Export into an ASCII string
 * \param X        Source MPI
 * \param radix    Output numeric base
 * \param buf      Buffer to write the string to
 * \param buflen   Length of buf
 * \param olen     Length of the string written, including final NUL byte
 * \return         0 if successful, or a MBEDTLS_ERR_MPI_XXX error code.
 *                 *olen is always updated to reflect the amount
 *                 of data that has (or would have) been written.
 * \note           Call this function with buflen = 0 to obtain the
 *                 minimum required buffer size in *olen.
int mbedtls_mpi_write_string( const mbedtls_mpi *X, int radix,
                              char *buf, size_t buflen, size_t *olen );
 * \brief          Read MPI from a line in an opened file
 * \param X        Destination MPI
 * \param radix    Input numeric base
 * \param fin      Input file handle
 * \return         0 if successful, MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL if
 *                 the file read buffer is too small or a
 *                 MBEDTLS_ERR_MPI_XXX error code
 * \note           On success, this function advances the file stream
 *                 to the end of the current line or to EOF.
 *                 The function returns 0 on an empty line.
 *                 Leading whitespaces are ignored, as is a
 *                 '0x' prefix for radix 16.
int mbedtls_mpi_read_file( mbedtls_mpi *X, int radix, FILE *fin );
 * \brief          Write X into an opened file, or stdout if fout is NULL
 * \param p        Prefix, can be NULL
 * \param X        Source MPI
 * \param radix    Output numeric base
 * \param fout     Output file handle (can be NULL)
 * \return         0 if successful, or a MBEDTLS_ERR_MPI_XXX error code
 * \note           Set fout == NULL to print X on the console.
int mbedtls_mpi_write_file( const char *p, const mbedtls_mpi *X, int radix, FILE *fout );
 * \brief          Import X from unsigned binary data, big endian
 * \param X        Destination MPI
 * \param buf      Input buffer
 * \param buflen   Input buffer size
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen );
 * \brief          Export X into unsigned binary data, big endian.
 *                 Always fills the whole buffer, which will start with zeros
 *                 if the number is smaller.
 * \param X        Source MPI
 * \param buf      Output buffer
 * \param buflen   Output buffer size
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL if buf isn't large enough
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen );
 * \brief          Left-shift: X <<= count
 * \param X        MPI to shift
 * \param count    Amount to shift
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count );
 * \brief          Right-shift: X >>= count
 * \param X        MPI to shift
 * \param count    Amount to shift
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count );
 * \brief          Compare unsigned values
 * \param X        Left-hand MPI
 * \param Y        Right-hand MPI
 * \return         1 if |X| is greater than |Y|,
 *                -1 if |X| is lesser  than |Y| or
 *                 0 if |X| is equal to |Y|
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y );
 * \brief          Compare signed values
 * \param X        Left-hand MPI
 * \param Y        Right-hand MPI
 * \return         1 if X is greater than Y,
 *                -1 if X is lesser  than Y or
 *                 0 if X is equal to Y
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y );
 * \brief          Compare signed values
 * \param X        Left-hand MPI
 * \param z        The integer value to compare to
 * \return         1 if X is greater than z,
 *                -1 if X is lesser  than z or
 *                 0 if X is equal to z
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z );
 * \brief          Unsigned addition: X = |A| + |B|
 * \param X        Destination MPI
 * \param A        Left-hand MPI
 * \param B        Right-hand MPI
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B );
 * \brief          Unsigned subtraction: X = |A| - |B|
 * \param X        Destination MPI
 * \param A        Left-hand MPI
 * \param B        Right-hand MPI
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_NEGATIVE_VALUE if B is greater than A
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B );
 * \brief          Signed addition: X = A + B
 * \param X        Destination MPI
 * \param A        Left-hand MPI
 * \param B        Right-hand MPI
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B );
 * \brief          Signed subtraction: X = A - B
 * \param X        Destination MPI
 * \param A        Left-hand MPI
 * \param B        Right-hand MPI
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B );
 * \brief          Signed addition: X = A + b
 * \param X        Destination MPI
 * \param A        Left-hand MPI
 * \param b        The integer value to add
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b );
 * \brief          Signed subtraction: X = A - b
 * \param X        Destination MPI
 * \param A        Left-hand MPI
 * \param b        The integer value to subtract
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b );
 * \brief          Baseline multiplication: X = A * B
 * \param X        Destination MPI
 * \param A        Left-hand MPI
 * \param B        Right-hand MPI
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B );
 * \brief          Baseline multiplication: X = A * b
 * \param X        Destination MPI
 * \param A        Left-hand MPI
 * \param b        The unsigned integer value to multiply with
 * \note           b is unsigned
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b );
 * \brief          Division by mbedtls_mpi: A = Q * B + R
 * \param Q        Destination MPI for the quotient
 * \param R        Destination MPI for the rest value
 * \param A        Left-hand MPI
 * \param B        Right-hand MPI
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed,
 *                 MBEDTLS_ERR_MPI_DIVISION_BY_ZERO if B == 0
 * \note           Either Q or R can be NULL.
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B );
 * \brief          Division by int: A = Q * b + R
 * \param Q        Destination MPI for the quotient
 * \param R        Destination MPI for the rest value
 * \param A        Left-hand MPI
 * \param b        Integer to divide by
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed,
 *                 MBEDTLS_ERR_MPI_DIVISION_BY_ZERO if b == 0
 * \note           Either Q or R can be NULL.
int mbedtls_mpi_div_int( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, mbedtls_mpi_sint b );
 * \brief          Modulo: R = A mod B
 * \param R        Destination MPI for the rest value
 * \param A        Left-hand MPI
 * \param B        Right-hand MPI
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed,
 *                 MBEDTLS_ERR_MPI_DIVISION_BY_ZERO if B == 0,
 *                 MBEDTLS_ERR_MPI_NEGATIVE_VALUE if B < 0
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B );
 * \brief          Modulo: r = A mod b
 * \param r        Destination mbedtls_mpi_uint
 * \param A        Left-hand MPI
 * \param b        Integer to divide by
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed,
 *                 MBEDTLS_ERR_MPI_DIVISION_BY_ZERO if b == 0,
 *                 MBEDTLS_ERR_MPI_NEGATIVE_VALUE if b < 0
int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_sint b );
 * \brief          Sliding-window exponentiation: X = A^E mod N
 * \param X        Destination MPI
 * \param A        Left-hand MPI
 * \param E        Exponent MPI
 * \param N        Modular MPI
 * \param _RR      Speed-up MPI used for recalculations
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed,
 *                 MBEDTLS_ERR_MPI_BAD_INPUT_DATA if N is negative or even or
 *                 if E is negative
 * \note           _RR is used to avoid re-computing R*R mod N across
 *                 multiple calls, which speeds up things a bit. It can
 *                 be set to NULL if the extra performance is unneeded.
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR );
 * \brief          Fill an MPI X with size bytes of random
 * \param X        Destination MPI
 * \param size     Size in bytes
 * \param f_rng    RNG function
 * \param p_rng    RNG parameter
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
 * \note           The bytes obtained from the PRNG are interpreted
 *                 as a big-endian representation of an MPI; this can
 *                 be relevant in applications like deterministic ECDSA.
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng );
 * \brief          Greatest common divisor: G = gcd(A, B)
 * \param G        Destination MPI
 * \param A        Left-hand MPI
 * \param B        Right-hand MPI
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B );
 * \brief          Modular inverse: X = A^-1 mod N
 * \param X        Destination MPI
 * \param A        Left-hand MPI
 * \param N        Right-hand MPI
 * \return         0 if successful,
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed,
 *                 MBEDTLS_ERR_MPI_BAD_INPUT_DATA if N is <= 1,
                   MBEDTLS_ERR_MPI_NOT_ACCEPTABLE if A has no inverse mod N.
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N );
 * \brief          Miller-Rabin primality test
 * \param X        MPI to check
 * \param f_rng    RNG function
 * \param p_rng    RNG parameter
 * \return         0 if successful (probably prime),
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed,
 *                 MBEDTLS_ERR_MPI_NOT_ACCEPTABLE if X is not prime
int mbedtls_mpi_is_prime( const mbedtls_mpi *X,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng );
 * \brief          Prime number generation
 * \param X        Destination MPI
 * \param nbits    Required size of X in bits
 *                 ( 3 <= nbits <= MBEDTLS_MPI_MAX_BITS )
 * \param dh_flag  If 1, then (X-1)/2 will be prime too
 * \param f_rng    RNG function
 * \param p_rng    RNG parameter
 * \return         0 if successful (probably prime),
 *                 MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed,
 *                 MBEDTLS_ERR_MPI_BAD_INPUT_DATA if nbits is < 3
int mbedtls_mpi_gen_prime( mbedtls_mpi *X, size_t nbits, int dh_flag,
                   int (*f_rng)(void *, unsigned char *, size_t),
                   void *p_rng );
 * \brief          Checkup routine
 * \return         0 if successful, or 1 if the test failed
int mbedtls_mpi_self_test( int verbose );
# 34 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecp.h" 1
 * \file ecp.h
 * \brief This file provides an API for Elliptic Curves over GF(P) (ECP).
 * The use of ECP in cryptography and TLS is defined in
 * <em>Standards for Efficient Cryptography Group (SECG): SEC1
 * Elliptic Curve Cryptography</em> and
 * <em>RFC-4492: Elliptic Curve Cryptography (ECC) Cipher Suites
 * for Transport Layer Security (TLS)</em>.
 * <em>RFC-2409: The Internet Key Exchange (IKE)</em> defines ECP
 * group types.
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
#define MBEDTLS_ECP_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h" 1
 * \file bignum.h
 * \brief Multi-precision integer library
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 40 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecp.h" 2
 * ECP error codes
#define MBEDTLS_ERR_ECP_BAD_INPUT_DATA -0x4F80 /**< Bad input parameters to function. */
#define MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL -0x4F00 /**< The buffer is too small to write to. */
#define MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE -0x4E80 /**< The requested feature is not available, for example, the requested curve is not supported. */
#define MBEDTLS_ERR_ECP_VERIFY_FAILED -0x4E00 /**< The signature is not valid. */
#define MBEDTLS_ERR_ECP_ALLOC_FAILED -0x4D80 /**< Memory allocation failed. */
#define MBEDTLS_ERR_ECP_RANDOM_FAILED -0x4D00 /**< Generation of random value, such as ephemeral key, failed. */
#define MBEDTLS_ERR_ECP_INVALID_KEY -0x4C80 /**< Invalid private or public key. */
#define MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH -0x4C00 /**< The buffer contains a valid signature followed by more data. */
#define MBEDTLS_ERR_ECP_HW_ACCEL_FAILED -0x4B80 /**< The ECP hardware accelerator failed. */
extern "C" {
 * Domain-parameter identifiers: curve, subgroup, and generator.
 * \note Only curves over prime fields are supported.
 * \warning This library does not support validation of arbitrary domain
 * parameters. Therefore, only standardized domain parameters from trusted
 * sources should be used. See mbedtls_ecp_group_load().
typedef enum
    MBEDTLS_ECP_DP_NONE = 0, /*!< Curve not defined. */
    MBEDTLS_ECP_DP_SECP192R1, /*!< Domain parameters for the 192-bit curve defined by FIPS 186-4 and SEC1. */
    MBEDTLS_ECP_DP_SECP224R1, /*!< Domain parameters for the 224-bit curve defined by FIPS 186-4 and SEC1. */
    MBEDTLS_ECP_DP_SECP256R1, /*!< Domain parameters for the 256-bit curve defined by FIPS 186-4 and SEC1. */
    MBEDTLS_ECP_DP_SECP384R1, /*!< Domain parameters for the 384-bit curve defined by FIPS 186-4 and SEC1. */
    MBEDTLS_ECP_DP_SECP521R1, /*!< Domain parameters for the 521-bit curve defined by FIPS 186-4 and SEC1. */
    MBEDTLS_ECP_DP_BP256R1, /*!< Domain parameters for 256-bit Brainpool curve. */
    MBEDTLS_ECP_DP_BP384R1, /*!< Domain parameters for 384-bit Brainpool curve. */
    MBEDTLS_ECP_DP_BP512R1, /*!< Domain parameters for 512-bit Brainpool curve. */
    MBEDTLS_ECP_DP_CURVE25519, /*!< Domain parameters for Curve25519. */
    MBEDTLS_ECP_DP_SECP192K1, /*!< Domain parameters for 192-bit "Koblitz" curve. */
    MBEDTLS_ECP_DP_SECP224K1, /*!< Domain parameters for 224-bit "Koblitz" curve. */
    MBEDTLS_ECP_DP_SECP256K1, /*!< Domain parameters for 256-bit "Koblitz" curve. */
    MBEDTLS_ECP_DP_CURVE448, /*!< Domain parameters for Curve448. */
} mbedtls_ecp_group_id;
 * The number of supported curves, plus one for #MBEDTLS_ECP_DP_NONE.
 * \note Montgomery curves are currently excluded.
#define MBEDTLS_ECP_DP_MAX 12
 * Curve information, for use by other modules.
typedef struct mbedtls_ecp_curve_info
    mbedtls_ecp_group_id grp_id; /*!< An internal identifier. */
    uint16_t tls_id; /*!< The TLS NamedCurve identifier. */
    uint16_t bit_size; /*!< The curve size in bits. */
    const char *name; /*!< A human-friendly name. */
} mbedtls_ecp_curve_info;
 * \brief           The ECP point structure, in Jacobian coordinates.
 * \note            All functions expect and return points satisfying
 *                  the following condition: <code>Z == 0</code> or
 *                  <code>Z == 1</code>. Other values of \p Z are
 *                  used only by internal functions.
 *                  The point is zero, or "at infinity", if <code>Z == 0</code>.
 *                  Otherwise, \p X and \p Y are its standard (affine)
 *                  coordinates.
typedef struct mbedtls_ecp_point
    mbedtls_mpi X; /*!< The X coordinate of the ECP point. */
    mbedtls_mpi Y; /*!< The Y coordinate of the ECP point. */
    mbedtls_mpi Z; /*!< The Z coordinate of the ECP point. */
mbedtls_ecp_point;
 * default mbed TLS elliptic curve arithmetic implementation
 * (in case MBEDTLS_ECP_ALT is defined then the developer has to provide an
 * alternative implementation for the whole module and it will replace this
 * one.)
 * \brief           The ECP group structure.
 * We consider two types of curve equations:
 * <ul><li>Short Weierstrass: <code>y^2 = x^3 + A x + B mod P</code>
 * (SEC1 + RFC-4492)</li>
 * <li>Montgomery: <code>y^2 = x^3 + A x^2 + x mod P</code> (Curve25519,
 * Curve448)</li></ul>
 * In both cases, the generator (\p G) for a prime-order subgroup is fixed.
 * For Short Weierstrass, this subgroup is the whole curve, and its
 * cardinality is denoted by \p N. Our code requires that \p N is an
 * odd prime as mbedtls_ecp_mul() requires an odd number, and
 * mbedtls_ecdsa_sign() requires that it is prime for blinding purposes.
 * For Montgomery curves, we do not store \p A, but <code>(A + 2) / 4</code>,
 * which is the quantity used in the formulas. Additionally, \p nbits is
 * not the size of \p N but the required size for private keys.
 * If \p modp is NULL, reduction modulo \p P is done using a generic algorithm.
 * Otherwise, \p modp must point to a function that takes an \p mbedtls_mpi in the
 * range of <code>0..2^(2*pbits)-1</code>, and transforms it in-place to an integer
 * which is congruent mod \p P to the given MPI, and is close enough to \p pbits
 * in size, so that it may be efficiently brought in the 0..P-1 range by a few
 * additions or subtractions. Therefore, it is only an approximative modular
 * reduction. It must return 0 on success and non-zero on failure.
typedef struct mbedtls_ecp_group
    mbedtls_ecp_group_id id; /*!< An internal group identifier. */
    mbedtls_mpi P; /*!< The prime modulus of the base field. */
    mbedtls_mpi A; /*!< For Short Weierstrass: \p A in the equation. For
                                     Montgomery curves: <code>(A + 2) / 4</code>. */
    mbedtls_mpi B; /*!< For Short Weierstrass: \p B in the equation.
                                     For Montgomery curves: unused. */
    mbedtls_ecp_point G; /*!< The generator of the subgroup used. */
    mbedtls_mpi N; /*!< The order of \p G. */
    size_t pbits; /*!< The number of bits in \p P.*/
    size_t nbits; /*!< For Short Weierstrass: The number of bits in \p P.
                                     For Montgomery curves: the number of bits in the
                                     private keys. */
    unsigned int h; /*!< \internal 1 if the constants are static. */
    int (*modp)(mbedtls_mpi *); /*!< The function for fast pseudo-reduction
                                     mod \p P (see above).*/
    int (*t_pre)(mbedtls_ecp_point *, void *); /*!< Unused. */
    int (*t_post)(mbedtls_ecp_point *, void *); /*!< Unused. */
    void *t_data; /*!< Unused. */
    mbedtls_ecp_point *T; /*!< Pre-computed points for ecp_mul_comb(). */
    size_t T_size; /*!< The number of pre-computed points. */
mbedtls_ecp_group;
 * \name SECTION: Module settings
 * The configuration options you can set for this module are in this section.
 * Either change them in config.h, or define them using the compiler command line.
 * \{
 * The maximum size of the groups, that is, of \c N and \c P.
#define MBEDTLS_ECP_MAX_BITS 521 /**< The maximum size of groups, in bits. */
#define MBEDTLS_ECP_MAX_BYTES ( ( MBEDTLS_ECP_MAX_BITS + 7 ) / 8 )
#define MBEDTLS_ECP_MAX_PT_LEN ( 2 * MBEDTLS_ECP_MAX_BYTES + 1 )
 * Maximum "window" size used for point multiplication.
 * Default: 6.
 * Minimum value: 2. Maximum value: 7.
 * Result is an array of at most ( 1 << ( MBEDTLS_ECP_WINDOW_SIZE - 1 ) )
 * points used for point multiplication. This value is directly tied to EC
 * peak memory usage, so decreasing it by one should roughly cut memory usage
 * by two (if large curves are in use).
 * Reduction in size may reduce speed, but larger curves are impacted first.
 * Sample performances (in ECDHE handshakes/s, with FIXED_POINT_OPTIM = 1):
 *      w-size:     6       5       4       3       2
 *      521       145     141     135     120      97
 *      384       214     209     198     177     146
 *      256       320     320     303     262     226
 *      224       475     475     453     398     342
 *      192       640     640     633     587     476
#define MBEDTLS_ECP_WINDOW_SIZE 6 /**< The maximum window size used. */
 * Trade memory for speed on fixed-point multiplication.
 * This speeds up repeated multiplication of the generator (that is, the
 * multiplication in ECDSA signatures, and half of the multiplications in
 * ECDSA verification and ECDHE) by a factor roughly 3 to 4.
 * The cost is increasing EC peak memory usage by a factor roughly 2.
 * Change this value to 0 to reduce peak memory usage.
#define MBEDTLS_ECP_FIXED_POINT_OPTIM 1 /**< Enable fixed-point speed-up. */
/* \} name SECTION: Module settings */
 * \brief    The ECP key-pair structure.
 * A generic key-pair that may be used for ECDSA and fixed ECDH, for example.
 * \note    Members are deliberately in the same order as in the
 *          ::mbedtls_ecdsa_context structure.
typedef struct mbedtls_ecp_keypair
    mbedtls_ecp_group grp; /*!<  Elliptic curve and base point     */
    mbedtls_mpi d; /*!<  our secret value                  */
    mbedtls_ecp_point Q; /*!<  our public value                  */
mbedtls_ecp_keypair;
 * Point formats, from RFC 4492's enum ECPointFormat
#define MBEDTLS_ECP_PF_UNCOMPRESSED 0 /**< Uncompressed point format. */
#define MBEDTLS_ECP_PF_COMPRESSED 1 /**< Compressed point format. */
 * Some other constants from RFC 4492
#define MBEDTLS_ECP_TLS_NAMED_CURVE 3 /**< The named_curve of ECCurveType. */
 * \brief           This function retrieves the information defined in
 *                  mbedtls_ecp_curve_info() for all supported curves in order
 *                  of preference.
 * \return          A statically allocated array. The last entry is 0.
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_list( void );
 * \brief           This function retrieves the list of internal group
 *                  identifiers of all supported curves in the order of
 *                  preference.
 * \return          A statically allocated array,
 *                  terminated with MBEDTLS_ECP_DP_NONE.
const mbedtls_ecp_group_id *mbedtls_ecp_grp_id_list( void );
 * \brief           This function retrieves curve information from an internal
 *                  group identifier.
 * \param grp_id    An \c MBEDTLS_ECP_DP_XXX value.
 * \return          The associated curve information on success.
 * \return          NULL on failure.
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id );
 * \brief           This function retrieves curve information from a TLS
 *                  NamedCurve value.
 * \param tls_id    An \c MBEDTLS_ECP_DP_XXX value.
 * \return          The associated curve information on success.
 * \return          NULL on failure.
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id );
 * \brief           This function retrieves curve information from a
 *                  human-readable name.
 * \param name      The human-readable name.
 * \return          The associated curve information on success.
 * \return          NULL on failure.
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_name( const char *name );
 * \brief           This function initializes a point as zero.
 * \param pt        The point to initialize.
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt );
 * \brief           This function initializes an ECP group context
 *                  without loading any domain parameters.
 * \note            After this function is called, domain parameters
 *                  for various ECP groups can be loaded through the
 *                  mbedtls_ecp_load() or mbedtls_ecp_tls_read_group()
 *                  functions.
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp );
 * \brief           This function initializes a key pair as an invalid one.
 * \param key       The key pair to initialize.
void mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key );
 * \brief           This function frees the components of a point.
 * \param pt        The point to free.
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt );
 * \brief           This function frees the components of an ECP group.
 * \param grp       The group to free.
void mbedtls_ecp_group_free( mbedtls_ecp_group *grp );
 * \brief           This function frees the components of a key pair.
 * \param key       The key pair to free.
void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key );
 * \brief           This function copies the contents of point \p Q into
 *                  point \p P.
 * \param P         The destination point.
 * \param Q         The source point.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory-allocation failure.
int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q );
 * \brief           This function copies the contents of group \p src into
 *                  group \p dst.
 * \param dst       The destination group.
 * \param src       The source group.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory-allocation failure.
int mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src );
 * \brief           This function sets a point to zero.
 * \param pt        The point to set.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory-allocation failure.
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt );
 * \brief           This function checks if a point is zero.
 * \param pt        The point to test.
 * \return          \c 1 if the point is zero.
 * \return          \c 0 if the point is non-zero.
int mbedtls_ecp_is_zero( mbedtls_ecp_point *pt );
 * \brief           This function compares two points.
 * \note            This assumes that the points are normalized. Otherwise,
 *                  they may compare as "not equal" even if they are.
 * \param P         The first point to compare.
 * \param Q         The second point to compare.
 * \return          \c 0 if the points are equal.
 * \return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if the points are not equal.
int mbedtls_ecp_point_cmp( const mbedtls_ecp_point *P,
                           const mbedtls_ecp_point *Q );
 * \brief           This function imports a non-zero point from two ASCII
 *                  strings.
 * \param P         The destination point.
 * \param radix     The numeric base of the input.
 * \param x         The first affine coordinate, as a null-terminated string.
 * \param y         The second affine coordinate, as a null-terminated string.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_MPI_XXX error code on failure.
int mbedtls_ecp_point_read_string( mbedtls_ecp_point *P, int radix,
                           const char *x, const char *y );
 * \brief           This function exports a point into unsigned binary data.
 * \param grp       The group to which the point should belong.
 * \param P         The point to export.
 * \param format    The point format. Should be an \c MBEDTLS_ECP_PF_XXX macro.
 * \param olen      The length of the output.
 * \param buf       The output buffer.
 * \param buflen    The length of the output buffer.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA
 *                  or #MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL on failure.
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *P,
                            int format, size_t *olen,
                            unsigned char *buf, size_t buflen );
 * \brief           This function imports a point from unsigned binary data.
 * \note            This function does not check that the point actually
 *                  belongs to the given group, see mbedtls_ecp_check_pubkey()
 *                  for that.
 * \param grp       The group to which the point should belong.
 * \param P         The point to import.
 * \param buf       The input buffer.
 * \param ilen      The length of the input.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if input is invalid.
 * \return          #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory-allocation failure.
 * \return          #MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE if the point format
 *                  is not implemented.
int mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,
                           const unsigned char *buf, size_t ilen );
 * \brief           This function imports a point from a TLS ECPoint record.
 * \note            On function return, \p buf is updated to point to immediately
 *                  after the ECPoint record.
 * \param grp       The ECP group used.
 * \param pt        The destination point.
 * \param buf       The address of the pointer to the start of the input buffer.
 * \param len       The length of the buffer.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_MPI_XXX error code on initialization failure.
 * \return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if input is invalid.
int mbedtls_ecp_tls_read_point( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
                        const unsigned char **buf, size_t len );
 * \brief           This function exports a point as a TLS ECPoint record.
 * \param grp       The ECP group used.
 * \param pt        The point format to export to. The point format is an
 *                  \c MBEDTLS_ECP_PF_XXX constant.
 * \param format    The export format.
 * \param olen      The length of the data written.
 * \param buf       The buffer to write to.
 * \param blen      The length of the buffer.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA or
 *                  #MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL on failure.
int mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,
                         int format, size_t *olen,
                         unsigned char *buf, size_t blen );
 * \brief           This function sets a group using standardized domain parameters.
 * \note            The index should be a value of the NamedCurve enum,
 *                  as defined in <em>RFC-4492: Elliptic Curve Cryptography
 *                  (ECC) Cipher Suites for Transport Layer Security (TLS)</em>,
 *                  usually in the form of an \c MBEDTLS_ECP_DP_XXX macro.
 * \param grp       The destination group.
 * \param id        The identifier of the domain parameter set to load.
 * \return          \c 0 on success,
 * \return          An \c MBEDTLS_ERR_MPI_XXX error code on initialization failure.
 * \return          #MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE for unkownn groups.
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id );
 * \brief           This function sets a group from a TLS ECParameters record.
 * \note            \p buf is updated to point right after the ECParameters record
 *                  on exit.
 * \param grp       The destination group.
 * \param buf       The address of the pointer to the start of the input buffer.
 * \param len       The length of the buffer.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_MPI_XXX error code on initialization failure.
 * \return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if input is invalid.
int mbedtls_ecp_tls_read_group( mbedtls_ecp_group *grp, const unsigned char **buf, size_t len );
 * \brief           This function writes the TLS ECParameters record for a group.
 * \param grp       The ECP group used.
 * \param olen      The number of Bytes written.
 * \param buf       The buffer to write to.
 * \param blen      The length of the buffer.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL on failure.
int mbedtls_ecp_tls_write_group( const mbedtls_ecp_group *grp, size_t *olen,
                         unsigned char *buf, size_t blen );
 * \brief           This function performs multiplication of a point by
 *                  an integer: \p R = \p m * \p P.
 *                  It is not thread-safe to use same group in multiple threads.
 * \note            To prevent timing attacks, this function
 *                  executes the exact same sequence of base-field
 *                  operations for any valid \p m. It avoids any if-branch or
 *                  array index depending on the value of \p m.
 * \note            If \p f_rng is not NULL, it is used to randomize
 *                  intermediate results to prevent potential timing attacks
 *                  targeting these results. We recommend always providing
 *                  a non-NULL \p f_rng. The overhead is negligible.
 * \param grp       The ECP group.
 * \param R         The destination point.
 * \param m         The integer by which to multiply.
 * \param P         The point to multiply.
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_ECP_INVALID_KEY if \p m is not a valid private
 *                  key, or \p P is not a valid public key.
 * \return          #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory-allocation failure.
int mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );
 * \brief           This function performs multiplication and addition of two
 *                  points by integers: \p R = \p m * \p P + \p n * \p Q
 *                  It is not thread-safe to use same group in multiple threads.
 * \note            In contrast to mbedtls_ecp_mul(), this function does not
 *                  guarantee a constant execution flow and timing.
 * \param grp       The ECP group.
 * \param R         The destination point.
 * \param m         The integer by which to multiply \p P.
 * \param P         The point to multiply by \p m.
 * \param n         The integer by which to multiply \p Q.
 * \param Q         The point to be multiplied by \p n.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_ECP_INVALID_KEY if \p m or \p n are not
 *                  valid private keys, or \p P or \p Q are not valid public
 *                  keys.
 * \return          #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory-allocation failure.
int mbedtls_ecp_muladd( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q );
 * \brief           This function checks that a point is a valid public key
 *                  on this curve.
 *                  It only checks that the point is non-zero, has
 *                  valid coordinates and lies on the curve. It does not verify
 *                  that it is indeed a multiple of \p G. This additional
 *                  check is computationally more expensive, is not required
 *                  by standards, and should not be necessary if the group
 *                  used has a small cofactor. In particular, it is useless for
 *                  the NIST groups which all have a cofactor of 1.
 * \note            This function uses bare components rather than an
 *                  ::mbedtls_ecp_keypair structure, to ease use with other
 *                  structures, such as ::mbedtls_ecdh_context or
 *                  ::mbedtls_ecdsa_context.
 * \param grp       The curve the point should lie on.
 * \param pt        The point to check.
 * \return          \c 0 if the point is a valid public key.
 * \return          #MBEDTLS_ERR_ECP_INVALID_KEY on failure.
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt );
 * \brief           This function checks that an \p mbedtls_mpi is a valid private
 *                  key for this curve.
 * \note            This function uses bare components rather than an
 *                  ::mbedtls_ecp_keypair structure to ease use with other
 *                  structures, such as ::mbedtls_ecdh_context or
 *                  ::mbedtls_ecdsa_context.
 * \param grp       The group used.
 * \param d         The integer to check.
 * \return          \c 0 if the point is a valid private key.
 * \return          #MBEDTLS_ERR_ECP_INVALID_KEY on failure.
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d );
 * \brief           This function generates a keypair with a configurable base
 *                  point.
 * \note            This function uses bare components rather than an
 *                  ::mbedtls_ecp_keypair structure to ease use with other
 *                  structures, such as ::mbedtls_ecdh_context or
 *                  ::mbedtls_ecdsa_context.
 * \param grp       The ECP group.
 * \param G         The chosen base point.
 * \param d         The destination MPI (secret part).
 * \param Q         The destination point (public part).
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX or \c MBEDTLS_MPI_XXX error code
 *                  on failure.
int mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,
                     const mbedtls_ecp_point *G,
                     mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng );
 * \brief           This function generates an ECP keypair.
 * \note            This function uses bare components rather than an
 *                  ::mbedtls_ecp_keypair structure to ease use with other
 *                  structures, such as ::mbedtls_ecdh_context or
 *                  ::mbedtls_ecdsa_context.
 * \param grp       The ECP group.
 * \param d         The destination MPI (secret part).
 * \param Q         The destination point (public part).
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX or \c MBEDTLS_MPI_XXX error code
 *                  on failure.
int mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng );
 * \brief           This function generates an ECP key.
 * \param grp_id    The ECP group identifier.
 * \param key       The destination key.
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX or \c MBEDTLS_MPI_XXX error code
 *                  on failure.
int mbedtls_ecp_gen_key( mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );
 * \brief           This function checks that the keypair objects
 *                  \p pub and \p prv have the same group and the
 *                  same public point, and that the private key in
 *                  \p prv is consistent with the public key.
 * \param pub       The keypair structure holding the public key.
 *                  If it contains a private key, that part is ignored.
 * \param prv       The keypair structure holding the full keypair.
 * \return          \c 0 on success, meaning that the keys are valid and match.
 * \return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if the keys are invalid or do not match.
 * \return          An \c MBEDTLS_ERR_ECP_XXX or an \c MBEDTLS_ERR_MPI_XXX
 *                  error code on calculation failure.
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv );
 * \brief          The ECP checkup routine.
 * \return         \c 0 on success.
 * \return         \c 1 on failure.
int mbedtls_ecp_self_test( int verbose );
# 35 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl_ciphersuites.h" 1
 * \file ssl_ciphersuites.h
 * \brief SSL Ciphersuites for mbed TLS
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
#define MBEDTLS_SSL_CIPHERSUITES_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/pk.h" 1
 * \file pk.h
 * \brief Public Key abstraction layer
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
#define MBEDTLS_PK_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 32 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/pk.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/md.h" 1
 /**
 * \file md.h
 * \brief This file contains the generic message-digest wrapper.
 * \author Adriaan de Jong <dejong@fox-it.com>
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
#define MBEDTLS_MD_H 
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 1 3 4
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 3 4
/* Copyright (C) 1989-2015 Free Software Foundation, Inc.
This file is part of GCC.
GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.
GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.
You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
# 31 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/md.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h"
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 36 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/md.h" 2
#define MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE -0x5080 /**< The selected feature is not available. */
#define MBEDTLS_ERR_MD_BAD_INPUT_DATA -0x5100 /**< Bad input parameters to function. */
#define MBEDTLS_ERR_MD_ALLOC_FAILED -0x5180 /**< Failed to allocate memory. */
#define MBEDTLS_ERR_MD_FILE_IO_ERROR -0x5200 /**< Opening or reading of file failed. */
#define MBEDTLS_ERR_MD_HW_ACCEL_FAILED -0x5280 /**< MD hardware accelerator failed. */
extern "C" {
 * \brief     Supported message digests.
 * \warning   MD2, MD4, MD5 and SHA-1 are considered weak message digests and
 *            their use constitutes a security risk. We recommend considering
 *            stronger message digests instead.
typedef enum {
    MBEDTLS_MD_NONE=0, /**< None. */
    MBEDTLS_MD_MD2, /**< The MD2 message digest. */
    MBEDTLS_MD_MD4, /**< The MD4 message digest. */
    MBEDTLS_MD_MD5, /**< The MD5 message digest. */
    MBEDTLS_MD_SHA1, /**< The SHA-1 message digest. */
    MBEDTLS_MD_SHA224, /**< The SHA-224 message digest. */
    MBEDTLS_MD_SHA256, /**< The SHA-256 message digest. */
    MBEDTLS_MD_SHA384, /**< The SHA-384 message digest. */
    MBEDTLS_MD_SHA512, /**< The SHA-512 message digest. */
    MBEDTLS_MD_RIPEMD160, /**< The RIPEMD-160 message digest. */
} mbedtls_md_type_t;
#define MBEDTLS_MD_MAX_SIZE 64 /* longest known is SHA512 */
 * Opaque struct defined in md_internal.h.
typedef struct mbedtls_md_info_t mbedtls_md_info_t;
 * The generic message-digest context.
typedef struct mbedtls_md_context_t
    /** Information about the associated message digest. */
    const mbedtls_md_info_t *md_info;
    /** The digest-specific context. */
    void *md_ctx;
    /** The HMAC part of the context. */
    void *hmac_ctx;
} mbedtls_md_context_t;
 * \brief           This function returns the list of digests supported by the
 *                  generic digest module.
 * \return          A statically allocated array of digests. Each element
 *                  in the returned list is an integer belonging to the
 *                  message-digest enumeration #mbedtls_md_type_t.
 *                  The last entry is 0.
const int *mbedtls_md_list( void );
 * \brief           This function returns the message-digest information
 *                  associated with the given digest name.
 * \param md_name   The name of the digest to search for.
 * \return          The message-digest information associated with \p md_name.
 * \return          NULL if the associated message-digest information is not found.
const mbedtls_md_info_t *mbedtls_md_info_from_string( const char *md_name );
 * \brief           This function returns the message-digest information
 *                  associated with the given digest type.
 * \param md_type   The type of digest to search for.
 * \return          The message-digest information associated with \p md_type.
 * \return          NULL if the associated message-digest information is not found.
const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type );
 * \brief           This function initializes a message-digest context without
 *                  binding it to a particular message-digest algorithm.
 *                  This function should always be called first. It prepares the
 *                  context for mbedtls_md_setup() for binding it to a
 *                  message-digest algorithm.
void mbedtls_md_init( mbedtls_md_context_t *ctx );
 * \brief           This function clears the internal structure of \p ctx and
 *                  frees any embedded internal structure, but does not free
 *                  \p ctx itself.
 *                  If you have called mbedtls_md_setup() on \p ctx, you must
 *                  call mbedtls_md_free() when you are no longer using the
 *                  context.
 *                  Calling this function if you have previously
 *                  called mbedtls_md_init() and nothing else is optional.
 *                  You must not call this function if you have not called
 *                  mbedtls_md_init().
void mbedtls_md_free( mbedtls_md_context_t *ctx );
#define MBEDTLS_DEPRECATED 
 * \brief           This function selects the message digest algorithm to use,
 *                  and allocates internal structures.
 *                  It should be called after mbedtls_md_init() or mbedtls_md_free().
 *                  Makes it necessary to call mbedtls_md_free() later.
 * \deprecated      Superseded by mbedtls_md_setup() in 2.0.0
 * \param ctx       The context to set up.
 * \param md_info   The information structure of the message-digest algorithm
 *                  to use.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification
 *                  failure.
 * \return          #MBEDTLS_ERR_MD_ALLOC_FAILED on memory-allocation failure.
int mbedtls_md_init_ctx( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info ) ;
#undef MBEDTLS_DEPRECATED
 * \brief           This function selects the message digest algorithm to use,
 *                  and allocates internal structures.
 *                  It should be called after mbedtls_md_init() or
 *                  mbedtls_md_free(). Makes it necessary to call
 *                  mbedtls_md_free() later.
 * \param ctx       The context to set up.
 * \param md_info   The information structure of the message-digest algorithm
 *                  to use.
 * \param hmac      Defines if HMAC is used. 0: HMAC is not used (saves some memory),
 *                  or non-zero: HMAC is used with this context.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification
 *                  failure.
 * \return          #MBEDTLS_ERR_MD_ALLOC_FAILED on memory-allocation failure.
int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac );
 * \brief           This function clones the state of an message-digest
 *                  context.
 * \note            You must call mbedtls_md_setup() on \c dst before calling
 *                  this function.
 * \note            The two contexts must have the same type,
 *                  for example, both are SHA-256.
 * \warning         This function clones the message-digest state, not the
 *                  HMAC state.
 * \param dst       The destination context.
 * \param src       The context to be cloned.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification failure.
int mbedtls_md_clone( mbedtls_md_context_t *dst,
                      const mbedtls_md_context_t *src );
 * \brief           This function extracts the message-digest size from the
 *                  message-digest information structure.
 * \param md_info   The information structure of the message-digest algorithm
 *                  to use.
 * \return          The size of the message-digest output in Bytes.
unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info );
 * \brief           This function extracts the message-digest type from the
 *                  message-digest information structure.
 * \param md_info   The information structure of the message-digest algorithm
 *                  to use.
 * \return          The type of the message digest.
mbedtls_md_type_t mbedtls_md_get_type( const mbedtls_md_info_t *md_info );
 * \brief           This function extracts the message-digest name from the
 *                  message-digest information structure.
 * \param md_info   The information structure of the message-digest algorithm
 *                  to use.
 * \return          The name of the message digest.
const char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info );
 * \brief           This function starts a message-digest computation.
 *                  You must call this function after setting up the context
 *                  with mbedtls_md_setup(), and before passing data with
 *                  mbedtls_md_update().
 * \param ctx       The generic message-digest context.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification
 *                  failure.
int mbedtls_md_starts( mbedtls_md_context_t *ctx );
 * \brief           This function feeds an input buffer into an ongoing
 *                  message-digest computation.
 *                  You must call mbedtls_md_starts() before calling this
 *                  function. You may call this function multiple times.
 *                  Afterwards, call mbedtls_md_finish().
 * \param ctx       The generic message-digest context.
 * \param input     The buffer holding the input data.
 * \param ilen      The length of the input data.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification
 *                  failure.
int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen );
 * \brief           This function finishes the digest operation,
 *                  and writes the result to the output buffer.
 *                  Call this function after a call to mbedtls_md_starts(),
 *                  followed by any number of calls to mbedtls_md_update().
 *                  Afterwards, you may either clear the context with
 *                  mbedtls_md_free(), or call mbedtls_md_starts() to reuse
 *                  the context for another digest operation with the same
 *                  algorithm.
 * \param ctx       The generic message-digest context.
 * \param output    The buffer for the generic message-digest checksum result.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification
 *                  failure.
int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output );
 * \brief          This function calculates the message-digest of a buffer,
 *                 with respect to a configurable message-digest algorithm
 *                 in a single call.
 *                 The result is calculated as
 *                 Output = message_digest(input buffer).
 * \param md_info  The information structure of the message-digest algorithm
 *                 to use.
 * \param input    The buffer holding the data.
 * \param ilen     The length of the input data.
 * \param output   The generic message-digest checksum result.
 * \return         \c 0 on success.
 * \return         #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification
 *                 failure.
int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
        unsigned char *output );
 * \brief          This function calculates the message-digest checksum
 *                 result of the contents of the provided file.
 *                 The result is calculated as
 *                 Output = message_digest(file contents).
 * \param md_info  The information structure of the message-digest algorithm
 *                 to use.
 * \param path     The input file name.
 * \param output   The generic message-digest checksum result.
 * \return         \c 0 on success.
 * \return         #MBEDTLS_ERR_MD_FILE_IO_ERROR on an I/O error accessing
 *                 the file pointed by \p path.
 * \return         #MBEDTLS_ERR_MD_BAD_INPUT_DATA if \p md_info was NULL.
int mbedtls_md_file( const mbedtls_md_info_t *md_info, const char *path,
                     unsigned char *output );
 * \brief           This function sets the HMAC key and prepares to
 *                  authenticate a new message.
 *                  Call this function after mbedtls_md_setup(), to use
 *                  the MD context for an HMAC calculation, then call
 *                  mbedtls_md_hmac_update() to provide the input data, and
 *                  mbedtls_md_hmac_finish() to get the HMAC value.
 * \param ctx       The message digest context containing an embedded HMAC
 *                  context.
 * \param key       The HMAC secret key.
 * \param keylen    The length of the HMAC key in Bytes.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification
 *                  failure.
int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key,
                    size_t keylen );
 * \brief           This function feeds an input buffer into an ongoing HMAC
 *                  computation.
 *                  Call mbedtls_md_hmac_starts() or mbedtls_md_hmac_reset()
 *                  before calling this function.
 *                  You may call this function multiple times to pass the
 *                  input piecewise.
 *                  Afterwards, call mbedtls_md_hmac_finish().
 * \param ctx       The message digest context containing an embedded HMAC
 *                  context.
 * \param input     The buffer holding the input data.
 * \param ilen      The length of the input data.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification
 *                  failure.
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input,
                    size_t ilen );
 * \brief           This function finishes the HMAC operation, and writes
 *                  the result to the output buffer.
 *                  Call this function after mbedtls_md_hmac_starts() and
 *                  mbedtls_md_hmac_update() to get the HMAC value. Afterwards
 *                  you may either call mbedtls_md_free() to clear the context,
 *                  or call mbedtls_md_hmac_reset() to reuse the context with
 *                  the same HMAC key.
 * \param ctx       The message digest context containing an embedded HMAC
 *                  context.
 * \param output    The generic HMAC checksum result.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification
 *                  failure.
int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output);
 * \brief           This function prepares to authenticate a new message with
 *                  the same key as the previous HMAC operation.
 *                  You may call this function after mbedtls_md_hmac_finish().
 *                  Afterwards call mbedtls_md_hmac_update() to pass the new
 *                  input.
 * \param ctx       The message digest context containing an embedded HMAC
 *                  context.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification
 *                  failure.
int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx );
 * \brief          This function calculates the full generic HMAC
 *                 on the input buffer with the provided key.
 *                 The function allocates the context, performs the
 *                 calculation, and frees the context.
 *                 The HMAC result is calculated as
 *                 output = generic HMAC(hmac key, input buffer).
 * \param md_info  The information structure of the message-digest algorithm
 *                 to use.
 * \param key      The HMAC secret key.
 * \param keylen   The length of the HMAC secret key in Bytes.
 * \param input    The buffer holding the input data.
 * \param ilen     The length of the input data.
 * \param output   The generic HMAC result.
 * \return         \c 0 on success.
 * \return         #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification
 *                 failure.
int mbedtls_md_hmac( const mbedtls_md_info_t *md_info, const unsigned char *key, size_t keylen,
                const unsigned char *input, size_t ilen,
                unsigned char *output );
/* Internal use */
int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data );
# 35 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/pk.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/rsa.h" 1
 * \file rsa.h
 * \brief This file provides an API for the RSA public-key cryptosystem.
 * The RSA public-key cryptosystem is defined in <em>Public-Key
 * Cryptography Standards (PKCS) #1 v1.5: RSA Encryption</em>
 * and <em>Public-Key Cryptography Standards (PKCS) #1 v2.1:
 * RSA Cryptography Specifications</em>.
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
#define MBEDTLS_RSA_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 37 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/rsa.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h" 1
 * \file bignum.h
 * \brief Multi-precision integer library
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 40 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/rsa.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/md.h" 1
 /**
 * \file md.h
 * \brief This file contains the generic message-digest wrapper.
 * \author Adriaan de Jong <dejong@fox-it.com>
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
# 41 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/rsa.h" 2
 * RSA Error codes
#define MBEDTLS_ERR_RSA_BAD_INPUT_DATA -0x4080 /**< Bad input parameters to function. */
#define MBEDTLS_ERR_RSA_INVALID_PADDING -0x4100 /**< Input data contains invalid padding and is rejected. */
#define MBEDTLS_ERR_RSA_KEY_GEN_FAILED -0x4180 /**< Something failed during generation of a key. */
#define MBEDTLS_ERR_RSA_KEY_CHECK_FAILED -0x4200 /**< Key failed to pass the validity check of the library. */
#define MBEDTLS_ERR_RSA_PUBLIC_FAILED -0x4280 /**< The public key operation failed. */
#define MBEDTLS_ERR_RSA_PRIVATE_FAILED -0x4300 /**< The private key operation failed. */
#define MBEDTLS_ERR_RSA_VERIFY_FAILED -0x4380 /**< The PKCS#1 verification failed. */
#define MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE -0x4400 /**< The output buffer for decryption is not large enough. */
#define MBEDTLS_ERR_RSA_RNG_FAILED -0x4480 /**< The random generator failed to generate non-zeros. */
#define MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION -0x4500 /**< The implementation does not offer the requested operation, for example, because of security violations or lack of functionality. */
#define MBEDTLS_ERR_RSA_HW_ACCEL_FAILED -0x4580 /**< RSA hardware accelerator failed. */
 * RSA constants
#define MBEDTLS_RSA_PUBLIC 0 /**< Request private key operation. */
#define MBEDTLS_RSA_PRIVATE 1 /**< Request public key operation. */
#define MBEDTLS_RSA_PKCS_V15 0 /**< Use PKCS#1 v1.5 encoding. */
#define MBEDTLS_RSA_PKCS_V21 1 /**< Use PKCS#1 v2.1 encoding. */
#define MBEDTLS_RSA_SIGN 1 /**< Identifier for RSA signature operations. */
#define MBEDTLS_RSA_CRYPT 2 /**< Identifier for RSA encryption and decryption operations. */
#define MBEDTLS_RSA_SALT_LEN_ANY -1
 * The above constants may be used even if the RSA module is compile out,
 * eg for alternative (PKCS#11) RSA implemenations in the PK layers.
extern "C" {
// Regular implementation
 * \brief   The RSA context structure.
 * \note    Direct manipulation of the members of this structure
 *          is deprecated. All manipulation should instead be done through
 *          the public interface functions.
typedef struct mbedtls_rsa_context
    int ver; /*!<  Always 0.*/
    size_t len; /*!<  The size of \p N in Bytes. */
    mbedtls_mpi N; /*!<  The public modulus. */
    mbedtls_mpi E; /*!<  The public exponent. */
    mbedtls_mpi D; /*!<  The private exponent. */
    mbedtls_mpi P; /*!<  The first prime factor. */
    mbedtls_mpi Q; /*!<  The second prime factor. */
    mbedtls_mpi DP; /*!<  <code>D % (P - 1)</code>. */
    mbedtls_mpi DQ; /*!<  <code>D % (Q - 1)</code>. */
    mbedtls_mpi QP; /*!<  <code>1 / (Q % P)</code>. */
    mbedtls_mpi RN; /*!<  cached <code>R^2 mod N</code>. */
    mbedtls_mpi RP; /*!<  cached <code>R^2 mod P</code>. */
    mbedtls_mpi RQ; /*!<  cached <code>R^2 mod Q</code>. */
    mbedtls_mpi Vi; /*!<  The cached blinding value. */
    mbedtls_mpi Vf; /*!<  The cached un-blinding value. */
    int padding; /*!< Selects padding mode:
                                     #MBEDTLS_RSA_PKCS_V15 for 1.5 padding and
                                     #MBEDTLS_RSA_PKCS_V21 for OAEP or PSS. */
    int hash_id; /*!< Hash identifier of mbedtls_md_type_t type,
                                     as specified in md.h for use in the MGF
                                     mask generating function used in the
                                     EME-OAEP and EMSA-PSS encodings. */
mbedtls_rsa_context;
 * \brief          This function initializes an RSA context.
 * \note           Set padding to #MBEDTLS_RSA_PKCS_V21 for the RSAES-OAEP
 *                 encryption scheme and the RSASSA-PSS signature scheme.
 * \note           The \p hash_id parameter is ignored when using
 *                 #MBEDTLS_RSA_PKCS_V15 padding.
 * \note           The choice of padding mode is strictly enforced for private key
 *                 operations, since there might be security concerns in
 *                 mixing padding modes. For public key operations it is
 *                 a default value, which can be overriden by calling specific
 *                 \c rsa_rsaes_xxx or \c rsa_rsassa_xxx functions.
 * \note           The hash selected in \p hash_id is always used for OEAP
 *                 encryption. For PSS signatures, it is always used for
 *                 making signatures, but can be overriden for verifying them.
 *                 If set to #MBEDTLS_MD_NONE, it is always overriden.
 * \param ctx      The RSA context to initialize.
 * \param padding  Selects padding mode: #MBEDTLS_RSA_PKCS_V15 or
 *                 #MBEDTLS_RSA_PKCS_V21.
 * \param hash_id  The hash identifier of #mbedtls_md_type_t type, if
 *                 \p padding is #MBEDTLS_RSA_PKCS_V21.
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
                       int padding,
                       int hash_id);
 * \brief          This function imports a set of core parameters into an
 *                 RSA context.
 * \note           This function can be called multiple times for successive
 *                 imports, if the parameters are not simultaneously present.
 *                 Any sequence of calls to this function should be followed
 *                 by a call to mbedtls_rsa_complete(), which checks and
 *                 completes the provided information to a ready-for-use
 *                 public or private RSA key.
 * \note           See mbedtls_rsa_complete() for more information on which
 *                 parameters are necessary to set up a private or public
 *                 RSA key.
 * \note           The imported parameters are copied and need not be preserved
 *                 for the lifetime of the RSA context being set up.
 * \param ctx      The initialized RSA context to store the parameters in.
 * \param N        The RSA modulus, or NULL.
 * \param P        The first prime factor of \p N, or NULL.
 * \param Q        The second prime factor of \p N, or NULL.
 * \param D        The private exponent, or NULL.
 * \param E        The public exponent, or NULL.
 * \return         \c 0 on success.
 * \return         A non-zero error code on failure.
int mbedtls_rsa_import( mbedtls_rsa_context *ctx,
                        const mbedtls_mpi *N,
                        const mbedtls_mpi *P, const mbedtls_mpi *Q,
                        const mbedtls_mpi *D, const mbedtls_mpi *E );
 * \brief          This function imports core RSA parameters, in raw big-endian
 *                 binary format, into an RSA context.
 * \note           This function can be called multiple times for successive
 *                 imports, if the parameters are not simultaneously present.
 *                 Any sequence of calls to this function should be followed
 *                 by a call to mbedtls_rsa_complete(), which checks and
 *                 completes the provided information to a ready-for-use
 *                 public or private RSA key.
 * \note           See mbedtls_rsa_complete() for more information on which
 *                 parameters are necessary to set up a private or public
 *                 RSA key.
 * \note           The imported parameters are copied and need not be preserved
 *                 for the lifetime of the RSA context being set up.
 * \param ctx      The initialized RSA context to store the parameters in.
 * \param N        The RSA modulus, or NULL.
 * \param N_len    The Byte length of \p N, ignored if \p N == NULL.
 * \param P        The first prime factor of \p N, or NULL.
 * \param P_len    The Byte length of \p P, ignored if \p P == NULL.
 * \param Q        The second prime factor of \p N, or NULL.
 * \param Q_len    The Byte length of \p Q, ignored if \p Q == NULL.
 * \param D        The private exponent, or NULL.
 * \param D_len    The Byte length of \p D, ignored if \p D == NULL.
 * \param E        The public exponent, or NULL.
 * \param E_len    The Byte length of \p E, ignored if \p E == NULL.
 * \return         \c 0 on success.
 * \return         A non-zero error code on failure.
int mbedtls_rsa_import_raw( mbedtls_rsa_context *ctx,
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len );
 * \brief          This function completes an RSA context from
 *                 a set of imported core parameters.
 *                 To setup an RSA public key, precisely \p N and \p E
 *                 must have been imported.
 *                 To setup an RSA private key, sufficient information must
 *                 be present for the other parameters to be derivable.
 *                 The default implementation supports the following:
 *                 <ul><li>Derive \p P, \p Q from \p N, \p D, \p E.</li>
 *                 <li>Derive \p N, \p D from \p P, \p Q, \p E.</li></ul>
 *                 Alternative implementations need not support these.
 *                 If this function runs successfully, it guarantees that
 *                 the RSA context can be used for RSA operations without
 *                 the risk of failure or crash.
 * \warning        This function need not perform consistency checks
 *                 for the imported parameters. In particular, parameters that
 *                 are not needed by the implementation might be silently
 *                 discarded and left unchecked. To check the consistency
 *                 of the key material, see mbedtls_rsa_check_privkey().
 * \param ctx      The initialized RSA context holding imported parameters.
 * \return         \c 0 on success.
 * \return         #MBEDTLS_ERR_RSA_BAD_INPUT_DATA if the attempted derivations
 *                 failed.
int mbedtls_rsa_complete( mbedtls_rsa_context *ctx );
 * \brief          This function exports the core parameters of an RSA key.
 *                 If this function runs successfully, the non-NULL buffers
 *                 pointed to by \p N, \p P, \p Q, \p D, and \p E are fully
 *                 written, with additional unused space filled leading by
 *                 zero Bytes.
 *                 Possible reasons for returning
 *                 #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION:<ul>
 *                 <li>An alternative RSA implementation is in use, which
 *                 stores the key externally, and either cannot or should
 *                 not export it into RAM.</li>
 *                 <li>A SW or HW implementation might not support a certain
 *                 deduction. For example, \p P, \p Q from \p N, \p D,
 *                 and \p E if the former are not part of the
 *                 implementation.</li></ul>
 *                 If the function fails due to an unsupported operation,
 *                 the RSA context stays intact and remains usable.
 * \param ctx      The initialized RSA context.
 * \param N        The MPI to hold the RSA modulus, or NULL.
 * \param P        The MPI to hold the first prime factor of \p N, or NULL.
 * \param Q        The MPI to hold the second prime factor of \p N, or NULL.
 * \param D        The MPI to hold the private exponent, or NULL.
 * \param E        The MPI to hold the public exponent, or NULL.
 * \return         \c 0 on success.
 * \return         #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION if exporting the
 *                 requested parameters cannot be done due to missing
 *                 functionality or because of security policies.
 * \return         A non-zero return code on any other failure.
int mbedtls_rsa_export( const mbedtls_rsa_context *ctx,
                        mbedtls_mpi *N, mbedtls_mpi *P, mbedtls_mpi *Q,
                        mbedtls_mpi *D, mbedtls_mpi *E );
 * \brief          This function exports core parameters of an RSA key
 *                 in raw big-endian binary format.
 *                 If this function runs successfully, the non-NULL buffers
 *                 pointed to by \p N, \p P, \p Q, \p D, and \p E are fully
 *                 written, with additional unused space filled leading by
 *                 zero Bytes.
 *                 Possible reasons for returning
 *                 #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION:<ul>
 *                 <li>An alternative RSA implementation is in use, which
 *                 stores the key externally, and either cannot or should
 *                 not export it into RAM.</li>
 *                 <li>A SW or HW implementation might not support a certain
 *                 deduction. For example, \p P, \p Q from \p N, \p D,
 *                 and \p E if the former are not part of the
 *                 implementation.</li></ul>
 *                 If the function fails due to an unsupported operation,
 *                 the RSA context stays intact and remains usable.
 * \note           The length parameters are ignored if the corresponding
 *                 buffer pointers are NULL.
 * \param ctx      The initialized RSA context.
 * \param N        The Byte array to store the RSA modulus, or NULL.
 * \param N_len    The size of the buffer for the modulus.
 * \param P        The Byte array to hold the first prime factor of \p N, or
 *                 NULL.
 * \param P_len    The size of the buffer for the first prime factor.
 * \param Q        The Byte array to hold the second prime factor of \p N, or
 *                 NULL.
 * \param Q_len    The size of the buffer for the second prime factor.
 * \param D        The Byte array to hold the private exponent, or NULL.
 * \param D_len    The size of the buffer for the private exponent.
 * \param E        The Byte array to hold the public exponent, or NULL.
 * \param E_len    The size of the buffer for the public exponent.
 * \return         \c 0 on success.
 * \return         #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION if exporting the
 *                 requested parameters cannot be done due to missing
 *                 functionality or because of security policies.
 * \return         A non-zero return code on any other failure.
int mbedtls_rsa_export_raw( const mbedtls_rsa_context *ctx,
                            unsigned char *N, size_t N_len,
                            unsigned char *P, size_t P_len,
                            unsigned char *Q, size_t Q_len,
                            unsigned char *D, size_t D_len,
                            unsigned char *E, size_t E_len );
 * \brief          This function exports CRT parameters of a private RSA key.
 * \note           Alternative RSA implementations not using CRT-parameters
 *                 internally can implement this function based on
 *                 mbedtls_rsa_deduce_opt().
 * \param ctx      The initialized RSA context.
 * \param DP       The MPI to hold D modulo P-1, or NULL.
 * \param DQ       The MPI to hold D modulo Q-1, or NULL.
 * \param QP       The MPI to hold modular inverse of Q modulo P, or NULL.
 * \return         \c 0 on success.
 * \return         A non-zero error code on failure.
int mbedtls_rsa_export_crt( const mbedtls_rsa_context *ctx,
                            mbedtls_mpi *DP, mbedtls_mpi *DQ, mbedtls_mpi *QP );
 * \brief          This function sets padding for an already initialized RSA
 *                 context. See mbedtls_rsa_init() for details.
 * \param ctx      The RSA context to be set.
 * \param padding  Selects padding mode: #MBEDTLS_RSA_PKCS_V15 or
 *                 #MBEDTLS_RSA_PKCS_V21.
 * \param hash_id  The #MBEDTLS_RSA_PKCS_V21 hash identifier.
void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding,
                              int hash_id);
 * \brief          This function retrieves the length of RSA modulus in Bytes.
 * \param ctx      The initialized RSA context.
 * \return         The length of the RSA modulus in Bytes.
size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx );
 * \brief          This function generates an RSA keypair.
 * \note           mbedtls_rsa_init() must be called before this function,
 *                 to set up the RSA context.
 * \param ctx      The RSA context used to hold the key.
 * \param f_rng    The RNG function.
 * \param p_rng    The RNG context.
 * \param nbits    The size of the public key in bits.
 * \param exponent The public exponent. For example, 65537.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_gen_key( mbedtls_rsa_context *ctx,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng,
                         unsigned int nbits, int exponent );
 * \brief          This function checks if a context contains at least an RSA
 *                 public key.
 *                 If the function runs successfully, it is guaranteed that
 *                 enough information is present to perform an RSA public key
 *                 operation using mbedtls_rsa_public().
 * \param ctx      The RSA context to check.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx );
 * \brief      This function checks if a context contains an RSA private key
 *             and perform basic consistency checks.
 * \note       The consistency checks performed by this function not only
 *             ensure that mbedtls_rsa_private() can be called successfully
 *             on the given context, but that the various parameters are
 *             mutually consistent with high probability, in the sense that
 *             mbedtls_rsa_public() and mbedtls_rsa_private() are inverses.
 * \warning    This function should catch accidental misconfigurations
 *             like swapping of parameters, but it cannot establish full
 *             trust in neither the quality nor the consistency of the key
 *             material that was used to setup the given RSA context:
 *             <ul><li>Consistency: Imported parameters that are irrelevant
 *             for the implementation might be silently dropped. If dropped,
 *             the current function does not have access to them,
 *             and therefore cannot check them. See mbedtls_rsa_complete().
 *             If you want to check the consistency of the entire
 *             content of an PKCS1-encoded RSA private key, for example, you
 *             should use mbedtls_rsa_validate_params() before setting
 *             up the RSA context.
 *             Additionally, if the implementation performs empirical checks,
 *             these checks substantiate but do not guarantee consistency.</li>
 *             <li>Quality: This function is not expected to perform
 *             extended quality assessments like checking that the prime
 *             factors are safe. Additionally, it is the responsibility of the
 *             user to ensure the trustworthiness of the source of his RSA
 *             parameters, which goes beyond what is effectively checkable
 *             by the library.</li></ul>
 * \param ctx  The RSA context to check.
 * \return     \c 0 on success.
 * \return     An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx );
 * \brief          This function checks a public-private RSA key pair.
 *                 It checks each of the contexts, and makes sure they match.
 * \param pub      The RSA context holding the public key.
 * \param prv      The RSA context holding the private key.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv );
 * \brief          This function performs an RSA public key operation.
 * \note           This function does not handle message padding.
 * \note           Make sure to set \p input[0] = 0 or ensure that
 *                 input is smaller than \p N.
 * \note           The input and output buffers must be large
 *                 enough. For example, 128 Bytes if RSA-1024 is used.
 * \param ctx      The RSA context.
 * \param input    The input buffer.
 * \param output   The output buffer.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output );
 * \brief          This function performs an RSA private key operation.
 * \note           The input and output buffers must be large
 *                 enough. For example, 128 Bytes if RSA-1024 is used.
 * \note           Blinding is used if and only if a PRNG is provided.
 * \note           If blinding is used, both the base of exponentation
 *                 and the exponent are blinded, providing protection
 *                 against some side-channel attacks.
 * \warning        It is deprecated and a security risk to not provide
 *                 a PRNG here and thereby prevent the use of blinding.
 *                 Future versions of the library may enforce the presence
 *                 of a PRNG.
 * \param ctx      The RSA context.
 * \param f_rng    The RNG function. Needed for blinding.
 * \param p_rng    The RNG context.
 * \param input    The input buffer.
 * \param output   The output buffer.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output );
 * \brief          This function adds the message padding, then performs an RSA
 *                 operation.
 *                 It is the generic wrapper for performing a PKCS#1 encryption
 *                 operation using the \p mode from the context.
 * \note           The input and output buffers must be as large as the size
 *                 of \p ctx->N. For example, 128 Bytes if RSA-1024 is used.
 * \deprecated     It is deprecated and discouraged to call this function
 *                 in #MBEDTLS_RSA_PRIVATE mode. Future versions of the library
 *                 are likely to remove the \p mode argument and have it
 *                 implicitly set to #MBEDTLS_RSA_PUBLIC.
 * \note           Alternative implementations of RSA need not support
 *                 mode being set to #MBEDTLS_RSA_PRIVATE and might instead
 *                 return #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION.
 * \param ctx      The RSA context.
 * \param f_rng    The RNG function. Needed for padding, PKCS#1 v2.1
 *                 encoding, and #MBEDTLS_RSA_PRIVATE.
 * \param p_rng    The RNG context.
 * \param mode     #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE.
 * \param ilen     The length of the plaintext.
 * \param input    The buffer holding the data to encrypt.
 * \param output   The buffer used to hold the ciphertext.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_pkcs1_encrypt( mbedtls_rsa_context *ctx,
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output );
 * \brief          This function performs a PKCS#1 v1.5 encryption operation
 *                 (RSAES-PKCS1-v1_5-ENCRYPT).
 * \note           The output buffer must be as large as the size
 *                 of \p ctx->N. For example, 128 Bytes if RSA-1024 is used.
 * \deprecated     It is deprecated and discouraged to call this function
 *                 in #MBEDTLS_RSA_PRIVATE mode. Future versions of the library
 *                 are likely to remove the \p mode argument and have it
 *                 implicitly set to #MBEDTLS_RSA_PUBLIC.
 * \note           Alternative implementations of RSA need not support
 *                 mode being set to #MBEDTLS_RSA_PRIVATE and might instead
 *                 return #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION.
 * \param ctx      The RSA context.
 * \param f_rng    The RNG function. Needed for padding and
 *                 #MBEDTLS_RSA_PRIVATE.
 * \param p_rng    The RNG context.
 * \param mode     #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE.
 * \param ilen     The length of the plaintext.
 * \param input    The buffer holding the data to encrypt.
 * \param output   The buffer used to hold the ciphertext.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_rsaes_pkcs1_v15_encrypt( mbedtls_rsa_context *ctx,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output );
 * \brief            This function performs a PKCS#1 v2.1 OAEP encryption
 *                   operation (RSAES-OAEP-ENCRYPT).
 * \note             The output buffer must be as large as the size
 *                   of ctx->N. For example, 128 Bytes if RSA-1024 is used.
 * \deprecated       It is deprecated and discouraged to call this function
 *                   in #MBEDTLS_RSA_PRIVATE mode. Future versions of the library
 *                   are likely to remove the \p mode argument and have it
 *                   implicitly set to #MBEDTLS_RSA_PUBLIC.
 * \note             Alternative implementations of RSA need not support
 *                   mode being set to #MBEDTLS_RSA_PRIVATE and might instead
 *                   return #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION.
 * \param ctx        The RSA context.
 * \param f_rng      The RNG function. Needed for padding and PKCS#1 v2.1
 *                   encoding and #MBEDTLS_RSA_PRIVATE.
 * \param p_rng      The RNG context.
 * \param mode       #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE.
 * \param label      The buffer holding the custom label to use.
 * \param label_len  The length of the label.
 * \param ilen       The length of the plaintext.
 * \param input      The buffer holding the data to encrypt.
 * \param output     The buffer used to hold the ciphertext.
 * \return           \c 0 on success.
 * \return           An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_rsaes_oaep_encrypt( mbedtls_rsa_context *ctx,
                            int (*f_rng)(void *, unsigned char *, size_t),
                            void *p_rng,
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output );
 * \brief          This function performs an RSA operation, then removes the
 *                 message padding.
 *                 It is the generic wrapper for performing a PKCS#1 decryption
 *                 operation using the \p mode from the context.
 * \note           The output buffer length \c output_max_len should be
 *                 as large as the size \p ctx->len of \p ctx->N (for example,
 *                 128 Bytes if RSA-1024 is used) to be able to hold an
 *                 arbitrary decrypted message. If it is not large enough to
 *                 hold the decryption of the particular ciphertext provided,
 *                 the function returns \c MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE.
 * \note           The input buffer must be as large as the size
 *                 of \p ctx->N. For example, 128 Bytes if RSA-1024 is used.
 * \deprecated     It is deprecated and discouraged to call this function
 *                 in #MBEDTLS_RSA_PUBLIC mode. Future versions of the library
 *                 are likely to remove the \p mode argument and have it
 *                 implicitly set to #MBEDTLS_RSA_PRIVATE.
 * \note           Alternative implementations of RSA need not support
 *                 mode being set to #MBEDTLS_RSA_PUBLIC and might instead
 *                 return #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION.
 * \param ctx      The RSA context.
 * \param f_rng    The RNG function. Only needed for #MBEDTLS_RSA_PRIVATE.
 * \param p_rng    The RNG context.
 * \param mode     #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE.
 * \param olen     The length of the plaintext.
 * \param input    The buffer holding the encrypted data.
 * \param output   The buffer used to hold the plaintext.
 * \param output_max_len    The maximum length of the output buffer.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_pkcs1_decrypt( mbedtls_rsa_context *ctx,
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len );
 * \brief          This function performs a PKCS#1 v1.5 decryption
 *                 operation (RSAES-PKCS1-v1_5-DECRYPT).
 * \note           The output buffer length \c output_max_len should be
 *                 as large as the size \p ctx->len of \p ctx->N, for example,
 *                 128 Bytes if RSA-1024 is used, to be able to hold an
 *                 arbitrary decrypted message. If it is not large enough to
 *                 hold the decryption of the particular ciphertext provided,
 *                 the function returns #MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE.
 * \note           The input buffer must be as large as the size
 *                 of \p ctx->N. For example, 128 Bytes if RSA-1024 is used.
 * \deprecated     It is deprecated and discouraged to call this function
 *                 in #MBEDTLS_RSA_PUBLIC mode. Future versions of the library
 *                 are likely to remove the \p mode argument and have it
 *                 implicitly set to #MBEDTLS_RSA_PRIVATE.
 * \note           Alternative implementations of RSA need not support
 *                 mode being set to #MBEDTLS_RSA_PUBLIC and might instead
 *                 return #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION.
 * \param ctx      The RSA context.
 * \param f_rng    The RNG function. Only needed for #MBEDTLS_RSA_PRIVATE.
 * \param p_rng    The RNG context.
 * \param mode     #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE.
 * \param olen     The length of the plaintext.
 * \param input    The buffer holding the encrypted data.
 * \param output   The buffer to hold the plaintext.
 * \param output_max_len    The maximum length of the output buffer.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_rsaes_pkcs1_v15_decrypt( mbedtls_rsa_context *ctx,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len );
 * \brief            This function performs a PKCS#1 v2.1 OAEP decryption
 *                   operation (RSAES-OAEP-DECRYPT).
 * \note             The output buffer length \c output_max_len should be
 *                   as large as the size \p ctx->len of \p ctx->N, for
 *                   example, 128 Bytes if RSA-1024 is used, to be able to
 *                   hold an arbitrary decrypted message. If it is not
 *                   large enough to hold the decryption of the particular
 *                   ciphertext provided, the function returns
 *                   #MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE.
 * \note             The input buffer must be as large as the size
 *                   of \p ctx->N. For example, 128 Bytes if RSA-1024 is used.
 * \deprecated       It is deprecated and discouraged to call this function
 *                   in #MBEDTLS_RSA_PUBLIC mode. Future versions of the library
 *                   are likely to remove the \p mode argument and have it
 *                   implicitly set to #MBEDTLS_RSA_PRIVATE.
 * \note             Alternative implementations of RSA need not support
 *                   mode being set to #MBEDTLS_RSA_PUBLIC and might instead
 *                   return #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION.
 * \param ctx        The RSA context.
 * \param f_rng      The RNG function. Only needed for #MBEDTLS_RSA_PRIVATE.
 * \param p_rng      The RNG context.
 * \param mode       #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE.
 * \param label      The buffer holding the custom label to use.
 * \param label_len  The length of the label.
 * \param olen       The length of the plaintext.
 * \param input      The buffer holding the encrypted data.
 * \param output     The buffer to hold the plaintext.
 * \param output_max_len    The maximum length of the output buffer.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_rsaes_oaep_decrypt( mbedtls_rsa_context *ctx,
                            int (*f_rng)(void *, unsigned char *, size_t),
                            void *p_rng,
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len );
 * \brief          This function performs a private RSA operation to sign
 *                 a message digest using PKCS#1.
 *                 It is the generic wrapper for performing a PKCS#1
 *                 signature using the \p mode from the context.
 * \note           The \p sig buffer must be as large as the size
 *                 of \p ctx->N. For example, 128 Bytes if RSA-1024 is used.
 * \note           For PKCS#1 v2.1 encoding, see comments on
 *                 mbedtls_rsa_rsassa_pss_sign() for details on
 *                 \p md_alg and \p hash_id.
 * \deprecated     It is deprecated and discouraged to call this function
 *                 in #MBEDTLS_RSA_PUBLIC mode. Future versions of the library
 *                 are likely to remove the \p mode argument and have it
 *                 implicitly set to #MBEDTLS_RSA_PRIVATE.
 * \note           Alternative implementations of RSA need not support
 *                 mode being set to #MBEDTLS_RSA_PUBLIC and might instead
 *                 return #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION.
 * \param ctx      The RSA context.
 * \param f_rng    The RNG function. Needed for PKCS#1 v2.1 encoding and for
 *                 #MBEDTLS_RSA_PRIVATE.
 * \param p_rng    The RNG context.
 * \param mode     #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE.
 * \param md_alg   The message-digest algorithm used to hash the original data.
 *                 Use #MBEDTLS_MD_NONE for signing raw data.
 * \param hashlen  The length of the message digest. Only used if \p md_alg is #MBEDTLS_MD_NONE.
 * \param hash     The buffer holding the message digest.
 * \param sig      The buffer to hold the ciphertext.
 * \return         \c 0 if the signing operation was successful.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_pkcs1_sign( mbedtls_rsa_context *ctx,
                    int (*f_rng)(void *, unsigned char *, size_t),
                    void *p_rng,
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig );
 * \brief          This function performs a PKCS#1 v1.5 signature
 *                 operation (RSASSA-PKCS1-v1_5-SIGN).
 * \note           The \p sig buffer must be as large as the size
 *                 of \p ctx->N. For example, 128 Bytes if RSA-1024 is used.
 * \deprecated     It is deprecated and discouraged to call this function
 *                 in #MBEDTLS_RSA_PUBLIC mode. Future versions of the library
 *                 are likely to remove the \p mode argument and have it
 *                 implicitly set to #MBEDTLS_RSA_PRIVATE.
 * \note           Alternative implementations of RSA need not support
 *                 mode being set to #MBEDTLS_RSA_PUBLIC and might instead
 *                 return #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION.
 * \param ctx      The RSA context.
 * \param f_rng    The RNG function. Only needed for #MBEDTLS_RSA_PRIVATE.
 * \param p_rng    The RNG context.
 * \param mode     #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE.
 * \param md_alg   The message-digest algorithm used to hash the original data.
 *                 Use #MBEDTLS_MD_NONE for signing raw data.
 * \param hashlen  The length of the message digest. Only used if \p md_alg is #MBEDTLS_MD_NONE.
 * \param hash     The buffer holding the message digest.
 * \param sig      The buffer to hold the ciphertext.
 * \return         \c 0 if the signing operation was successful.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_rsassa_pkcs1_v15_sign( mbedtls_rsa_context *ctx,
                               int (*f_rng)(void *, unsigned char *, size_t),
                               void *p_rng,
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig );
 * \brief          This function performs a PKCS#1 v2.1 PSS signature
 *                 operation (RSASSA-PSS-SIGN).
 * \note           The \p sig buffer must be as large as the size
 *                 of \p ctx->N. For example, 128 Bytes if RSA-1024 is used.
 * \note           The \p hash_id in the RSA context is the one used for the
 *                 encoding. \p md_alg in the function call is the type of hash
 *                 that is encoded. According to <em>RFC-3447: Public-Key
 *                 Cryptography Standards (PKCS) #1 v2.1: RSA Cryptography
 *                 Specifications</em> it is advised to keep both hashes the
 *                 same.
 * \deprecated     It is deprecated and discouraged to call this function
 *                 in #MBEDTLS_RSA_PUBLIC mode. Future versions of the library
 *                 are likely to remove the \p mode argument and have it
 *                 implicitly set to #MBEDTLS_RSA_PRIVATE.
 * \note           Alternative implementations of RSA need not support
 *                 mode being set to #MBEDTLS_RSA_PUBLIC and might instead
 *                 return #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION.
 * \param ctx      The RSA context.
 * \param f_rng    The RNG function. Needed for PKCS#1 v2.1 encoding and for
 *                 #MBEDTLS_RSA_PRIVATE.
 * \param p_rng    The RNG context.
 * \param mode     #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE.
 * \param md_alg   The message-digest algorithm used to hash the original data.
 *                 Use #MBEDTLS_MD_NONE for signing raw data.
 * \param hashlen  The length of the message digest. Only used if \p md_alg is #MBEDTLS_MD_NONE.
 * \param hash     The buffer holding the message digest.
 * \param sig      The buffer to hold the ciphertext.
 * \return         \c 0 if the signing operation was successful.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_rsassa_pss_sign( mbedtls_rsa_context *ctx,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng,
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig );
 * \brief          This function performs a public RSA operation and checks
 *                 the message digest.
 *                 This is the generic wrapper for performing a PKCS#1
 *                 verification using the mode from the context.
 * \note           The \p sig buffer must be as large as the size
 *                 of \p ctx->N. For example, 128 Bytes if RSA-1024 is used.
 * \note           For PKCS#1 v2.1 encoding, see comments on
 *                 mbedtls_rsa_rsassa_pss_verify() about \p md_alg and
 *                 \p hash_id.
 * \deprecated     It is deprecated and discouraged to call this function
 *                 in #MBEDTLS_RSA_PRIVATE mode. Future versions of the library
 *                 are likely to remove the \p mode argument and have it
 *                 set to #MBEDTLS_RSA_PUBLIC.
 * \note           Alternative implementations of RSA need not support
 *                 mode being set to #MBEDTLS_RSA_PRIVATE and might instead
 *                 return #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION.
 * \param ctx      The RSA public key context.
 * \param f_rng    The RNG function. Only needed for #MBEDTLS_RSA_PRIVATE.
 * \param p_rng    The RNG context.
 * \param mode     #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE.
 * \param md_alg   The message-digest algorithm used to hash the original data.
 *                 Use #MBEDTLS_MD_NONE for signing raw data.
 * \param hashlen  The length of the message digest. Only used if \p md_alg is #MBEDTLS_MD_NONE.
 * \param hash     The buffer holding the message digest.
 * \param sig      The buffer holding the ciphertext.
 * \return         \c 0 if the verify operation was successful.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_pkcs1_verify( mbedtls_rsa_context *ctx,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng,
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig );
 * \brief          This function performs a PKCS#1 v1.5 verification
 *                 operation (RSASSA-PKCS1-v1_5-VERIFY).
 * \note           The \p sig buffer must be as large as the size
 *                 of \p ctx->N. For example, 128 Bytes if RSA-1024 is used.
 * \deprecated     It is deprecated and discouraged to call this function
 *                 in #MBEDTLS_RSA_PRIVATE mode. Future versions of the library
 *                 are likely to remove the \p mode argument and have it
 *                 set to #MBEDTLS_RSA_PUBLIC.
 * \note           Alternative implementations of RSA need not support
 *                 mode being set to #MBEDTLS_RSA_PRIVATE and might instead
 *                 return #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION.
 * \param ctx      The RSA public key context.
 * \param f_rng    The RNG function. Only needed for #MBEDTLS_RSA_PRIVATE.
 * \param p_rng    The RNG context.
 * \param mode     #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE.
 * \param md_alg   The message-digest algorithm used to hash the original data.
 *                 Use #MBEDTLS_MD_NONE for signing raw data.
 * \param hashlen  The length of the message digest. Only used if \p md_alg is #MBEDTLS_MD_NONE.
 * \param hash     The buffer holding the message digest.
 * \param sig      The buffer holding the ciphertext.
 * \return         \c 0 if the verify operation was successful.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_rsassa_pkcs1_v15_verify( mbedtls_rsa_context *ctx,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig );
 * \brief          This function performs a PKCS#1 v2.1 PSS verification
 *                 operation (RSASSA-PSS-VERIFY).
 *                 The hash function for the MGF mask generating function
 *                 is that specified in the RSA context.
 * \note           The \p sig buffer must be as large as the size
 *                 of \p ctx->N. For example, 128 Bytes if RSA-1024 is used.
 * \note           The \p hash_id in the RSA context is the one used for the
 *                 verification. \p md_alg in the function call is the type of
 *                 hash that is verified. According to <em>RFC-3447: Public-Key
 *                 Cryptography Standards (PKCS) #1 v2.1: RSA Cryptography
 *                 Specifications</em> it is advised to keep both hashes the
 *                 same. If \p hash_id in the RSA context is unset,
 *                 the \p md_alg from the function call is used.
 * \deprecated     It is deprecated and discouraged to call this function
 *                 in #MBEDTLS_RSA_PRIVATE mode. Future versions of the library
 *                 are likely to remove the \p mode argument and have it
 *                 implicitly set to #MBEDTLS_RSA_PUBLIC.
 * \note           Alternative implementations of RSA need not support
 *                 mode being set to #MBEDTLS_RSA_PRIVATE and might instead
 *                 return #MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION.
 * \param ctx      The RSA public key context.
 * \param f_rng    The RNG function. Only needed for #MBEDTLS_RSA_PRIVATE.
 * \param p_rng    The RNG context.
 * \param mode     #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE.
 * \param md_alg   The message-digest algorithm used to hash the original data.
 *                 Use #MBEDTLS_MD_NONE for signing raw data.
 * \param hashlen  The length of the message digest. Only used if \p md_alg is #MBEDTLS_MD_NONE.
 * \param hash     The buffer holding the message digest.
 * \param sig      The buffer holding the ciphertext.
 * \return         \c 0 if the verify operation was successful.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_rsassa_pss_verify( mbedtls_rsa_context *ctx,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig );
 * \brief          This function performs a PKCS#1 v2.1 PSS verification
 *                 operation (RSASSA-PSS-VERIFY).
 *                 The hash function for the MGF mask generating function
 *                 is that specified in \p mgf1_hash_id.
 * \note           The \p sig buffer must be as large as the size
 *                 of \p ctx->N. For example, 128 Bytes if RSA-1024 is used.
 * \note           The \p hash_id in the RSA context is ignored.
 * \param ctx      The RSA public key context.
 * \param f_rng    The RNG function. Only needed for #MBEDTLS_RSA_PRIVATE.
 * \param p_rng    The RNG context.
 * \param mode     #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE.
 * \param md_alg   The message-digest algorithm used to hash the original data.
 *                 Use #MBEDTLS_MD_NONE for signing raw data.
 * \param hashlen  The length of the message digest. Only used if \p md_alg is
 *                 #MBEDTLS_MD_NONE.
 * \param hash     The buffer holding the message digest.
 * \param mgf1_hash_id       The message digest used for mask generation.
 * \param expected_salt_len  The length of the salt used in padding. Use
 *                           #MBEDTLS_RSA_SALT_LEN_ANY to accept any salt length.
 * \param sig      The buffer holding the ciphertext.
 * \return         \c 0 if the verify operation was successful.
 * \return         An \c MBEDTLS_ERR_RSA_XXX error code on failure.
int mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_rsa_context *ctx,
                               int (*f_rng)(void *, unsigned char *, size_t),
                               void *p_rng,
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig );
 * \brief          This function copies the components of an RSA context.
 * \param dst      The destination context.
 * \param src      The source context.
 * \return         \c 0 on success.
 * \return         #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory allocation failure.
int mbedtls_rsa_copy( mbedtls_rsa_context *dst, const mbedtls_rsa_context *src );
 * \brief          This function frees the components of an RSA key.
 * \param ctx      The RSA Context to free.
void mbedtls_rsa_free( mbedtls_rsa_context *ctx );
 * \brief          The RSA checkup routine.
 * \return         \c 0 on success.
 * \return         \c 1 on failure.
int mbedtls_rsa_self_test( int verbose );
# 38 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/pk.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecp.h" 1
 * \file ecp.h
 * \brief This file provides an API for Elliptic Curves over GF(P) (ECP).
 * The use of ECP in cryptography and TLS is defined in
 * <em>Standards for Efficient Cryptography Group (SECG): SEC1
 * Elliptic Curve Cryptography</em> and
 * <em>RFC-4492: Elliptic Curve Cryptography (ECC) Cipher Suites
 * for Transport Layer Security (TLS)</em>.
 * <em>RFC-2409: The Internet Key Exchange (IKE)</em> defines ECP
 * group types.
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
# 42 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/pk.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecdsa.h" 1
 * \file ecdsa.h
 * \brief This file contains ECDSA definitions and functions.
 * The Elliptic Curve Digital Signature Algorithm (ECDSA) is defined in
 * <em>Standards for Efficient Cryptography Group (SECG):
 * SEC1 Elliptic Curve Cryptography</em>.
 * The use of ECDSA for TLS is defined in <em>RFC-4492: Elliptic Curve
 * Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS)</em>.
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
#define MBEDTLS_ECDSA_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecp.h" 1
 * \file ecp.h
 * \brief This file provides an API for Elliptic Curves over GF(P) (ECP).
 * The use of ECP in cryptography and TLS is defined in
 * <em>Standards for Efficient Cryptography Group (SECG): SEC1
 * Elliptic Curve Cryptography</em> and
 * <em>RFC-4492: Elliptic Curve Cryptography (ECC) Cipher Suites
 * for Transport Layer Security (TLS)</em>.
 * <em>RFC-2409: The Internet Key Exchange (IKE)</em> defines ECP
 * group types.
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
# 36 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecdsa.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/md.h" 1
 /**
 * \file md.h
 * \brief This file contains the generic message-digest wrapper.
 * \author Adriaan de Jong <dejong@fox-it.com>
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
# 37 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecdsa.h" 2
 * RFC-4492 page 20:
 *     Ecdsa-Sig-Value ::= SEQUENCE {
 *         r       INTEGER,
 *         s       INTEGER
 *     }
 * Size is at most
 *    1 (tag) + 1 (len) + 1 (initial 0) + ECP_MAX_BYTES for each of r and s,
 *    twice that + 1 (tag) + 2 (len) for the sequence
 * (assuming ECP_MAX_BYTES is less than 126 for r and s,
 * and less than 124 (total len <= 255) for the sequence)
/** The maximal size of an ECDSA signature in Bytes. */
#define MBEDTLS_ECDSA_MAX_LEN ( 3 + 2 * ( 3 + MBEDTLS_ECP_MAX_BYTES ) )
 * \brief           The ECDSA context structure.
typedef mbedtls_ecp_keypair mbedtls_ecdsa_context;
extern "C" {
 * \brief           This function computes the ECDSA signature of a
 *                  previously-hashed message.
 * \note            The deterministic version is usually preferred.
 * \note            If the bitlength of the message hash is larger than the
 *                  bitlength of the group order, then the hash is truncated
 *                  as defined in <em>Standards for Efficient Cryptography Group
 *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section
 *                  4.1.3, step 5.
 * \see             ecp.h
 * \param grp       The ECP group.
 * \param r         The first output integer.
 * \param s         The second output integer.
 * \param d         The private signing key.
 * \param buf       The message hash.
 * \param blen      The length of \p buf.
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX
 *                  or \c MBEDTLS_MPI_XXX error code on failure.
int mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );
 * \brief           This function computes the ECDSA signature of a
 *                  previously-hashed message, deterministic version.
 *                  For more information, see <em>RFC-6979: Deterministic
 *                  Usage of the Digital Signature Algorithm (DSA) and Elliptic
 *                  Curve Digital Signature Algorithm (ECDSA)</em>.
 * \note            If the bitlength of the message hash is larger than the
 *                  bitlength of the group order, then the hash is truncated as
 *                  defined in <em>Standards for Efficient Cryptography Group
 *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section
 *                  4.1.3, step 5.
 * \see             ecp.h
 * \param grp       The ECP group.
 * \param r         The first output integer.
 * \param s         The second output integer.
 * \param d         The private signing key.
 * \param buf       The message hash.
 * \param blen      The length of \p buf.
 * \param md_alg    The MD algorithm used to hash the message.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX or \c MBEDTLS_MPI_XXX
 *                  error code on failure.
int mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
                    const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                    mbedtls_md_type_t md_alg );
 * \brief           This function verifies the ECDSA signature of a
 *                  previously-hashed message.
 * \note            If the bitlength of the message hash is larger than the
 *                  bitlength of the group order, then the hash is truncated as
 *                  defined in <em>Standards for Efficient Cryptography Group
 *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section
 *                  4.1.4, step 3.
 * \see             ecp.h
 * \param grp       The ECP group.
 * \param buf       The message hash.
 * \param blen      The length of \p buf.
 * \param Q         The public key to use for verification.
 * \param r         The first integer of the signature.
 * \param s         The second integer of the signature.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if the signature
 *                  is invalid.
 * \return          An \c MBEDTLS_ERR_ECP_XXX or \c MBEDTLS_MPI_XXX
 *                  error code on failure for any other reason.
int mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,
                  const unsigned char *buf, size_t blen,
                  const mbedtls_ecp_point *Q, const mbedtls_mpi *r, const mbedtls_mpi *s);
 * \brief           This function computes the ECDSA signature and writes it
 *                  to a buffer, serialized as defined in <em>RFC-4492:
 *                  Elliptic Curve Cryptography (ECC) Cipher Suites for
 *                  Transport Layer Security (TLS)</em>.
 * \warning         It is not thread-safe to use the same context in
 *                  multiple threads.
 * \note            The deterministic version is used if
 *                  #MBEDTLS_ECDSA_DETERMINISTIC is defined. For more
 *                  information, see <em>RFC-6979: Deterministic Usage
 *                  of the Digital Signature Algorithm (DSA) and Elliptic
 *                  Curve Digital Signature Algorithm (ECDSA)</em>.
 * \note            The \p sig buffer must be at least twice as large as the
 *                  size of the curve used, plus 9. For example, 73 Bytes if
 *                  a 256-bit curve is used. A buffer length of
 *                  #MBEDTLS_ECDSA_MAX_LEN is always safe.
 * \note            If the bitlength of the message hash is larger than the
 *                  bitlength of the group order, then the hash is truncated as
 *                  defined in <em>Standards for Efficient Cryptography Group
 *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section
 *                  4.1.3, step 5.
 * \see             ecp.h
 * \param ctx       The ECDSA context.
 * \param md_alg    The message digest that was used to hash the message.
 * \param hash      The message hash.
 * \param hlen      The length of the hash.
 * \param sig       The buffer that holds the signature.
 * \param slen      The length of the signature written.
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX, \c MBEDTLS_ERR_MPI_XXX or
 *                  \c MBEDTLS_ERR_ASN1_XXX error code on failure.
int mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng );
#define MBEDTLS_DEPRECATED 
 * \brief           This function computes an ECDSA signature and writes
 *                  it to a buffer, serialized as defined in <em>RFC-4492:
 *                  Elliptic Curve Cryptography (ECC) Cipher Suites for
 *                  Transport Layer Security (TLS)</em>.
 *                  The deterministic version is defined in <em>RFC-6979:
 *                  Deterministic Usage of the Digital Signature Algorithm (DSA)
 *                  and Elliptic Curve Digital Signature Algorithm (ECDSA)</em>.
 * \warning         It is not thread-safe to use the same context in
 *                  multiple threads.
 * \note            The \p sig buffer must be at least twice as large as the
 *                  size of the curve used, plus 9. For example, 73 Bytes if a
 *                  256-bit curve is used. A buffer length of
 *                  #MBEDTLS_ECDSA_MAX_LEN is always safe.
 * \note            If the bitlength of the message hash is larger than the
 *                  bitlength of the group order, then the hash is truncated as
 *                  defined in <em>Standards for Efficient Cryptography Group
 *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section
 *                  4.1.3, step 5.
 * \see             ecp.h
 * \deprecated      Superseded by mbedtls_ecdsa_write_signature() in
 *                  Mbed TLS version 2.0 and later.
 * \param ctx       The ECDSA context.
 * \param hash      The message hash.
 * \param hlen      The length of the hash.
 * \param sig       The buffer that holds the signature.
 * \param slen      The length of the signature written.
 * \param md_alg    The MD algorithm used to hash the message.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX, \c MBEDTLS_ERR_MPI_XXX or
 *                  \c MBEDTLS_ERR_ASN1_XXX error code on failure.
int mbedtls_ecdsa_write_signature_det( mbedtls_ecdsa_context *ctx,
                               const unsigned char *hash, size_t hlen,
                               unsigned char *sig, size_t *slen,
                               mbedtls_md_type_t md_alg ) ;
#undef MBEDTLS_DEPRECATED
 * \brief           This function reads and verifies an ECDSA signature.
 * \note            If the bitlength of the message hash is larger than the
 *                  bitlength of the group order, then the hash is truncated as
 *                  defined in <em>Standards for Efficient Cryptography Group
 *                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section
 *                  4.1.4, step 3.
 * \see             ecp.h
 * \param ctx       The ECDSA context.
 * \param hash      The message hash.
 * \param hlen      The size of the hash.
 * \param sig       The signature to read and verify.
 * \param slen      The size of \p sig.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if signature is invalid.
 * \return          #MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH if there is a valid
 *                  signature in \p sig, but its length is less than \p siglen.
 * \return          An \c MBEDTLS_ERR_ECP_XXX or \c MBEDTLS_ERR_MPI_XXX
 *                  error code on failure for any other reason.
int mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen );
 * \brief          This function generates an ECDSA keypair on the given curve.
 * \see            ecp.h
 * \param ctx      The ECDSA context to store the keypair in.
 * \param gid      The elliptic curve to use. One of the various
 *                 \c MBEDTLS_ECP_DP_XXX macros depending on configuration.
 * \param f_rng    The RNG function.
 * \param p_rng    The RNG context.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_ECP_XXX code on failure.
int mbedtls_ecdsa_genkey( mbedtls_ecdsa_context *ctx, mbedtls_ecp_group_id gid,
                  int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );
 * \brief           This function sets an ECDSA context from an EC key pair.
 * \see             ecp.h
 * \param ctx       The ECDSA context to set.
 * \param key       The EC key to use.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX code on failure.
int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key );
 * \brief           This function initializes an ECDSA context.
 * \param ctx       The ECDSA context to initialize.
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx );
 * \brief           This function frees an ECDSA context.
 * \param ctx       The ECDSA context to free.
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx );
# 46 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/pk.h" 2
#define MBEDTLS_ERR_PK_ALLOC_FAILED -0x3F80 /**< Memory allocation failed. */
#define MBEDTLS_ERR_PK_TYPE_MISMATCH -0x3F00 /**< Type mismatch, eg attempt to encrypt with an ECDSA key */
#define MBEDTLS_ERR_PK_BAD_INPUT_DATA -0x3E80 /**< Bad input parameters to function. */
#define MBEDTLS_ERR_PK_FILE_IO_ERROR -0x3E00 /**< Read/write of file failed. */
#define MBEDTLS_ERR_PK_KEY_INVALID_VERSION -0x3D80 /**< Unsupported key version */
#define MBEDTLS_ERR_PK_KEY_INVALID_FORMAT -0x3D00 /**< Invalid key tag or value. */
#define MBEDTLS_ERR_PK_UNKNOWN_PK_ALG -0x3C80 /**< Key algorithm is unsupported (only RSA and EC are supported). */
#define MBEDTLS_ERR_PK_PASSWORD_REQUIRED -0x3C00 /**< Private key password can't be empty. */
#define MBEDTLS_ERR_PK_PASSWORD_MISMATCH -0x3B80 /**< Given private key password does not allow for correct decryption. */
#define MBEDTLS_ERR_PK_INVALID_PUBKEY -0x3B00 /**< The pubkey tag or value is invalid (only RSA and EC are supported). */
#define MBEDTLS_ERR_PK_INVALID_ALG -0x3A80 /**< The algorithm tag or value is invalid. */
#define MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE -0x3A00 /**< Elliptic curve is unsupported (only NIST curves are supported). */
#define MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE -0x3980 /**< Unavailable feature, e.g. RSA disabled for RSA key. */
#define MBEDTLS_ERR_PK_SIG_LEN_MISMATCH -0x3900 /**< The buffer contains a valid signature followed by more data. */
#define MBEDTLS_ERR_PK_HW_ACCEL_FAILED -0x3880 /**< PK hardware accelerator failed. */
extern "C" {
 * \brief          Public key types
typedef enum {
    MBEDTLS_PK_NONE=0,
    MBEDTLS_PK_RSA,
    MBEDTLS_PK_ECKEY,
    MBEDTLS_PK_ECKEY_DH,
    MBEDTLS_PK_ECDSA,
    MBEDTLS_PK_RSA_ALT,
    MBEDTLS_PK_RSASSA_PSS,
} mbedtls_pk_type_t;
 * \brief           Options for RSASSA-PSS signature verification.
 *                  See \c mbedtls_rsa_rsassa_pss_verify_ext()
typedef struct mbedtls_pk_rsassa_pss_options
    mbedtls_md_type_t mgf1_hash_id;
    int expected_salt_len;
} mbedtls_pk_rsassa_pss_options;
 * \brief           Types for interfacing with the debug module
typedef enum
    MBEDTLS_PK_DEBUG_NONE = 0,
    MBEDTLS_PK_DEBUG_MPI,
    MBEDTLS_PK_DEBUG_ECP,
} mbedtls_pk_debug_type;
 * \brief           Item to send to the debug module
typedef struct mbedtls_pk_debug_item
    mbedtls_pk_debug_type type;
    const char *name;
    void *value;
} mbedtls_pk_debug_item;
/** Maximum number of item send for debugging, plus 1 */
#define MBEDTLS_PK_DEBUG_MAX_ITEMS 3
 * \brief           Public key information and operations
typedef struct mbedtls_pk_info_t mbedtls_pk_info_t;
 * \brief           Public key container
typedef struct mbedtls_pk_context
    const mbedtls_pk_info_t * pk_info; /**< Public key informations        */
    void * pk_ctx; /**< Underlying public key context  */
} mbedtls_pk_context;
 * Quick access to an RSA context inside a PK context.
 * \warning You must make sure the PK context actually holds an RSA context
 * before using this function!
static inline mbedtls_rsa_context *mbedtls_pk_rsa( const mbedtls_pk_context pk )
    return( (mbedtls_rsa_context *) (pk).pk_ctx );
 * Quick access to an EC context inside a PK context.
 * \warning You must make sure the PK context actually holds an EC context
 * before using this function!
static inline mbedtls_ecp_keypair *mbedtls_pk_ec( const mbedtls_pk_context pk )
    return( (mbedtls_ecp_keypair *) (pk).pk_ctx );
 * \brief           Types for RSA-alt abstraction
typedef int (*mbedtls_pk_rsa_alt_decrypt_func)( void *ctx, int mode, size_t *olen,
                    const unsigned char *input, unsigned char *output,
                    size_t output_max_len );
typedef int (*mbedtls_pk_rsa_alt_sign_func)( void *ctx,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
                    int mode, mbedtls_md_type_t md_alg, unsigned int hashlen,
                    const unsigned char *hash, unsigned char *sig );
typedef size_t (*mbedtls_pk_rsa_alt_key_len_func)( void *ctx );
 * \brief           Return information associated with the given PK type
 * \param pk_type   PK type to search for.
 * \return          The PK info associated with the type or NULL if not found.
const mbedtls_pk_info_t *mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type );
 * \brief           Initialize a mbedtls_pk_context (as NONE)
void mbedtls_pk_init( mbedtls_pk_context *ctx );
 * \brief           Free a mbedtls_pk_context
void mbedtls_pk_free( mbedtls_pk_context *ctx );
 * \brief           Initialize a PK context with the information given
 *                  and allocates the type-specific PK subcontext.
 * \param ctx       Context to initialize. Must be empty (type NONE).
 * \param info      Information to use
 * \return          0 on success,
 *                  MBEDTLS_ERR_PK_BAD_INPUT_DATA on invalid input,
 *                  MBEDTLS_ERR_PK_ALLOC_FAILED on allocation failure.
 * \note            For contexts holding an RSA-alt key, use
 *                  \c mbedtls_pk_setup_rsa_alt() instead.
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info );
 * \brief           Initialize an RSA-alt context
 * \param ctx       Context to initialize. Must be empty (type NONE).
 * \param key       RSA key pointer
 * \param decrypt_func  Decryption function
 * \param sign_func     Signing function
 * \param key_len_func  Function returning key length in bytes
 * \return          0 on success, or MBEDTLS_ERR_PK_BAD_INPUT_DATA if the
 *                  context wasn't already initialized as RSA_ALT.
 * \note            This function replaces \c mbedtls_pk_setup() for RSA-alt.
int mbedtls_pk_setup_rsa_alt( mbedtls_pk_context *ctx, void * key,
                         mbedtls_pk_rsa_alt_decrypt_func decrypt_func,
                         mbedtls_pk_rsa_alt_sign_func sign_func,
                         mbedtls_pk_rsa_alt_key_len_func key_len_func );
 * \brief           Get the size in bits of the underlying key
 * \param ctx       Context to use
 * \return          Key size in bits, or 0 on error
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx );
 * \brief           Get the length in bytes of the underlying key
 * \param ctx       Context to use
 * \return          Key length in bytes, or 0 on error
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 * \brief           Tell if a context can do the operation given by type
 * \param ctx       Context to test
 * \param type      Target type
 * \return          0 if context can't do the operations,
 *                  1 otherwise.
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type );
 * \brief           Verify signature (including padding if relevant).
 * \param ctx       PK context to use
 * \param md_alg    Hash algorithm used (see notes)
 * \param hash      Hash of the message to sign
 * \param hash_len  Hash length or 0 (see notes)
 * \param sig       Signature to verify
 * \param sig_len   Signature length
 * \return          0 on success (signature is valid),
 *                  #MBEDTLS_ERR_PK_SIG_LEN_MISMATCH if there is a valid
 *                  signature in sig but its length is less than \p siglen,
 *                  or a specific error code.
 * \note            For RSA keys, the default padding type is PKCS#1 v1.5.
 *                  Use \c mbedtls_pk_verify_ext( MBEDTLS_PK_RSASSA_PSS, ... )
 *                  to verify RSASSA_PSS signatures.
 * \note            If hash_len is 0, then the length associated with md_alg
 *                  is used instead, or an error returned if it is invalid.
 * \note            md_alg may be MBEDTLS_MD_NONE, only if hash_len != 0
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len );
 * \brief           Verify signature, with options.
 *                  (Includes verification of the padding depending on type.)
 * \param type      Signature type (inc. possible padding type) to verify
 * \param options   Pointer to type-specific options, or NULL
 * \param ctx       PK context to use
 * \param md_alg    Hash algorithm used (see notes)
 * \param hash      Hash of the message to sign
 * \param hash_len  Hash length or 0 (see notes)
 * \param sig       Signature to verify
 * \param sig_len   Signature length
 * \return          0 on success (signature is valid),
 *                  #MBEDTLS_ERR_PK_TYPE_MISMATCH if the PK context can't be
 *                  used for this type of signatures,
 *                  #MBEDTLS_ERR_PK_SIG_LEN_MISMATCH if there is a valid
 *                  signature in sig but its length is less than \p siglen,
 *                  or a specific error code.
 * \note            If hash_len is 0, then the length associated with md_alg
 *                  is used instead, or an error returned if it is invalid.
 * \note            md_alg may be MBEDTLS_MD_NONE, only if hash_len != 0
 * \note            If type is MBEDTLS_PK_RSASSA_PSS, then options must point
 *                  to a mbedtls_pk_rsassa_pss_options structure,
 *                  otherwise it must be NULL.
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len );
 * \brief           Make signature, including padding if relevant.
 * \param ctx       PK context to use - must hold a private key
 * \param md_alg    Hash algorithm used (see notes)
 * \param hash      Hash of the message to sign
 * \param hash_len  Hash length or 0 (see notes)
 * \param sig       Place to write the signature
 * \param sig_len   Number of bytes written
 * \param f_rng     RNG function
 * \param p_rng     RNG parameter
 * \return          0 on success, or a specific error code.
 * \note            For RSA keys, the default padding type is PKCS#1 v1.5.
 *                  There is no interface in the PK module to make RSASSA-PSS
 *                  signatures yet.
 * \note            If hash_len is 0, then the length associated with md_alg
 *                  is used instead, or an error returned if it is invalid.
 * \note            For RSA, md_alg may be MBEDTLS_MD_NONE if hash_len != 0.
 *                  For ECDSA, md_alg may never be MBEDTLS_MD_NONE.
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );
 * \brief           Decrypt message (including padding if relevant).
 * \param ctx       PK context to use - must hold a private key
 * \param input     Input to decrypt
 * \param ilen      Input size
 * \param output    Decrypted output
 * \param olen      Decrypted message length
 * \param osize     Size of the output buffer
 * \param f_rng     RNG function
 * \param p_rng     RNG parameter
 * \note            For RSA keys, the default padding type is PKCS#1 v1.5.
 * \return          0 on success, or a specific error code.
int mbedtls_pk_decrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );
 * \brief           Encrypt message (including padding if relevant).
 * \param ctx       PK context to use
 * \param input     Message to encrypt
 * \param ilen      Message size
 * \param output    Encrypted output
 * \param olen      Encrypted output length
 * \param osize     Size of the output buffer
 * \param f_rng     RNG function
 * \param p_rng     RNG parameter
 * \note            For RSA keys, the default padding type is PKCS#1 v1.5.
 * \return          0 on success, or a specific error code.
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );
 * \brief           Check if a public-private pair of keys matches.
 * \param pub       Context holding a public key.
 * \param prv       Context holding a private (and public) key.
 * \return          0 on success or MBEDTLS_ERR_PK_BAD_INPUT_DATA
int mbedtls_pk_check_pair( const mbedtls_pk_context *pub, const mbedtls_pk_context *prv );
 * \brief           Export debug information
 * \param ctx       Context to use
 * \param items     Place to write debug items
 * \return          0 on success or MBEDTLS_ERR_PK_BAD_INPUT_DATA
int mbedtls_pk_debug( const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items );
 * \brief           Access the type name
 * \param ctx       Context to use
 * \return          Type name on success, or "invalid PK"
const char * mbedtls_pk_get_name( const mbedtls_pk_context *ctx );
 * \brief           Get the key type
 * \param ctx       Context to use
 * \return          Type on success, or MBEDTLS_PK_NONE
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx );
/** \ingroup pk_module */
 * \brief           Parse a private key in PEM or DER format
 * \param ctx       key to be initialized
 * \param key       input buffer
 * \param keylen    size of the buffer
 *                  (including the terminating null byte for PEM data)
 * \param pwd       password for decryption (optional)
 * \param pwdlen    size of the password
 * \note            On entry, ctx must be empty, either freshly initialised
 *                  with mbedtls_pk_init() or reset with mbedtls_pk_free(). If you need a
 *                  specific key type, check the result with mbedtls_pk_can_do().
 * \note            The key is also checked for correctness.
 * \return          0 if successful, or a specific PK or PEM error code
int mbedtls_pk_parse_key( mbedtls_pk_context *ctx,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen );
/** \ingroup pk_module */
 * \brief           Parse a public key in PEM or DER format
 * \param ctx       key to be initialized
 * \param key       input buffer
 * \param keylen    size of the buffer
 *                  (including the terminating null byte for PEM data)
 * \note            On entry, ctx must be empty, either freshly initialised
 *                  with mbedtls_pk_init() or reset with mbedtls_pk_free(). If you need a
 *                  specific key type, check the result with mbedtls_pk_can_do().
 * \note            The key is also checked for correctness.
 * \return          0 if successful, or a specific PK or PEM error code
int mbedtls_pk_parse_public_key( mbedtls_pk_context *ctx,
                         const unsigned char *key, size_t keylen );
/** \ingroup pk_module */
 * \brief           Load and parse a private key
 * \param ctx       key to be initialized
 * \param path      filename to read the private key from
 * \param password  password to decrypt the file (can be NULL)
 * \note            On entry, ctx must be empty, either freshly initialised
 *                  with mbedtls_pk_init() or reset with mbedtls_pk_free(). If you need a
 *                  specific key type, check the result with mbedtls_pk_can_do().
 * \note            The key is also checked for correctness.
 * \return          0 if successful, or a specific PK or PEM error code
int mbedtls_pk_parse_keyfile( mbedtls_pk_context *ctx,
                      const char *path, const char *password );
/** \ingroup pk_module */
 * \brief           Load and parse a public key
 * \param ctx       key to be initialized
 * \param path      filename to read the public key from
 * \note            On entry, ctx must be empty, either freshly initialised
 *                  with mbedtls_pk_init() or reset with mbedtls_pk_free(). If
 *                  you need a specific key type, check the result with
 *                  mbedtls_pk_can_do().
 * \note            The key is also checked for correctness.
 * \return          0 if successful, or a specific PK or PEM error code
int mbedtls_pk_parse_public_keyfile( mbedtls_pk_context *ctx, const char *path );
 * \brief           Write a private key to a PKCS#1 or SEC1 DER structure
 *                  Note: data is written at the end of the buffer! Use the
 *                        return value to determine where you should start
 *                        using the buffer
 * \param ctx       private to write away
 * \param buf       buffer to write to
 * \param size      size of the buffer
 * \return          length of data written if successful, or a specific
 *                  error code
int mbedtls_pk_write_key_der( mbedtls_pk_context *ctx, unsigned char *buf, size_t size );
 * \brief           Write a public key to a SubjectPublicKeyInfo DER structure
 *                  Note: data is written at the end of the buffer! Use the
 *                        return value to determine where you should start
 *                        using the buffer
 * \param ctx       public key to write away
 * \param buf       buffer to write to
 * \param size      size of the buffer
 * \return          length of data written if successful, or a specific
 *                  error code
int mbedtls_pk_write_pubkey_der( mbedtls_pk_context *ctx, unsigned char *buf, size_t size );
 * \brief           Write a public key to a PEM string
 * \param ctx       public key to write away
 * \param buf       buffer to write to
 * \param size      size of the buffer
 * \return          0 if successful, or a specific error code
int mbedtls_pk_write_pubkey_pem( mbedtls_pk_context *ctx, unsigned char *buf, size_t size );
 * \brief           Write a private key to a PKCS#1 or SEC1 PEM string
 * \param ctx       private to write away
 * \param buf       buffer to write to
 * \param size      size of the buffer
 * \return          0 if successful, or a specific error code
int mbedtls_pk_write_key_pem( mbedtls_pk_context *ctx, unsigned char *buf, size_t size );
 * WARNING: Low-level functions. You probably do not want to use these unless
 *          you are certain you do ;)
 * \brief           Parse a SubjectPublicKeyInfo DER structure
 * \param p         the position in the ASN.1 data
 * \param end       end of the buffer
 * \param pk        the key to fill
 * \return          0 if successful, or a specific PK error code
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk );
 * \brief           Write a subjectPublicKey to ASN.1 data
 *                  Note: function works backwards in data buffer
 * \param p         reference to current position pointer
 * \param start     start of the buffer (for bounds-checking)
 * \param key       public key to write away
 * \return          the length written or a negative error code
int mbedtls_pk_write_pubkey( unsigned char **p, unsigned char *start,
                     const mbedtls_pk_context *key );
 * Internal module functions. You probably do not want to use these unless you
 * know you do.
int mbedtls_pk_load_file( const char *path, unsigned char **buf, size_t *n );
# 28 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl_ciphersuites.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 1
 * \file cipher.h
 * \brief This file contains an abstraction interface for use with the cipher
 * primitives provided by the library. It provides a common interface to all of
 * the available cipher operations.
 * \author Adriaan de Jong <dejong@fox-it.com>
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
#define MBEDTLS_CIPHER_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 36 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 1 3 4
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 3 4
/* Copyright (C) 1989-2015 Free Software Foundation, Inc.
This file is part of GCC.
GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.
GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.
You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
# 39 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 2
#define MBEDTLS_CIPHER_MODE_AEAD 
#define MBEDTLS_CIPHER_MODE_WITH_PADDING 
# 58 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
#define MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE -0x6080 /**< The selected feature is not available. */
#define MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA -0x6100 /**< Bad input parameters. */
#define MBEDTLS_ERR_CIPHER_ALLOC_FAILED -0x6180 /**< Failed to allocate memory. */
#define MBEDTLS_ERR_CIPHER_INVALID_PADDING -0x6200 /**< Input data contains invalid padding and is rejected. */
#define MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED -0x6280 /**< Decryption of block requires a full block. */
#define MBEDTLS_ERR_CIPHER_AUTH_FAILED -0x6300 /**< Authentication failed (for AEAD modes). */
#define MBEDTLS_ERR_CIPHER_INVALID_CONTEXT -0x6380 /**< The context is invalid. For example, because it was freed. */
#define MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED -0x6400 /**< Cipher hardware accelerator failed. */
#define MBEDTLS_CIPHER_VARIABLE_IV_LEN 0x01 /**< Cipher accepts IVs of variable length. */
#define MBEDTLS_CIPHER_VARIABLE_KEY_LEN 0x02 /**< Cipher accepts keys of variable length. */
# 71 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
extern "C" {
 * \brief     Supported cipher types.
 * \warning   RC4 and DES are considered weak ciphers and their use
 *            constitutes a security risk. Arm recommends considering stronger
 *            ciphers instead.
typedef enum {
    MBEDTLS_CIPHER_ID_NONE = 0, /**< Placeholder to mark the end of cipher ID lists. */
    MBEDTLS_CIPHER_ID_NULL, /**< The identity cipher, treated as a stream cipher. */
    MBEDTLS_CIPHER_ID_AES, /**< The AES cipher. */
    MBEDTLS_CIPHER_ID_DES, /**< The DES cipher. */
    MBEDTLS_CIPHER_ID_3DES, /**< The Triple DES cipher. */
    MBEDTLS_CIPHER_ID_CAMELLIA, /**< The Camellia cipher. */
    MBEDTLS_CIPHER_ID_BLOWFISH, /**< The Blowfish cipher. */
    MBEDTLS_CIPHER_ID_ARC4, /**< The RC4 cipher. */
    MBEDTLS_CIPHER_ID_ARIA, /**< The Aria cipher. */
    MBEDTLS_CIPHER_ID_CHACHA20, /**< The ChaCha20 cipher. */
} mbedtls_cipher_id_t;
 * \brief     Supported {cipher type, cipher mode} pairs.
 * \warning   RC4 and DES are considered weak ciphers and their use
 *            constitutes a security risk. Arm recommends considering stronger
 *            ciphers instead.
typedef enum {
    MBEDTLS_CIPHER_NONE = 0, /**< Placeholder to mark the end of cipher-pair lists. */
    MBEDTLS_CIPHER_NULL, /**< The identity stream cipher. */
    MBEDTLS_CIPHER_AES_128_ECB, /**< AES cipher with 128-bit ECB mode. */
    MBEDTLS_CIPHER_AES_192_ECB, /**< AES cipher with 192-bit ECB mode. */
    MBEDTLS_CIPHER_AES_256_ECB, /**< AES cipher with 256-bit ECB mode. */
    MBEDTLS_CIPHER_AES_128_CBC, /**< AES cipher with 128-bit CBC mode. */
    MBEDTLS_CIPHER_AES_192_CBC, /**< AES cipher with 192-bit CBC mode. */
    MBEDTLS_CIPHER_AES_256_CBC, /**< AES cipher with 256-bit CBC mode. */
    MBEDTLS_CIPHER_AES_128_CFB128, /**< AES cipher with 128-bit CFB128 mode. */
    MBEDTLS_CIPHER_AES_192_CFB128, /**< AES cipher with 192-bit CFB128 mode. */
    MBEDTLS_CIPHER_AES_256_CFB128, /**< AES cipher with 256-bit CFB128 mode. */
    MBEDTLS_CIPHER_AES_128_CTR, /**< AES cipher with 128-bit CTR mode. */
    MBEDTLS_CIPHER_AES_192_CTR, /**< AES cipher with 192-bit CTR mode. */
    MBEDTLS_CIPHER_AES_256_CTR, /**< AES cipher with 256-bit CTR mode. */
    MBEDTLS_CIPHER_AES_128_GCM, /**< AES cipher with 128-bit GCM mode. */
    MBEDTLS_CIPHER_AES_192_GCM, /**< AES cipher with 192-bit GCM mode. */
    MBEDTLS_CIPHER_AES_256_GCM, /**< AES cipher with 256-bit GCM mode. */
    MBEDTLS_CIPHER_CAMELLIA_128_ECB, /**< Camellia cipher with 128-bit ECB mode. */
    MBEDTLS_CIPHER_CAMELLIA_192_ECB, /**< Camellia cipher with 192-bit ECB mode. */
    MBEDTLS_CIPHER_CAMELLIA_256_ECB, /**< Camellia cipher with 256-bit ECB mode. */
    MBEDTLS_CIPHER_CAMELLIA_128_CBC, /**< Camellia cipher with 128-bit CBC mode. */
    MBEDTLS_CIPHER_CAMELLIA_192_CBC, /**< Camellia cipher with 192-bit CBC mode. */
    MBEDTLS_CIPHER_CAMELLIA_256_CBC, /**< Camellia cipher with 256-bit CBC mode. */
    MBEDTLS_CIPHER_CAMELLIA_128_CFB128, /**< Camellia cipher with 128-bit CFB128 mode. */
    MBEDTLS_CIPHER_CAMELLIA_192_CFB128, /**< Camellia cipher with 192-bit CFB128 mode. */
    MBEDTLS_CIPHER_CAMELLIA_256_CFB128, /**< Camellia cipher with 256-bit CFB128 mode. */
    MBEDTLS_CIPHER_CAMELLIA_128_CTR, /**< Camellia cipher with 128-bit CTR mode. */
    MBEDTLS_CIPHER_CAMELLIA_192_CTR, /**< Camellia cipher with 192-bit CTR mode. */
    MBEDTLS_CIPHER_CAMELLIA_256_CTR, /**< Camellia cipher with 256-bit CTR mode. */
    MBEDTLS_CIPHER_CAMELLIA_128_GCM, /**< Camellia cipher with 128-bit GCM mode. */
    MBEDTLS_CIPHER_CAMELLIA_192_GCM, /**< Camellia cipher with 192-bit GCM mode. */
    MBEDTLS_CIPHER_CAMELLIA_256_GCM, /**< Camellia cipher with 256-bit GCM mode. */
    MBEDTLS_CIPHER_DES_ECB, /**< DES cipher with ECB mode. */
    MBEDTLS_CIPHER_DES_CBC, /**< DES cipher with CBC mode. */
    MBEDTLS_CIPHER_DES_EDE_ECB, /**< DES cipher with EDE ECB mode. */
    MBEDTLS_CIPHER_DES_EDE_CBC, /**< DES cipher with EDE CBC mode. */
    MBEDTLS_CIPHER_DES_EDE3_ECB, /**< DES cipher with EDE3 ECB mode. */
    MBEDTLS_CIPHER_DES_EDE3_CBC, /**< DES cipher with EDE3 CBC mode. */
    MBEDTLS_CIPHER_BLOWFISH_ECB, /**< Blowfish cipher with ECB mode. */
    MBEDTLS_CIPHER_BLOWFISH_CBC, /**< Blowfish cipher with CBC mode. */
    MBEDTLS_CIPHER_BLOWFISH_CFB64, /**< Blowfish cipher with CFB64 mode. */
    MBEDTLS_CIPHER_BLOWFISH_CTR, /**< Blowfish cipher with CTR mode. */
    MBEDTLS_CIPHER_ARC4_128, /**< RC4 cipher with 128-bit mode. */
    MBEDTLS_CIPHER_AES_128_CCM, /**< AES cipher with 128-bit CCM mode. */
    MBEDTLS_CIPHER_AES_192_CCM, /**< AES cipher with 192-bit CCM mode. */
    MBEDTLS_CIPHER_AES_256_CCM, /**< AES cipher with 256-bit CCM mode. */
    MBEDTLS_CIPHER_CAMELLIA_128_CCM, /**< Camellia cipher with 128-bit CCM mode. */
    MBEDTLS_CIPHER_CAMELLIA_192_CCM, /**< Camellia cipher with 192-bit CCM mode. */
    MBEDTLS_CIPHER_CAMELLIA_256_CCM, /**< Camellia cipher with 256-bit CCM mode. */
    MBEDTLS_CIPHER_ARIA_128_ECB, /**< Aria cipher with 128-bit key and ECB mode. */
    MBEDTLS_CIPHER_ARIA_192_ECB, /**< Aria cipher with 192-bit key and ECB mode. */
    MBEDTLS_CIPHER_ARIA_256_ECB, /**< Aria cipher with 256-bit key and ECB mode. */
    MBEDTLS_CIPHER_ARIA_128_CBC, /**< Aria cipher with 128-bit key and CBC mode. */
    MBEDTLS_CIPHER_ARIA_192_CBC, /**< Aria cipher with 192-bit key and CBC mode. */
    MBEDTLS_CIPHER_ARIA_256_CBC, /**< Aria cipher with 256-bit key and CBC mode. */
    MBEDTLS_CIPHER_ARIA_128_CFB128, /**< Aria cipher with 128-bit key and CFB-128 mode. */
    MBEDTLS_CIPHER_ARIA_192_CFB128, /**< Aria cipher with 192-bit key and CFB-128 mode. */
    MBEDTLS_CIPHER_ARIA_256_CFB128, /**< Aria cipher with 256-bit key and CFB-128 mode. */
    MBEDTLS_CIPHER_ARIA_128_CTR, /**< Aria cipher with 128-bit key and CTR mode. */
    MBEDTLS_CIPHER_ARIA_192_CTR, /**< Aria cipher with 192-bit key and CTR mode. */
    MBEDTLS_CIPHER_ARIA_256_CTR, /**< Aria cipher with 256-bit key and CTR mode. */
    MBEDTLS_CIPHER_ARIA_128_GCM, /**< Aria cipher with 128-bit key and GCM mode. */
    MBEDTLS_CIPHER_ARIA_192_GCM, /**< Aria cipher with 192-bit key and GCM mode. */
    MBEDTLS_CIPHER_ARIA_256_GCM, /**< Aria cipher with 256-bit key and GCM mode. */
    MBEDTLS_CIPHER_ARIA_128_CCM, /**< Aria cipher with 128-bit key and CCM mode. */
    MBEDTLS_CIPHER_ARIA_192_CCM, /**< Aria cipher with 192-bit key and CCM mode. */
    MBEDTLS_CIPHER_ARIA_256_CCM, /**< Aria cipher with 256-bit key and CCM mode. */
    MBEDTLS_CIPHER_AES_128_OFB, /**< AES 128-bit cipher in OFB mode. */
    MBEDTLS_CIPHER_AES_192_OFB, /**< AES 192-bit cipher in OFB mode. */
    MBEDTLS_CIPHER_AES_256_OFB, /**< AES 256-bit cipher in OFB mode. */
    MBEDTLS_CIPHER_AES_128_XTS, /**< AES 128-bit cipher in XTS block mode. */
    MBEDTLS_CIPHER_AES_256_XTS, /**< AES 256-bit cipher in XTS block mode. */
    MBEDTLS_CIPHER_CHACHA20, /**< ChaCha20 stream cipher. */
    MBEDTLS_CIPHER_CHACHA20_POLY1305, /**< ChaCha20-Poly1305 AEAD cipher. */
} mbedtls_cipher_type_t;
/** Supported cipher modes. */
typedef enum {
    MBEDTLS_MODE_NONE = 0, /**< None. */
    MBEDTLS_MODE_ECB, /**< The ECB cipher mode. */
    MBEDTLS_MODE_CBC, /**< The CBC cipher mode. */
    MBEDTLS_MODE_CFB, /**< The CFB cipher mode. */
    MBEDTLS_MODE_OFB, /**< The OFB cipher mode. */
    MBEDTLS_MODE_CTR, /**< The CTR cipher mode. */
    MBEDTLS_MODE_GCM, /**< The GCM cipher mode. */
    MBEDTLS_MODE_STREAM, /**< The stream cipher mode. */
    MBEDTLS_MODE_CCM, /**< The CCM cipher mode. */
    MBEDTLS_MODE_XTS, /**< The XTS cipher mode. */
    MBEDTLS_MODE_CHACHAPOLY, /**< The ChaCha-Poly cipher mode. */
} mbedtls_cipher_mode_t;
/** Supported cipher padding types. */
typedef enum {
    MBEDTLS_PADDING_PKCS7 = 0, /**< PKCS7 padding (default).        */
    MBEDTLS_PADDING_ONE_AND_ZEROS, /**< ISO/IEC 7816-4 padding.         */
    MBEDTLS_PADDING_ZEROS_AND_LEN, /**< ANSI X.923 padding.             */
    MBEDTLS_PADDING_ZEROS, /**< Zero padding (not reversible). */
    MBEDTLS_PADDING_NONE, /**< Never pad (full blocks only).   */
} mbedtls_cipher_padding_t;
/** Type of operation. */
typedef enum {
    MBEDTLS_OPERATION_NONE = -1,
    MBEDTLS_DECRYPT = 0,
    MBEDTLS_ENCRYPT,
} mbedtls_operation_t;
enum {
    /** Undefined key length. */
    MBEDTLS_KEY_LENGTH_NONE = 0,
    /** Key length, in bits (including parity), for DES keys. */
    MBEDTLS_KEY_LENGTH_DES = 64,
    /** Key length in bits, including parity, for DES in two-key EDE. */
    MBEDTLS_KEY_LENGTH_DES_EDE = 128,
    /** Key length in bits, including parity, for DES in three-key EDE. */
    MBEDTLS_KEY_LENGTH_DES_EDE3 = 192,
/** Maximum length of any IV, in Bytes. */
#define MBEDTLS_MAX_IV_LENGTH 16
/** Maximum block size of any cipher, in Bytes. */
#define MBEDTLS_MAX_BLOCK_LENGTH 16
 * Base cipher information (opaque struct).
typedef struct mbedtls_cipher_base_t mbedtls_cipher_base_t;
 * CMAC context (opaque struct).
typedef struct mbedtls_cmac_context_t mbedtls_cmac_context_t;
 * Cipher information. Allows calling cipher functions
 * in a generic way.
typedef struct mbedtls_cipher_info_t
    /** Full cipher identifier. For example,
     * MBEDTLS_CIPHER_AES_256_CBC.
     */
    mbedtls_cipher_type_t type;
    /** The cipher mode. For example, MBEDTLS_MODE_CBC. */
    mbedtls_cipher_mode_t mode;
    /** The cipher key length, in bits. This is the
     * default length for variable sized ciphers.
     * Includes parity bits for ciphers like DES.
     */
    unsigned int key_bitlen;
    /** Name of the cipher. */
    const char * name;
    /** IV or nonce size, in Bytes.
     * For ciphers that accept variable IV sizes,
     * this is the recommended size.
     */
    unsigned int iv_size;
    /** Bitflag comprised of MBEDTLS_CIPHER_VARIABLE_IV_LEN and
     *  MBEDTLS_CIPHER_VARIABLE_KEY_LEN indicating whether the
     *  cipher supports variable IV or variable key sizes, respectively.
     */
    int flags;
    /** The block size, in Bytes. */
    unsigned int block_size;
    /** Struct for base cipher information and functions. */
    const mbedtls_cipher_base_t *base;
} mbedtls_cipher_info_t;
 * Generic cipher context.
typedef struct mbedtls_cipher_context_t
    /** Information about the associated cipher. */
    const mbedtls_cipher_info_t *cipher_info;
    /** Key length to use. */
    int key_bitlen;
    /** Operation that the key of the context has been
     * initialized for.
     */
    mbedtls_operation_t operation;
    /** Padding functions to use, if relevant for
     * the specific cipher mode.
     */
    void (*add_padding)( unsigned char *output, size_t olen, size_t data_len );
    int (*get_padding)( unsigned char *input, size_t ilen, size_t *data_len );
    /** Buffer for input that has not been processed yet. */
    unsigned char unprocessed_data[16];
    /** Number of Bytes that have not been processed yet. */
    size_t unprocessed_len;
    /** Current IV or NONCE_COUNTER for CTR-mode, data unit (or sector) number
     * for XTS-mode. */
    unsigned char iv[16];
    /** IV size in Bytes, for ciphers with variable-length IVs. */
    size_t iv_size;
    /** The cipher-specific context. */
    void *cipher_ctx;
} mbedtls_cipher_context_t;
 * \brief This function retrieves the list of ciphers supported by the generic
 * cipher module.
 * \return      A statically-allocated array of ciphers. The last entry
 *              is zero.
const int *mbedtls_cipher_list( void );
 * \brief               This function retrieves the cipher-information
 *                      structure associated with the given cipher name.
 * \param cipher_name   Name of the cipher to search for.
 * \return              The cipher information structure associated with the
 *                      given \p cipher_name.
 * \return              NULL if the associated cipher information is not found.
const mbedtls_cipher_info_t *mbedtls_cipher_info_from_string( const char *cipher_name );
 * \brief               This function retrieves the cipher-information
 *                      structure associated with the given cipher type.
 * \param cipher_type   Type of the cipher to search for.
 * \return              The cipher information structure associated with the
 *                      given \p cipher_type.
 * \return              NULL if the associated cipher information is not found.
const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type );
 * \brief               This function retrieves the cipher-information
 *                      structure associated with the given cipher ID,
 *                      key size and mode.
 * \param cipher_id     The ID of the cipher to search for. For example,
 *                      #MBEDTLS_CIPHER_ID_AES.
 * \param key_bitlen    The length of the key in bits.
 * \param mode          The cipher mode. For example, #MBEDTLS_MODE_CBC.
 * \return              The cipher information structure associated with the
 *                      given \p cipher_id.
 * \return              NULL if the associated cipher information is not found.
const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode );
 * \brief               This function initializes a \p cipher_context as NONE.
void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx );
 * \brief               This function frees and clears the cipher-specific
 *                      context of \p ctx. Freeing \p ctx itself remains the
 *                      responsibility of the caller.
void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx );
 * \brief               This function initializes and fills the cipher-context
 *                      structure with the appropriate values. It also clears
 *                      the structure.
 * \param ctx           The context to initialize. May not be NULL.
 * \param cipher_info   The cipher to use.
 * \return              \c 0 on success.
 * \return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on
 *                      parameter-verification failure.
 * \return              #MBEDTLS_ERR_CIPHER_ALLOC_FAILED if allocation of the
 *                      cipher-specific context fails.
 * \internal Currently, the function also clears the structure.
 * In future versions, the caller will be required to call
 * mbedtls_cipher_init() on the structure first.
int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info );
 * \brief        This function returns the block size of the given cipher.
 * \param ctx    The context of the cipher. Must be initialized.
 * \return       The size of the blocks of the cipher.
 * \return       0 if \p ctx has not been initialized.
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
    if( 
# 418 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 3 4
       __null 
# 418 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
            == ctx || 
# 418 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 3 4
                      __null 
# 418 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
                           == ctx->cipher_info )
        return 0;
    return ctx->cipher_info->block_size;
 * \brief        This function returns the mode of operation for
 *               the cipher. For example, MBEDTLS_MODE_CBC.
 * \param ctx    The context of the cipher. Must be initialized.
 * \return       The mode of operation.
 * \return       #MBEDTLS_MODE_NONE if \p ctx has not been initialized.
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
    if( 
# 435 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 3 4
       __null 
# 435 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
            == ctx || 
# 435 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 3 4
                      __null 
# 435 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
                           == ctx->cipher_info )
        return MBEDTLS_MODE_NONE;
    return ctx->cipher_info->mode;
 * \brief       This function returns the size of the IV or nonce
 *              of the cipher, in Bytes.
 * \param ctx   The context of the cipher. Must be initialized.
 * \return      The recommended IV size if no IV has been set.
 * \return      \c 0 for ciphers not using an IV or a nonce.
 * \return      The actual size if an IV has been set.
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
    if( 
# 453 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 3 4
       __null 
# 453 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
            == ctx || 
# 453 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 3 4
                      __null 
# 453 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
                           == ctx->cipher_info )
        return 0;
    if( ctx->iv_size != 0 )
        return (int) ctx->iv_size;
    return (int) ctx->cipher_info->iv_size;
 * \brief               This function returns the type of the given cipher.
 * \param ctx           The context of the cipher. Must be initialized.
 * \return              The type of the cipher.
 * \return              #MBEDTLS_CIPHER_NONE if \p ctx has not been initialized.
static inline mbedtls_cipher_type_t mbedtls_cipher_get_type( const mbedtls_cipher_context_t *ctx )
    if( 
# 472 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 3 4
       __null 
# 472 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
            == ctx || 
# 472 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 3 4
                      __null 
# 472 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
                           == ctx->cipher_info )
        return MBEDTLS_CIPHER_NONE;
    return ctx->cipher_info->type;
 * \brief               This function returns the name of the given cipher
 *                      as a string.
 * \param ctx           The context of the cipher. Must be initialized.
 * \return              The name of the cipher.
 * \return              NULL if \p ctx has not been not initialized.
static inline const char *mbedtls_cipher_get_name( const mbedtls_cipher_context_t *ctx )
    if( 
# 489 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 3 4
       __null 
# 489 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
            == ctx || 
# 489 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 3 4
                      __null 
# 489 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
                           == ctx->cipher_info )
        return 0;
    return ctx->cipher_info->name;
 * \brief               This function returns the key length of the cipher.
 * \param ctx           The context of the cipher. Must be initialized.
 * \return              The key length of the cipher in bits.
 * \return              #MBEDTLS_KEY_LENGTH_NONE if ctx \p has not been
 *                      initialized.
static inline int mbedtls_cipher_get_key_bitlen( const mbedtls_cipher_context_t *ctx )
    if( 
# 506 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 3 4
       __null 
# 506 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
            == ctx || 
# 506 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 3 4
                      __null 
# 506 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
                           == ctx->cipher_info )
        return MBEDTLS_KEY_LENGTH_NONE;
    return (int) ctx->cipher_info->key_bitlen;
 * \brief          This function returns the operation of the given cipher.
 * \param ctx      The context of the cipher. Must be initialized.
 * \return         The type of operation: #MBEDTLS_ENCRYPT or #MBEDTLS_DECRYPT.
 * \return         #MBEDTLS_OPERATION_NONE if \p ctx has not been initialized.
static inline mbedtls_operation_t mbedtls_cipher_get_operation( const mbedtls_cipher_context_t *ctx )
    if( 
# 522 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 3 4
       __null 
# 522 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
            == ctx || 
# 522 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h" 3 4
                      __null 
# 522 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/cipher.h"
                           == ctx->cipher_info )
        return MBEDTLS_OPERATION_NONE;
    return ctx->operation;
 * \brief               This function sets the key to use with the given context.
 * \param ctx           The generic cipher context. May not be NULL. Must have
 *                      been initialized using mbedtls_cipher_info_from_type()
 *                      or mbedtls_cipher_info_from_string().
 * \param key           The key to use.
 * \param key_bitlen    The key length to use, in bits.
 * \param operation     The operation that the key will be used for:
 *                      #MBEDTLS_ENCRYPT or #MBEDTLS_DECRYPT.
 * \return              \c 0 on success.
 * \return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on
 *                      parameter-verification failure.
 * \return              A cipher-specific error code on failure.
int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,
                   int key_bitlen, const mbedtls_operation_t operation );
 * \brief               This function sets the padding mode, for cipher modes
 *                      that use padding.
 *                      The default passing mode is PKCS7 padding.
 * \param ctx           The generic cipher context.
 * \param mode          The padding mode.
 * \return              \c 0 on success.
 * \return              #MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE
 *                      if the selected padding mode is not supported.
 * \return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA if the cipher mode
 *                      does not support padding.
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode );
 * \brief           This function sets the initialization vector (IV)
 *                  or nonce.
 * \note            Some ciphers do not use IVs nor nonce. For these
 *                  ciphers, this function has no effect.
 * \param ctx       The generic cipher context.
 * \param iv        The IV to use, or NONCE_COUNTER for CTR-mode ciphers.
 * \param iv_len    The IV length for ciphers with variable-size IV.
 *                  This parameter is discarded by ciphers with fixed-size IV.
 * \return          \c 0 on success.
 * \return          #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on
 *                  parameter-verification failure.
int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                   const unsigned char *iv, size_t iv_len );
 * \brief         This function resets the cipher state.
 * \param ctx     The generic cipher context.
 * \return        \c 0 on success.
 * \return        #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on
 *                parameter-verification failure.
int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx );
 * \brief               This function adds additional data for AEAD ciphers.
 *                      Currently supported with GCM and ChaCha20+Poly1305.
 *                      Must be called exactly once, after mbedtls_cipher_reset().
 * \param ctx           The generic cipher context.
 * \param ad            The additional data to use.
 * \param ad_len        the Length of \p ad.
 * \return              \c 0 on success.
 * \return              A specific error code on failure.
int mbedtls_cipher_update_ad( mbedtls_cipher_context_t *ctx,
                      const unsigned char *ad, size_t ad_len );
 * \brief               The generic cipher update function. It encrypts or
 *                      decrypts using the given cipher context. Writes as
 *                      many block-sized blocks of data as possible to output.
 *                      Any data that cannot be written immediately is either
 *                      added to the next block, or flushed when
 *                      mbedtls_cipher_finish() is called.
 *                      Exception: For MBEDTLS_MODE_ECB, expects a single block
 *                      in size. For example, 16 Bytes for AES.
 * \note                If the underlying cipher is used in GCM mode, all calls
 *                      to this function, except for the last one before
 *                      mbedtls_cipher_finish(), must have \p ilen as a
 *                      multiple of the block size of the cipher.
 * \param ctx           The generic cipher context.
 * \param input         The buffer holding the input data.
 * \param ilen          The length of the input data.
 * \param output        The buffer for the output data. Must be able to hold at
 *                      least \p ilen + block_size. Must not be the same buffer
 *                      as input.
 * \param olen          The length of the output data, to be updated with the
 *                      actual number of Bytes written.
 * \return              \c 0 on success.
 * \return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on
 *                      parameter-verification failure.
 * \return              #MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE on an
 *                      unsupported mode for a cipher.
 * \return              A cipher-specific error code on failure.
int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen );
 * \brief               The generic cipher finalization function. If data still
 *                      needs to be flushed from an incomplete block, the data
 *                      contained in it is padded to the size of
 *                      the last block, and written to the \p output buffer.
 * \param ctx           The generic cipher context.
 * \param output        The buffer to write data to. Needs block_size available.
 * \param olen          The length of the data written to the \p output buffer.
 * \return              \c 0 on success.
 * \return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on
 *                      parameter-verification failure.
 * \return              #MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED on decryption
 *                      expecting a full block but not receiving one.
 * \return              #MBEDTLS_ERR_CIPHER_INVALID_PADDING on invalid padding
 *                      while decrypting.
 * \return              A cipher-specific error code on failure.
int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen );
 * \brief               This function writes a tag for AEAD ciphers.
 *                      Currently supported with GCM and ChaCha20+Poly1305.
 *                      Must be called after mbedtls_cipher_finish().
 * \param ctx           The generic cipher context.
 * \param tag           The buffer to write the tag to.
 * \param tag_len       The length of the tag to write.
 * \return              \c 0 on success.
 * \return              A specific error code on failure.
int mbedtls_cipher_write_tag( mbedtls_cipher_context_t *ctx,
                      unsigned char *tag, size_t tag_len );
 * \brief               This function checks the tag for AEAD ciphers.
 *                      Currently supported with GCM and ChaCha20+Poly1305.
 *                      Must be called after mbedtls_cipher_finish().
 * \param ctx           The generic cipher context.
 * \param tag           The buffer holding the tag.
 * \param tag_len       The length of the tag to check.
 * \return              \c 0 on success.
 * \return              A specific error code on failure.
int mbedtls_cipher_check_tag( mbedtls_cipher_context_t *ctx,
                      const unsigned char *tag, size_t tag_len );
 * \brief               The generic all-in-one encryption/decryption function,
 *                      for all ciphers except AEAD constructs.
 * \param ctx           The generic cipher context.
 * \param iv            The IV to use, or NONCE_COUNTER for CTR-mode ciphers.
 * \param iv_len        The IV length for ciphers with variable-size IV.
 *                      This parameter is discarded by ciphers with fixed-size
 *                      IV.
 * \param input         The buffer holding the input data.
 * \param ilen          The length of the input data.
 * \param output        The buffer for the output data. Must be able to hold at
 *                      least \p ilen + block_size. Must not be the same buffer
 *                      as input.
 * \param olen          The length of the output data, to be updated with the
 *                      actual number of Bytes written.
 * \note                Some ciphers do not use IVs nor nonce. For these
 *                      ciphers, use \p iv = NULL and \p iv_len = 0.
 * \return              \c 0 on success.
 * \return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on
 *                      parameter-verification failure.
 * \return              #MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED on decryption
 *                      expecting a full block but not receiving one.
 * \return              #MBEDTLS_ERR_CIPHER_INVALID_PADDING on invalid padding
 *                      while decrypting.
 * \return              A cipher-specific error code on failure.
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen );
 * \brief               The generic autenticated encryption (AEAD) function.
 * \param ctx           The generic cipher context.
 * \param iv            The IV to use, or NONCE_COUNTER for CTR-mode ciphers.
 * \param iv_len        The IV length for ciphers with variable-size IV.
 *                      This parameter is discarded by ciphers with fixed-size IV.
 * \param ad            The additional data to authenticate.
 * \param ad_len        The length of \p ad.
 * \param input         The buffer holding the input data.
 * \param ilen          The length of the input data.
 * \param output        The buffer for the output data.
 *                      Must be able to hold at least \p ilen.
 * \param olen          The length of the output data, to be updated with the
 *                      actual number of Bytes written.
 * \param tag           The buffer for the authentication tag.
 * \param tag_len       The desired length of the authentication tag.
 * \return              \c 0 on success.
 * \return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on
 *                      parameter-verification failure.
 * \return              A cipher-specific error code on failure.
int mbedtls_cipher_auth_encrypt( mbedtls_cipher_context_t *ctx,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len );
 * \brief               The generic autenticated decryption (AEAD) function.
 * \note                If the data is not authentic, then the output buffer
 *                      is zeroed out to prevent the unauthentic plaintext being
 *                      used, making this interface safer.
 * \param ctx           The generic cipher context.
 * \param iv            The IV to use, or NONCE_COUNTER for CTR-mode ciphers.
 * \param iv_len        The IV length for ciphers with variable-size IV.
 *                      This parameter is discarded by ciphers with fixed-size IV.
 * \param ad            The additional data to be authenticated.
 * \param ad_len        The length of \p ad.
 * \param input         The buffer holding the input data.
 * \param ilen          The length of the input data.
 * \param output        The buffer for the output data.
 *                      Must be able to hold at least \p ilen.
 * \param olen          The length of the output data, to be updated with the
 *                      actual number of Bytes written.
 * \param tag           The buffer holding the authentication tag.
 * \param tag_len       The length of the authentication tag.
 * \return              \c 0 on success.
 * \return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on
 *                      parameter-verification failure.
 * \return              #MBEDTLS_ERR_CIPHER_AUTH_FAILED if data is not authentic.
 * \return              A cipher-specific error code on failure.
int mbedtls_cipher_auth_decrypt( mbedtls_cipher_context_t *ctx,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len );
# 29 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl_ciphersuites.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/md.h" 1
 /**
 * \file md.h
 * \brief This file contains the generic message-digest wrapper.
 * \author Adriaan de Jong <dejong@fox-it.com>
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
# 30 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl_ciphersuites.h" 2
extern "C" {
 * Supported ciphersuites (Official IANA names)
#define MBEDTLS_TLS_RSA_WITH_NULL_MD5 0x01 /**< Weak! */
#define MBEDTLS_TLS_RSA_WITH_NULL_SHA 0x02 /**< Weak! */
#define MBEDTLS_TLS_RSA_WITH_RC4_128_MD5 0x04
#define MBEDTLS_TLS_RSA_WITH_RC4_128_SHA 0x05
#define MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA 0x09 /**< Weak! Not in TLS 1.2 */
#define MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA 0x0A
#define MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA 0x15 /**< Weak! Not in TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA 0x16
#define MBEDTLS_TLS_PSK_WITH_NULL_SHA 0x2C /**< Weak! */
#define MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA 0x2D /**< Weak! */
#define MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA 0x2E /**< Weak! */
#define MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA 0x2F
#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA 0x33
#define MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA 0x35
#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA 0x39
#define MBEDTLS_TLS_RSA_WITH_NULL_SHA256 0x3B /**< Weak! */
#define MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256 0x3C /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256 0x3D /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA 0x41
#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA 0x45
#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 0x67 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 0x6B /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA 0x84
#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA 0x88
#define MBEDTLS_TLS_PSK_WITH_RC4_128_SHA 0x8A
#define MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA 0x8B
#define MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA 0x8C
#define MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA 0x8D
#define MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA 0x8E
#define MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA 0x8F
#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA 0x90
#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA 0x91
#define MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA 0x92
#define MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA 0x93
#define MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA 0x94
#define MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA 0x95
#define MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256 0x9C /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384 0x9D /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 0x9E /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 0x9F /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256 0xA8 /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384 0xA9 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 0xAA /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 0xAB /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 0xAC /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 0xAD /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256 0xAE
#define MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384 0xAF
#define MBEDTLS_TLS_PSK_WITH_NULL_SHA256 0xB0 /**< Weak! */
#define MBEDTLS_TLS_PSK_WITH_NULL_SHA384 0xB1 /**< Weak! */
#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 0xB2
#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 0xB3
#define MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256 0xB4 /**< Weak! */
#define MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384 0xB5 /**< Weak! */
#define MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 0xB6
#define MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 0xB7
#define MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256 0xB8 /**< Weak! */
#define MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384 0xB9 /**< Weak! */
#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256 0xBA /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 0xBE /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256 0xC0 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 0xC4 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA 0xC001 /**< Weak! */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA 0xC002 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA 0xC003 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA 0xC004 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA 0xC005 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA 0xC006 /**< Weak! */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA 0xC007 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA 0xC008 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA 0xC009 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA 0xC00A /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA 0xC00B /**< Weak! */
#define MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA 0xC00C /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA 0xC00D /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA 0xC00E /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA 0xC00F /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA 0xC010 /**< Weak! */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA 0xC011 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA 0xC012 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA 0xC013 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA 0xC014 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 0xC023 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 0xC024 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 0xC025 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 0xC026 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 0xC027 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 0xC028 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 0xC029 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 0xC02A /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 0xC02B /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 0xC02C /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 0xC02D /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 0xC02E /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 0xC02F /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 0xC030 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 0xC031 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 0xC032 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA 0xC033 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA 0xC034 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA 0xC035 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA 0xC036 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 0xC037 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 0xC038 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA 0xC039 /**< Weak! No SSL3! */
#define MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256 0xC03A /**< Weak! No SSL3! */
#define MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384 0xC03B /**< Weak! No SSL3! */
#define MBEDTLS_TLS_RSA_WITH_ARIA_128_CBC_SHA256 0xC03C /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_WITH_ARIA_256_CBC_SHA384 0xC03D /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256 0xC044 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384 0xC045 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256 0xC048 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384 0xC049 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256 0xC04A /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384 0xC04B /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256 0xC04C /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384 0xC04D /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256 0xC04E /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384 0xC04F /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_WITH_ARIA_128_GCM_SHA256 0xC050 /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_WITH_ARIA_256_GCM_SHA384 0xC051 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256 0xC052 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384 0xC053 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 0xC05C /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 0xC05D /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 0xC05E /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 0xC05F /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 0xC060 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 0xC061 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 0xC062 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 0xC063 /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_ARIA_128_CBC_SHA256 0xC064 /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_ARIA_256_CBC_SHA384 0xC065 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256 0xC066 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384 0xC067 /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256 0xC068 /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384 0xC069 /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_ARIA_128_GCM_SHA256 0xC06A /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_ARIA_256_GCM_SHA384 0xC06B /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256 0xC06C /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384 0xC06D /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256 0xC06E /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384 0xC06F /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256 0xC070 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384 0xC071 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 0xC072 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 0xC073 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 0xC074 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 0xC075 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 0xC076 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 0xC077 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 0xC078 /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 0xC079 /**< Not in SSL3! */
#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256 0xC07A /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384 0xC07B /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 0xC07C /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 0xC07D /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 0xC086 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 0xC087 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 0xC088 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 0xC089 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 0xC08A /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 0xC08B /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256 0xC08C /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384 0xC08D /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256 0xC08E /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384 0xC08F /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256 0xC090 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384 0xC091 /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256 0xC092 /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384 0xC093 /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256 0xC094
#define MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384 0xC095
#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 0xC096
#define MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 0xC097
#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 0xC098
#define MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 0xC099
#define MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 0xC09A /**< Not in SSL3! */
#define MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 0xC09B /**< Not in SSL3! */
#define MBEDTLS_TLS_RSA_WITH_AES_128_CCM 0xC09C /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_WITH_AES_256_CCM 0xC09D /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM 0xC09E /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM 0xC09F /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8 0xC0A0 /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8 0xC0A1 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8 0xC0A2 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8 0xC0A3 /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_AES_128_CCM 0xC0A4 /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_AES_256_CCM 0xC0A5 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM 0xC0A6 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM 0xC0A7 /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8 0xC0A8 /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8 0xC0A9 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8 0xC0AA /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8 0xC0AB /**< TLS 1.2 */
/* The last two are named with PSK_DHE in the RFC, which looks like a typo */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM 0xC0AC /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM 0xC0AD /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 0xC0AE /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8 0xC0AF /**< TLS 1.2 */
#define MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8 0xC0FF /**< experimental */
/* RFC 7905 */
#define MBEDTLS_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 0xCCA8 /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 0xCCA9 /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 0xCCAA /**< TLS 1.2 */
#define MBEDTLS_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256 0xCCAB /**< TLS 1.2 */
#define MBEDTLS_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 0xCCAC /**< TLS 1.2 */
#define MBEDTLS_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256 0xCCAD /**< TLS 1.2 */
#define MBEDTLS_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256 0xCCAE /**< TLS 1.2 */
/* Reminder: update mbedtls_ssl_premaster_secret when adding a new key exchange.
 * Reminder: update MBEDTLS_KEY_EXCHANGE__xxx below
typedef enum {
    MBEDTLS_KEY_EXCHANGE_NONE = 0,
    MBEDTLS_KEY_EXCHANGE_RSA,
    MBEDTLS_KEY_EXCHANGE_DHE_RSA,
    MBEDTLS_KEY_EXCHANGE_ECDHE_RSA,
    MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA,
    MBEDTLS_KEY_EXCHANGE_PSK,
    MBEDTLS_KEY_EXCHANGE_DHE_PSK,
    MBEDTLS_KEY_EXCHANGE_RSA_PSK,
    MBEDTLS_KEY_EXCHANGE_ECDHE_PSK,
    MBEDTLS_KEY_EXCHANGE_ECDH_RSA,
    MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA,
    MBEDTLS_KEY_EXCHANGE_ECJPAKE,
} mbedtls_key_exchange_type_t;
/* Key exchanges using a certificate */
#define MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED 
/* Key exchanges allowing client certificate requests */
#define MBEDTLS_KEY_EXCHANGE__CERT_REQ_ALLOWED__ENABLED 
/* Key exchanges involving server signature in ServerKeyExchange */
#define MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED 
/* Key exchanges using ECDH */
#define MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED 
/* Key exchanges that don't involve ephemeral keys */
#define MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED 
/* Key exchanges that involve ephemeral keys */
#define MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED 
/* Key exchanges using a PSK */
#define MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED 
/* Key exchanges using DHE */
#define MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED 
/* Key exchanges using ECDHE */
#define MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED 
typedef struct mbedtls_ssl_ciphersuite_t mbedtls_ssl_ciphersuite_t;
#define MBEDTLS_CIPHERSUITE_WEAK 0x01 /**< Weak ciphersuite flag  */
#define MBEDTLS_CIPHERSUITE_SHORT_TAG 0x02 /**< Short authentication tag,
                                                     eg for CCM_8 */
#define MBEDTLS_CIPHERSUITE_NODTLS 0x04 /**< Can't be used with DTLS */
 * \brief   This structure is used for storing ciphersuite information
struct mbedtls_ssl_ciphersuite_t
    int id;
    const char * name;
    mbedtls_cipher_type_t cipher;
    mbedtls_md_type_t mac;
    mbedtls_key_exchange_type_t key_exchange;
    int min_major_ver;
    int min_minor_ver;
    int max_major_ver;
    int max_minor_ver;
    unsigned char flags;
const int *mbedtls_ssl_list_ciphersuites( void );
const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_string( const char *ciphersuite_name );
const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite_id );
mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info );
mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_alg( const mbedtls_ssl_ciphersuite_t *info );
int mbedtls_ssl_ciphersuite_uses_ec( const mbedtls_ssl_ciphersuite_t *info );
int mbedtls_ssl_ciphersuite_uses_psk( const mbedtls_ssl_ciphersuite_t *info );
static inline int mbedtls_ssl_ciphersuite_has_pfs( const mbedtls_ssl_ciphersuite_t *info )
    switch( info->key_exchange )
    {
        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_DHE_PSK:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_ECJPAKE:
            return( 1 );
        default:
            return( 0 );
    }
static inline int mbedtls_ssl_ciphersuite_no_pfs( const mbedtls_ssl_ciphersuite_t *info )
    switch( info->key_exchange )
    {
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_RSA:
        case MBEDTLS_KEY_EXCHANGE_PSK:
        case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
            return( 1 );
        default:
            return( 0 );
    }
static inline int mbedtls_ssl_ciphersuite_uses_ecdh( const mbedtls_ssl_ciphersuite_t *info )
    switch( info->key_exchange )
    {
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( 1 );
        default:
            return( 0 );
    }
static inline int mbedtls_ssl_ciphersuite_cert_req_allowed( const mbedtls_ssl_ciphersuite_t *info )
    switch( info->key_exchange )
    {
        case MBEDTLS_KEY_EXCHANGE_RSA:
        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( 1 );
        default:
            return( 0 );
    }
static inline int mbedtls_ssl_ciphersuite_uses_dhe( const mbedtls_ssl_ciphersuite_t *info )
    switch( info->key_exchange )
    {
        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_DHE_PSK:
            return( 1 );
        default:
            return( 0 );
    }
static inline int mbedtls_ssl_ciphersuite_uses_ecdhe( const mbedtls_ssl_ciphersuite_t *info )
    switch( info->key_exchange )
    {
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:
            return( 1 );
        default:
            return( 0 );
    }
static inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )
    switch( info->key_exchange )
    {
        case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( 1 );
        default:
            return( 0 );
    }
# 37 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crt.h" 1
 * \file x509_crt.h
 * \brief X.509 certificate parsing and writing
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
#define MBEDTLS_X509_CRT_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 31 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crt.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509.h" 1
 * \file x509.h
 * \brief X.509 generic defines and structures
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
#define MBEDTLS_X509_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 31 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/asn1.h" 1
 * \file asn1.h
 * \brief Generic ASN.1 parsing
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
#define MBEDTLS_ASN1_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 31 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/asn1.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 1 3 4
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 3 4
/* Copyright (C) 1989-2015 Free Software Foundation, Inc.
This file is part of GCC.
GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.
GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.
You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
# 34 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/asn1.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h" 1
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h"
 * \file bignum.h
 * \brief Multi-precision integer library
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 37 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/asn1.h" 2
 * \addtogroup asn1_module
 * \{
 * \name ASN1 Error codes
 * These error codes are OR'ed to X509 error codes for
 * higher error granularity.
 * ASN1 is a standard to specify data structures.
 * \{
#define MBEDTLS_ERR_ASN1_OUT_OF_DATA -0x0060 /**< Out of data when parsing an ASN1 data structure. */
#define MBEDTLS_ERR_ASN1_UNEXPECTED_TAG -0x0062 /**< ASN1 tag was of an unexpected value. */
#define MBEDTLS_ERR_ASN1_INVALID_LENGTH -0x0064 /**< Error when trying to determine the length or invalid length. */
#define MBEDTLS_ERR_ASN1_LENGTH_MISMATCH -0x0066 /**< Actual length differs from expected length. */
#define MBEDTLS_ERR_ASN1_INVALID_DATA -0x0068 /**< Data is invalid. (not used) */
#define MBEDTLS_ERR_ASN1_ALLOC_FAILED -0x006A /**< Memory allocation failed */
#define MBEDTLS_ERR_ASN1_BUF_TOO_SMALL -0x006C /**< Buffer too small when writing ASN.1 data structure. */
/* \} name */
 * \name DER constants
 * These constants comply with the DER encoded ASN.1 type tags.
 * DER encoding uses hexadecimal representation.
 * An example DER sequence is:\n
 * - 0x02 -- tag indicating INTEGER
 * - 0x01 -- length in octets
 * - 0x05 -- value
 * Such sequences are typically read into \c ::mbedtls_x509_buf.
 * \{
#define MBEDTLS_ASN1_BOOLEAN 0x01
#define MBEDTLS_ASN1_INTEGER 0x02
#define MBEDTLS_ASN1_BIT_STRING 0x03
#define MBEDTLS_ASN1_OCTET_STRING 0x04
#define MBEDTLS_ASN1_NULL 0x05
#define MBEDTLS_ASN1_OID 0x06
#define MBEDTLS_ASN1_UTF8_STRING 0x0C
#define MBEDTLS_ASN1_SEQUENCE 0x10
#define MBEDTLS_ASN1_SET 0x11
#define MBEDTLS_ASN1_PRINTABLE_STRING 0x13
#define MBEDTLS_ASN1_T61_STRING 0x14
#define MBEDTLS_ASN1_IA5_STRING 0x16
#define MBEDTLS_ASN1_UTC_TIME 0x17
#define MBEDTLS_ASN1_GENERALIZED_TIME 0x18
#define MBEDTLS_ASN1_UNIVERSAL_STRING 0x1C
#define MBEDTLS_ASN1_BMP_STRING 0x1E
#define MBEDTLS_ASN1_PRIMITIVE 0x00
#define MBEDTLS_ASN1_CONSTRUCTED 0x20
#define MBEDTLS_ASN1_CONTEXT_SPECIFIC 0x80
 * Bit masks for each of the components of an ASN.1 tag as specified in
 * ITU X.690 (08/2015), section 8.1 "General rules for encoding",
 * paragraph 8.1.2.2:
 * Bit  8     7   6   5          1
 *     +-------+-----+------------+
 *     | Class | P/C | Tag number |
 *     +-------+-----+------------+
#define MBEDTLS_ASN1_TAG_CLASS_MASK 0xC0
#define MBEDTLS_ASN1_TAG_PC_MASK 0x20
#define MBEDTLS_ASN1_TAG_VALUE_MASK 0x1F
/* \} name */
/* \} addtogroup asn1_module */
/** Returns the size of the binary string, without the trailing \\0 */
#define MBEDTLS_OID_SIZE(x) (sizeof(x) - 1)
 * Compares an mbedtls_asn1_buf structure to a reference OID.
 * Only works for 'defined' oid_str values (MBEDTLS_OID_HMAC_SHA1), you cannot use a
 * 'unsigned char *oid' here!
#define MBEDTLS_OID_CMP(oid_str,oid_buf) ( ( MBEDTLS_OID_SIZE(oid_str) != (oid_buf)->len ) || memcmp( (oid_str), (oid_buf)->p, (oid_buf)->len) != 0 )
extern "C" {
 * \name Functions to parse ASN.1 data structures
 * \{
 * Type-length-value structure that allows for ASN1 using DER.
typedef struct mbedtls_asn1_buf
    int tag; /**< ASN1 type, e.g. MBEDTLS_ASN1_UTF8_STRING. */
    size_t len; /**< ASN1 length, in octets. */
    unsigned char *p; /**< ASN1 data, e.g. in ASCII. */
mbedtls_asn1_buf;
 * Container for ASN1 bit strings.
typedef struct mbedtls_asn1_bitstring
    size_t len; /**< ASN1 length, in octets. */
    unsigned char unused_bits; /**< Number of unused bits at the end of the string */
    unsigned char *p; /**< Raw ASN1 data for the bit string */
mbedtls_asn1_bitstring;
 * Container for a sequence of ASN.1 items
typedef struct mbedtls_asn1_sequence
    mbedtls_asn1_buf buf; /**< Buffer containing the given ASN.1 item. */
    struct mbedtls_asn1_sequence *next; /**< The next entry in the sequence. */
mbedtls_asn1_sequence;
 * Container for a sequence or list of 'named' ASN.1 data items
typedef struct mbedtls_asn1_named_data
    mbedtls_asn1_buf oid; /**< The object identifier. */
    mbedtls_asn1_buf val; /**< The named value. */
    struct mbedtls_asn1_named_data *next; /**< The next entry in the sequence. */
    unsigned char next_merged; /**< Merge next item into the current one? */
mbedtls_asn1_named_data;
 * \brief       Get the length of an ASN.1 element.
 *              Updates the pointer to immediately behind the length.
 * \param p     The position in the ASN.1 data
 * \param end   End of data
 * \param len   The variable that will receive the value
 * \return      0 if successful, MBEDTLS_ERR_ASN1_OUT_OF_DATA on reaching
 *              end of data, MBEDTLS_ERR_ASN1_INVALID_LENGTH if length is
 *              unparseable.
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len );
 * \brief       Get the tag and length of the tag. Check for the requested tag.
 *              Updates the pointer to immediately behind the tag and length.
 * \param p     The position in the ASN.1 data
 * \param end   End of data
 * \param len   The variable that will receive the length
 * \param tag   The expected tag
 * \return      0 if successful, MBEDTLS_ERR_ASN1_UNEXPECTED_TAG if tag did
 *              not match requested tag, or another specific ASN.1 error code.
int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag );
 * \brief       Retrieve a boolean ASN.1 tag and its value.
 *              Updates the pointer to immediately behind the full tag.
 * \param p     The position in the ASN.1 data
 * \param end   End of data
 * \param val   The variable that will receive the value
 * \return      0 if successful or a specific ASN.1 error code.
int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val );
 * \brief       Retrieve an integer ASN.1 tag and its value.
 *              Updates the pointer to immediately behind the full tag.
 * \param p     The position in the ASN.1 data
 * \param end   End of data
 * \param val   The variable that will receive the value
 * \return      0 if successful or a specific ASN.1 error code.
int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val );
 * \brief       Retrieve a bitstring ASN.1 tag and its value.
 *              Updates the pointer to immediately behind the full tag.
 * \param p     The position in the ASN.1 data
 * \param end   End of data
 * \param bs    The variable that will receive the value
 * \return      0 if successful or a specific ASN.1 error code.
int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs);
 * \brief       Retrieve a bitstring ASN.1 tag without unused bits and its
 *              value.
 *              Updates the pointer to the beginning of the bit/octet string.
 * \param p     The position in the ASN.1 data
 * \param end   End of data
 * \param len   Length of the actual bit/octect string in bytes
 * \return      0 if successful or a specific ASN.1 error code.
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len );
 * \brief       Parses and splits an ASN.1 "SEQUENCE OF <tag>"
 *              Updated the pointer to immediately behind the full sequence tag.
 * \param p     The position in the ASN.1 data
 * \param end   End of data
 * \param cur   First variable in the chain to fill
 * \param tag   Type of sequence
 * \return      0 if successful or a specific ASN.1 error code.
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag);
 * \brief       Retrieve a MPI value from an integer ASN.1 tag.
 *              Updates the pointer to immediately behind the full tag.
 * \param p     The position in the ASN.1 data
 * \param end   End of data
 * \param X     The MPI that will receive the value
 * \return      0 if successful or a specific ASN.1 or MPI error code.
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X );
 * \brief       Retrieve an AlgorithmIdentifier ASN.1 sequence.
 *              Updates the pointer to immediately behind the full
 *              AlgorithmIdentifier.
 * \param p     The position in the ASN.1 data
 * \param end   End of data
 * \param alg   The buffer to receive the OID
 * \param params The buffer to receive the params (if any)
 * \return      0 if successful or a specific ASN.1 or MPI error code.
int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params );
 * \brief       Retrieve an AlgorithmIdentifier ASN.1 sequence with NULL or no
 *              params.
 *              Updates the pointer to immediately behind the full
 *              AlgorithmIdentifier.
 * \param p     The position in the ASN.1 data
 * \param end   End of data
 * \param alg   The buffer to receive the OID
 * \return      0 if successful or a specific ASN.1 or MPI error code.
int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg );
 * \brief       Find a specific named_data entry in a sequence or list based on
 *              the OID.
 * \param list  The list to seek through
 * \param oid   The OID to look for
 * \param len   Size of the OID
 * \return      NULL if not found, or a pointer to the existing entry.
mbedtls_asn1_named_data *mbedtls_asn1_find_named_data( mbedtls_asn1_named_data *list,
                                       const char *oid, size_t len );
 * \brief       Free a mbedtls_asn1_named_data entry
 * \param entry The named data entry to free
void mbedtls_asn1_free_named_data( mbedtls_asn1_named_data *entry );
 * \brief       Free all entries in a mbedtls_asn1_named_data list
 *              Head will be set to NULL
 * \param head  Pointer to the head of the list of named data entries to free
void mbedtls_asn1_free_named_data_list( mbedtls_asn1_named_data **head );
# 34 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/pk.h" 1
 * \file pk.h
 * \brief Public Key abstraction layer
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 35 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/rsa.h" 1
 * \file rsa.h
 * \brief This file provides an API for the RSA public-key cryptosystem.
 * The RSA public-key cryptosystem is defined in <em>Public-Key
 * Cryptography Standards (PKCS) #1 v1.5: RSA Encryption</em>
 * and <em>Public-Key Cryptography Standards (PKCS) #1 v2.1:
 * RSA Cryptography Specifications</em>.
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
# 38 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509.h" 2
 * \addtogroup x509_module
 * \{
 * Maximum number of intermediate CAs in a verification chain.
 * That is, maximum length of the chain, excluding the end-entity certificate
 * and the trusted root certificate.
 * Set this to a low value to prevent an adversary from making you waste
 * resources verifying an overlong certificate chain.
#define MBEDTLS_X509_MAX_INTERMEDIATE_CA 8
 * \name X509 Error codes
 * \{
#define MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE -0x2080 /**< Unavailable feature, e.g. RSA hashing/encryption combination. */
#define MBEDTLS_ERR_X509_UNKNOWN_OID -0x2100 /**< Requested OID is unknown. */
#define MBEDTLS_ERR_X509_INVALID_FORMAT -0x2180 /**< The CRT/CRL/CSR format is invalid, e.g. different type expected. */
#define MBEDTLS_ERR_X509_INVALID_VERSION -0x2200 /**< The CRT/CRL/CSR version element is invalid. */
#define MBEDTLS_ERR_X509_INVALID_SERIAL -0x2280 /**< The serial tag or value is invalid. */
#define MBEDTLS_ERR_X509_INVALID_ALG -0x2300 /**< The algorithm tag or value is invalid. */
#define MBEDTLS_ERR_X509_INVALID_NAME -0x2380 /**< The name tag or value is invalid. */
#define MBEDTLS_ERR_X509_INVALID_DATE -0x2400 /**< The date tag or value is invalid. */
#define MBEDTLS_ERR_X509_INVALID_SIGNATURE -0x2480 /**< The signature tag or value invalid. */
#define MBEDTLS_ERR_X509_INVALID_EXTENSIONS -0x2500 /**< The extension tag or value is invalid. */
#define MBEDTLS_ERR_X509_UNKNOWN_VERSION -0x2580 /**< CRT/CRL/CSR has an unsupported version number. */
#define MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG -0x2600 /**< Signature algorithm (oid) is unsupported. */
#define MBEDTLS_ERR_X509_SIG_MISMATCH -0x2680 /**< Signature algorithms do not match. (see \c ::mbedtls_x509_crt sig_oid) */
#define MBEDTLS_ERR_X509_CERT_VERIFY_FAILED -0x2700 /**< Certificate verification failed, e.g. CRL, CA or signature check failed. */
#define MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT -0x2780 /**< Format not recognized as DER or PEM. */
#define MBEDTLS_ERR_X509_BAD_INPUT_DATA -0x2800 /**< Input invalid. */
#define MBEDTLS_ERR_X509_ALLOC_FAILED -0x2880 /**< Allocation of memory failed. */
#define MBEDTLS_ERR_X509_FILE_IO_ERROR -0x2900 /**< Read/write of file failed. */
#define MBEDTLS_ERR_X509_BUFFER_TOO_SMALL -0x2980 /**< Destination buffer is too small. */
#define MBEDTLS_ERR_X509_FATAL_ERROR -0x3000 /**< A fatal error occured, eg the chain is too long or the vrfy callback failed. */
/* \} name */
 * \name X509 Verify codes
 * \{
/* Reminder: update x509_crt_verify_strings[] in library/x509_crt.c */
#define MBEDTLS_X509_BADCERT_EXPIRED 0x01 /**< The certificate validity has expired. */
#define MBEDTLS_X509_BADCERT_REVOKED 0x02 /**< The certificate has been revoked (is on a CRL). */
#define MBEDTLS_X509_BADCERT_CN_MISMATCH 0x04 /**< The certificate Common Name (CN) does not match with the expected CN. */
#define MBEDTLS_X509_BADCERT_NOT_TRUSTED 0x08 /**< The certificate is not correctly signed by the trusted CA. */
#define MBEDTLS_X509_BADCRL_NOT_TRUSTED 0x10 /**< The CRL is not correctly signed by the trusted CA. */
#define MBEDTLS_X509_BADCRL_EXPIRED 0x20 /**< The CRL is expired. */
#define MBEDTLS_X509_BADCERT_MISSING 0x40 /**< Certificate was missing. */
#define MBEDTLS_X509_BADCERT_SKIP_VERIFY 0x80 /**< Certificate verification was skipped. */
#define MBEDTLS_X509_BADCERT_OTHER 0x0100 /**< Other reason (can be used by verify callback) */
#define MBEDTLS_X509_BADCERT_FUTURE 0x0200 /**< The certificate validity starts in the future. */
#define MBEDTLS_X509_BADCRL_FUTURE 0x0400 /**< The CRL is from the future */
#define MBEDTLS_X509_BADCERT_KEY_USAGE 0x0800 /**< Usage does not match the keyUsage extension. */
#define MBEDTLS_X509_BADCERT_EXT_KEY_USAGE 0x1000 /**< Usage does not match the extendedKeyUsage extension. */
#define MBEDTLS_X509_BADCERT_NS_CERT_TYPE 0x2000 /**< Usage does not match the nsCertType extension. */
#define MBEDTLS_X509_BADCERT_BAD_MD 0x4000 /**< The certificate is signed with an unacceptable hash. */
#define MBEDTLS_X509_BADCERT_BAD_PK 0x8000 /**< The certificate is signed with an unacceptable PK alg (eg RSA vs ECDSA). */
#define MBEDTLS_X509_BADCERT_BAD_KEY 0x010000 /**< The certificate is signed with an unacceptable key (eg bad curve, RSA too short). */
#define MBEDTLS_X509_BADCRL_BAD_MD 0x020000 /**< The CRL is signed with an unacceptable hash. */
#define MBEDTLS_X509_BADCRL_BAD_PK 0x040000 /**< The CRL is signed with an unacceptable PK alg (eg RSA vs ECDSA). */
#define MBEDTLS_X509_BADCRL_BAD_KEY 0x080000 /**< The CRL is signed with an unacceptable key (eg bad curve, RSA too short). */
/* \} name */
/* \} addtogroup x509_module */
 * X.509 v3 Key Usage Extension flags
 * Reminder: update x509_info_key_usage() when adding new flags.
#define MBEDTLS_X509_KU_DIGITAL_SIGNATURE (0x80) /* bit 0 */
#define MBEDTLS_X509_KU_NON_REPUDIATION (0x40) /* bit 1 */
#define MBEDTLS_X509_KU_KEY_ENCIPHERMENT (0x20) /* bit 2 */
#define MBEDTLS_X509_KU_DATA_ENCIPHERMENT (0x10) /* bit 3 */
#define MBEDTLS_X509_KU_KEY_AGREEMENT (0x08) /* bit 4 */
#define MBEDTLS_X509_KU_KEY_CERT_SIGN (0x04) /* bit 5 */
#define MBEDTLS_X509_KU_CRL_SIGN (0x02) /* bit 6 */
#define MBEDTLS_X509_KU_ENCIPHER_ONLY (0x01) /* bit 7 */
#define MBEDTLS_X509_KU_DECIPHER_ONLY (0x8000) /* bit 8 */
 * Netscape certificate types
 * (http://www.mozilla.org/projects/security/pki/nss/tech-notes/tn3.html)
#define MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT (0x80) /* bit 0 */
#define MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER (0x40) /* bit 1 */
#define MBEDTLS_X509_NS_CERT_TYPE_EMAIL (0x20) /* bit 2 */
#define MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING (0x10) /* bit 3 */
#define MBEDTLS_X509_NS_CERT_TYPE_RESERVED (0x08) /* bit 4 */
#define MBEDTLS_X509_NS_CERT_TYPE_SSL_CA (0x04) /* bit 5 */
#define MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA (0x02) /* bit 6 */
#define MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA (0x01) /* bit 7 */
 * X.509 extension types
 * Comments refer to the status for using certificates. Status can be
 * different for writing certificates or reading CRLs or CSRs.
#define MBEDTLS_X509_EXT_AUTHORITY_KEY_IDENTIFIER (1 << 0)
#define MBEDTLS_X509_EXT_SUBJECT_KEY_IDENTIFIER (1 << 1)
#define MBEDTLS_X509_EXT_KEY_USAGE (1 << 2)
#define MBEDTLS_X509_EXT_CERTIFICATE_POLICIES (1 << 3)
#define MBEDTLS_X509_EXT_POLICY_MAPPINGS (1 << 4)
#define MBEDTLS_X509_EXT_SUBJECT_ALT_NAME (1 << 5) /* Supported (DNS) */
#define MBEDTLS_X509_EXT_ISSUER_ALT_NAME (1 << 6)
#define MBEDTLS_X509_EXT_SUBJECT_DIRECTORY_ATTRS (1 << 7)
#define MBEDTLS_X509_EXT_BASIC_CONSTRAINTS (1 << 8) /* Supported */
#define MBEDTLS_X509_EXT_NAME_CONSTRAINTS (1 << 9)
#define MBEDTLS_X509_EXT_POLICY_CONSTRAINTS (1 << 10)
#define MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE (1 << 11)
#define MBEDTLS_X509_EXT_CRL_DISTRIBUTION_POINTS (1 << 12)
#define MBEDTLS_X509_EXT_INIHIBIT_ANYPOLICY (1 << 13)
#define MBEDTLS_X509_EXT_FRESHEST_CRL (1 << 14)
#define MBEDTLS_X509_EXT_NS_CERT_TYPE (1 << 16)
 * Storage format identifiers
 * Recognized formats: PEM and DER
#define MBEDTLS_X509_FORMAT_DER 1
#define MBEDTLS_X509_FORMAT_PEM 2
#define MBEDTLS_X509_MAX_DN_NAME_SIZE 256 /**< Maximum value size of a DN entry */
extern "C" {
 * \addtogroup x509_module
 * \{ */
 * \name Structures for parsing X.509 certificates, CRLs and CSRs
 * \{
 * Type-length-value structure that allows for ASN1 using DER.
typedef mbedtls_asn1_buf mbedtls_x509_buf;
 * Container for ASN1 bit strings.
typedef mbedtls_asn1_bitstring mbedtls_x509_bitstring;
 * Container for ASN1 named information objects.
 * It allows for Relative Distinguished Names (e.g. cn=localhost,ou=code,etc.).
typedef mbedtls_asn1_named_data mbedtls_x509_name;
 * Container for a sequence of ASN.1 items
typedef mbedtls_asn1_sequence mbedtls_x509_sequence;
/** Container for date and time (precision in seconds). */
typedef struct mbedtls_x509_time
    int year, mon, day; /**< Date. */
    int hour, min, sec; /**< Time. */
mbedtls_x509_time;
/** \} name Structures for parsing X.509 certificates, CRLs and CSRs */
/** \} addtogroup x509_module */
 * \brief          Store the certificate DN in printable form into buf;
 *                 no more than size characters will be written.
 * \param buf      Buffer to write to
 * \param size     Maximum size of buffer
 * \param dn       The X509 name to represent
 * \return         The length of the string written (not including the
 *                 terminated nul byte), or a negative error code.
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn );
 * \brief          Store the certificate serial in printable form into buf;
 *                 no more than size characters will be written.
 * \param buf      Buffer to write to
 * \param size     Maximum size of buffer
 * \param serial   The X509 serial to represent
 * \return         The length of the string written (not including the
 *                 terminated nul byte), or a negative error code.
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial );
 * \brief          Check a given mbedtls_x509_time against the system time
 *                 and tell if it's in the past.
 * \note           Intended usage is "if( is_past( valid_to ) ) ERROR".
 *                 Hence the return value of 1 if on internal errors.
 * \param to       mbedtls_x509_time to check
 * \return         1 if the given time is in the past or an error occured,
 *                 0 otherwise.
int mbedtls_x509_time_is_past( const mbedtls_x509_time *to );
 * \brief          Check a given mbedtls_x509_time against the system time
 *                 and tell if it's in the future.
 * \note           Intended usage is "if( is_future( valid_from ) ) ERROR".
 *                 Hence the return value of 1 if on internal errors.
 * \param from     mbedtls_x509_time to check
 * \return         1 if the given time is in the future or an error occured,
 *                 0 otherwise.
int mbedtls_x509_time_is_future( const mbedtls_x509_time *from );
 * \brief          Checkup routine
 * \return         0 if successful, or 1 if the test failed
int mbedtls_x509_self_test( int verbose );
 * Internal module functions. You probably do not want to use these unless you
 * know you do.
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur );
int mbedtls_x509_get_alg_null( unsigned char **p, const unsigned char *end,
                       mbedtls_x509_buf *alg );
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params );
int mbedtls_x509_get_rsassa_pss_params( const mbedtls_x509_buf *params,
                                mbedtls_md_type_t *md_alg, mbedtls_md_type_t *mgf_md,
                                int *salt_len );
int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig );
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts );
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_time *t );
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial );
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag );
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts );
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name );
int mbedtls_x509_string_to_names( mbedtls_asn1_named_data **head, const char *name );
int mbedtls_x509_set_extension( mbedtls_asn1_named_data **head, const char *oid, size_t oid_len,
                        int critical, const unsigned char *val,
                        size_t val_len );
int mbedtls_x509_write_extensions( unsigned char **p, unsigned char *start,
                           mbedtls_asn1_named_data *first );
int mbedtls_x509_write_names( unsigned char **p, unsigned char *start,
                      mbedtls_asn1_named_data *first );
int mbedtls_x509_write_sig( unsigned char **p, unsigned char *start,
                    const char *oid, size_t oid_len,
                    unsigned char *sig, size_t size );
#define MBEDTLS_X509_SAFE_SNPRINTF do { if( ret < 0 || (size_t) ret >= n ) return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL ); n -= (size_t) ret; p += (size_t) ret; } while( 0 )
# 330 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509.h"
# 34 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crt.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crl.h" 1
 * \file x509_crl.h
 * \brief X.509 certificate revocation list parsing
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
#define MBEDTLS_X509_CRL_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 31 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crl.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509.h" 1
 * \file x509.h
 * \brief X.509 generic defines and structures
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 34 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crl.h" 2
extern "C" {
 * \addtogroup x509_module
 * \{ */
 * \name Structures and functions for parsing CRLs
 * \{
 * Certificate revocation list entry.
 * Contains the CA-specific serial numbers and revocation dates.
typedef struct mbedtls_x509_crl_entry
    mbedtls_x509_buf raw;
    mbedtls_x509_buf serial;
    mbedtls_x509_time revocation_date;
    mbedtls_x509_buf entry_ext;
    struct mbedtls_x509_crl_entry *next;
mbedtls_x509_crl_entry;
 * Certificate revocation list structure.
 * Every CRL may have multiple entries.
typedef struct mbedtls_x509_crl
    mbedtls_x509_buf raw; /**< The raw certificate data (DER). */
    mbedtls_x509_buf tbs; /**< The raw certificate body (DER). The part that is To Be Signed. */
    int version; /**< CRL version (1=v1, 2=v2) */
    mbedtls_x509_buf sig_oid; /**< CRL signature type identifier */
    mbedtls_x509_buf issuer_raw; /**< The raw issuer data (DER). */
    mbedtls_x509_name issuer; /**< The parsed issuer data (named information object). */
    mbedtls_x509_time this_update;
    mbedtls_x509_time next_update;
    mbedtls_x509_crl_entry entry; /**< The CRL entries containing the certificate revocation times for this CA. */
    mbedtls_x509_buf crl_ext;
    mbedtls_x509_buf sig_oid2;
    mbedtls_x509_buf sig;
    mbedtls_md_type_t sig_md; /**< Internal representation of the MD algorithm of the signature algorithm, e.g. MBEDTLS_MD_SHA256 */
    mbedtls_pk_type_t sig_pk; /**< Internal representation of the Public Key algorithm of the signature algorithm, e.g. MBEDTLS_PK_RSA */
    void *sig_opts; /**< Signature options to be passed to mbedtls_pk_verify_ext(), e.g. for RSASSA-PSS */
    struct mbedtls_x509_crl *next;
mbedtls_x509_crl;
 * \brief          Parse a DER-encoded CRL and append it to the chained list
 * \param chain    points to the start of the chain
 * \param buf      buffer holding the CRL data in DER format
 * \param buflen   size of the buffer
 *                 (including the terminating null byte for PEM data)
 * \return         0 if successful, or a specific X509 or PEM error code
int mbedtls_x509_crl_parse_der( mbedtls_x509_crl *chain,
                        const unsigned char *buf, size_t buflen );
 * \brief          Parse one or more CRLs and append them to the chained list
 * \note           Mutliple CRLs are accepted only if using PEM format
 * \param chain    points to the start of the chain
 * \param buf      buffer holding the CRL data in PEM or DER format
 * \param buflen   size of the buffer
 *                 (including the terminating null byte for PEM data)
 * \return         0 if successful, or a specific X509 or PEM error code
int mbedtls_x509_crl_parse( mbedtls_x509_crl *chain, const unsigned char *buf, size_t buflen );
 * \brief          Load one or more CRLs and append them to the chained list
 * \note           Mutliple CRLs are accepted only if using PEM format
 * \param chain    points to the start of the chain
 * \param path     filename to read the CRLs from (in PEM or DER encoding)
 * \return         0 if successful, or a specific X509 or PEM error code
int mbedtls_x509_crl_parse_file( mbedtls_x509_crl *chain, const char *path );
 * \brief          Returns an informational string about the CRL.
 * \param buf      Buffer to write to
 * \param size     Maximum size of buffer
 * \param prefix   A line prefix
 * \param crl      The X509 CRL to represent
 * \return         The length of the string written (not including the
 *                 terminated nul byte), or a negative error code.
int mbedtls_x509_crl_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crl *crl );
 * \brief          Initialize a CRL (chain)
 * \param crl      CRL chain to initialize
void mbedtls_x509_crl_init( mbedtls_x509_crl *crl );
 * \brief          Unallocate all CRL data
 * \param crl      CRL chain to free
void mbedtls_x509_crl_free( mbedtls_x509_crl *crl );
/* \} name */
/* \} addtogroup x509_module */
# 35 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crt.h" 2
 * \addtogroup x509_module
 * \{
extern "C" {
 * \name Structures and functions for parsing and writing X.509 certificates
 * \{
 * Container for an X.509 certificate. The certificate may be chained.
typedef struct mbedtls_x509_crt
    mbedtls_x509_buf raw; /**< The raw certificate data (DER). */
    mbedtls_x509_buf tbs; /**< The raw certificate body (DER). The part that is To Be Signed. */
    int version; /**< The X.509 version. (1=v1, 2=v2, 3=v3) */
    mbedtls_x509_buf serial; /**< Unique id for certificate issued by a specific CA. */
    mbedtls_x509_buf sig_oid; /**< Signature algorithm, e.g. sha1RSA */
    mbedtls_x509_buf issuer_raw; /**< The raw issuer data (DER). Used for quick comparison. */
    mbedtls_x509_buf subject_raw; /**< The raw subject data (DER). Used for quick comparison. */
    mbedtls_x509_name issuer; /**< The parsed issuer data (named information object). */
    mbedtls_x509_name subject; /**< The parsed subject data (named information object). */
    mbedtls_x509_time valid_from; /**< Start time of certificate validity. */
    mbedtls_x509_time valid_to; /**< End time of certificate validity. */
    mbedtls_pk_context pk; /**< Container for the public key context. */
    mbedtls_x509_buf issuer_id; /**< Optional X.509 v2/v3 issuer unique identifier. */
    mbedtls_x509_buf subject_id; /**< Optional X.509 v2/v3 subject unique identifier. */
    mbedtls_x509_buf v3_ext; /**< Optional X.509 v3 extensions.  */
    mbedtls_x509_sequence subject_alt_names; /**< Optional list of Subject Alternative Names (Only dNSName supported). */
    int ext_types; /**< Bit string containing detected and parsed extensions */
    int ca_istrue; /**< Optional Basic Constraint extension value: 1 if this certificate belongs to a CA, 0 otherwise. */
    int max_pathlen; /**< Optional Basic Constraint extension value: The maximum path length to the root certificate. Path length is 1 higher than RFC 5280 'meaning', so 1+ */
    unsigned int key_usage; /**< Optional key usage extension value: See the values in x509.h */
    mbedtls_x509_sequence ext_key_usage; /**< Optional list of extended key usage OIDs. */
    unsigned char ns_cert_type; /**< Optional Netscape certificate type extension value: See the values in x509.h */
    mbedtls_x509_buf sig; /**< Signature: hash of the tbs part signed with the private key. */
    mbedtls_md_type_t sig_md; /**< Internal representation of the MD algorithm of the signature algorithm, e.g. MBEDTLS_MD_SHA256 */
    mbedtls_pk_type_t sig_pk; /**< Internal representation of the Public Key algorithm of the signature algorithm, e.g. MBEDTLS_PK_RSA */
    void *sig_opts; /**< Signature options to be passed to mbedtls_pk_verify_ext(), e.g. for RSASSA-PSS */
    struct mbedtls_x509_crt *next; /**< Next certificate in the CA-chain. */
mbedtls_x509_crt;
 * Build flag from an algorithm/curve identifier (pk, md, ecp)
 * Since 0 is always XXX_NONE, ignore it.
#define MBEDTLS_X509_ID_FLAG(id) ( 1 << ( id - 1 ) )
 * Security profile for certificate verification.
 * All lists are bitfields, built by ORing flags from MBEDTLS_X509_ID_FLAG().
typedef struct mbedtls_x509_crt_profile
    uint32_t allowed_mds; /**< MDs for signatures         */
    uint32_t allowed_pks; /**< PK algs for signatures     */
    uint32_t allowed_curves; /**< Elliptic curves for ECDSA  */
    uint32_t rsa_min_bitlen; /**< Minimum size for RSA keys  */
mbedtls_x509_crt_profile;
#define MBEDTLS_X509_CRT_VERSION_1 0
#define MBEDTLS_X509_CRT_VERSION_2 1
#define MBEDTLS_X509_CRT_VERSION_3 2
#define MBEDTLS_X509_RFC5280_MAX_SERIAL_LEN 32
#define MBEDTLS_X509_RFC5280_UTC_TIME_LEN 15
#define MBEDTLS_X509_MAX_FILE_PATH_LEN 512
 * Container for writing a certificate (CRT)
typedef struct mbedtls_x509write_cert
    int version;
    mbedtls_mpi serial;
    mbedtls_pk_context *subject_key;
    mbedtls_pk_context *issuer_key;
    mbedtls_asn1_named_data *subject;
    mbedtls_asn1_named_data *issuer;
    mbedtls_md_type_t md_alg;
    char not_before[15 + 1];
    char not_after[15 + 1];
    mbedtls_asn1_named_data *extensions;
mbedtls_x509write_cert;
 * Default security profile. Should provide a good balance between security
 * and compatibility with current deployments.
extern const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_default;
 * Expected next default profile. Recommended for new deployments.
 * Currently targets a 128-bit security level, except for RSA-2048.
extern const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_next;
 * NSA Suite B profile.
extern const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_suiteb;
 * \brief          Parse a single DER formatted certificate and add it
 *                 to the chained list.
 * \param chain    points to the start of the chain
 * \param buf      buffer holding the certificate DER data
 * \param buflen   size of the buffer
 * \return         0 if successful, or a specific X509 or PEM error code
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen );
 * \brief          Parse one or more certificates and add them
 *                 to the chained list. Parses permissively. If some
 *                 certificates can be parsed, the result is the number
 *                 of failed certificates it encountered. If none complete
 *                 correctly, the first error is returned.
 * \param chain    points to the start of the chain
 * \param buf      buffer holding the certificate data in PEM or DER format
 * \param buflen   size of the buffer
 *                 (including the terminating null byte for PEM data)
 * \return         0 if all certificates parsed successfully, a positive number
 *                 if partly successful or a specific X509 or PEM error code
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen );
 * \brief          Load one or more certificates and add them
 *                 to the chained list. Parses permissively. If some
 *                 certificates can be parsed, the result is the number
 *                 of failed certificates it encountered. If none complete
 *                 correctly, the first error is returned.
 * \param chain    points to the start of the chain
 * \param path     filename to read the certificates from
 * \return         0 if all certificates parsed successfully, a positive number
 *                 if partly successful or a specific X509 or PEM error code
int mbedtls_x509_crt_parse_file( mbedtls_x509_crt *chain, const char *path );
 * \brief          Load one or more certificate files from a path and add them
 *                 to the chained list. Parses permissively. If some
 *                 certificates can be parsed, the result is the number
 *                 of failed certificates it encountered. If none complete
 *                 correctly, the first error is returned.
 * \param chain    points to the start of the chain
 * \param path     directory / folder to read the certificate files from
 * \return         0 if all certificates parsed successfully, a positive number
 *                 if partly successful or a specific X509 or PEM error code
int mbedtls_x509_crt_parse_path( mbedtls_x509_crt *chain, const char *path );
 * \brief          Returns an informational string about the
 *                 certificate.
 * \param buf      Buffer to write to
 * \param size     Maximum size of buffer
 * \param prefix   A line prefix
 * \param crt      The X509 certificate to represent
 * \return         The length of the string written (not including the
 *                 terminated nul byte), or a negative error code.
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt );
 * \brief          Returns an informational string about the
 *                 verification status of a certificate.
 * \param buf      Buffer to write to
 * \param size     Maximum size of buffer
 * \param prefix   A line prefix
 * \param flags    Verification flags created by mbedtls_x509_crt_verify()
 * \return         The length of the string written (not including the
 *                 terminated nul byte), or a negative error code.
int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,
                          uint32_t flags );
 * \brief          Verify the certificate signature
 *                 The verify callback is a user-supplied callback that
 *                 can clear / modify / add flags for a certificate. If set,
 *                 the verification callback is called for each
 *                 certificate in the chain (from the trust-ca down to the
 *                 presented crt). The parameters for the callback are:
 *                 (void *parameter, mbedtls_x509_crt *crt, int certificate_depth,
 *                 int *flags). With the flags representing current flags for
 *                 that specific certificate and the certificate depth from
 *                 the bottom (Peer cert depth = 0).
 *                 All flags left after returning from the callback
 *                 are also returned to the application. The function should
 *                 return 0 for anything (including invalid certificates)
 *                 other than fatal error, as a non-zero return code
 *                 immediately aborts the verification process. For fatal
 *                 errors, a specific error code should be used (different
 *                 from MBEDTLS_ERR_X509_CERT_VERIFY_FAILED which should not
 *                 be returned at this point), or MBEDTLS_ERR_X509_FATAL_ERROR
 *                 can be used if no better code is available.
 * \note           In case verification failed, the results can be displayed
 *                 using \c mbedtls_x509_crt_verify_info()
 * \note           Same as \c mbedtls_x509_crt_verify_with_profile() with the
 *                 default security profile.
 * \note           It is your responsibility to provide up-to-date CRLs for
 *                 all trusted CAs. If no CRL is provided for the CA that was
 *                 used to sign the certificate, CRL verification is skipped
 *                 silently, that is *without* setting any flag.
 * \note           The \c trust_ca list can contain two types of certificates:
 *                 (1) those of trusted root CAs, so that certificates
 *                 chaining up to those CAs will be trusted, and (2)
 *                 self-signed end-entity certificates to be trusted (for
 *                 specific peers you know) - in that case, the self-signed
 *                 certificate doesn't need to have the CA bit set.
 * \param crt      a certificate (chain) to be verified
 * \param trust_ca the list of trusted CAs (see note above)
 * \param ca_crl   the list of CRLs for trusted CAs (see note above)
 * \param cn       expected Common Name (can be set to
 *                 NULL if the CN must not be verified)
 * \param flags    result of the verification
 * \param f_vrfy   verification function
 * \param p_vrfy   verification parameter
 * \return         0 (and flags set to 0) if the chain was verified and valid,
 *                 MBEDTLS_ERR_X509_CERT_VERIFY_FAILED if the chain was verified
 *                 but found to be invalid, in which case *flags will have one
 *                 or more MBEDTLS_X509_BADCERT_XXX or MBEDTLS_X509_BADCRL_XXX
 *                 flags set, or another error (and flags set to 0xffffffff)
 *                 in case of a fatal error encountered during the
 *                 verification process.
int mbedtls_x509_crt_verify( mbedtls_x509_crt *crt,
                     mbedtls_x509_crt *trust_ca,
                     mbedtls_x509_crl *ca_crl,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy );
 * \brief          Verify the certificate signature according to profile
 * \note           Same as \c mbedtls_x509_crt_verify(), but with explicit
 *                 security profile.
 * \note           The restrictions on keys (RSA minimum size, allowed curves
 *                 for ECDSA) apply to all certificates: trusted root,
 *                 intermediate CAs if any, and end entity certificate.
 * \param crt      a certificate (chain) to be verified
 * \param trust_ca the list of trusted CAs
 * \param ca_crl   the list of CRLs for trusted CAs
 * \param profile  security profile for verification
 * \param cn       expected Common Name (can be set to
 *                 NULL if the CN must not be verified)
 * \param flags    result of the verification
 * \param f_vrfy   verification function
 * \param p_vrfy   verification parameter
 * \return         0 if successful or MBEDTLS_ERR_X509_CERT_VERIFY_FAILED
 *                 in which case *flags will have one or more
 *                 MBEDTLS_X509_BADCERT_XXX or MBEDTLS_X509_BADCRL_XXX flags
 *                 set,
 *                 or another error in case of a fatal error encountered
 *                 during the verification process.
int mbedtls_x509_crt_verify_with_profile( mbedtls_x509_crt *crt,
                     mbedtls_x509_crt *trust_ca,
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy );
 * \brief          Check usage of certificate against keyUsage extension.
 * \param crt      Leaf certificate used.
 * \param usage    Intended usage(s) (eg MBEDTLS_X509_KU_KEY_ENCIPHERMENT
 *                 before using the certificate to perform an RSA key
 *                 exchange).
 * \note           Except for decipherOnly and encipherOnly, a bit set in the
 *                 usage argument means this bit MUST be set in the
 *                 certificate. For decipherOnly and encipherOnly, it means
 *                 that bit MAY be set.
 * \return         0 is these uses of the certificate are allowed,
 *                 MBEDTLS_ERR_X509_BAD_INPUT_DATA if the keyUsage extension
 *                 is present but does not match the usage argument.
 * \note           You should only call this function on leaf certificates, on
 *                 (intermediate) CAs the keyUsage extension is automatically
 *                 checked by \c mbedtls_x509_crt_verify().
int mbedtls_x509_crt_check_key_usage( const mbedtls_x509_crt *crt,
                                      unsigned int usage );
 * \brief           Check usage of certificate against extendedKeyUsage.
 * \param crt       Leaf certificate used.
 * \param usage_oid Intended usage (eg MBEDTLS_OID_SERVER_AUTH or
 *                  MBEDTLS_OID_CLIENT_AUTH).
 * \param usage_len Length of usage_oid (eg given by MBEDTLS_OID_SIZE()).
 * \return          0 if this use of the certificate is allowed,
 *                  MBEDTLS_ERR_X509_BAD_INPUT_DATA if not.
 * \note            Usually only makes sense on leaf certificates.
int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
                                               const char *usage_oid,
                                               size_t usage_len );
 * \brief          Verify the certificate revocation status
 * \param crt      a certificate to be verified
 * \param crl      the CRL to verify against
 * \return         1 if the certificate is revoked, 0 otherwise
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl );
 * \brief          Initialize a certificate (chain)
 * \param crt      Certificate chain to initialize
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt );
 * \brief          Unallocate all certificate data
 * \param crt      Certificate chain to free
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt );
/* \} name */
/* \} addtogroup x509_module */
 * \brief           Initialize a CRT writing context
 * \param ctx       CRT context to initialize
void mbedtls_x509write_crt_init( mbedtls_x509write_cert *ctx );
 * \brief           Set the verion for a Certificate
 *                  Default: MBEDTLS_X509_CRT_VERSION_3
 * \param ctx       CRT context to use
 * \param version   version to set (MBEDTLS_X509_CRT_VERSION_1, MBEDTLS_X509_CRT_VERSION_2 or
 *                                  MBEDTLS_X509_CRT_VERSION_3)
void mbedtls_x509write_crt_set_version( mbedtls_x509write_cert *ctx, int version );
 * \brief           Set the serial number for a Certificate.
 * \param ctx       CRT context to use
 * \param serial    serial number to set
 * \return          0 if successful
int mbedtls_x509write_crt_set_serial( mbedtls_x509write_cert *ctx, const mbedtls_mpi *serial );
 * \brief           Set the validity period for a Certificate
 *                  Timestamps should be in string format for UTC timezone
 *                  i.e. "YYYYMMDDhhmmss"
 *                  e.g. "20131231235959" for December 31st 2013
 *                       at 23:59:59
 * \param ctx       CRT context to use
 * \param not_before    not_before timestamp
 * \param not_after     not_after timestamp
 * \return          0 if timestamp was parsed successfully, or
 *                  a specific error code
int mbedtls_x509write_crt_set_validity( mbedtls_x509write_cert *ctx, const char *not_before,
                                const char *not_after );
 * \brief           Set the issuer name for a Certificate
 *                  Issuer names should contain a comma-separated list
 *                  of OID types and values:
 *                  e.g. "C=UK,O=ARM,CN=mbed TLS CA"
 * \param ctx           CRT context to use
 * \param issuer_name   issuer name to set
 * \return          0 if issuer name was parsed successfully, or
 *                  a specific error code
int mbedtls_x509write_crt_set_issuer_name( mbedtls_x509write_cert *ctx,
                                   const char *issuer_name );
 * \brief           Set the subject name for a Certificate
 *                  Subject names should contain a comma-separated list
 *                  of OID types and values:
 *                  e.g. "C=UK,O=ARM,CN=mbed TLS Server 1"
 * \param ctx           CRT context to use
 * \param subject_name  subject name to set
 * \return          0 if subject name was parsed successfully, or
 *                  a specific error code
int mbedtls_x509write_crt_set_subject_name( mbedtls_x509write_cert *ctx,
                                    const char *subject_name );
 * \brief           Set the subject public key for the certificate
 * \param ctx       CRT context to use
 * \param key       public key to include
void mbedtls_x509write_crt_set_subject_key( mbedtls_x509write_cert *ctx, mbedtls_pk_context *key );
 * \brief           Set the issuer key used for signing the certificate
 * \param ctx       CRT context to use
 * \param key       private key to sign with
void mbedtls_x509write_crt_set_issuer_key( mbedtls_x509write_cert *ctx, mbedtls_pk_context *key );
 * \brief           Set the MD algorithm to use for the signature
 *                  (e.g. MBEDTLS_MD_SHA1)
 * \param ctx       CRT context to use
 * \param md_alg    MD algorithm to use
void mbedtls_x509write_crt_set_md_alg( mbedtls_x509write_cert *ctx, mbedtls_md_type_t md_alg );
 * \brief           Generic function to add to or replace an extension in the
 *                  CRT
 * \param ctx       CRT context to use
 * \param oid       OID of the extension
 * \param oid_len   length of the OID
 * \param critical  if the extension is critical (per the RFC's definition)
 * \param val       value of the extension OCTET STRING
 * \param val_len   length of the value data
 * \return          0 if successful, or a MBEDTLS_ERR_X509_ALLOC_FAILED
int mbedtls_x509write_crt_set_extension( mbedtls_x509write_cert *ctx,
                                 const char *oid, size_t oid_len,
                                 int critical,
                                 const unsigned char *val, size_t val_len );
 * \brief           Set the basicConstraints extension for a CRT
 * \param ctx       CRT context to use
 * \param is_ca     is this a CA certificate
 * \param max_pathlen   maximum length of certificate chains below this
 *                      certificate (only for CA certificates, -1 is
 *                      inlimited)
 * \return          0 if successful, or a MBEDTLS_ERR_X509_ALLOC_FAILED
int mbedtls_x509write_crt_set_basic_constraints( mbedtls_x509write_cert *ctx,
                                         int is_ca, int max_pathlen );
 * \brief           Set the subjectKeyIdentifier extension for a CRT
 *                  Requires that mbedtls_x509write_crt_set_subject_key() has been
 *                  called before
 * \param ctx       CRT context to use
 * \return          0 if successful, or a MBEDTLS_ERR_X509_ALLOC_FAILED
int mbedtls_x509write_crt_set_subject_key_identifier( mbedtls_x509write_cert *ctx );
 * \brief           Set the authorityKeyIdentifier extension for a CRT
 *                  Requires that mbedtls_x509write_crt_set_issuer_key() has been
 *                  called before
 * \param ctx       CRT context to use
 * \return          0 if successful, or a MBEDTLS_ERR_X509_ALLOC_FAILED
int mbedtls_x509write_crt_set_authority_key_identifier( mbedtls_x509write_cert *ctx );
 * \brief           Set the Key Usage Extension flags
 *                  (e.g. MBEDTLS_X509_KU_DIGITAL_SIGNATURE | MBEDTLS_X509_KU_KEY_CERT_SIGN)
 * \param ctx       CRT context to use
 * \param key_usage key usage flags to set
 * \return          0 if successful, or MBEDTLS_ERR_X509_ALLOC_FAILED
int mbedtls_x509write_crt_set_key_usage( mbedtls_x509write_cert *ctx,
                                         unsigned int key_usage );
 * \brief           Set the Netscape Cert Type flags
 *                  (e.g. MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT | MBEDTLS_X509_NS_CERT_TYPE_EMAIL)
 * \param ctx           CRT context to use
 * \param ns_cert_type  Netscape Cert Type flags to set
 * \return          0 if successful, or MBEDTLS_ERR_X509_ALLOC_FAILED
int mbedtls_x509write_crt_set_ns_cert_type( mbedtls_x509write_cert *ctx,
                                    unsigned char ns_cert_type );
 * \brief           Free the contents of a CRT write context
 * \param ctx       CRT context to free
void mbedtls_x509write_crt_free( mbedtls_x509write_cert *ctx );
 * \brief           Write a built up certificate to a X509 DER structure
 *                  Note: data is written at the end of the buffer! Use the
 *                        return value to determine where you should start
 *                        using the buffer
 * \param ctx       certificate to write away
 * \param buf       buffer to write to
 * \param size      size of the buffer
 * \param f_rng     RNG function (for signature, see note)
 * \param p_rng     RNG parameter
 * \return          length of data written if successful, or a specific
 *                  error code
 * \note            f_rng may be NULL if RSA is used for signature and the
 *                  signature is made offline (otherwise f_rng is desirable
 *                  for countermeasures against timing attacks).
 *                  ECDSA signatures always require a non-NULL f_rng.
int mbedtls_x509write_crt_der( mbedtls_x509write_cert *ctx, unsigned char *buf, size_t size,
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng );
 * \brief           Write a built up certificate to a X509 PEM string
 * \param ctx       certificate to write away
 * \param buf       buffer to write to
 * \param size      size of the buffer
 * \param f_rng     RNG function (for signature, see note)
 * \param p_rng     RNG parameter
 * \return          0 if successful, or a specific error code
 * \note            f_rng may be NULL if RSA is used for signature and the
 *                  signature is made offline (otherwise f_rng is desirable
 *                  for countermeasures against timing attacks).
 *                  ECDSA signatures always require a non-NULL f_rng.
int mbedtls_x509write_crt_pem( mbedtls_x509write_cert *ctx, unsigned char *buf, size_t size,
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng );
# 40 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/x509_crl.h" 1
 * \file x509_crl.h
 * \brief X.509 certificate revocation list parsing
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 41 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h" 1
 * \file dhm.h
 * \brief   This file contains Diffie-Hellman-Merkle (DHM) key exchange
 *          definitions and functions.
 * Diffie-Hellman-Merkle (DHM) key exchange is defined in
 * <em>RFC-2631: Diffie-Hellman Key Agreement Method</em> and
 * <em>Public-Key Cryptography Standards (PKCS) #3: Diffie
 * Hellman Key Agreement Standard</em>.
 * <em>RFC-3526: More Modular Exponential (MODP) Diffie-Hellman groups for
 * Internet Key Exchange (IKE)</em> defines a number of standardized
 * Diffie-Hellman groups for IKE.
 * <em>RFC-5114: Additional Diffie-Hellman Groups for Use with IETF
 * Standards</em> defines a number of standardized Diffie-Hellman
 * groups that can be used.
 * \warning  The security of the DHM key exchange relies on the proper choice
 *           of prime modulus - optimally, it should be a safe prime. The usage
 *           of non-safe primes both decreases the difficulty of the underlying
 *           discrete logarithm problem and can lead to small subgroup attacks
 *           leaking private exponent bits when invalid public keys are used
 *           and not detected. This is especially relevant if the same DHM
 *           parameters are reused for multiple key exchanges as in static DHM,
 *           while the criticality of small-subgroup attacks is lower for
 *           ephemeral DHM.
 * \warning  For performance reasons, the code does neither perform primality
 *           nor safe primality tests, nor the expensive checks for invalid
 *           subgroups. Moreover, even if these were performed, non-standardized
 *           primes cannot be trusted because of the possibility of backdoors
 *           that can't be effectively checked for.
 * \warning  Diffie-Hellman-Merkle is therefore a security risk when not using
 *           standardized primes generated using a trustworthy ("nothing up
 *           my sleeve") method, such as the RFC 3526 / 7919 primes. In the TLS
 *           protocol, DH parameters need to be negotiated, so using the default
 *           primes systematically is not always an option. If possible, use
 *           Elliptic Curve Diffie-Hellman (ECDH), which has better performance,
 *           and for which the TLS protocol mandates the use of standard
 *           parameters.
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
#define MBEDTLS_DHM_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 72 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/bignum.h" 1
 * \file bignum.h
 * \brief Multi-precision integer library
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 74 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h" 2
 * DHM Error codes
#define MBEDTLS_ERR_DHM_BAD_INPUT_DATA -0x3080 /**< Bad input parameters. */
#define MBEDTLS_ERR_DHM_READ_PARAMS_FAILED -0x3100 /**< Reading of the DHM parameters failed. */
#define MBEDTLS_ERR_DHM_MAKE_PARAMS_FAILED -0x3180 /**< Making of the DHM parameters failed. */
#define MBEDTLS_ERR_DHM_READ_PUBLIC_FAILED -0x3200 /**< Reading of the public values failed. */
#define MBEDTLS_ERR_DHM_MAKE_PUBLIC_FAILED -0x3280 /**< Making of the public value failed. */
#define MBEDTLS_ERR_DHM_CALC_SECRET_FAILED -0x3300 /**< Calculation of the DHM secret failed. */
#define MBEDTLS_ERR_DHM_INVALID_FORMAT -0x3380 /**< The ASN.1 data is not formatted correctly. */
#define MBEDTLS_ERR_DHM_ALLOC_FAILED -0x3400 /**< Allocation of memory failed. */
#define MBEDTLS_ERR_DHM_FILE_IO_ERROR -0x3480 /**< Read or write of file failed. */
#define MBEDTLS_ERR_DHM_HW_ACCEL_FAILED -0x3500 /**< DHM hardware accelerator failed. */
#define MBEDTLS_ERR_DHM_SET_GROUP_FAILED -0x3580 /**< Setting the modulus and generator failed. */
extern "C" {
 * \brief          The DHM context structure.
typedef struct mbedtls_dhm_context
    size_t len; /*!<  The size of \p P in Bytes. */
    mbedtls_mpi P; /*!<  The prime modulus. */
    mbedtls_mpi G; /*!<  The generator. */
    mbedtls_mpi X; /*!<  Our secret value. */
    mbedtls_mpi GX; /*!<  Our public key = \c G^X mod \c P. */
    mbedtls_mpi GY; /*!<  The public key of the peer = \c G^Y mod \c P. */
    mbedtls_mpi K; /*!<  The shared secret = \c G^(XY) mod \c P. */
    mbedtls_mpi RP; /*!<  The cached value = \c R^2 mod \c P. */
    mbedtls_mpi Vi; /*!<  The blinding value. */
    mbedtls_mpi Vf; /*!<  The unblinding value. */
    mbedtls_mpi pX; /*!<  The previous \c X. */
mbedtls_dhm_context;
 * \brief          This function initializes the DHM context.
 * \param ctx      The DHM context to initialize.
void mbedtls_dhm_init( mbedtls_dhm_context *ctx );
 * \brief          This function parses the ServerKeyExchange parameters.
 * \param ctx      The DHM context.
 * \param p        On input, *p must be the start of the input buffer.
 *                 On output, *p is updated to point to the end of the data
 *                 that has been read. On success, this is the first byte
 *                 past the end of the ServerKeyExchange parameters.
 *                 On error, this is the point at which an error has been
 *                 detected, which is usually not useful except to debug
 *                 failures.
 * \param end      The end of the input buffer.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_DHM_XXX error code on failure.
int mbedtls_dhm_read_params( mbedtls_dhm_context *ctx,
                     unsigned char **p,
                     const unsigned char *end );
 * \brief          This function sets up and writes the ServerKeyExchange
 *                 parameters.
 * \note           The destination buffer must be large enough to hold
 *                 the reduced binary presentation of the modulus, the generator
 *                 and the public key, each wrapped with a 2-byte length field.
 *                 It is the responsibility of the caller to ensure that enough
 *                 space is available. Refer to \c mbedtls_mpi_size to computing
 *                 the byte-size of an MPI.
 * \note           This function assumes that \c ctx->P and \c ctx->G
 *                 have already been properly set. For that, use
 *                 mbedtls_dhm_set_group() below in conjunction with
 *                 mbedtls_mpi_read_binary() and mbedtls_mpi_read_string().
 * \param ctx      The DHM context.
 * \param x_size   The private key size in Bytes.
 * \param olen     The number of characters written.
 * \param output   The destination buffer.
 * \param f_rng    The RNG function.
 * \param p_rng    The RNG context.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_DHM_XXX error code on failure.
int mbedtls_dhm_make_params( mbedtls_dhm_context *ctx, int x_size,
                     unsigned char *output, size_t *olen,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng );
 * \brief          This function sets the prime modulus and generator.
 * \note           This function can be used to set \p P, \p G
 *                 in preparation for mbedtls_dhm_make_params().
 * \param ctx      The DHM context.
 * \param P        The MPI holding the DHM prime modulus.
 * \param G        The MPI holding the DHM generator.
 * \return         \c 0 if successful.
 * \return         An \c MBEDTLS_ERR_DHM_XXX error code on failure.
int mbedtls_dhm_set_group( mbedtls_dhm_context *ctx,
                           const mbedtls_mpi *P,
                           const mbedtls_mpi *G );
 * \brief          This function imports the public value of the peer, G^Y.
 * \param ctx      The DHM context.
 * \param input    The input buffer containing the G^Y value of the peer.
 * \param ilen     The size of the input buffer.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_DHM_XXX error code on failure.
int mbedtls_dhm_read_public( mbedtls_dhm_context *ctx,
                     const unsigned char *input, size_t ilen );
 * \brief          This function creates its own private key, \c X, and
 *                 exports \c G^X.
 * \note           The destination buffer is always fully written
 *                 so as to contain a big-endian representation of G^X mod P.
 *                 If it is larger than ctx->len, it is padded accordingly
 *                 with zero-bytes at the beginning.
 * \param ctx      The DHM context.
 * \param x_size   The private key size in Bytes.
 * \param output   The destination buffer.
 * \param olen     The length of the destination buffer. Must be at least
 *                  equal to ctx->len (the size of \c P).
 * \param f_rng    The RNG function.
 * \param p_rng    The RNG context.
 * \return         \c 0 on success.
 * \return         An \c MBEDTLS_ERR_DHM_XXX error code on failure.
int mbedtls_dhm_make_public( mbedtls_dhm_context *ctx, int x_size,
                     unsigned char *output, size_t olen,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng );
 * \brief               This function derives and exports the shared secret
 *                      \c (G^Y)^X mod \c P.
 * \note                If \p f_rng is not NULL, it is used to blind the input as
 *                      a countermeasure against timing attacks. Blinding is used
 *                      only if our private key \c X is re-used, and not used
 *                      otherwise. We recommend always passing a non-NULL
 *                      \p f_rng argument.
 * \param ctx           The DHM context.
 * \param output        The destination buffer.
 * \param output_size   The size of the destination buffer. Must be at least
 *                      the size of ctx->len (the size of \c P).
 * \param olen          On exit, holds the actual number of Bytes written.
 * \param f_rng         The RNG function, for blinding purposes.
 * \param p_rng         The RNG context.
 * \return              \c 0 on success.
 * \return              An \c MBEDTLS_ERR_DHM_XXX error code on failure.
int mbedtls_dhm_calc_secret( mbedtls_dhm_context *ctx,
                     unsigned char *output, size_t output_size, size_t *olen,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng );
 * \brief          This function frees and clears the components of a DHM context.
 * \param ctx      The DHM context to free and clear.
void mbedtls_dhm_free( mbedtls_dhm_context *ctx );
/** \ingroup x509_module */
 * \brief             This function parses DHM parameters in PEM or DER format.
 * \param dhm         The DHM context to initialize.
 * \param dhmin       The input buffer.
 * \param dhminlen    The size of the buffer, including the terminating null
 *                    Byte for PEM data.
 * \return            \c 0 on success.
 * \return            An \c MBEDTLS_ERR_DHM_XXX or \c MBEDTLS_ERR_PEM_XXX error code
 *                    error code on failure.
int mbedtls_dhm_parse_dhm( mbedtls_dhm_context *dhm, const unsigned char *dhmin,
                   size_t dhminlen );
/** \ingroup x509_module */
 * \brief          This function loads and parses DHM parameters from a file.
 * \param dhm      The DHM context to load the parameters to.
 * \param path     The filename to read the DHM parameters from.
 * \return         \c 0 on success.
 * \return            An \c MBEDTLS_ERR_DHM_XXX or \c MBEDTLS_ERR_PEM_XXX error code
 *                    error code on failure.
int mbedtls_dhm_parse_dhmfile( mbedtls_dhm_context *dhm, const char *path );
 * \brief          The DMH checkup routine.
 * \return         \c 0 on success.
 * \return         \c 1 on failure.
int mbedtls_dhm_self_test( int verbose );
 * RFC 3526, RFC 5114 and RFC 7919 standardize a number of
 * Diffie-Hellman groups, some of which are included here
 * for use within the SSL/TLS module and the user's convenience
 * when configuring the Diffie-Hellman parameters by hand
 * through \c mbedtls_ssl_conf_dh_param.
 * The following lists the source of the above groups in the standards:
 * - RFC 5114 section 2.2:  2048-bit MODP Group with 224-bit Prime Order Subgroup
 * - RFC 3526 section 3:    2048-bit MODP Group
 * - RFC 3526 section 4:    3072-bit MODP Group
 * - RFC 3526 section 5:    4096-bit MODP Group
 * - RFC 7919 section A.1:  ffdhe2048
 * - RFC 7919 section A.2:  ffdhe3072
 * - RFC 7919 section A.3:  ffdhe4096
 * - RFC 7919 section A.4:  ffdhe6144
 * - RFC 7919 section A.5:  ffdhe8192
 * The constants with suffix "_p" denote the chosen prime moduli, while
 * the constants with suffix "_g" denote the chosen generator
 * of the associated prime field.
 * The constants further suffixed with "_bin" are provided in binary format,
 * while all other constants represent null-terminated strings holding the
 * hexadecimal presentation of the respective numbers.
 * The primes from RFC 3526 and RFC 7919 have been generating by the following
 * trust-worthy procedure:
 * - Fix N in { 2048, 3072, 4096, 6144, 8192 } and consider the N-bit number
 *   the first and last 64 bits are all 1, and the remaining N - 128 bits of
 *   which are 0x7ff...ff.
 * - Add the smallest multiple of the first N - 129 bits of the binary expansion
 *   of pi (for RFC 5236) or e (for RFC 7919) to this intermediate bit-string
 *   such that the resulting integer is a safe-prime.
 * - The result is the respective RFC 3526 / 7919 prime, and the corresponding
 *   generator is always chosen to be 2 (which is a square for these prime,
 *   hence the corresponding subgroup has order (p-1)/2 and avoids leaking a
 *   bit in the private exponent).
# 359 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h"
#define MBEDTLS_DEPRECATED_STRING_CONSTANT(VAL) VAL
 * \warning The origin of the primes in RFC 5114 is not documented and
 *          their use therefore constitutes a security risk!
 * \deprecated The hex-encoded primes from RFC 5114 are deprecated and are
 *             likely to be removed in a future version of the library without
 *             replacement.
 * The hexadecimal presentation of the prime underlying the
 * 2048-bit MODP Group with 224-bit Prime Order Subgroup, as defined
 * in <em>RFC-5114: Additional Diffie-Hellman Groups for Use with
 * IETF Standards</em>.
#define MBEDTLS_DHM_RFC5114_MODP_2048_P MBEDTLS_DEPRECATED_STRING_CONSTANT( "AD107E1E9123A9D0D660FAA79559C51FA20D64E5683B9FD1" "B54B1597B61D0A75E6FA141DF95A56DBAF9A3C407BA1DF15" "EB3D688A309C180E1DE6B85A1274A0A66D3F8152AD6AC212" "9037C9EDEFDA4DF8D91E8FEF55B7394B7AD5B7D0B6C12207" "C9F98D11ED34DBF6C6BA0B2C8BBC27BE6A00E0A0B9C49708" "B3BF8A317091883681286130BC8985DB1602E714415D9330" "278273C7DE31EFDC7310F7121FD5A07415987D9ADC0A486D" "CDF93ACC44328387315D75E198C641A480CD86A1B9E587E8" "BE60E69CC928B2B9C52172E413042E9B23F10B0E16E79763" "C9B53DCF4BA80A29E3FB73C16B8E75B97EF363E2FFA31F71" "CF9DE5384E71B81C0AC4DFFE0C10E64F" )
# 391 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h"
 * The hexadecimal presentation of the chosen generator of the 2048-bit MODP
 * Group with 224-bit Prime Order Subgroup, as defined in <em>RFC-5114:
 * Additional Diffie-Hellman Groups for Use with IETF Standards</em>.
#define MBEDTLS_DHM_RFC5114_MODP_2048_G MBEDTLS_DEPRECATED_STRING_CONSTANT( "AC4032EF4F2D9AE39DF30B5C8FFDAC506CDEBE7B89998CAF" "74866A08CFE4FFE3A6824A4E10B9A6F0DD921F01A70C4AFA" "AB739D7700C29F52C57DB17C620A8652BE5E9001A8D66AD7" "C17669101999024AF4D027275AC1348BB8A762D0521BC98A" "E247150422EA1ED409939D54DA7460CDB5F6C6B250717CBE" "F180EB34118E98D119529A45D6F834566E3025E316A330EF" "BB77A86F0C1AB15B051AE3D428C8F8ACB70A8137150B8EEB" "10E183EDD19963DDD9E263E4770589EF6AA21E7F5F2FF381" "B539CCE3409D13CD566AFBB48D6C019181E1BCFE94B30269" "EDFE72FE9B6AA4BD7B5A0F1C71CFFF4C19C418E1F6EC0179" "81BC087F2A7065B384B890D3191F2BFA" )
# 410 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h"
 * The hexadecimal presentation of the prime underlying the 2048-bit MODP
 * Group, as defined in <em>RFC-3526: More Modular Exponential (MODP)
 * Diffie-Hellman groups for Internet Key Exchange (IKE)</em>.
 * \deprecated The hex-encoded primes from RFC 3625 are deprecated and
 *             superseded by the corresponding macros providing them as
 *             binary constants. Their hex-encoded constants are likely
 *             to be removed in a future version of the library.
#define MBEDTLS_DHM_RFC3526_MODP_2048_P MBEDTLS_DEPRECATED_STRING_CONSTANT( "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1" "29024E088A67CC74020BBEA63B139B22514A08798E3404DD" "EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245" "E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED" "EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D" "C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F" "83655D23DCA3AD961C62F356208552BB9ED529077096966D" "670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B" "E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9" "DE2BCBF6955817183995497CEA956AE515D2261898FA0510" "15728E5A8AACAA68FFFFFFFFFFFFFFFF" )
# 435 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h"
 * The hexadecimal presentation of the chosen generator of the 2048-bit MODP
 * Group, as defined in <em>RFC-3526: More Modular Exponential (MODP)
 * Diffie-Hellman groups for Internet Key Exchange (IKE)</em>.
#define MBEDTLS_DHM_RFC3526_MODP_2048_G MBEDTLS_DEPRECATED_STRING_CONSTANT( "02" )
 * The hexadecimal presentation of the prime underlying the 3072-bit MODP
 * Group, as defined in <em>RFC-3072: More Modular Exponential (MODP)
 * Diffie-Hellman groups for Internet Key Exchange (IKE)</em>.
#define MBEDTLS_DHM_RFC3526_MODP_3072_P MBEDTLS_DEPRECATED_STRING_CONSTANT( "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1" "29024E088A67CC74020BBEA63B139B22514A08798E3404DD" "EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245" "E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED" "EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D" "C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F" "83655D23DCA3AD961C62F356208552BB9ED529077096966D" "670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B" "E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9" "DE2BCBF6955817183995497CEA956AE515D2261898FA0510" "15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64" "ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7" "ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B" "F12FFA06D98A0864D87602733EC86A64521F2B18177B200C" "BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31" "43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF" )
# 467 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h"
 * The hexadecimal presentation of the chosen generator of the 3072-bit MODP
 * Group, as defined in <em>RFC-3526: More Modular Exponential (MODP)
 * Diffie-Hellman groups for Internet Key Exchange (IKE)</em>.
#define MBEDTLS_DHM_RFC3526_MODP_3072_G MBEDTLS_DEPRECATED_STRING_CONSTANT( "02" )
 * The hexadecimal presentation of the prime underlying the 4096-bit MODP
 * Group, as defined in <em>RFC-3526: More Modular Exponential (MODP)
 * Diffie-Hellman groups for Internet Key Exchange (IKE)</em>.
#define MBEDTLS_DHM_RFC3526_MODP_4096_P MBEDTLS_DEPRECATED_STRING_CONSTANT( "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1" "29024E088A67CC74020BBEA63B139B22514A08798E3404DD" "EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245" "E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED" "EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D" "C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F" "83655D23DCA3AD961C62F356208552BB9ED529077096966D" "670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B" "E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9" "DE2BCBF6955817183995497CEA956AE515D2261898FA0510" "15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64" "ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7" "ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B" "F12FFA06D98A0864D87602733EC86A64521F2B18177B200C" "BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31" "43DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D7" "88719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA" "2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6" "287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED" "1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA9" "93B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199" "FFFFFFFFFFFFFFFF" )
# 505 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h"
 * The hexadecimal presentation of the chosen generator of the 4096-bit MODP
 * Group, as defined in <em>RFC-3526: More Modular Exponential (MODP)
 * Diffie-Hellman groups for Internet Key Exchange (IKE)</em>.
#define MBEDTLS_DHM_RFC3526_MODP_4096_G MBEDTLS_DEPRECATED_STRING_CONSTANT( "02" )
 * Trustworthy DHM parameters in binary form
#define MBEDTLS_DHM_RFC3526_MODP_2048_P_BIN { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34, 0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1, 0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74, 0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x13, 0x9B, 0x22, 0x51, 0x4A, 0x08, 0x79, 0x8E, 0x34, 0x04, 0xDD, 0xEF, 0x95, 0x19, 0xB3, 0xCD, 0x3A, 0x43, 0x1B, 0x30, 0x2B, 0x0A, 0x6D, 0xF2, 0x5F, 0x14, 0x37, 0x4F, 0xE1, 0x35, 0x6D, 0x6D, 0x51, 0xC2, 0x45, 0xE4, 0x85, 0xB5, 0x76, 0x62, 0x5E, 0x7E, 0xC6, 0xF4, 0x4C, 0x42, 0xE9, 0xA6, 0x37, 0xED, 0x6B, 0x0B, 0xFF, 0x5C, 0xB6, 0xF4, 0x06, 0xB7, 0xED, 0xEE, 0x38, 0x6B, 0xFB, 0x5A, 0x89, 0x9F, 0xA5, 0xAE, 0x9F, 0x24, 0x11, 0x7C, 0x4B, 0x1F, 0xE6, 0x49, 0x28, 0x66, 0x51, 0xEC, 0xE4, 0x5B, 0x3D, 0xC2, 0x00, 0x7C, 0xB8, 0xA1, 0x63, 0xBF, 0x05, 0x98, 0xDA, 0x48, 0x36, 0x1C, 0x55, 0xD3, 0x9A, 0x69, 0x16, 0x3F, 0xA8, 0xFD, 0x24, 0xCF, 0x5F, 0x83, 0x65, 0x5D, 0x23, 0xDC, 0xA3, 0xAD, 0x96, 0x1C, 0x62, 0xF3, 0x56, 0x20, 0x85, 0x52, 0xBB, 0x9E, 0xD5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6D, 0x67, 0x0C, 0x35, 0x4E, 0x4A, 0xBC, 0x98, 0x04, 0xF1, 0x74, 0x6C, 0x08, 0xCA, 0x18, 0x21, 0x7C, 0x32, 0x90, 0x5E, 0x46, 0x2E, 0x36, 0xCE, 0x3B, 0xE3, 0x9E, 0x77, 0x2C, 0x18, 0x0E, 0x86, 0x03, 0x9B, 0x27, 0x83, 0xA2, 0xEC, 0x07, 0xA2, 0x8F, 0xB5, 0xC5, 0x5D, 0xF0, 0x6F, 0x4C, 0x52, 0xC9, 0xDE, 0x2B, 0xCB, 0xF6, 0x95, 0x58, 0x17, 0x18, 0x39, 0x95, 0x49, 0x7C, 0xEA, 0x95, 0x6A, 0xE5, 0x15, 0xD2, 0x26, 0x18, 0x98, 0xFA, 0x05, 0x10, 0x15, 0x72, 0x8E, 0x5A, 0x8A, 0xAC, 0xAA, 0x68, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
# 553 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h"
#define MBEDTLS_DHM_RFC3526_MODP_2048_G_BIN { 0x02 }
#define MBEDTLS_DHM_RFC3526_MODP_3072_P_BIN { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34, 0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1, 0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74, 0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x13, 0x9B, 0x22, 0x51, 0x4A, 0x08, 0x79, 0x8E, 0x34, 0x04, 0xDD, 0xEF, 0x95, 0x19, 0xB3, 0xCD, 0x3A, 0x43, 0x1B, 0x30, 0x2B, 0x0A, 0x6D, 0xF2, 0x5F, 0x14, 0x37, 0x4F, 0xE1, 0x35, 0x6D, 0x6D, 0x51, 0xC2, 0x45, 0xE4, 0x85, 0xB5, 0x76, 0x62, 0x5E, 0x7E, 0xC6, 0xF4, 0x4C, 0x42, 0xE9, 0xA6, 0x37, 0xED, 0x6B, 0x0B, 0xFF, 0x5C, 0xB6, 0xF4, 0x06, 0xB7, 0xED, 0xEE, 0x38, 0x6B, 0xFB, 0x5A, 0x89, 0x9F, 0xA5, 0xAE, 0x9F, 0x24, 0x11, 0x7C, 0x4B, 0x1F, 0xE6, 0x49, 0x28, 0x66, 0x51, 0xEC, 0xE4, 0x5B, 0x3D, 0xC2, 0x00, 0x7C, 0xB8, 0xA1, 0x63, 0xBF, 0x05, 0x98, 0xDA, 0x48, 0x36, 0x1C, 0x55, 0xD3, 0x9A, 0x69, 0x16, 0x3F, 0xA8, 0xFD, 0x24, 0xCF, 0x5F, 0x83, 0x65, 0x5D, 0x23, 0xDC, 0xA3, 0xAD, 0x96, 0x1C, 0x62, 0xF3, 0x56, 0x20, 0x85, 0x52, 0xBB, 0x9E, 0xD5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6D, 0x67, 0x0C, 0x35, 0x4E, 0x4A, 0xBC, 0x98, 0x04, 0xF1, 0x74, 0x6C, 0x08, 0xCA, 0x18, 0x21, 0x7C, 0x32, 0x90, 0x5E, 0x46, 0x2E, 0x36, 0xCE, 0x3B, 0xE3, 0x9E, 0x77, 0x2C, 0x18, 0x0E, 0x86, 0x03, 0x9B, 0x27, 0x83, 0xA2, 0xEC, 0x07, 0xA2, 0x8F, 0xB5, 0xC5, 0x5D, 0xF0, 0x6F, 0x4C, 0x52, 0xC9, 0xDE, 0x2B, 0xCB, 0xF6, 0x95, 0x58, 0x17, 0x18, 0x39, 0x95, 0x49, 0x7C, 0xEA, 0x95, 0x6A, 0xE5, 0x15, 0xD2, 0x26, 0x18, 0x98, 0xFA, 0x05, 0x10, 0x15, 0x72, 0x8E, 0x5A, 0x8A, 0xAA, 0xC4, 0x2D, 0xAD, 0x33, 0x17, 0x0D, 0x04, 0x50, 0x7A, 0x33, 0xA8, 0x55, 0x21, 0xAB, 0xDF, 0x1C, 0xBA, 0x64, 0xEC, 0xFB, 0x85, 0x04, 0x58, 0xDB, 0xEF, 0x0A, 0x8A, 0xEA, 0x71, 0x57, 0x5D, 0x06, 0x0C, 0x7D, 0xB3, 0x97, 0x0F, 0x85, 0xA6, 0xE1, 0xE4, 0xC7, 0xAB, 0xF5, 0xAE, 0x8C, 0xDB, 0x09, 0x33, 0xD7, 0x1E, 0x8C, 0x94, 0xE0, 0x4A, 0x25, 0x61, 0x9D, 0xCE, 0xE3, 0xD2, 0x26, 0x1A, 0xD2, 0xEE, 0x6B, 0xF1, 0x2F, 0xFA, 0x06, 0xD9, 0x8A, 0x08, 0x64, 0xD8, 0x76, 0x02, 0x73, 0x3E, 0xC8, 0x6A, 0x64, 0x52, 0x1F, 0x2B, 0x18, 0x17, 0x7B, 0x20, 0x0C, 0xBB, 0xE1, 0x17, 0x57, 0x7A, 0x61, 0x5D, 0x6C, 0x77, 0x09, 0x88, 0xC0, 0xBA, 0xD9, 0x46, 0xE2, 0x08, 0xE2, 0x4F, 0xA0, 0x74, 0xE5, 0xAB, 0x31, 0x43, 0xDB, 0x5B, 0xFC, 0xE0, 0xFD, 0x10, 0x8E, 0x4B, 0x82, 0xD1, 0x20, 0xA9, 0x3A, 0xD2, 0xCA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
# 605 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h"
#define MBEDTLS_DHM_RFC3526_MODP_3072_G_BIN { 0x02 }
#define MBEDTLS_DHM_RFC3526_MODP_4096_P_BIN { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34, 0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1, 0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74, 0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x13, 0x9B, 0x22, 0x51, 0x4A, 0x08, 0x79, 0x8E, 0x34, 0x04, 0xDD, 0xEF, 0x95, 0x19, 0xB3, 0xCD, 0x3A, 0x43, 0x1B, 0x30, 0x2B, 0x0A, 0x6D, 0xF2, 0x5F, 0x14, 0x37, 0x4F, 0xE1, 0x35, 0x6D, 0x6D, 0x51, 0xC2, 0x45, 0xE4, 0x85, 0xB5, 0x76, 0x62, 0x5E, 0x7E, 0xC6, 0xF4, 0x4C, 0x42, 0xE9, 0xA6, 0x37, 0xED, 0x6B, 0x0B, 0xFF, 0x5C, 0xB6, 0xF4, 0x06, 0xB7, 0xED, 0xEE, 0x38, 0x6B, 0xFB, 0x5A, 0x89, 0x9F, 0xA5, 0xAE, 0x9F, 0x24, 0x11, 0x7C, 0x4B, 0x1F, 0xE6, 0x49, 0x28, 0x66, 0x51, 0xEC, 0xE4, 0x5B, 0x3D, 0xC2, 0x00, 0x7C, 0xB8, 0xA1, 0x63, 0xBF, 0x05, 0x98, 0xDA, 0x48, 0x36, 0x1C, 0x55, 0xD3, 0x9A, 0x69, 0x16, 0x3F, 0xA8, 0xFD, 0x24, 0xCF, 0x5F, 0x83, 0x65, 0x5D, 0x23, 0xDC, 0xA3, 0xAD, 0x96, 0x1C, 0x62, 0xF3, 0x56, 0x20, 0x85, 0x52, 0xBB, 0x9E, 0xD5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6D, 0x67, 0x0C, 0x35, 0x4E, 0x4A, 0xBC, 0x98, 0x04, 0xF1, 0x74, 0x6C, 0x08, 0xCA, 0x18, 0x21, 0x7C, 0x32, 0x90, 0x5E, 0x46, 0x2E, 0x36, 0xCE, 0x3B, 0xE3, 0x9E, 0x77, 0x2C, 0x18, 0x0E, 0x86, 0x03, 0x9B, 0x27, 0x83, 0xA2, 0xEC, 0x07, 0xA2, 0x8F, 0xB5, 0xC5, 0x5D, 0xF0, 0x6F, 0x4C, 0x52, 0xC9, 0xDE, 0x2B, 0xCB, 0xF6, 0x95, 0x58, 0x17, 0x18, 0x39, 0x95, 0x49, 0x7C, 0xEA, 0x95, 0x6A, 0xE5, 0x15, 0xD2, 0x26, 0x18, 0x98, 0xFA, 0x05, 0x10, 0x15, 0x72, 0x8E, 0x5A, 0x8A, 0xAA, 0xC4, 0x2D, 0xAD, 0x33, 0x17, 0x0D, 0x04, 0x50, 0x7A, 0x33, 0xA8, 0x55, 0x21, 0xAB, 0xDF, 0x1C, 0xBA, 0x64, 0xEC, 0xFB, 0x85, 0x04, 0x58, 0xDB, 0xEF, 0x0A, 0x8A, 0xEA, 0x71, 0x57, 0x5D, 0x06, 0x0C, 0x7D, 0xB3, 0x97, 0x0F, 0x85, 0xA6, 0xE1, 0xE4, 0xC7, 0xAB, 0xF5, 0xAE, 0x8C, 0xDB, 0x09, 0x33, 0xD7, 0x1E, 0x8C, 0x94, 0xE0, 0x4A, 0x25, 0x61, 0x9D, 0xCE, 0xE3, 0xD2, 0x26, 0x1A, 0xD2, 0xEE, 0x6B, 0xF1, 0x2F, 0xFA, 0x06, 0xD9, 0x8A, 0x08, 0x64, 0xD8, 0x76, 0x02, 0x73, 0x3E, 0xC8, 0x6A, 0x64, 0x52, 0x1F, 0x2B, 0x18, 0x17, 0x7B, 0x20, 0x0C, 0xBB, 0xE1, 0x17, 0x57, 0x7A, 0x61, 0x5D, 0x6C, 0x77, 0x09, 0x88, 0xC0, 0xBA, 0xD9, 0x46, 0xE2, 0x08, 0xE2, 0x4F, 0xA0, 0x74, 0xE5, 0xAB, 0x31, 0x43, 0xDB, 0x5B, 0xFC, 0xE0, 0xFD, 0x10, 0x8E, 0x4B, 0x82, 0xD1, 0x20, 0xA9, 0x21, 0x08, 0x01, 0x1A, 0x72, 0x3C, 0x12, 0xA7, 0x87, 0xE6, 0xD7, 0x88, 0x71, 0x9A, 0x10, 0xBD, 0xBA, 0x5B, 0x26, 0x99, 0xC3, 0x27, 0x18, 0x6A, 0xF4, 0xE2, 0x3C, 0x1A, 0x94, 0x68, 0x34, 0xB6, 0x15, 0x0B, 0xDA, 0x25, 0x83, 0xE9, 0xCA, 0x2A, 0xD4, 0x4C, 0xE8, 0xDB, 0xBB, 0xC2, 0xDB, 0x04, 0xDE, 0x8E, 0xF9, 0x2E, 0x8E, 0xFC, 0x14, 0x1F, 0xBE, 0xCA, 0xA6, 0x28, 0x7C, 0x59, 0x47, 0x4E, 0x6B, 0xC0, 0x5D, 0x99, 0xB2, 0x96, 0x4F, 0xA0, 0x90, 0xC3, 0xA2, 0x23, 0x3B, 0xA1, 0x86, 0x51, 0x5B, 0xE7, 0xED, 0x1F, 0x61, 0x29, 0x70, 0xCE, 0xE2, 0xD7, 0xAF, 0xB8, 0x1B, 0xDD, 0x76, 0x21, 0x70, 0x48, 0x1C, 0xD0, 0x06, 0x91, 0x27, 0xD5, 0xB0, 0x5A, 0xA9, 0x93, 0xB4, 0xEA, 0x98, 0x8D, 0x8F, 0xDD, 0xC1, 0x86, 0xFF, 0xB7, 0xDC, 0x90, 0xA6, 0xC0, 0x8F, 0x4D, 0xF4, 0x35, 0xC9, 0x34, 0x06, 0x31, 0x99, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
# 673 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h"
#define MBEDTLS_DHM_RFC3526_MODP_4096_G_BIN { 0x02 }
#define MBEDTLS_DHM_RFC7919_FFDHE2048_P_BIN { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAD, 0xF8, 0x54, 0x58, 0xA2, 0xBB, 0x4A, 0x9A, 0xAF, 0xDC, 0x56, 0x20, 0x27, 0x3D, 0x3C, 0xF1, 0xD8, 0xB9, 0xC5, 0x83, 0xCE, 0x2D, 0x36, 0x95, 0xA9, 0xE1, 0x36, 0x41, 0x14, 0x64, 0x33, 0xFB, 0xCC, 0x93, 0x9D, 0xCE, 0x24, 0x9B, 0x3E, 0xF9, 0x7D, 0x2F, 0xE3, 0x63, 0x63, 0x0C, 0x75, 0xD8, 0xF6, 0x81, 0xB2, 0x02, 0xAE, 0xC4, 0x61, 0x7A, 0xD3, 0xDF, 0x1E, 0xD5, 0xD5, 0xFD, 0x65, 0x61, 0x24, 0x33, 0xF5, 0x1F, 0x5F, 0x06, 0x6E, 0xD0, 0x85, 0x63, 0x65, 0x55, 0x3D, 0xED, 0x1A, 0xF3, 0xB5, 0x57, 0x13, 0x5E, 0x7F, 0x57, 0xC9, 0x35, 0x98, 0x4F, 0x0C, 0x70, 0xE0, 0xE6, 0x8B, 0x77, 0xE2, 0xA6, 0x89, 0xDA, 0xF3, 0xEF, 0xE8, 0x72, 0x1D, 0xF1, 0x58, 0xA1, 0x36, 0xAD, 0xE7, 0x35, 0x30, 0xAC, 0xCA, 0x4F, 0x48, 0x3A, 0x79, 0x7A, 0xBC, 0x0A, 0xB1, 0x82, 0xB3, 0x24, 0xFB, 0x61, 0xD1, 0x08, 0xA9, 0x4B, 0xB2, 0xC8, 0xE3, 0xFB, 0xB9, 0x6A, 0xDA, 0xB7, 0x60, 0xD7, 0xF4, 0x68, 0x1D, 0x4F, 0x42, 0xA3, 0xDE, 0x39, 0x4D, 0xF4, 0xAE, 0x56, 0xED, 0xE7, 0x63, 0x72, 0xBB, 0x19, 0x0B, 0x07, 0xA7, 0xC8, 0xEE, 0x0A, 0x6D, 0x70, 0x9E, 0x02, 0xFC, 0xE1, 0xCD, 0xF7, 0xE2, 0xEC, 0xC0, 0x34, 0x04, 0xCD, 0x28, 0x34, 0x2F, 0x61, 0x91, 0x72, 0xFE, 0x9C, 0xE9, 0x85, 0x83, 0xFF, 0x8E, 0x4F, 0x12, 0x32, 0xEE, 0xF2, 0x81, 0x83, 0xC3, 0xFE, 0x3B, 0x1B, 0x4C, 0x6F, 0xAD, 0x73, 0x3B, 0xB5, 0xFC, 0xBC, 0x2E, 0xC2, 0x20, 0x05, 0xC5, 0x8E, 0xF1, 0x83, 0x7D, 0x16, 0x83, 0xB2, 0xC6, 0xF3, 0x4A, 0x26, 0xC1, 0xB2, 0xEF, 0xFA, 0x88, 0x6B, 0x42, 0x38, 0x61, 0x28, 0x5C, 0x97, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, }
# 709 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h"
#define MBEDTLS_DHM_RFC7919_FFDHE2048_G_BIN { 0x02 }
#define MBEDTLS_DHM_RFC7919_FFDHE3072_P_BIN { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAD, 0xF8, 0x54, 0x58, 0xA2, 0xBB, 0x4A, 0x9A, 0xAF, 0xDC, 0x56, 0x20, 0x27, 0x3D, 0x3C, 0xF1, 0xD8, 0xB9, 0xC5, 0x83, 0xCE, 0x2D, 0x36, 0x95, 0xA9, 0xE1, 0x36, 0x41, 0x14, 0x64, 0x33, 0xFB, 0xCC, 0x93, 0x9D, 0xCE, 0x24, 0x9B, 0x3E, 0xF9, 0x7D, 0x2F, 0xE3, 0x63, 0x63, 0x0C, 0x75, 0xD8, 0xF6, 0x81, 0xB2, 0x02, 0xAE, 0xC4, 0x61, 0x7A, 0xD3, 0xDF, 0x1E, 0xD5, 0xD5, 0xFD, 0x65, 0x61, 0x24, 0x33, 0xF5, 0x1F, 0x5F, 0x06, 0x6E, 0xD0, 0x85, 0x63, 0x65, 0x55, 0x3D, 0xED, 0x1A, 0xF3, 0xB5, 0x57, 0x13, 0x5E, 0x7F, 0x57, 0xC9, 0x35, 0x98, 0x4F, 0x0C, 0x70, 0xE0, 0xE6, 0x8B, 0x77, 0xE2, 0xA6, 0x89, 0xDA, 0xF3, 0xEF, 0xE8, 0x72, 0x1D, 0xF1, 0x58, 0xA1, 0x36, 0xAD, 0xE7, 0x35, 0x30, 0xAC, 0xCA, 0x4F, 0x48, 0x3A, 0x79, 0x7A, 0xBC, 0x0A, 0xB1, 0x82, 0xB3, 0x24, 0xFB, 0x61, 0xD1, 0x08, 0xA9, 0x4B, 0xB2, 0xC8, 0xE3, 0xFB, 0xB9, 0x6A, 0xDA, 0xB7, 0x60, 0xD7, 0xF4, 0x68, 0x1D, 0x4F, 0x42, 0xA3, 0xDE, 0x39, 0x4D, 0xF4, 0xAE, 0x56, 0xED, 0xE7, 0x63, 0x72, 0xBB, 0x19, 0x0B, 0x07, 0xA7, 0xC8, 0xEE, 0x0A, 0x6D, 0x70, 0x9E, 0x02, 0xFC, 0xE1, 0xCD, 0xF7, 0xE2, 0xEC, 0xC0, 0x34, 0x04, 0xCD, 0x28, 0x34, 0x2F, 0x61, 0x91, 0x72, 0xFE, 0x9C, 0xE9, 0x85, 0x83, 0xFF, 0x8E, 0x4F, 0x12, 0x32, 0xEE, 0xF2, 0x81, 0x83, 0xC3, 0xFE, 0x3B, 0x1B, 0x4C, 0x6F, 0xAD, 0x73, 0x3B, 0xB5, 0xFC, 0xBC, 0x2E, 0xC2, 0x20, 0x05, 0xC5, 0x8E, 0xF1, 0x83, 0x7D, 0x16, 0x83, 0xB2, 0xC6, 0xF3, 0x4A, 0x26, 0xC1, 0xB2, 0xEF, 0xFA, 0x88, 0x6B, 0x42, 0x38, 0x61, 0x1F, 0xCF, 0xDC, 0xDE, 0x35, 0x5B, 0x3B, 0x65, 0x19, 0x03, 0x5B, 0xBC, 0x34, 0xF4, 0xDE, 0xF9, 0x9C, 0x02, 0x38, 0x61, 0xB4, 0x6F, 0xC9, 0xD6, 0xE6, 0xC9, 0x07, 0x7A, 0xD9, 0x1D, 0x26, 0x91, 0xF7, 0xF7, 0xEE, 0x59, 0x8C, 0xB0, 0xFA, 0xC1, 0x86, 0xD9, 0x1C, 0xAE, 0xFE, 0x13, 0x09, 0x85, 0x13, 0x92, 0x70, 0xB4, 0x13, 0x0C, 0x93, 0xBC, 0x43, 0x79, 0x44, 0xF4, 0xFD, 0x44, 0x52, 0xE2, 0xD7, 0x4D, 0xD3, 0x64, 0xF2, 0xE2, 0x1E, 0x71, 0xF5, 0x4B, 0xFF, 0x5C, 0xAE, 0x82, 0xAB, 0x9C, 0x9D, 0xF6, 0x9E, 0xE8, 0x6D, 0x2B, 0xC5, 0x22, 0x36, 0x3A, 0x0D, 0xAB, 0xC5, 0x21, 0x97, 0x9B, 0x0D, 0xEA, 0xDA, 0x1D, 0xBF, 0x9A, 0x42, 0xD5, 0xC4, 0x48, 0x4E, 0x0A, 0xBC, 0xD0, 0x6B, 0xFA, 0x53, 0xDD, 0xEF, 0x3C, 0x1B, 0x20, 0xEE, 0x3F, 0xD5, 0x9D, 0x7C, 0x25, 0xE4, 0x1D, 0x2B, 0x66, 0xC6, 0x2E, 0x37, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
# 761 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h"
#define MBEDTLS_DHM_RFC7919_FFDHE3072_G_BIN { 0x02 }
#define MBEDTLS_DHM_RFC7919_FFDHE4096_P_BIN { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAD, 0xF8, 0x54, 0x58, 0xA2, 0xBB, 0x4A, 0x9A, 0xAF, 0xDC, 0x56, 0x20, 0x27, 0x3D, 0x3C, 0xF1, 0xD8, 0xB9, 0xC5, 0x83, 0xCE, 0x2D, 0x36, 0x95, 0xA9, 0xE1, 0x36, 0x41, 0x14, 0x64, 0x33, 0xFB, 0xCC, 0x93, 0x9D, 0xCE, 0x24, 0x9B, 0x3E, 0xF9, 0x7D, 0x2F, 0xE3, 0x63, 0x63, 0x0C, 0x75, 0xD8, 0xF6, 0x81, 0xB2, 0x02, 0xAE, 0xC4, 0x61, 0x7A, 0xD3, 0xDF, 0x1E, 0xD5, 0xD5, 0xFD, 0x65, 0x61, 0x24, 0x33, 0xF5, 0x1F, 0x5F, 0x06, 0x6E, 0xD0, 0x85, 0x63, 0x65, 0x55, 0x3D, 0xED, 0x1A, 0xF3, 0xB5, 0x57, 0x13, 0x5E, 0x7F, 0x57, 0xC9, 0x35, 0x98, 0x4F, 0x0C, 0x70, 0xE0, 0xE6, 0x8B, 0x77, 0xE2, 0xA6, 0x89, 0xDA, 0xF3, 0xEF, 0xE8, 0x72, 0x1D, 0xF1, 0x58, 0xA1, 0x36, 0xAD, 0xE7, 0x35, 0x30, 0xAC, 0xCA, 0x4F, 0x48, 0x3A, 0x79, 0x7A, 0xBC, 0x0A, 0xB1, 0x82, 0xB3, 0x24, 0xFB, 0x61, 0xD1, 0x08, 0xA9, 0x4B, 0xB2, 0xC8, 0xE3, 0xFB, 0xB9, 0x6A, 0xDA, 0xB7, 0x60, 0xD7, 0xF4, 0x68, 0x1D, 0x4F, 0x42, 0xA3, 0xDE, 0x39, 0x4D, 0xF4, 0xAE, 0x56, 0xED, 0xE7, 0x63, 0x72, 0xBB, 0x19, 0x0B, 0x07, 0xA7, 0xC8, 0xEE, 0x0A, 0x6D, 0x70, 0x9E, 0x02, 0xFC, 0xE1, 0xCD, 0xF7, 0xE2, 0xEC, 0xC0, 0x34, 0x04, 0xCD, 0x28, 0x34, 0x2F, 0x61, 0x91, 0x72, 0xFE, 0x9C, 0xE9, 0x85, 0x83, 0xFF, 0x8E, 0x4F, 0x12, 0x32, 0xEE, 0xF2, 0x81, 0x83, 0xC3, 0xFE, 0x3B, 0x1B, 0x4C, 0x6F, 0xAD, 0x73, 0x3B, 0xB5, 0xFC, 0xBC, 0x2E, 0xC2, 0x20, 0x05, 0xC5, 0x8E, 0xF1, 0x83, 0x7D, 0x16, 0x83, 0xB2, 0xC6, 0xF3, 0x4A, 0x26, 0xC1, 0xB2, 0xEF, 0xFA, 0x88, 0x6B, 0x42, 0x38, 0x61, 0x1F, 0xCF, 0xDC, 0xDE, 0x35, 0x5B, 0x3B, 0x65, 0x19, 0x03, 0x5B, 0xBC, 0x34, 0xF4, 0xDE, 0xF9, 0x9C, 0x02, 0x38, 0x61, 0xB4, 0x6F, 0xC9, 0xD6, 0xE6, 0xC9, 0x07, 0x7A, 0xD9, 0x1D, 0x26, 0x91, 0xF7, 0xF7, 0xEE, 0x59, 0x8C, 0xB0, 0xFA, 0xC1, 0x86, 0xD9, 0x1C, 0xAE, 0xFE, 0x13, 0x09, 0x85, 0x13, 0x92, 0x70, 0xB4, 0x13, 0x0C, 0x93, 0xBC, 0x43, 0x79, 0x44, 0xF4, 0xFD, 0x44, 0x52, 0xE2, 0xD7, 0x4D, 0xD3, 0x64, 0xF2, 0xE2, 0x1E, 0x71, 0xF5, 0x4B, 0xFF, 0x5C, 0xAE, 0x82, 0xAB, 0x9C, 0x9D, 0xF6, 0x9E, 0xE8, 0x6D, 0x2B, 0xC5, 0x22, 0x36, 0x3A, 0x0D, 0xAB, 0xC5, 0x21, 0x97, 0x9B, 0x0D, 0xEA, 0xDA, 0x1D, 0xBF, 0x9A, 0x42, 0xD5, 0xC4, 0x48, 0x4E, 0x0A, 0xBC, 0xD0, 0x6B, 0xFA, 0x53, 0xDD, 0xEF, 0x3C, 0x1B, 0x20, 0xEE, 0x3F, 0xD5, 0x9D, 0x7C, 0x25, 0xE4, 0x1D, 0x2B, 0x66, 0x9E, 0x1E, 0xF1, 0x6E, 0x6F, 0x52, 0xC3, 0x16, 0x4D, 0xF4, 0xFB, 0x79, 0x30, 0xE9, 0xE4, 0xE5, 0x88, 0x57, 0xB6, 0xAC, 0x7D, 0x5F, 0x42, 0xD6, 0x9F, 0x6D, 0x18, 0x77, 0x63, 0xCF, 0x1D, 0x55, 0x03, 0x40, 0x04, 0x87, 0xF5, 0x5B, 0xA5, 0x7E, 0x31, 0xCC, 0x7A, 0x71, 0x35, 0xC8, 0x86, 0xEF, 0xB4, 0x31, 0x8A, 0xED, 0x6A, 0x1E, 0x01, 0x2D, 0x9E, 0x68, 0x32, 0xA9, 0x07, 0x60, 0x0A, 0x91, 0x81, 0x30, 0xC4, 0x6D, 0xC7, 0x78, 0xF9, 0x71, 0xAD, 0x00, 0x38, 0x09, 0x29, 0x99, 0xA3, 0x33, 0xCB, 0x8B, 0x7A, 0x1A, 0x1D, 0xB9, 0x3D, 0x71, 0x40, 0x00, 0x3C, 0x2A, 0x4E, 0xCE, 0xA9, 0xF9, 0x8D, 0x0A, 0xCC, 0x0A, 0x82, 0x91, 0xCD, 0xCE, 0xC9, 0x7D, 0xCF, 0x8E, 0xC9, 0xB5, 0x5A, 0x7F, 0x88, 0xA4, 0x6B, 0x4D, 0xB5, 0xA8, 0x51, 0xF4, 0x41, 0x82, 0xE1, 0xC6, 0x8A, 0x00, 0x7E, 0x5E, 0x65, 0x5F, 0x6A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
# 829 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h"
#define MBEDTLS_DHM_RFC7919_FFDHE4096_G_BIN { 0x02 }
#define MBEDTLS_DHM_RFC7919_FFDHE6144_P_BIN { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAD, 0xF8, 0x54, 0x58, 0xA2, 0xBB, 0x4A, 0x9A, 0xAF, 0xDC, 0x56, 0x20, 0x27, 0x3D, 0x3C, 0xF1, 0xD8, 0xB9, 0xC5, 0x83, 0xCE, 0x2D, 0x36, 0x95, 0xA9, 0xE1, 0x36, 0x41, 0x14, 0x64, 0x33, 0xFB, 0xCC, 0x93, 0x9D, 0xCE, 0x24, 0x9B, 0x3E, 0xF9, 0x7D, 0x2F, 0xE3, 0x63, 0x63, 0x0C, 0x75, 0xD8, 0xF6, 0x81, 0xB2, 0x02, 0xAE, 0xC4, 0x61, 0x7A, 0xD3, 0xDF, 0x1E, 0xD5, 0xD5, 0xFD, 0x65, 0x61, 0x24, 0x33, 0xF5, 0x1F, 0x5F, 0x06, 0x6E, 0xD0, 0x85, 0x63, 0x65, 0x55, 0x3D, 0xED, 0x1A, 0xF3, 0xB5, 0x57, 0x13, 0x5E, 0x7F, 0x57, 0xC9, 0x35, 0x98, 0x4F, 0x0C, 0x70, 0xE0, 0xE6, 0x8B, 0x77, 0xE2, 0xA6, 0x89, 0xDA, 0xF3, 0xEF, 0xE8, 0x72, 0x1D, 0xF1, 0x58, 0xA1, 0x36, 0xAD, 0xE7, 0x35, 0x30, 0xAC, 0xCA, 0x4F, 0x48, 0x3A, 0x79, 0x7A, 0xBC, 0x0A, 0xB1, 0x82, 0xB3, 0x24, 0xFB, 0x61, 0xD1, 0x08, 0xA9, 0x4B, 0xB2, 0xC8, 0xE3, 0xFB, 0xB9, 0x6A, 0xDA, 0xB7, 0x60, 0xD7, 0xF4, 0x68, 0x1D, 0x4F, 0x42, 0xA3, 0xDE, 0x39, 0x4D, 0xF4, 0xAE, 0x56, 0xED, 0xE7, 0x63, 0x72, 0xBB, 0x19, 0x0B, 0x07, 0xA7, 0xC8, 0xEE, 0x0A, 0x6D, 0x70, 0x9E, 0x02, 0xFC, 0xE1, 0xCD, 0xF7, 0xE2, 0xEC, 0xC0, 0x34, 0x04, 0xCD, 0x28, 0x34, 0x2F, 0x61, 0x91, 0x72, 0xFE, 0x9C, 0xE9, 0x85, 0x83, 0xFF, 0x8E, 0x4F, 0x12, 0x32, 0xEE, 0xF2, 0x81, 0x83, 0xC3, 0xFE, 0x3B, 0x1B, 0x4C, 0x6F, 0xAD, 0x73, 0x3B, 0xB5, 0xFC, 0xBC, 0x2E, 0xC2, 0x20, 0x05, 0xC5, 0x8E, 0xF1, 0x83, 0x7D, 0x16, 0x83, 0xB2, 0xC6, 0xF3, 0x4A, 0x26, 0xC1, 0xB2, 0xEF, 0xFA, 0x88, 0x6B, 0x42, 0x38, 0x61, 0x1F, 0xCF, 0xDC, 0xDE, 0x35, 0x5B, 0x3B, 0x65, 0x19, 0x03, 0x5B, 0xBC, 0x34, 0xF4, 0xDE, 0xF9, 0x9C, 0x02, 0x38, 0x61, 0xB4, 0x6F, 0xC9, 0xD6, 0xE6, 0xC9, 0x07, 0x7A, 0xD9, 0x1D, 0x26, 0x91, 0xF7, 0xF7, 0xEE, 0x59, 0x8C, 0xB0, 0xFA, 0xC1, 0x86, 0xD9, 0x1C, 0xAE, 0xFE, 0x13, 0x09, 0x85, 0x13, 0x92, 0x70, 0xB4, 0x13, 0x0C, 0x93, 0xBC, 0x43, 0x79, 0x44, 0xF4, 0xFD, 0x44, 0x52, 0xE2, 0xD7, 0x4D, 0xD3, 0x64, 0xF2, 0xE2, 0x1E, 0x71, 0xF5, 0x4B, 0xFF, 0x5C, 0xAE, 0x82, 0xAB, 0x9C, 0x9D, 0xF6, 0x9E, 0xE8, 0x6D, 0x2B, 0xC5, 0x22, 0x36, 0x3A, 0x0D, 0xAB, 0xC5, 0x21, 0x97, 0x9B, 0x0D, 0xEA, 0xDA, 0x1D, 0xBF, 0x9A, 0x42, 0xD5, 0xC4, 0x48, 0x4E, 0x0A, 0xBC, 0xD0, 0x6B, 0xFA, 0x53, 0xDD, 0xEF, 0x3C, 0x1B, 0x20, 0xEE, 0x3F, 0xD5, 0x9D, 0x7C, 0x25, 0xE4, 0x1D, 0x2B, 0x66, 0x9E, 0x1E, 0xF1, 0x6E, 0x6F, 0x52, 0xC3, 0x16, 0x4D, 0xF4, 0xFB, 0x79, 0x30, 0xE9, 0xE4, 0xE5, 0x88, 0x57, 0xB6, 0xAC, 0x7D, 0x5F, 0x42, 0xD6, 0x9F, 0x6D, 0x18, 0x77, 0x63, 0xCF, 0x1D, 0x55, 0x03, 0x40, 0x04, 0x87, 0xF5, 0x5B, 0xA5, 0x7E, 0x31, 0xCC, 0x7A, 0x71, 0x35, 0xC8, 0x86, 0xEF, 0xB4, 0x31, 0x8A, 0xED, 0x6A, 0x1E, 0x01, 0x2D, 0x9E, 0x68, 0x32, 0xA9, 0x07, 0x60, 0x0A, 0x91, 0x81, 0x30, 0xC4, 0x6D, 0xC7, 0x78, 0xF9, 0x71, 0xAD, 0x00, 0x38, 0x09, 0x29, 0x99, 0xA3, 0x33, 0xCB, 0x8B, 0x7A, 0x1A, 0x1D, 0xB9, 0x3D, 0x71, 0x40, 0x00, 0x3C, 0x2A, 0x4E, 0xCE, 0xA9, 0xF9, 0x8D, 0x0A, 0xCC, 0x0A, 0x82, 0x91, 0xCD, 0xCE, 0xC9, 0x7D, 0xCF, 0x8E, 0xC9, 0xB5, 0x5A, 0x7F, 0x88, 0xA4, 0x6B, 0x4D, 0xB5, 0xA8, 0x51, 0xF4, 0x41, 0x82, 0xE1, 0xC6, 0x8A, 0x00, 0x7E, 0x5E, 0x0D, 0xD9, 0x02, 0x0B, 0xFD, 0x64, 0xB6, 0x45, 0x03, 0x6C, 0x7A, 0x4E, 0x67, 0x7D, 0x2C, 0x38, 0x53, 0x2A, 0x3A, 0x23, 0xBA, 0x44, 0x42, 0xCA, 0xF5, 0x3E, 0xA6, 0x3B, 0xB4, 0x54, 0x32, 0x9B, 0x76, 0x24, 0xC8, 0x91, 0x7B, 0xDD, 0x64, 0xB1, 0xC0, 0xFD, 0x4C, 0xB3, 0x8E, 0x8C, 0x33, 0x4C, 0x70, 0x1C, 0x3A, 0xCD, 0xAD, 0x06, 0x57, 0xFC, 0xCF, 0xEC, 0x71, 0x9B, 0x1F, 0x5C, 0x3E, 0x4E, 0x46, 0x04, 0x1F, 0x38, 0x81, 0x47, 0xFB, 0x4C, 0xFD, 0xB4, 0x77, 0xA5, 0x24, 0x71, 0xF7, 0xA9, 0xA9, 0x69, 0x10, 0xB8, 0x55, 0x32, 0x2E, 0xDB, 0x63, 0x40, 0xD8, 0xA0, 0x0E, 0xF0, 0x92, 0x35, 0x05, 0x11, 0xE3, 0x0A, 0xBE, 0xC1, 0xFF, 0xF9, 0xE3, 0xA2, 0x6E, 0x7F, 0xB2, 0x9F, 0x8C, 0x18, 0x30, 0x23, 0xC3, 0x58, 0x7E, 0x38, 0xDA, 0x00, 0x77, 0xD9, 0xB4, 0x76, 0x3E, 0x4E, 0x4B, 0x94, 0xB2, 0xBB, 0xC1, 0x94, 0xC6, 0x65, 0x1E, 0x77, 0xCA, 0xF9, 0x92, 0xEE, 0xAA, 0xC0, 0x23, 0x2A, 0x28, 0x1B, 0xF6, 0xB3, 0xA7, 0x39, 0xC1, 0x22, 0x61, 0x16, 0x82, 0x0A, 0xE8, 0xDB, 0x58, 0x47, 0xA6, 0x7C, 0xBE, 0xF9, 0xC9, 0x09, 0x1B, 0x46, 0x2D, 0x53, 0x8C, 0xD7, 0x2B, 0x03, 0x74, 0x6A, 0xE7, 0x7F, 0x5E, 0x62, 0x29, 0x2C, 0x31, 0x15, 0x62, 0xA8, 0x46, 0x50, 0x5D, 0xC8, 0x2D, 0xB8, 0x54, 0x33, 0x8A, 0xE4, 0x9F, 0x52, 0x35, 0xC9, 0x5B, 0x91, 0x17, 0x8C, 0xCF, 0x2D, 0xD5, 0xCA, 0xCE, 0xF4, 0x03, 0xEC, 0x9D, 0x18, 0x10, 0xC6, 0x27, 0x2B, 0x04, 0x5B, 0x3B, 0x71, 0xF9, 0xDC, 0x6B, 0x80, 0xD6, 0x3F, 0xDD, 0x4A, 0x8E, 0x9A, 0xDB, 0x1E, 0x69, 0x62, 0xA6, 0x95, 0x26, 0xD4, 0x31, 0x61, 0xC1, 0xA4, 0x1D, 0x57, 0x0D, 0x79, 0x38, 0xDA, 0xD4, 0xA4, 0x0E, 0x32, 0x9C, 0xD0, 0xE4, 0x0E, 0x65, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
# 929 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h"
#define MBEDTLS_DHM_RFC7919_FFDHE6144_G_BIN { 0x02 }
#define MBEDTLS_DHM_RFC7919_FFDHE8192_P_BIN { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAD, 0xF8, 0x54, 0x58, 0xA2, 0xBB, 0x4A, 0x9A, 0xAF, 0xDC, 0x56, 0x20, 0x27, 0x3D, 0x3C, 0xF1, 0xD8, 0xB9, 0xC5, 0x83, 0xCE, 0x2D, 0x36, 0x95, 0xA9, 0xE1, 0x36, 0x41, 0x14, 0x64, 0x33, 0xFB, 0xCC, 0x93, 0x9D, 0xCE, 0x24, 0x9B, 0x3E, 0xF9, 0x7D, 0x2F, 0xE3, 0x63, 0x63, 0x0C, 0x75, 0xD8, 0xF6, 0x81, 0xB2, 0x02, 0xAE, 0xC4, 0x61, 0x7A, 0xD3, 0xDF, 0x1E, 0xD5, 0xD5, 0xFD, 0x65, 0x61, 0x24, 0x33, 0xF5, 0x1F, 0x5F, 0x06, 0x6E, 0xD0, 0x85, 0x63, 0x65, 0x55, 0x3D, 0xED, 0x1A, 0xF3, 0xB5, 0x57, 0x13, 0x5E, 0x7F, 0x57, 0xC9, 0x35, 0x98, 0x4F, 0x0C, 0x70, 0xE0, 0xE6, 0x8B, 0x77, 0xE2, 0xA6, 0x89, 0xDA, 0xF3, 0xEF, 0xE8, 0x72, 0x1D, 0xF1, 0x58, 0xA1, 0x36, 0xAD, 0xE7, 0x35, 0x30, 0xAC, 0xCA, 0x4F, 0x48, 0x3A, 0x79, 0x7A, 0xBC, 0x0A, 0xB1, 0x82, 0xB3, 0x24, 0xFB, 0x61, 0xD1, 0x08, 0xA9, 0x4B, 0xB2, 0xC8, 0xE3, 0xFB, 0xB9, 0x6A, 0xDA, 0xB7, 0x60, 0xD7, 0xF4, 0x68, 0x1D, 0x4F, 0x42, 0xA3, 0xDE, 0x39, 0x4D, 0xF4, 0xAE, 0x56, 0xED, 0xE7, 0x63, 0x72, 0xBB, 0x19, 0x0B, 0x07, 0xA7, 0xC8, 0xEE, 0x0A, 0x6D, 0x70, 0x9E, 0x02, 0xFC, 0xE1, 0xCD, 0xF7, 0xE2, 0xEC, 0xC0, 0x34, 0x04, 0xCD, 0x28, 0x34, 0x2F, 0x61, 0x91, 0x72, 0xFE, 0x9C, 0xE9, 0x85, 0x83, 0xFF, 0x8E, 0x4F, 0x12, 0x32, 0xEE, 0xF2, 0x81, 0x83, 0xC3, 0xFE, 0x3B, 0x1B, 0x4C, 0x6F, 0xAD, 0x73, 0x3B, 0xB5, 0xFC, 0xBC, 0x2E, 0xC2, 0x20, 0x05, 0xC5, 0x8E, 0xF1, 0x83, 0x7D, 0x16, 0x83, 0xB2, 0xC6, 0xF3, 0x4A, 0x26, 0xC1, 0xB2, 0xEF, 0xFA, 0x88, 0x6B, 0x42, 0x38, 0x61, 0x1F, 0xCF, 0xDC, 0xDE, 0x35, 0x5B, 0x3B, 0x65, 0x19, 0x03, 0x5B, 0xBC, 0x34, 0xF4, 0xDE, 0xF9, 0x9C, 0x02, 0x38, 0x61, 0xB4, 0x6F, 0xC9, 0xD6, 0xE6, 0xC9, 0x07, 0x7A, 0xD9, 0x1D, 0x26, 0x91, 0xF7, 0xF7, 0xEE, 0x59, 0x8C, 0xB0, 0xFA, 0xC1, 0x86, 0xD9, 0x1C, 0xAE, 0xFE, 0x13, 0x09, 0x85, 0x13, 0x92, 0x70, 0xB4, 0x13, 0x0C, 0x93, 0xBC, 0x43, 0x79, 0x44, 0xF4, 0xFD, 0x44, 0x52, 0xE2, 0xD7, 0x4D, 0xD3, 0x64, 0xF2, 0xE2, 0x1E, 0x71, 0xF5, 0x4B, 0xFF, 0x5C, 0xAE, 0x82, 0xAB, 0x9C, 0x9D, 0xF6, 0x9E, 0xE8, 0x6D, 0x2B, 0xC5, 0x22, 0x36, 0x3A, 0x0D, 0xAB, 0xC5, 0x21, 0x97, 0x9B, 0x0D, 0xEA, 0xDA, 0x1D, 0xBF, 0x9A, 0x42, 0xD5, 0xC4, 0x48, 0x4E, 0x0A, 0xBC, 0xD0, 0x6B, 0xFA, 0x53, 0xDD, 0xEF, 0x3C, 0x1B, 0x20, 0xEE, 0x3F, 0xD5, 0x9D, 0x7C, 0x25, 0xE4, 0x1D, 0x2B, 0x66, 0x9E, 0x1E, 0xF1, 0x6E, 0x6F, 0x52, 0xC3, 0x16, 0x4D, 0xF4, 0xFB, 0x79, 0x30, 0xE9, 0xE4, 0xE5, 0x88, 0x57, 0xB6, 0xAC, 0x7D, 0x5F, 0x42, 0xD6, 0x9F, 0x6D, 0x18, 0x77, 0x63, 0xCF, 0x1D, 0x55, 0x03, 0x40, 0x04, 0x87, 0xF5, 0x5B, 0xA5, 0x7E, 0x31, 0xCC, 0x7A, 0x71, 0x35, 0xC8, 0x86, 0xEF, 0xB4, 0x31, 0x8A, 0xED, 0x6A, 0x1E, 0x01, 0x2D, 0x9E, 0x68, 0x32, 0xA9, 0x07, 0x60, 0x0A, 0x91, 0x81, 0x30, 0xC4, 0x6D, 0xC7, 0x78, 0xF9, 0x71, 0xAD, 0x00, 0x38, 0x09, 0x29, 0x99, 0xA3, 0x33, 0xCB, 0x8B, 0x7A, 0x1A, 0x1D, 0xB9, 0x3D, 0x71, 0x40, 0x00, 0x3C, 0x2A, 0x4E, 0xCE, 0xA9, 0xF9, 0x8D, 0x0A, 0xCC, 0x0A, 0x82, 0x91, 0xCD, 0xCE, 0xC9, 0x7D, 0xCF, 0x8E, 0xC9, 0xB5, 0x5A, 0x7F, 0x88, 0xA4, 0x6B, 0x4D, 0xB5, 0xA8, 0x51, 0xF4, 0x41, 0x82, 0xE1, 0xC6, 0x8A, 0x00, 0x7E, 0x5E, 0x0D, 0xD9, 0x02, 0x0B, 0xFD, 0x64, 0xB6, 0x45, 0x03, 0x6C, 0x7A, 0x4E, 0x67, 0x7D, 0x2C, 0x38, 0x53, 0x2A, 0x3A, 0x23, 0xBA, 0x44, 0x42, 0xCA, 0xF5, 0x3E, 0xA6, 0x3B, 0xB4, 0x54, 0x32, 0x9B, 0x76, 0x24, 0xC8, 0x91, 0x7B, 0xDD, 0x64, 0xB1, 0xC0, 0xFD, 0x4C, 0xB3, 0x8E, 0x8C, 0x33, 0x4C, 0x70, 0x1C, 0x3A, 0xCD, 0xAD, 0x06, 0x57, 0xFC, 0xCF, 0xEC, 0x71, 0x9B, 0x1F, 0x5C, 0x3E, 0x4E, 0x46, 0x04, 0x1F, 0x38, 0x81, 0x47, 0xFB, 0x4C, 0xFD, 0xB4, 0x77, 0xA5, 0x24, 0x71, 0xF7, 0xA9, 0xA9, 0x69, 0x10, 0xB8, 0x55, 0x32, 0x2E, 0xDB, 0x63, 0x40, 0xD8, 0xA0, 0x0E, 0xF0, 0x92, 0x35, 0x05, 0x11, 0xE3, 0x0A, 0xBE, 0xC1, 0xFF, 0xF9, 0xE3, 0xA2, 0x6E, 0x7F, 0xB2, 0x9F, 0x8C, 0x18, 0x30, 0x23, 0xC3, 0x58, 0x7E, 0x38, 0xDA, 0x00, 0x77, 0xD9, 0xB4, 0x76, 0x3E, 0x4E, 0x4B, 0x94, 0xB2, 0xBB, 0xC1, 0x94, 0xC6, 0x65, 0x1E, 0x77, 0xCA, 0xF9, 0x92, 0xEE, 0xAA, 0xC0, 0x23, 0x2A, 0x28, 0x1B, 0xF6, 0xB3, 0xA7, 0x39, 0xC1, 0x22, 0x61, 0x16, 0x82, 0x0A, 0xE8, 0xDB, 0x58, 0x47, 0xA6, 0x7C, 0xBE, 0xF9, 0xC9, 0x09, 0x1B, 0x46, 0x2D, 0x53, 0x8C, 0xD7, 0x2B, 0x03, 0x74, 0x6A, 0xE7, 0x7F, 0x5E, 0x62, 0x29, 0x2C, 0x31, 0x15, 0x62, 0xA8, 0x46, 0x50, 0x5D, 0xC8, 0x2D, 0xB8, 0x54, 0x33, 0x8A, 0xE4, 0x9F, 0x52, 0x35, 0xC9, 0x5B, 0x91, 0x17, 0x8C, 0xCF, 0x2D, 0xD5, 0xCA, 0xCE, 0xF4, 0x03, 0xEC, 0x9D, 0x18, 0x10, 0xC6, 0x27, 0x2B, 0x04, 0x5B, 0x3B, 0x71, 0xF9, 0xDC, 0x6B, 0x80, 0xD6, 0x3F, 0xDD, 0x4A, 0x8E, 0x9A, 0xDB, 0x1E, 0x69, 0x62, 0xA6, 0x95, 0x26, 0xD4, 0x31, 0x61, 0xC1, 0xA4, 0x1D, 0x57, 0x0D, 0x79, 0x38, 0xDA, 0xD4, 0xA4, 0x0E, 0x32, 0x9C, 0xCF, 0xF4, 0x6A, 0xAA, 0x36, 0xAD, 0x00, 0x4C, 0xF6, 0x00, 0xC8, 0x38, 0x1E, 0x42, 0x5A, 0x31, 0xD9, 0x51, 0xAE, 0x64, 0xFD, 0xB2, 0x3F, 0xCE, 0xC9, 0x50, 0x9D, 0x43, 0x68, 0x7F, 0xEB, 0x69, 0xED, 0xD1, 0xCC, 0x5E, 0x0B, 0x8C, 0xC3, 0xBD, 0xF6, 0x4B, 0x10, 0xEF, 0x86, 0xB6, 0x31, 0x42, 0xA3, 0xAB, 0x88, 0x29, 0x55, 0x5B, 0x2F, 0x74, 0x7C, 0x93, 0x26, 0x65, 0xCB, 0x2C, 0x0F, 0x1C, 0xC0, 0x1B, 0xD7, 0x02, 0x29, 0x38, 0x88, 0x39, 0xD2, 0xAF, 0x05, 0xE4, 0x54, 0x50, 0x4A, 0xC7, 0x8B, 0x75, 0x82, 0x82, 0x28, 0x46, 0xC0, 0xBA, 0x35, 0xC3, 0x5F, 0x5C, 0x59, 0x16, 0x0C, 0xC0, 0x46, 0xFD, 0x82, 0x51, 0x54, 0x1F, 0xC6, 0x8C, 0x9C, 0x86, 0xB0, 0x22, 0xBB, 0x70, 0x99, 0x87, 0x6A, 0x46, 0x0E, 0x74, 0x51, 0xA8, 0xA9, 0x31, 0x09, 0x70, 0x3F, 0xEE, 0x1C, 0x21, 0x7E, 0x6C, 0x38, 0x26, 0xE5, 0x2C, 0x51, 0xAA, 0x69, 0x1E, 0x0E, 0x42, 0x3C, 0xFC, 0x99, 0xE9, 0xE3, 0x16, 0x50, 0xC1, 0x21, 0x7B, 0x62, 0x48, 0x16, 0xCD, 0xAD, 0x9A, 0x95, 0xF9, 0xD5, 0xB8, 0x01, 0x94, 0x88, 0xD9, 0xC0, 0xA0, 0xA1, 0xFE, 0x30, 0x75, 0xA5, 0x77, 0xE2, 0x31, 0x83, 0xF8, 0x1D, 0x4A, 0x3F, 0x2F, 0xA4, 0x57, 0x1E, 0xFC, 0x8C, 0xE0, 0xBA, 0x8A, 0x4F, 0xE8, 0xB6, 0x85, 0x5D, 0xFE, 0x72, 0xB0, 0xA6, 0x6E, 0xDE, 0xD2, 0xFB, 0xAB, 0xFB, 0xE5, 0x8A, 0x30, 0xFA, 0xFA, 0xBE, 0x1C, 0x5D, 0x71, 0xA8, 0x7E, 0x2F, 0x74, 0x1E, 0xF8, 0xC1, 0xFE, 0x86, 0xFE, 0xA6, 0xBB, 0xFD, 0xE5, 0x30, 0x67, 0x7F, 0x0D, 0x97, 0xD1, 0x1D, 0x49, 0xF7, 0xA8, 0x44, 0x3D, 0x08, 0x22, 0xE5, 0x06, 0xA9, 0xF4, 0x61, 0x4E, 0x01, 0x1E, 0x2A, 0x94, 0x83, 0x8F, 0xF8, 0x8C, 0xD6, 0x8C, 0x8B, 0xB7, 0xC5, 0xC6, 0x42, 0x4C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }
# 1061 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/dhm.h"
#define MBEDTLS_DHM_RFC7919_FFDHE8192_G_BIN { 0x02 }
# 45 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecdh.h" 1
 * \file ecdh.h
 * \brief This file contains ECDH definitions and functions.
 * The Elliptic Curve Diffie-Hellman (ECDH) protocol is an anonymous
 * key agreement protocol allowing two parties to establish a shared
 * secret over an insecure channel. Each party must have an
 * elliptic-curve public
private key pair.
 * For more information, see <em>NIST SP 800-56A Rev. 2: Recommendation for
 * Pair-Wise Key Establishment Schemes Using Discrete Logarithm
 * Cryptography</em>.
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
#define MBEDTLS_ECDH_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecp.h" 1
 * \file ecp.h
 * \brief This file provides an API for Elliptic Curves over GF(P) (ECP).
 * The use of ECP in cryptography and TLS is defined in
 * <em>Standards for Efficient Cryptography Group (SECG): SEC1
 * Elliptic Curve Cryptography</em> and
 * <em>RFC-4492: Elliptic Curve Cryptography (ECC) Cipher Suites
 * for Transport Layer Security (TLS)</em>.
 * <em>RFC-2409: The Internet Key Exchange (IKE)</em> defines ECP
 * group types.
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
# 38 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecdh.h" 2
extern "C" {
 * Defines the source of the imported EC key.
typedef enum
    MBEDTLS_ECDH_OURS, /**< Our key. */
    MBEDTLS_ECDH_THEIRS, /**< The key of the peer. */
} mbedtls_ecdh_side;
 * \brief           The ECDH context structure.
typedef struct mbedtls_ecdh_context
    mbedtls_ecp_group grp; /*!< The elliptic curve used. */
    mbedtls_mpi d; /*!< The private key. */
    mbedtls_ecp_point Q; /*!< The public key. */
    mbedtls_ecp_point Qp; /*!< The value of the public key of the peer. */
    mbedtls_mpi z; /*!< The shared secret. */
    int point_format; /*!< The format of point export in TLS messages. */
    mbedtls_ecp_point Vi; /*!< The blinding value. */
    mbedtls_ecp_point Vf; /*!< The unblinding value. */
    mbedtls_mpi _d; /*!< The previous \p d. */
mbedtls_ecdh_context;
 * \brief           This function generates an ECDH keypair on an elliptic
 *                  curve.
 *                  This function performs the first of two core computations
 *                  implemented during the ECDH key exchange. The second core
 *                  computation is performed by mbedtls_ecdh_compute_shared().
 * \see             ecp.h
 * \param grp       The ECP group.
 * \param d         The destination MPI (private key).
 * \param Q         The destination point (public key).
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX or
 *                  \c MBEDTLS_MPI_XXX error code on failure.
int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng );
 * \brief           This function computes the shared secret.
 *                  This function performs the second of two core computations
 *                  implemented during the ECDH key exchange. The first core
 *                  computation is performed by mbedtls_ecdh_gen_public().
 * \see             ecp.h
 * \note            If \p f_rng is not NULL, it is used to implement
 *                  countermeasures against side-channel attacks.
 *                  For more information, see mbedtls_ecp_mul().
 * \param grp       The ECP group.
 * \param z         The destination MPI (shared secret).
 * \param Q         The public key from another party.
 * \param d         Our secret exponent (private key).
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX or
 *                  \c MBEDTLS_MPI_XXX error code on failure.
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng );
 * \brief           This function initializes an ECDH context.
 * \param ctx       The ECDH context to initialize.
void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx );
 * \brief           This function frees a context.
 * \param ctx       The context to free.
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx );
 * \brief           This function generates a public key and a TLS
 *                  ServerKeyExchange payload.
 *                  This is the first function used by a TLS server for ECDHE
 *                  ciphersuites.
 * \note            This function assumes that the ECP group (grp) of the
 *                  \p ctx context has already been properly set,
 *                  for example, using mbedtls_ecp_group_load().
 * \see             ecp.h
 * \param ctx       The ECDH context.
 * \param olen      The number of characters written.
 * \param buf       The destination buffer.
 * \param blen      The length of the destination buffer.
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX error code on failure.
int mbedtls_ecdh_make_params( mbedtls_ecdh_context *ctx, size_t *olen,
                      unsigned char *buf, size_t blen,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng );
 * \brief           This function parses and processes a TLS ServerKeyExhange
 *                  payload.
 *                  This is the first function used by a TLS client for ECDHE
 *                  ciphersuites.
 * \see             ecp.h
 * \param ctx       The ECDH context.
 * \param buf       The pointer to the start of the input buffer.
 * \param end       The address for one Byte past the end of the buffer.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX error code on failure.
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                      const unsigned char **buf, const unsigned char *end );
 * \brief           This function sets up an ECDH context from an EC key.
 *                  It is used by clients and servers in place of the
 *                  ServerKeyEchange for static ECDH, and imports ECDH
 *                  parameters from the EC key information of a certificate.
 * \see             ecp.h
 * \param ctx       The ECDH context to set up.
 * \param key       The EC key to use.
 * \param side      Defines the source of the key: 1: Our key, or
 *                  0: The key of the peer.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX error code on failure.
int mbedtls_ecdh_get_params( mbedtls_ecdh_context *ctx, const mbedtls_ecp_keypair *key,
                     mbedtls_ecdh_side side );
 * \brief           This function generates a public key and a TLS
 *                  ClientKeyExchange payload.
 *                  This is the second function used by a TLS client for ECDH(E)
 *                  ciphersuites.
 * \see             ecp.h
 * \param ctx       The ECDH context.
 * \param olen      The number of Bytes written.
 * \param buf       The destination buffer.
 * \param blen      The size of the destination buffer.
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX error code on failure.
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                      unsigned char *buf, size_t blen,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng );
 * \brief       This function parses and processes a TLS ClientKeyExchange
 *              payload.
 *              This is the second function used by a TLS server for ECDH(E)
 *              ciphersuites.
 * \see         ecp.h
 * \param ctx   The ECDH context.
 * \param buf   The start of the input buffer.
 * \param blen  The length of the input buffer.
 * \return      \c 0 on success.
 * \return      An \c MBEDTLS_ERR_ECP_XXX error code on failure.
int mbedtls_ecdh_read_public( mbedtls_ecdh_context *ctx,
                      const unsigned char *buf, size_t blen );
 * \brief           This function derives and exports the shared secret.
 *                  This is the last function used by both TLS client
 *                  and servers.
 * \note            If \p f_rng is not NULL, it is used to implement
 *                  countermeasures against side-channel attacks.
 *                  For more information, see mbedtls_ecp_mul().
 * \see             ecp.h
 * \param ctx       The ECDH context.
 * \param olen      The number of Bytes written.
 * \param buf       The destination buffer.
 * \param blen      The length of the destination buffer.
 * \param f_rng     The RNG function.
 * \param p_rng     The RNG context.
 * \return          \c 0 on success.
 * \return          An \c MBEDTLS_ERR_ECP_XXX error code on failure.
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                      unsigned char *buf, size_t blen,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng );
# 49 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h" 2
# 65 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/platform_time.h" 1
 * \file platform_time.h
 * \brief mbed TLS Platform time abstraction
 *  Copyright (C) 2006-2016, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 66 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h" 2
 * SSL Error codes
#define MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE -0x7080 /**< The requested feature is not available. */
#define MBEDTLS_ERR_SSL_BAD_INPUT_DATA -0x7100 /**< Bad input parameters to function. */
#define MBEDTLS_ERR_SSL_INVALID_MAC -0x7180 /**< Verification of the message MAC failed. */
#define MBEDTLS_ERR_SSL_INVALID_RECORD -0x7200 /**< An invalid SSL record was received. */
#define MBEDTLS_ERR_SSL_CONN_EOF -0x7280 /**< The connection indicated an EOF. */
#define MBEDTLS_ERR_SSL_UNKNOWN_CIPHER -0x7300 /**< An unknown cipher was received. */
#define MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN -0x7380 /**< The server has no ciphersuites in common with the client. */
#define MBEDTLS_ERR_SSL_NO_RNG -0x7400 /**< No RNG was provided to the SSL module. */
#define MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE -0x7480 /**< No client certification received from the client, but required by the authentication mode. */
#define MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE -0x7500 /**< Our own certificate(s) is/are too large to send in an SSL message. */
#define MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED -0x7580 /**< The own certificate is not set, but needed by the server. */
#define MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED -0x7600 /**< The own private key or pre-shared key is not set, but needed. */
#define MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED -0x7680 /**< No CA Chain is set, but required to operate. */
#define MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE -0x7700 /**< An unexpected message was received from our peer. */
#define MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE -0x7780 /**< A fatal alert message was received from our peer. */
#define MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED -0x7800 /**< Verification of our peer failed. */
#define MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY -0x7880 /**< The peer notified us that the connection is going to be closed. */
#define MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO -0x7900 /**< Processing of the ClientHello handshake message failed. */
#define MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO -0x7980 /**< Processing of the ServerHello handshake message failed. */
#define MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE -0x7A00 /**< Processing of the Certificate handshake message failed. */
#define MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST -0x7A80 /**< Processing of the CertificateRequest handshake message failed. */
#define MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE -0x7B00 /**< Processing of the ServerKeyExchange handshake message failed. */
#define MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE -0x7B80 /**< Processing of the ServerHelloDone handshake message failed. */
#define MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE -0x7C00 /**< Processing of the ClientKeyExchange handshake message failed. */
#define MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP -0x7C80 /**< Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Read Public. */
#define MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS -0x7D00 /**< Processing of the ClientKeyExchange handshake message failed in DHM / ECDH Calculate Secret. */
#define MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY -0x7D80 /**< Processing of the CertificateVerify handshake message failed. */
#define MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC -0x7E00 /**< Processing of the ChangeCipherSpec handshake message failed. */
#define MBEDTLS_ERR_SSL_BAD_HS_FINISHED -0x7E80 /**< Processing of the Finished handshake message failed. */
#define MBEDTLS_ERR_SSL_ALLOC_FAILED -0x7F00 /**< Memory allocation failed */
#define MBEDTLS_ERR_SSL_HW_ACCEL_FAILED -0x7F80 /**< Hardware acceleration function returned with error */
#define MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH -0x6F80 /**< Hardware acceleration function skipped / left alone data */
#define MBEDTLS_ERR_SSL_COMPRESSION_FAILED -0x6F00 /**< Processing of the compression / decompression failed */
#define MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION -0x6E80 /**< Handshake protocol not within min/max boundaries */
#define MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET -0x6E00 /**< Processing of the NewSessionTicket handshake message failed. */
#define MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED -0x6D80 /**< Session ticket has expired. */
#define MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH -0x6D00 /**< Public key type mismatch (eg, asked for RSA key exchange and presented EC key) */
#define MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY -0x6C80 /**< Unknown identity received (eg, PSK identity) */
#define MBEDTLS_ERR_SSL_INTERNAL_ERROR -0x6C00 /**< Internal error (eg, unexpected failure in lower-level module) */
#define MBEDTLS_ERR_SSL_COUNTER_WRAPPING -0x6B80 /**< A counter would wrap (eg, too many messages exchanged). */
#define MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO -0x6B00 /**< Unexpected message at ServerHello in renegotiation. */
#define MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED -0x6A80 /**< DTLS client must retry for hello verification */
#define MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL -0x6A00 /**< A buffer is too small to receive or write a message */
#define MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE -0x6980 /**< None of the common ciphersuites is usable (eg, no suitable certificate, see debug messages). */
#define MBEDTLS_ERR_SSL_WANT_READ -0x6900 /**< No data of requested type currently available on underlying transport. */
#define MBEDTLS_ERR_SSL_WANT_WRITE -0x6880 /**< Connection requires a write call. */
#define MBEDTLS_ERR_SSL_TIMEOUT -0x6800 /**< The operation timed out. */
#define MBEDTLS_ERR_SSL_CLIENT_RECONNECT -0x6780 /**< The client initiated a reconnect from the same port. */
#define MBEDTLS_ERR_SSL_UNEXPECTED_RECORD -0x6700 /**< Record header looks valid but is not expected. */
#define MBEDTLS_ERR_SSL_NON_FATAL -0x6680 /**< The alert message received indicates a non-fatal error. */
#define MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH -0x6600 /**< Couldn't set the hash for verifying CertificateVerify */
#define MBEDTLS_ERR_SSL_CONTINUE_PROCESSING -0x6580 /**< Internal-only message signaling that further message-processing should be done */
#define MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS -0x6500 /**< The asynchronous operation is not completed yet. */
#define MBEDTLS_ERR_SSL_EARLY_MESSAGE -0x6480 /**< Internal-only message signaling that a message arrived early. */
 * Various constants
#define MBEDTLS_SSL_MAJOR_VERSION_3 3
#define MBEDTLS_SSL_MINOR_VERSION_0 0 /*!< SSL v3.0 */
#define MBEDTLS_SSL_MINOR_VERSION_1 1 /*!< TLS v1.0 */
#define MBEDTLS_SSL_MINOR_VERSION_2 2 /*!< TLS v1.1 */
#define MBEDTLS_SSL_MINOR_VERSION_3 3 /*!< TLS v1.2 */
#define MBEDTLS_SSL_TRANSPORT_STREAM 0 /*!< TLS      */
#define MBEDTLS_SSL_TRANSPORT_DATAGRAM 1 /*!< DTLS     */
#define MBEDTLS_SSL_MAX_HOST_NAME_LEN 255 /*!< Maximum host name defined in RFC 1035 */
/* RFC 6066 section 4, see also mfl_code_to_length in ssl_tls.c
 * NONE must be zero so that memset()ing structure to zero works */
#define MBEDTLS_SSL_MAX_FRAG_LEN_NONE 0 /*!< don't use this extension   */
#define MBEDTLS_SSL_MAX_FRAG_LEN_512 1 /*!< MaxFragmentLength 2^9      */
#define MBEDTLS_SSL_MAX_FRAG_LEN_1024 2 /*!< MaxFragmentLength 2^10     */
#define MBEDTLS_SSL_MAX_FRAG_LEN_2048 3 /*!< MaxFragmentLength 2^11     */
#define MBEDTLS_SSL_MAX_FRAG_LEN_4096 4 /*!< MaxFragmentLength 2^12     */
#define MBEDTLS_SSL_MAX_FRAG_LEN_INVALID 5 /*!< first invalid value        */
#define MBEDTLS_SSL_IS_CLIENT 0
#define MBEDTLS_SSL_IS_SERVER 1
#define MBEDTLS_SSL_IS_NOT_FALLBACK 0
#define MBEDTLS_SSL_IS_FALLBACK 1
#define MBEDTLS_SSL_EXTENDED_MS_DISABLED 0
#define MBEDTLS_SSL_EXTENDED_MS_ENABLED 1
#define MBEDTLS_SSL_ETM_DISABLED 0
#define MBEDTLS_SSL_ETM_ENABLED 1
#define MBEDTLS_SSL_COMPRESS_NULL 0
#define MBEDTLS_SSL_COMPRESS_DEFLATE 1
#define MBEDTLS_SSL_VERIFY_NONE 0
#define MBEDTLS_SSL_VERIFY_OPTIONAL 1
#define MBEDTLS_SSL_VERIFY_REQUIRED 2
#define MBEDTLS_SSL_VERIFY_UNSET 3 /* Used only for sni_authmode */
#define MBEDTLS_SSL_LEGACY_RENEGOTIATION 0
#define MBEDTLS_SSL_SECURE_RENEGOTIATION 1
#define MBEDTLS_SSL_RENEGOTIATION_DISABLED 0
#define MBEDTLS_SSL_RENEGOTIATION_ENABLED 1
#define MBEDTLS_SSL_ANTI_REPLAY_DISABLED 0
#define MBEDTLS_SSL_ANTI_REPLAY_ENABLED 1
#define MBEDTLS_SSL_RENEGOTIATION_NOT_ENFORCED -1
#define MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT 16
#define MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION 0
#define MBEDTLS_SSL_LEGACY_ALLOW_RENEGOTIATION 1
#define MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE 2
#define MBEDTLS_SSL_TRUNC_HMAC_DISABLED 0
#define MBEDTLS_SSL_TRUNC_HMAC_ENABLED 1
#define MBEDTLS_SSL_TRUNCATED_HMAC_LEN 10 /* 80 bits, rfc 6066 section 7 */
#define MBEDTLS_SSL_SESSION_TICKETS_DISABLED 0
#define MBEDTLS_SSL_SESSION_TICKETS_ENABLED 1
#define MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED 0
#define MBEDTLS_SSL_CBC_RECORD_SPLITTING_ENABLED 1
#define MBEDTLS_SSL_ARC4_ENABLED 0
#define MBEDTLS_SSL_ARC4_DISABLED 1
#define MBEDTLS_SSL_PRESET_DEFAULT 0
#define MBEDTLS_SSL_PRESET_SUITEB 2
#define MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED 1
#define MBEDTLS_SSL_CERT_REQ_CA_LIST_DISABLED 0
 * Default range for DTLS retransmission timer value, in milliseconds.
 * RFC 6347 4.2.4.1 says from 1 second to 60 seconds.
#define MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN 1000
#define MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX 60000
 * \name SECTION: Module settings
 * The configuration options you can set for this module are in this section.
 * Either change them in config.h or define them on the compiler command line.
 * \{
#define MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME 86400 /**< Lifetime of session tickets (if enabled) */
 * Maximum fragment length in bytes,
 * determines the size of each of the two internal I/O buffers.
 * Note: the RFC defines the default size of SSL / TLS messages. If you
 * change the value here, other clients / servers may not be able to
 * communicate with you anymore. Only change this value if you control
 * both sides of the connection and have it reduced at both sides, or
 * if you're using the Max Fragment Length extension and you know all your
 * peers are using it too!
#define MBEDTLS_SSL_IN_CONTENT_LEN MBEDTLS_SSL_MAX_CONTENT_LEN
#define MBEDTLS_SSL_OUT_CONTENT_LEN MBEDTLS_SSL_MAX_CONTENT_LEN
 * Maximum number of heap-allocated bytes for the purpose of
 * DTLS handshake message reassembly and future message buffering.
#define MBEDTLS_SSL_DTLS_MAX_BUFFERING 32768
/* \} name SECTION: Module settings */
 * Length of the verify data for secure renegotiation
#define MBEDTLS_SSL_VERIFY_DATA_MAX_LEN 12
 * Signaling ciphersuite values (SCSV)
#define MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO 0xFF /**< renegotiation info ext */
#define MBEDTLS_SSL_FALLBACK_SCSV_VALUE 0x5600 /**< RFC 7507 section 2 */
 * Supported Signature and Hash algorithms (For TLS 1.2)
 * RFC 5246 section 7.4.1.4.1
#define MBEDTLS_SSL_HASH_NONE 0
#define MBEDTLS_SSL_HASH_MD5 1
#define MBEDTLS_SSL_HASH_SHA1 2
#define MBEDTLS_SSL_HASH_SHA224 3
#define MBEDTLS_SSL_HASH_SHA256 4
#define MBEDTLS_SSL_HASH_SHA384 5
#define MBEDTLS_SSL_HASH_SHA512 6
#define MBEDTLS_SSL_SIG_ANON 0
#define MBEDTLS_SSL_SIG_RSA 1
#define MBEDTLS_SSL_SIG_ECDSA 3
 * Client Certificate Types
 * RFC 5246 section 7.4.4 plus RFC 4492 section 5.5
#define MBEDTLS_SSL_CERT_TYPE_RSA_SIGN 1
#define MBEDTLS_SSL_CERT_TYPE_ECDSA_SIGN 64
 * Message, alert and handshake types
#define MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC 20
#define MBEDTLS_SSL_MSG_ALERT 21
#define MBEDTLS_SSL_MSG_HANDSHAKE 22
#define MBEDTLS_SSL_MSG_APPLICATION_DATA 23
#define MBEDTLS_SSL_ALERT_LEVEL_WARNING 1
#define MBEDTLS_SSL_ALERT_LEVEL_FATAL 2
#define MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY 0 /* 0x00 */
#define MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE 10 /* 0x0A */
#define MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC 20 /* 0x14 */
#define MBEDTLS_SSL_ALERT_MSG_DECRYPTION_FAILED 21 /* 0x15 */
#define MBEDTLS_SSL_ALERT_MSG_RECORD_OVERFLOW 22 /* 0x16 */
#define MBEDTLS_SSL_ALERT_MSG_DECOMPRESSION_FAILURE 30 /* 0x1E */
#define MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE 40 /* 0x28 */
#define MBEDTLS_SSL_ALERT_MSG_NO_CERT 41 /* 0x29 */
#define MBEDTLS_SSL_ALERT_MSG_BAD_CERT 42 /* 0x2A */
#define MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT 43 /* 0x2B */
#define MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED 44 /* 0x2C */
#define MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED 45 /* 0x2D */
#define MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN 46 /* 0x2E */
#define MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER 47 /* 0x2F */
#define MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA 48 /* 0x30 */
#define MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED 49 /* 0x31 */
#define MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR 50 /* 0x32 */
#define MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR 51 /* 0x33 */
#define MBEDTLS_SSL_ALERT_MSG_EXPORT_RESTRICTION 60 /* 0x3C */
#define MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION 70 /* 0x46 */
#define MBEDTLS_SSL_ALERT_MSG_INSUFFICIENT_SECURITY 71 /* 0x47 */
#define MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR 80 /* 0x50 */
#define MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK 86 /* 0x56 */
#define MBEDTLS_SSL_ALERT_MSG_USER_CANCELED 90 /* 0x5A */
#define MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION 100 /* 0x64 */
#define MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_EXT 110 /* 0x6E */
#define MBEDTLS_SSL_ALERT_MSG_UNRECOGNIZED_NAME 112 /* 0x70 */
#define MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY 115 /* 0x73 */
#define MBEDTLS_SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL 120 /* 0x78 */
#define MBEDTLS_SSL_HS_HELLO_REQUEST 0
#define MBEDTLS_SSL_HS_CLIENT_HELLO 1
#define MBEDTLS_SSL_HS_SERVER_HELLO 2
#define MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST 3
#define MBEDTLS_SSL_HS_NEW_SESSION_TICKET 4
#define MBEDTLS_SSL_HS_CERTIFICATE 11
#define MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE 12
#define MBEDTLS_SSL_HS_CERTIFICATE_REQUEST 13
#define MBEDTLS_SSL_HS_SERVER_HELLO_DONE 14
#define MBEDTLS_SSL_HS_CERTIFICATE_VERIFY 15
#define MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE 16
#define MBEDTLS_SSL_HS_FINISHED 20
 * TLS extensions
#define MBEDTLS_TLS_EXT_SERVERNAME 0
#define MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME 0
#define MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH 1
#define MBEDTLS_TLS_EXT_TRUNCATED_HMAC 4
#define MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES 10
#define MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS 11
#define MBEDTLS_TLS_EXT_SIG_ALG 13
#define MBEDTLS_TLS_EXT_ALPN 16
#define MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC 22 /* 0x16 */
#define MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET 0x0017 /* 23 */
#define MBEDTLS_TLS_EXT_SESSION_TICKET 35
#define MBEDTLS_TLS_EXT_ECJPAKE_KKPP 256 /* experimental */
#define MBEDTLS_TLS_EXT_RENEGOTIATION_INFO 0xFF01
 * Size defines
#define MBEDTLS_PSK_MAX_LEN 32 /* 256 bits */
/* Dummy type used only for its size */
union mbedtls_ssl_premaster_secret
    unsigned char _pms_rsa[48]; /* RFC 5246 8.1.1 */
    unsigned char _pms_dhm[1024 /**< Maximum number of bytes for usable MPIs. */]; /* RFC 5246 8.1.2 */
    unsigned char _pms_ecdh[( ( 521 /**< The maximum size of groups, in bits. */ + 7 ) / 8 )]; /* RFC 4492 5.10 */
    unsigned char _pms_psk[4 + 2 * 32 /* 256 bits */]; /* RFC 4279 2 */
    unsigned char _pms_dhe_psk[4 + 1024 /**< Maximum number of bytes for usable MPIs. */
                                 + 32 /* 256 bits */]; /* RFC 4279 3 */
    unsigned char _pms_rsa_psk[52 + 32 /* 256 bits */]; /* RFC 4279 4 */
    unsigned char _pms_ecdhe_psk[4 + ( ( 521 /**< The maximum size of groups, in bits. */ + 7 ) / 8 )
                                   + 32 /* 256 bits */]; /* RFC 5489 2 */
#define MBEDTLS_PREMASTER_SIZE sizeof( union mbedtls_ssl_premaster_secret )
extern "C" {
 * SSL state machine
typedef enum
    MBEDTLS_SSL_HELLO_REQUEST,
    MBEDTLS_SSL_CLIENT_HELLO,
    MBEDTLS_SSL_SERVER_HELLO,
    MBEDTLS_SSL_SERVER_CERTIFICATE,
    MBEDTLS_SSL_SERVER_KEY_EXCHANGE,
    MBEDTLS_SSL_CERTIFICATE_REQUEST,
    MBEDTLS_SSL_SERVER_HELLO_DONE,
    MBEDTLS_SSL_CLIENT_CERTIFICATE,
    MBEDTLS_SSL_CLIENT_KEY_EXCHANGE,
    MBEDTLS_SSL_CERTIFICATE_VERIFY,
    MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC,
    MBEDTLS_SSL_CLIENT_FINISHED,
    MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC,
    MBEDTLS_SSL_SERVER_FINISHED,
    MBEDTLS_SSL_FLUSH_BUFFERS,
    MBEDTLS_SSL_HANDSHAKE_WRAPUP,
    MBEDTLS_SSL_HANDSHAKE_OVER,
    MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET,
    MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT,
mbedtls_ssl_states;
 * \brief          Callback type: send data on the network.
 * \note           That callback may be either blocking or non-blocking.
 * \param ctx      Context for the send callback (typically a file descriptor)
 * \param buf      Buffer holding the data to send
 * \param len      Length of the data to send
 * \return         The callback must return the number of bytes sent if any,
 *                 or a non-zero error code.
 *                 If performing non-blocking I/O, \c MBEDTLS_ERR_SSL_WANT_WRITE
 *                 must be returned when the operation would block.
 * \note           The callback is allowed to send fewer bytes than requested.
 *                 It must always return the number of bytes actually sent.
typedef int mbedtls_ssl_send_t( void *ctx,
                                const unsigned char *buf,
                                size_t len );
 * \brief          Callback type: receive data from the network.
 * \note           That callback may be either blocking or non-blocking.
 * \param ctx      Context for the receive callback (typically a file
 *                 descriptor)
 * \param buf      Buffer to write the received data to
 * \param len      Length of the receive buffer
 * \return         The callback must return the number of bytes received,
 *                 or a non-zero error code.
 *                 If performing non-blocking I/O, \c MBEDTLS_ERR_SSL_WANT_READ
 *                 must be returned when the operation would block.
 * \note           The callback may receive fewer bytes than the length of the
 *                 buffer. It must always return the number of bytes actually
 *                 received and written to the buffer.
typedef int mbedtls_ssl_recv_t( void *ctx,
                                unsigned char *buf,
                                size_t len );
 * \brief          Callback type: receive data from the network, with timeout
 * \note           That callback must block until data is received, or the
 *                 timeout delay expires, or the operation is interrupted by a
 *                 signal.
 * \param ctx      Context for the receive callback (typically a file descriptor)
 * \param buf      Buffer to write the received data to
 * \param len      Length of the receive buffer
 * \param timeout  Maximum nomber of millisecondes to wait for data
 *                 0 means no timeout (potentially waiting forever)
 * \return         The callback must return the number of bytes received,
 *                 or a non-zero error code:
 *                 \c MBEDTLS_ERR_SSL_TIMEOUT if the operation timed out,
 *                 \c MBEDTLS_ERR_SSL_WANT_READ if interrupted by a signal.
 * \note           The callback may receive fewer bytes than the length of the
 *                 buffer. It must always return the number of bytes actually
 *                 received and written to the buffer.
typedef int mbedtls_ssl_recv_timeout_t( void *ctx,
                                        unsigned char *buf,
                                        size_t len,
                                        uint32_t timeout );
 * \brief          Callback type: set a pair of timers/delays to watch
 * \param ctx      Context pointer
 * \param int_ms   Intermediate delay in milliseconds
 * \param fin_ms   Final delay in milliseconds
 *                 0 cancels the current timer.
 * \note           This callback must at least store the necessary information
 *                 for the associated \c mbedtls_ssl_get_timer_t callback to
 *                 return correct information.
 * \note           If using a event-driven style of programming, an event must
 *                 be generated when the final delay is passed. The event must
 *                 cause a call to \c mbedtls_ssl_handshake() with the proper
 *                 SSL context to be scheduled. Care must be taken to ensure
 *                 that at most one such call happens at a time.
 * \note           Only one timer at a time must be running. Calling this
 *                 function while a timer is running must cancel it. Cancelled
 *                 timers must not generate any event.
typedef void mbedtls_ssl_set_timer_t( void * ctx,
                                      uint32_t int_ms,
                                      uint32_t fin_ms );
 * \brief          Callback type: get status of timers/delays
 * \param ctx      Context pointer
 * \return         This callback must return:
 *                 -1 if cancelled (fin_ms == 0),
 *                  0 if none of the delays have passed,
 *                  1 if only the intermediate delay has passed,
 *                  2 if the final delay has passed.
typedef int mbedtls_ssl_get_timer_t( void * ctx );
/* Defined below */
typedef struct mbedtls_ssl_session mbedtls_ssl_session;
typedef struct mbedtls_ssl_context mbedtls_ssl_context;
typedef struct mbedtls_ssl_config mbedtls_ssl_config;
/* Defined in ssl_internal.h */
typedef struct mbedtls_ssl_transform mbedtls_ssl_transform;
typedef struct mbedtls_ssl_handshake_params mbedtls_ssl_handshake_params;
typedef struct mbedtls_ssl_sig_hash_set_t mbedtls_ssl_sig_hash_set_t;
typedef struct mbedtls_ssl_key_cert mbedtls_ssl_key_cert;
# 785 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
 * This structure is used for storing current session data.
struct mbedtls_ssl_session
    mbedtls_time_t start; /*!< starting time      */
    int ciphersuite; /*!< chosen ciphersuite */
    int compression; /*!< chosen compression */
    size_t id_len; /*!< session id length  */
    unsigned char id[32]; /*!< session identifier */
    unsigned char master[48]; /*!< the master secret  */
    mbedtls_x509_crt *peer_cert; /*!< peer X.509 cert chain */
    uint32_t verify_result; /*!<  verification result     */
    unsigned char *ticket; /*!< RFC 5077 session ticket */
    size_t ticket_len; /*!< session ticket length   */
    uint32_t ticket_lifetime; /*!< ticket lifetime hint    */
    unsigned char mfl_code; /*!< MaxFragmentLength negotiated by peer */
    int trunc_hmac; /*!< flag for truncated hmac activation   */
    int encrypt_then_mac; /*!< flag for EtM activation                */
 * SSL/TLS configuration to be shared between mbedtls_ssl_context structures.
struct mbedtls_ssl_config
    /* Group items by size (largest first) to minimize padding overhead */
    /*
     * Pointers
     */
    const int *ciphersuite_list[4]; /*!< allowed ciphersuites per version   */
    /** Callback for printing debug output                                  */
    void (*f_dbg)(void *, int, const char *, int, const char *);
    void *p_dbg; /*!< context for the debug function     */
    /** Callback for getting (pseudo-)random numbers                        */
    int (*f_rng)(void *, unsigned char *, size_t);
    void *p_rng; /*!< context for the RNG function       */
    /** Callback to retrieve a session from the cache                       */
    int (*f_get_cache)(void *, mbedtls_ssl_session *);
    /** Callback to store a session into the cache                          */
    int (*f_set_cache)(void *, const mbedtls_ssl_session *);
    void *p_cache; /*!< context for cache callbacks        */
    /** Callback for setting cert according to SNI extension                */
    int (*f_sni)(void *, mbedtls_ssl_context *, const unsigned char *, size_t);
    void *p_sni; /*!< context for SNI callback           */
    /** Callback to customize X.509 certificate chain verification          */
    int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *);
    void *p_vrfy; /*!< context for X.509 verify calllback */
    /** Callback to retrieve PSK key from identity                          */
    int (*f_psk)(void *, mbedtls_ssl_context *, const unsigned char *, size_t);
    void *p_psk; /*!< context for PSK callback           */
# 879 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
    /** Callback to create & write a session ticket                         */
    int (*f_ticket_write)( void *, const mbedtls_ssl_session *,
            unsigned char *, const unsigned char *, size_t *, uint32_t * );
    /** Callback to parse a session ticket into a session structure         */
    int (*f_ticket_parse)( void *, mbedtls_ssl_session *, unsigned char *, size_t);
    void *p_ticket; /*!< context for the ticket callbacks   */
    /** Callback to export key block and master secret                      */
    int (*f_export_keys)( void *, const unsigned char *,
            const unsigned char *, size_t, size_t, size_t );
    void *p_export_keys; /*!< context for key export callback    */
    const mbedtls_x509_crt_profile *cert_profile; /*!< verification profile */
    mbedtls_ssl_key_cert *key_cert; /*!< own certificate/key pair(s)        */
    mbedtls_x509_crt *ca_chain; /*!< trusted CAs                        */
    mbedtls_x509_crl *ca_crl; /*!< trusted CAs CRLs                   */
# 912 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
    const int *sig_hashes; /*!< allowed signature hashes           */
    const mbedtls_ecp_group_id *curve_list; /*!< allowed curves             */
    mbedtls_mpi dhm_P; /*!< prime modulus for DHM              */
    mbedtls_mpi dhm_G; /*!< generator for DHM                  */
    unsigned char *psk; /*!< pre-shared key. This field should
                                         only be set via
                                         mbedtls_ssl_conf_psk() */
    size_t psk_len; /*!< length of the pre-shared key. This
                                         field should only be set via
                                         mbedtls_ssl_conf_psk() */
    unsigned char *psk_identity; /*!< identity for PSK negotiation. This
                                         field should only be set via
                                         mbedtls_ssl_conf_psk() */
    size_t psk_identity_len;/*!< length of identity. This field should
                                         only be set via
                                         mbedtls_ssl_conf_psk() */
    const char **alpn_list; /*!< ordered list of protocols          */
    /*
     * Numerical settings (int then char)
     */
    uint32_t read_timeout; /*!< timeout for mbedtls_ssl_read (ms)  */
# 957 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
    int renego_max_records; /*!< grace period for renegotiation     */
    unsigned char renego_period[8]; /*!< value of the record counters
                                         that triggers renegotiation        */
    unsigned int dhm_min_bitlen; /*!< min. bit length of the DHM prime   */
    unsigned char max_major_ver; /*!< max. major version used            */
    unsigned char max_minor_ver; /*!< max. minor version used            */
    unsigned char min_major_ver; /*!< min. major version used            */
    unsigned char min_minor_ver; /*!< min. minor version used            */
    /*
     * Flags (bitfields)
     */
    unsigned int endpoint : 1; /*!< 0: client, 1: server               */
    unsigned int transport : 1; /*!< stream (TLS) or datagram (DTLS)    */
    unsigned int authmode : 2; /*!< MBEDTLS_SSL_VERIFY_XXX             */
    /* needed even with renego disabled for LEGACY_BREAK_HANDSHAKE          */
    unsigned int allow_legacy_renegotiation : 2 ; /*!< MBEDTLS_LEGACY_XXX   */
    unsigned int mfl_code : 3; /*!< desired fragment length            */
    unsigned int encrypt_then_mac : 1 ; /*!< negotiate encrypt-then-mac?    */
    unsigned int extended_ms : 1; /*!< negotiate extended master secret?  */
# 1003 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
    unsigned int disable_renegotiation : 1; /*!< disable renegotiation?     */
    unsigned int trunc_hmac : 1; /*!< negotiate truncated hmac?          */
    unsigned int session_tickets : 1; /*!< use session tickets?           */
    unsigned int fallback : 1; /*!< is this a fallback?                */
    unsigned int cert_req_ca_list : 1; /*!< enable sending CA list in
                                          Certificate Request messages?     */
struct mbedtls_ssl_context
    const mbedtls_ssl_config *conf; /*!< configuration information          */
    /*
     * Miscellaneous
     */
    int state; /*!< SSL handshake: current state     */
    int renego_status; /*!< Initial, in progress, pending?   */
    int renego_records_seen; /*!< Records since renego request, or with DTLS,
                                  number of retransmissions of request if
                                  renego_max_records is < 0           */
    int major_ver; /*!< equal to  MBEDTLS_SSL_MAJOR_VERSION_3    */
    int minor_ver; /*!< either 0 (SSL3) or 1 (TLS1.0)    */
    mbedtls_ssl_send_t *f_send; /*!< Callback for network send */
    mbedtls_ssl_recv_t *f_recv; /*!< Callback for network receive */
    mbedtls_ssl_recv_timeout_t *f_recv_timeout;
                                /*!< Callback for network receive with timeout */
    void *p_bio; /*!< context for I/O operations   */
    /*
     * Session layer
     */
    mbedtls_ssl_session *session_in; /*!<  current session data (in)   */
    mbedtls_ssl_session *session_out; /*!<  current session data (out)  */
    mbedtls_ssl_session *session; /*!<  negotiated session data     */
    mbedtls_ssl_session *session_negotiate; /*!<  session data in negotiation */
    mbedtls_ssl_handshake_params *handshake; /*!<  params required only during
                                              the handshake process        */
    /*
     * Record layer transformations
     */
    mbedtls_ssl_transform *transform_in; /*!<  current transform params (in)   */
    mbedtls_ssl_transform *transform_out; /*!<  current transform params (in)   */
    mbedtls_ssl_transform *transform; /*!<  negotiated transform params     */
    mbedtls_ssl_transform *transform_negotiate; /*!<  transform params in negotiation */
    /*
     * Timers
     */
    void *p_timer; /*!< context for the timer callbacks */
    mbedtls_ssl_set_timer_t *f_set_timer; /*!< set timer callback */
    mbedtls_ssl_get_timer_t *f_get_timer; /*!< get timer callback */
    /*
     * Record layer (incoming data)
     */
    unsigned char *in_buf; /*!< input buffer                     */
    unsigned char *in_ctr; /*!< 64-bit incoming message counter
                                     TLS: maintained by us
                                     DTLS: read from peer             */
    unsigned char *in_hdr; /*!< start of record header           */
    unsigned char *in_len; /*!< two-bytes message length field   */
    unsigned char *in_iv; /*!< ivlen-byte IV                    */
    unsigned char *in_msg; /*!< message contents (in_iv+ivlen)   */
    unsigned char *in_offt; /*!< read offset in application data  */
    int in_msgtype; /*!< record header: message type      */
    size_t in_msglen; /*!< record header: message length    */
    size_t in_left; /*!< amount of data read so far       */
# 1103 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
    size_t in_hslen; /*!< current handshake message length,
                                     including the handshake header   */
    int nb_zero; /*!< # of 0-length encrypted messages */
    int keep_current_message; /*!< drop or reuse current message
                                     on next call to record layer? */
    /*
     * Record layer (outgoing data)
     */
    unsigned char *out_buf; /*!< output buffer                    */
    unsigned char *out_ctr; /*!< 64-bit outgoing message counter  */
    unsigned char *out_hdr; /*!< start of record header           */
    unsigned char *out_len; /*!< two-bytes message length field   */
    unsigned char *out_iv; /*!< ivlen-byte IV                    */
    unsigned char *out_msg; /*!< message contents (out_iv+ivlen)  */
    int out_msgtype; /*!< record header: message type      */
    size_t out_msglen; /*!< record header: message length    */
    size_t out_left; /*!< amount of data not yet written   */
    unsigned char cur_out_ctr[8]; /*!<  Outgoing record sequence  number. */
# 1142 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
    /*
     * PKI layer
     */
    int client_auth; /*!<  flag for client auth.   */
    /*
     * User settings
     */
    char *hostname; /*!< expected peer CN for verification
                                     (and SNI if available)                 */
    const char *alpn_chosen; /*!<  negotiated protocol                   */
    /*
     * Information for DTLS hello verify
     */
    /*
     * Secure renegotiation
     */
    /* needed to know when to send extension on server */
    int secure_renegotiation; /*!<  does peer support legacy or
                                              secure renegotiation           */
    size_t verify_data_len; /*!<  length of verify data stored   */
    char own_verify_data[12]; /*!<  previous handshake verify data */
    char peer_verify_data[12]; /*!<  previous handshake verify data */
# 1199 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
 * \brief               Return the name of the ciphersuite associated with the
 *                      given ID
 * \param ciphersuite_id SSL ciphersuite ID
 * \return              a string containing the ciphersuite name
const char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id );
 * \brief               Return the ID of the ciphersuite associated with the
 *                      given name
 * \param ciphersuite_name SSL ciphersuite name
 * \return              the ID with the ciphersuite or 0 if not found
int mbedtls_ssl_get_ciphersuite_id( const char *ciphersuite_name );
 * \brief          Initialize an SSL context
 *                 Just makes the context ready for mbedtls_ssl_setup() or
 *                 mbedtls_ssl_free()
 * \param ssl      SSL context
void mbedtls_ssl_init( mbedtls_ssl_context *ssl );
 * \brief          Set up an SSL context for use
 * \note           No copy of the configuration context is made, it can be
 *                 shared by many mbedtls_ssl_context structures.
 * \warning        The conf structure will be accessed during the session.
 *                 It must not be modified or freed as long as the session
 *                 is active.
 * \warning        This function must be called exactly once per context.
 *                 Calling mbedtls_ssl_setup again is not supported, even
 *                 if no session is active.
 * \param ssl      SSL context
 * \param conf     SSL configuration to use
 * \return         0 if successful, or MBEDTLS_ERR_SSL_ALLOC_FAILED if
 *                 memory allocation failed
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf );
 * \brief          Reset an already initialized SSL context for re-use
 *                 while retaining application-set variables, function
 *                 pointers and data.
 * \param ssl      SSL context
 * \return         0 if successful, or MBEDTLS_ERR_SSL_ALLOC_FAILED,
                   MBEDTLS_ERR_SSL_HW_ACCEL_FAILED or
 *                 MBEDTLS_ERR_SSL_COMPRESSION_FAILED
int mbedtls_ssl_session_reset( mbedtls_ssl_context *ssl );
 * \brief          Set the current endpoint type
 * \param conf     SSL configuration
 * \param endpoint must be MBEDTLS_SSL_IS_CLIENT or MBEDTLS_SSL_IS_SERVER
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint );
 * \brief           Set the transport type (TLS or DTLS).
 *                  Default: TLS
 * \note            For DTLS, you must either provide a recv callback that
 *                  doesn't block, or one that handles timeouts, see
 *                  \c mbedtls_ssl_set_bio(). You also need to provide timer
 *                  callbacks with \c mbedtls_ssl_set_timer_cb().
 * \param conf      SSL configuration
 * \param transport transport type:
 *                  MBEDTLS_SSL_TRANSPORT_STREAM for TLS,
 *                  MBEDTLS_SSL_TRANSPORT_DATAGRAM for DTLS.
void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport );
 * \brief          Set the certificate verification mode
 *                 Default: NONE on server, REQUIRED on client
 * \param conf     SSL configuration
 * \param authmode can be:
 *  MBEDTLS_SSL_VERIFY_NONE:      peer certificate is not checked
 *                        (default on server)
 *                        (insecure on client)
 *  MBEDTLS_SSL_VERIFY_OPTIONAL:  peer certificate is checked, however the
 *                        handshake continues even if verification failed;
 *                        mbedtls_ssl_get_verify_result() can be called after the
 *                        handshake is complete.
 *  MBEDTLS_SSL_VERIFY_REQUIRED:  peer *must* present a valid certificate,
 *                        handshake is aborted if verification failed.
 *                        (default on client)
 * \note On client, MBEDTLS_SSL_VERIFY_REQUIRED is the recommended mode.
 * With MBEDTLS_SSL_VERIFY_OPTIONAL, the user needs to call mbedtls_ssl_get_verify_result() at
 * the right time(s), which may not be obvious, while REQUIRED always perform
 * the verification as soon as possible. For example, REQUIRED was protecting
 * against the "triple handshake" attack even before it was found.
void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode );
 * \brief          Set the verification callback (Optional).
 *                 If set, the verify callback is called for each
 *                 certificate in the chain. For implementation
 *                 information, please see \c mbedtls_x509_crt_verify()
 * \param conf     SSL configuration
 * \param f_vrfy   verification function
 * \param p_vrfy   verification parameter
void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy );
 * \brief          Set the random number generator callback
 * \param conf     SSL configuration
 * \param f_rng    RNG function
 * \param p_rng    RNG parameter
void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng );
 * \brief          Set the debug callback
 *                 The callback has the following argument:
 *                 void *           opaque context for the callback
 *                 int              debug level
 *                 const char *     file name
 *                 int              line number
 *                 const char *     message
 * \param conf     SSL configuration
 * \param f_dbg    debug function
 * \param p_dbg    debug parameter
void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void *p_dbg );
 * \brief          Set the underlying BIO callbacks for write, read and
 *                 read-with-timeout.
 * \param ssl      SSL context
 * \param p_bio    parameter (context) shared by BIO callbacks
 * \param f_send   write callback
 * \param f_recv   read callback
 * \param f_recv_timeout blocking read callback with timeout.
 * \note           One of f_recv or f_recv_timeout can be NULL, in which case
 *                 the other is used. If both are non-NULL, f_recv_timeout is
 *                 used and f_recv is ignored (as if it were NULL).
 * \note           The two most common use cases are:
 *                 - non-blocking I/O, f_recv != NULL, f_recv_timeout == NULL
 *                 - blocking I/O, f_recv == NULL, f_recv_timout != NULL
 * \note           For DTLS, you need to provide either a non-NULL
 *                 f_recv_timeout callback, or a f_recv that doesn't block.
 * \note           See the documentations of \c mbedtls_ssl_sent_t,
 *                 \c mbedtls_ssl_recv_t and \c mbedtls_ssl_recv_timeout_t for
 *                 the conventions those callbacks must follow.
 * \note           On some platforms, net_sockets.c provides
 *                 \c mbedtls_net_send(), \c mbedtls_net_recv() and
 *                 \c mbedtls_net_recv_timeout() that are suitable to be used
 *                 here.
void mbedtls_ssl_set_bio( mbedtls_ssl_context *ssl,
                          void *p_bio,
                          mbedtls_ssl_send_t *f_send,
                          mbedtls_ssl_recv_t *f_recv,
                          mbedtls_ssl_recv_timeout_t *f_recv_timeout );
# 1443 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
 * \brief          Set the timeout period for mbedtls_ssl_read()
 *                 (Default: no timeout.)
 * \param conf     SSL configuration context
 * \param timeout  Timeout value in milliseconds.
 *                 Use 0 for no timeout (default).
 * \note           With blocking I/O, this will only work if a non-NULL
 *                 \c f_recv_timeout was set with \c mbedtls_ssl_set_bio().
 *                 With non-blocking I/O, this will only work if timer
 *                 callbacks were set with \c mbedtls_ssl_set_timer_cb().
 * \note           With non-blocking I/O, you may also skip this function
 *                 altogether and handle timeouts at the application layer.
void mbedtls_ssl_conf_read_timeout( mbedtls_ssl_config *conf, uint32_t timeout );
 * \brief          Set the timer callbacks (Mandatory for DTLS.)
 * \param ssl      SSL context
 * \param p_timer  parameter (context) shared by timer callbacks
 * \param f_set_timer   set timer callback
 * \param f_get_timer   get timer callback. Must return:
 * \note           See the documentation of \c mbedtls_ssl_set_timer_t and
 *                 \c mbedtls_ssl_get_timer_t for the conventions this pair of
 *                 callbacks must follow.
 * \note           On some platforms, timing.c provides
 *                 \c mbedtls_timing_set_delay() and
 *                 \c mbedtls_timing_get_delay() that are suitable for using
 *                 here, except if using an event-driven style.
 * \note           See also the "DTLS tutorial" article in our knowledge base.
 *                 https://tls.mbed.org/kb/how-to/dtls-tutorial
void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
                               void *p_timer,
                               mbedtls_ssl_set_timer_t *f_set_timer,
                               mbedtls_ssl_get_timer_t *f_get_timer );
 * \brief           Callback type: generate and write session ticket
 * \note            This describes what a callback implementation should do.
 *                  This callback should generate an encrypted and
 *                  authenticated ticket for the session and write it to the
 *                  output buffer. Here, ticket means the opaque ticket part
 *                  of the NewSessionTicket structure of RFC 5077.
 * \param p_ticket  Context for the callback
 * \param session   SSL session to be written in the ticket
 * \param start     Start of the output buffer
 * \param end       End of the output buffer
 * \param tlen      On exit, holds the length written
 * \param lifetime  On exit, holds the lifetime of the ticket in seconds
 * \return          0 if successful, or
 *                  a specific MBEDTLS_ERR_XXX code.
typedef int mbedtls_ssl_ticket_write_t( void *p_ticket,
                                        const mbedtls_ssl_session *session,
                                        unsigned char *start,
                                        const unsigned char *end,
                                        size_t *tlen,
                                        uint32_t *lifetime );
 * \brief           Callback type: Export key block and master secret
 * \note            This is required for certain uses of TLS, e.g. EAP-TLS
 *                  (RFC 5216) and Thread. The key pointers are ephemeral and
 *                  therefore must not be stored. The master secret and keys
 *                  should not be used directly except as an input to a key
 *                  derivation function.
 * \param p_expkey  Context for the callback
 * \param ms        Pointer to master secret (fixed length: 48 bytes)
 * \param kb        Pointer to key block, see RFC 5246 section 6.3
 *                  (variable length: 2 * maclen + 2 * keylen + 2 * ivlen).
 * \param maclen    MAC length
 * \param keylen    Key length
 * \param ivlen     IV length
 * \return          0 if successful, or
 *                  a specific MBEDTLS_ERR_XXX code.
typedef int mbedtls_ssl_export_keys_t( void *p_expkey,
                                const unsigned char *ms,
                                const unsigned char *kb,
                                size_t maclen,
                                size_t keylen,
                                size_t ivlen );
 * \brief           Callback type: parse and load session ticket
 * \note            This describes what a callback implementation should do.
 *                  This callback should parse a session ticket as generated
 *                  by the corresponding mbedtls_ssl_ticket_write_t function,
 *                  and, if the ticket is authentic and valid, load the
 *                  session.
 * \note            The implementation is allowed to modify the first len
 *                  bytes of the input buffer, eg to use it as a temporary
 *                  area for the decrypted ticket contents.
 * \param p_ticket  Context for the callback
 * \param session   SSL session to be loaded
 * \param buf       Start of the buffer containing the ticket
 * \param len       Length of the ticket.
 * \return          0 if successful, or
 *                  MBEDTLS_ERR_SSL_INVALID_MAC if not authentic, or
 *                  MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED if expired, or
 *                  any other non-zero code for other failures.
typedef int mbedtls_ssl_ticket_parse_t( void *p_ticket,
                                        mbedtls_ssl_session *session,
                                        unsigned char *buf,
                                        size_t len );
 * \brief           Configure SSL session ticket callbacks (server only).
 *                  (Default: none.)
 * \note            On server, session tickets are enabled by providing
 *                  non-NULL callbacks.
 * \note            On client, use \c mbedtls_ssl_conf_session_tickets().
 * \param conf      SSL configuration context
 * \param f_ticket_write    Callback for writing a ticket
 * \param f_ticket_parse    Callback for parsing a ticket
 * \param p_ticket          Context shared by the two callbacks
void mbedtls_ssl_conf_session_tickets_cb( mbedtls_ssl_config *conf,
        mbedtls_ssl_ticket_write_t *f_ticket_write,
        mbedtls_ssl_ticket_parse_t *f_ticket_parse,
        void *p_ticket );
 * \brief           Configure key export callback.
 *                  (Default: none.)
 * \note            See \c mbedtls_ssl_export_keys_t.
 * \param conf      SSL configuration context
 * \param f_export_keys     Callback for exporting keys
 * \param p_export_keys     Context for the callback
void mbedtls_ssl_conf_export_keys_cb( mbedtls_ssl_config *conf,
        mbedtls_ssl_export_keys_t *f_export_keys,
        void *p_export_keys );
# 1685 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
 * \brief          Callback type: generate a cookie
 * \param ctx      Context for the callback
 * \param p        Buffer to write to,
 *                 must be updated to point right after the cookie
 * \param end      Pointer to one past the end of the output buffer
 * \param info     Client ID info that was passed to
 *                 \c mbedtls_ssl_set_client_transport_id()
 * \param ilen     Length of info in bytes
 * \return         The callback must return 0 on success,
 *                 or a negative error code.
typedef int mbedtls_ssl_cookie_write_t( void *ctx,
                                unsigned char **p, unsigned char *end,
                                const unsigned char *info, size_t ilen );
 * \brief          Callback type: verify a cookie
 * \param ctx      Context for the callback
 * \param cookie   Cookie to verify
 * \param clen     Length of cookie
 * \param info     Client ID info that was passed to
 *                 \c mbedtls_ssl_set_client_transport_id()
 * \param ilen     Length of info in bytes
 * \return         The callback must return 0 if cookie is valid,
 *                 or a negative error code.
typedef int mbedtls_ssl_cookie_check_t( void *ctx,
                                const unsigned char *cookie, size_t clen,
                                const unsigned char *info, size_t ilen );
# 1893 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
 * \brief          Set the session cache callbacks (server-side only)
 *                 If not set, no session resuming is done (except if session
 *                 tickets are enabled too).
 *                 The session cache has the responsibility to check for stale
 *                 entries based on timeout. See RFC 5246 for recommendations.
 *                 Warning: session.peer_cert is cleared by the SSL/TLS layer on
 *                 connection shutdown, so do not cache the pointer! Either set
 *                 it to NULL or make a full copy of the certificate.
 *                 The get callback is called once during the initial handshake
 *                 to enable session resuming. The get function has the
 *                 following parameters: (void *parameter, mbedtls_ssl_session *session)
 *                 If a valid entry is found, it should fill the master of
 *                 the session object with the cached values and return 0,
 *                 return 1 otherwise. Optionally peer_cert can be set as well
 *                 if it is properly present in cache entry.
 *                 The set callback is called once during the initial handshake
 *                 to enable session resuming after the entire handshake has
 *                 been finished. The set function has the following parameters:
 *                 (void *parameter, const mbedtls_ssl_session *session). The function
 *                 should create a cache entry for future retrieval based on
 *                 the data in the session structure and should keep in mind
 *                 that the mbedtls_ssl_session object presented (and all its referenced
 *                 data) is cleared by the SSL/TLS layer when the connection is
 *                 terminated. It is recommended to add metadata to determine if
 *                 an entry is still valid in the future. Return 0 if
 *                 successfully cached, return 1 otherwise.
 * \param conf           SSL configuration
 * \param p_cache        parmater (context) for both callbacks
 * \param f_get_cache    session get callback
 * \param f_set_cache    session set callback
void mbedtls_ssl_conf_session_cache( mbedtls_ssl_config *conf,
        void *p_cache,
        int (*f_get_cache)(void *, mbedtls_ssl_session *),
        int (*f_set_cache)(void *, const mbedtls_ssl_session *) );
 * \brief          Request resumption of session (client-side only)
 *                 Session data is copied from presented session structure.
 * \param ssl      SSL context
 * \param session  session context
 * \return         0 if successful,
 *                 MBEDTLS_ERR_SSL_ALLOC_FAILED if memory allocation failed,
 *                 MBEDTLS_ERR_SSL_BAD_INPUT_DATA if used server-side or
 *                 arguments are otherwise invalid
 * \sa             mbedtls_ssl_get_session()
int mbedtls_ssl_set_session( mbedtls_ssl_context *ssl, const mbedtls_ssl_session *session );
 * \brief               Set the list of allowed ciphersuites and the preference
 *                      order. First in the list has the highest preference.
 *                      (Overrides all version-specific lists)
 *                      The ciphersuites array is not copied, and must remain
 *                      valid for the lifetime of the ssl_config.
 *                      Note: The server uses its own preferences
 *                      over the preference of the client unless
 *                      MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE is defined!
 * \param conf          SSL configuration
 * \param ciphersuites  0-terminated list of allowed ciphersuites
void mbedtls_ssl_conf_ciphersuites( mbedtls_ssl_config *conf,
                                   const int *ciphersuites );
 * \brief               Set the list of allowed ciphersuites and the
 *                      preference order for a specific version of the protocol.
 *                      (Only useful on the server side)
 *                      The ciphersuites array is not copied, and must remain
 *                      valid for the lifetime of the ssl_config.
 * \param conf          SSL configuration
 * \param ciphersuites  0-terminated list of allowed ciphersuites
 * \param major         Major version number (only MBEDTLS_SSL_MAJOR_VERSION_3
 *                      supported)
 * \param minor         Minor version number (MBEDTLS_SSL_MINOR_VERSION_0,
 *                      MBEDTLS_SSL_MINOR_VERSION_1 and MBEDTLS_SSL_MINOR_VERSION_2,
 *                      MBEDTLS_SSL_MINOR_VERSION_3 supported)
 * \note                With DTLS, use MBEDTLS_SSL_MINOR_VERSION_2 for DTLS 1.0
 *                      and MBEDTLS_SSL_MINOR_VERSION_3 for DTLS 1.2
void mbedtls_ssl_conf_ciphersuites_for_version( mbedtls_ssl_config *conf,
                                       const int *ciphersuites,
                                       int major, int minor );
 * \brief          Set the X.509 security profile used for verification
 * \note           The restrictions are enforced for all certificates in the
 *                 chain. However, signatures in the handshake are not covered
 *                 by this setting but by \b mbedtls_ssl_conf_sig_hashes().
 * \param conf     SSL configuration
 * \param profile  Profile to use
void mbedtls_ssl_conf_cert_profile( mbedtls_ssl_config *conf,
                                    const mbedtls_x509_crt_profile *profile );
 * \brief          Set the data required to verify peer certificate
 * \note           See \c mbedtls_x509_crt_verify() for notes regarding the
 *                 parameters ca_chain (maps to trust_ca for that function)
 *                 and ca_crl.
 * \param conf     SSL configuration
 * \param ca_chain trusted CA chain (meaning all fully trusted top-level CAs)
 * \param ca_crl   trusted CA CRLs
void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl );
 * \brief          Set own certificate chain and private key
 * \note           own_cert should contain in order from the bottom up your
 *                 certificate chain. The top certificate (self-signed)
 *                 can be omitted.
 * \note           On server, this function can be called multiple times to
 *                 provision more than one cert/key pair (eg one ECDSA, one
 *                 RSA with SHA-256, one RSA with SHA-1). An adequate
 *                 certificate will be selected according to the client's
 *                 advertised capabilities. In case mutliple certificates are
 *                 adequate, preference is given to the one set by the first
 *                 call to this function, then second, etc.
 * \note           On client, only the first call has any effect. That is,
 *                 only one client certificate can be provisioned. The
 *                 server's preferences in its CertficateRequest message will
 *                 be ignored and our only cert will be sent regardless of
 *                 whether it matches those preferences - the server can then
 *                 decide what it wants to do with it.
 * \param conf     SSL configuration
 * \param own_cert own public certificate chain
 * \param pk_key   own private key
 * \return         0 on success or MBEDTLS_ERR_SSL_ALLOC_FAILED
int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
                              mbedtls_x509_crt *own_cert,
                              mbedtls_pk_context *pk_key );
 * \brief          Set the Pre Shared Key (PSK) and the expected identity name
 * \note           This is mainly useful for clients. Servers will usually
 *                 want to use \c mbedtls_ssl_conf_psk_cb() instead.
 * \note           Currently clients can only register one pre-shared key.
 *                 In other words, the servers' identity hint is ignored.
 *                 Support for setting multiple PSKs on clients and selecting
 *                 one based on the identity hint is not a planned feature but
 *                 feedback is welcomed.
 * \param conf     SSL configuration
 * \param psk      pointer to the pre-shared key
 * \param psk_len  pre-shared key length
 * \param psk_identity      pointer to the pre-shared key identity
 * \param psk_identity_len  identity key length
 * \return         0 if successful or MBEDTLS_ERR_SSL_ALLOC_FAILED
int mbedtls_ssl_conf_psk( mbedtls_ssl_config *conf,
                const unsigned char *psk, size_t psk_len,
                const unsigned char *psk_identity, size_t psk_identity_len );
 * \brief          Set the Pre Shared Key (PSK) for the current handshake
 * \note           This should only be called inside the PSK callback,
 *                 ie the function passed to \c mbedtls_ssl_conf_psk_cb().
 * \param ssl      SSL context
 * \param psk      pointer to the pre-shared key
 * \param psk_len  pre-shared key length
 * \return         0 if successful or MBEDTLS_ERR_SSL_ALLOC_FAILED
int mbedtls_ssl_set_hs_psk( mbedtls_ssl_context *ssl,
                            const unsigned char *psk, size_t psk_len );
 * \brief          Set the PSK callback (server-side only).
 *                 If set, the PSK callback is called for each
 *                 handshake where a PSK ciphersuite was negotiated.
 *                 The caller provides the identity received and wants to
 *                 receive the actual PSK data and length.
 *                 The callback has the following parameters: (void *parameter,
 *                 mbedtls_ssl_context *ssl, const unsigned char *psk_identity,
 *                 size_t identity_len)
 *                 If a valid PSK identity is found, the callback should use
 *                 \c mbedtls_ssl_set_hs_psk() on the ssl context to set the
 *                 correct PSK and return 0.
 *                 Any other return value will result in a denied PSK identity.
 * \note           If you set a PSK callback using this function, then you
 *                 don't need to set a PSK key and identity using
 *                 \c mbedtls_ssl_conf_psk().
 * \param conf     SSL configuration
 * \param f_psk    PSK identity function
 * \param p_psk    PSK identity parameter
void mbedtls_ssl_conf_psk_cb( mbedtls_ssl_config *conf,
                     int (*f_psk)(void *, mbedtls_ssl_context *, const unsigned char *,
                                  size_t),
                     void *p_psk );
# 2135 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
#define MBEDTLS_DEPRECATED 
 * \brief          Set the Diffie-Hellman public P and G values,
 *                 read as hexadecimal strings (server-side only)
 *                 (Default values: MBEDTLS_DHM_RFC3526_MODP_2048_[PG])
 * \param conf     SSL configuration
 * \param dhm_P    Diffie-Hellman-Merkle modulus
 * \param dhm_G    Diffie-Hellman-Merkle generator
 * \deprecated     Superseded by \c mbedtls_ssl_conf_dh_param_bin.
 * \return         0 if successful
 int mbedtls_ssl_conf_dh_param( mbedtls_ssl_config *conf,
                                                  const char *dhm_P,
                                                  const char *dhm_G );
 * \brief          Set the Diffie-Hellman public P and G values
 *                 from big-endian binary presentations.
 *                 (Default values: MBEDTLS_DHM_RFC3526_MODP_2048_[PG]_BIN)
 * \param conf     SSL configuration
 * \param dhm_P    Diffie-Hellman-Merkle modulus in big-endian binary form
 * \param P_len    Length of DHM modulus
 * \param dhm_G    Diffie-Hellman-Merkle generator in big-endian binary form
 * \param G_len    Length of DHM generator
 * \return         0 if successful
int mbedtls_ssl_conf_dh_param_bin( mbedtls_ssl_config *conf,
                                   const unsigned char *dhm_P, size_t P_len,
                                   const unsigned char *dhm_G, size_t G_len );
 * \brief          Set the Diffie-Hellman public P and G values,
 *                 read from existing context (server-side only)
 * \param conf     SSL configuration
 * \param dhm_ctx  Diffie-Hellman-Merkle context
 * \return         0 if successful
int mbedtls_ssl_conf_dh_param_ctx( mbedtls_ssl_config *conf, mbedtls_dhm_context *dhm_ctx );
 * \brief          Set the minimum length for Diffie-Hellman parameters.
 *                 (Client-side only.)
 *                 (Default: 1024 bits.)
 * \param conf     SSL configuration
 * \param bitlen   Minimum bit length of the DHM prime
void mbedtls_ssl_conf_dhm_min_bitlen( mbedtls_ssl_config *conf,
                                      unsigned int bitlen );
 * \brief          Set the allowed curves in order of preference.
 *                 (Default: all defined curves.)
 *                 On server: this only affects selection of the ECDHE curve;
 *                 the curves used for ECDH and ECDSA are determined by the
 *                 list of available certificates instead.
 *                 On client: this affects the list of curves offered for any
 *                 use. The server can override our preference order.
 *                 Both sides: limits the set of curves accepted for use in
 *                 ECDHE and in the peer's end-entity certificate.
 * \note           This has no influence on which curves are allowed inside the
 *                 certificate chains, see \c mbedtls_ssl_conf_cert_profile()
 *                 for that. For the end-entity certificate however, the key
 *                 will be accepted only if it is allowed both by this list
 *                 and by the cert profile.
 * \note           This list should be ordered by decreasing preference
 *                 (preferred curve first).
 * \param conf     SSL configuration
 * \param curves   Ordered list of allowed curves,
 *                 terminated by MBEDTLS_ECP_DP_NONE.
void mbedtls_ssl_conf_curves( mbedtls_ssl_config *conf,
                              const mbedtls_ecp_group_id *curves );
 * \brief          Set the allowed hashes for signatures during the handshake.
 *                 (Default: all available hashes except MD5.)
 * \note           This only affects which hashes are offered and can be used
 *                 for signatures during the handshake. Hashes for message
 *                 authentication and the TLS PRF are controlled by the
 *                 ciphersuite, see \c mbedtls_ssl_conf_ciphersuites(). Hashes
 *                 used for certificate signature are controlled by the
 *                 verification profile, see \c mbedtls_ssl_conf_cert_profile().
 * \note           This list should be ordered by decreasing preference
 *                 (preferred hash first).
 * \param conf     SSL configuration
 * \param hashes   Ordered list of allowed signature hashes,
 *                 terminated by \c MBEDTLS_MD_NONE.
void mbedtls_ssl_conf_sig_hashes( mbedtls_ssl_config *conf,
                                  const int *hashes );
 * \brief          Set or reset the hostname to check against the received
 *                 server certificate. It sets the ServerName TLS extension,
 *                 too, if that extension is enabled. (client-side only)
 * \param ssl      SSL context
 * \param hostname the server hostname, may be NULL to clear hostname
 * \note           Maximum hostname length MBEDTLS_SSL_MAX_HOST_NAME_LEN.
 * \return         0 if successful, MBEDTLS_ERR_SSL_ALLOC_FAILED on
 *                 allocation failure, MBEDTLS_ERR_SSL_BAD_INPUT_DATA on
 *                 too long input hostname.
 *                 Hostname set to the one provided on success (cleared
 *                 when NULL). On allocation failure hostname is cleared.
 *                 On too long input failure, old hostname is unchanged.
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname );
 * \brief          Set own certificate and key for the current handshake
 * \note           Same as \c mbedtls_ssl_conf_own_cert() but for use within
 *                 the SNI callback.
 * \param ssl      SSL context
 * \param own_cert own public certificate chain
 * \param pk_key   own private key
 * \return         0 on success or MBEDTLS_ERR_SSL_ALLOC_FAILED
int mbedtls_ssl_set_hs_own_cert( mbedtls_ssl_context *ssl,
                                 mbedtls_x509_crt *own_cert,
                                 mbedtls_pk_context *pk_key );
 * \brief          Set the data required to verify peer certificate for the
 *                 current handshake
 * \note           Same as \c mbedtls_ssl_conf_ca_chain() but for use within
 *                 the SNI callback.
 * \param ssl      SSL context
 * \param ca_chain trusted CA chain (meaning all fully trusted top-level CAs)
 * \param ca_crl   trusted CA CRLs
void mbedtls_ssl_set_hs_ca_chain( mbedtls_ssl_context *ssl,
                                  mbedtls_x509_crt *ca_chain,
                                  mbedtls_x509_crl *ca_crl );
 * \brief          Set authmode for the current handshake.
 * \note           Same as \c mbedtls_ssl_conf_authmode() but for use within
 *                 the SNI callback.
 * \param ssl      SSL context
 * \param authmode MBEDTLS_SSL_VERIFY_NONE, MBEDTLS_SSL_VERIFY_OPTIONAL or
 *                 MBEDTLS_SSL_VERIFY_REQUIRED
void mbedtls_ssl_set_hs_authmode( mbedtls_ssl_context *ssl,
                                  int authmode );
 * \brief          Set server side ServerName TLS extension callback
 *                 (optional, server-side only).
 *                 If set, the ServerName callback is called whenever the
 *                 server receives a ServerName TLS extension from the client
 *                 during a handshake. The ServerName callback has the
 *                 following parameters: (void *parameter, mbedtls_ssl_context *ssl,
 *                 const unsigned char *hostname, size_t len). If a suitable
 *                 certificate is found, the callback must set the
 *                 certificate(s) and key(s) to use with \c
 *                 mbedtls_ssl_set_hs_own_cert() (can be called repeatedly),
 *                 and may optionally adjust the CA and associated CRL with \c
 *                 mbedtls_ssl_set_hs_ca_chain() as well as the client
 *                 authentication mode with \c mbedtls_ssl_set_hs_authmode(),
 *                 then must return 0. If no matching name is found, the
 *                 callback must either set a default cert, or
 *                 return non-zero to abort the handshake at this point.
 * \param conf     SSL configuration
 * \param f_sni    verification function
 * \param p_sni    verification parameter
void mbedtls_ssl_conf_sni( mbedtls_ssl_config *conf,
                  int (*f_sni)(void *, mbedtls_ssl_context *, const unsigned char *,
                               size_t),
                  void *p_sni );
# 2374 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
 * \brief          Set the supported Application Layer Protocols.
 * \param conf     SSL configuration
 * \param protos   Pointer to a NULL-terminated list of supported protocols,
 *                 in decreasing preference order. The pointer to the list is
 *                 recorded by the library for later reference as required, so
 *                 the lifetime of the table must be atleast as long as the
 *                 lifetime of the SSL configuration structure.
 * \return         0 on success, or MBEDTLS_ERR_SSL_BAD_INPUT_DATA.
int mbedtls_ssl_conf_alpn_protocols( mbedtls_ssl_config *conf, const char **protos );
 * \brief          Get the name of the negotiated Application Layer Protocol.
 *                 This function should be called after the handshake is
 *                 completed.
 * \param ssl      SSL context
 * \return         Protcol name, or NULL if no protocol was negotiated.
const char *mbedtls_ssl_get_alpn_protocol( const mbedtls_ssl_context *ssl );
 * \brief          Set the maximum supported version sent from the client side
 *                 and/or accepted at the server side
 *                 (Default: MBEDTLS_SSL_MAX_MAJOR_VERSION, MBEDTLS_SSL_MAX_MINOR_VERSION)
 * \note           This ignores ciphersuites from higher versions.
 * \note           With DTLS, use MBEDTLS_SSL_MINOR_VERSION_2 for DTLS 1.0 and
 *                 MBEDTLS_SSL_MINOR_VERSION_3 for DTLS 1.2
 * \param conf     SSL configuration
 * \param major    Major version number (only MBEDTLS_SSL_MAJOR_VERSION_3 supported)
 * \param minor    Minor version number (MBEDTLS_SSL_MINOR_VERSION_0,
 *                 MBEDTLS_SSL_MINOR_VERSION_1 and MBEDTLS_SSL_MINOR_VERSION_2,
 *                 MBEDTLS_SSL_MINOR_VERSION_3 supported)
void mbedtls_ssl_conf_max_version( mbedtls_ssl_config *conf, int major, int minor );
 * \brief          Set the minimum accepted SSL/TLS protocol version
 *                 (Default: TLS 1.0)
 * \note           Input outside of the SSL_MAX_XXXXX_VERSION and
 *                 SSL_MIN_XXXXX_VERSION range is ignored.
 * \note           MBEDTLS_SSL_MINOR_VERSION_0 (SSL v3) should be avoided.
 * \note           With DTLS, use MBEDTLS_SSL_MINOR_VERSION_2 for DTLS 1.0 and
 *                 MBEDTLS_SSL_MINOR_VERSION_3 for DTLS 1.2
 * \param conf     SSL configuration
 * \param major    Major version number (only MBEDTLS_SSL_MAJOR_VERSION_3 supported)
 * \param minor    Minor version number (MBEDTLS_SSL_MINOR_VERSION_0,
 *                 MBEDTLS_SSL_MINOR_VERSION_1 and MBEDTLS_SSL_MINOR_VERSION_2,
 *                 MBEDTLS_SSL_MINOR_VERSION_3 supported)
void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor );
 * \brief          Set the fallback flag (client-side only).
 *                 (Default: MBEDTLS_SSL_IS_NOT_FALLBACK).
 * \note           Set to MBEDTLS_SSL_IS_FALLBACK when preparing a fallback
 *                 connection, that is a connection with max_version set to a
 *                 lower value than the value you're willing to use. Such
 *                 fallback connections are not recommended but are sometimes
 *                 necessary to interoperate with buggy (version-intolerant)
 *                 servers.
 * \warning        You should NOT set this to MBEDTLS_SSL_IS_FALLBACK for
 *                 non-fallback connections! This would appear to work for a
 *                 while, then cause failures when the server is upgraded to
 *                 support a newer TLS version.
 * \param conf     SSL configuration
 * \param fallback MBEDTLS_SSL_IS_NOT_FALLBACK or MBEDTLS_SSL_IS_FALLBACK
void mbedtls_ssl_conf_fallback( mbedtls_ssl_config *conf, char fallback );
 * \brief           Enable or disable Encrypt-then-MAC
 *                  (Default: MBEDTLS_SSL_ETM_ENABLED)
 * \note            This should always be enabled, it is a security
 *                  improvement, and should not cause any interoperability
 *                  issue (used only if the peer supports it too).
 * \param conf      SSL configuration
 * \param etm       MBEDTLS_SSL_ETM_ENABLED or MBEDTLS_SSL_ETM_DISABLED
void mbedtls_ssl_conf_encrypt_then_mac( mbedtls_ssl_config *conf, char etm );
 * \brief           Enable or disable Extended Master Secret negotiation.
 *                  (Default: MBEDTLS_SSL_EXTENDED_MS_ENABLED)
 * \note            This should always be enabled, it is a security fix to the
 *                  protocol, and should not cause any interoperability issue
 *                  (used only if the peer supports it too).
 * \param conf      SSL configuration
 * \param ems       MBEDTLS_SSL_EXTENDED_MS_ENABLED or MBEDTLS_SSL_EXTENDED_MS_DISABLED
void mbedtls_ssl_conf_extended_master_secret( mbedtls_ssl_config *conf, char ems );
# 2511 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
 * \brief          Whether to send a list of acceptable CAs in
 *                 CertificateRequest messages.
 *                 (Default: do send)
 * \param conf     SSL configuration
 * \param cert_req_ca_list   MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED or
 *                          MBEDTLS_SSL_CERT_REQ_CA_LIST_DISABLED
void mbedtls_ssl_conf_cert_req_ca_list( mbedtls_ssl_config *conf,
                                          char cert_req_ca_list );
 * \brief          Set the maximum fragment length to emit and/or negotiate
 *                 (Default: the smaller of MBEDTLS_SSL_IN_CONTENT_LEN and
 *                 MBEDTLS_SSL_OUT_CONTENT_LEN, usually 2^14 bytes)
 *                 (Server: set maximum fragment length to emit,
 *                 usually negotiated by the client during handshake
 *                 (Client: set maximum fragment length to emit *and*
 *                 negotiate with the server during handshake)
 * \note           With TLS, this currently only affects ApplicationData (sent
 *                 with \c mbedtls_ssl_read()), not handshake messages.
 *                 With DTLS, this affects both ApplicationData and handshake.
 * \note           This sets the maximum length for a record's payload,
 *                 excluding record overhead that will be added to it, see
 *                 \c mbedtls_ssl_get_record_expansion().
 * \note           For DTLS, it is also possible to set a limit for the total
 *                 size of daragrams passed to the transport layer, including
 *                 record overhead, see \c mbedtls_ssl_set_mtu().
 * \param conf     SSL configuration
 * \param mfl_code Code for maximum fragment length (allowed values:
 *                 MBEDTLS_SSL_MAX_FRAG_LEN_512,  MBEDTLS_SSL_MAX_FRAG_LEN_1024,
 *                 MBEDTLS_SSL_MAX_FRAG_LEN_2048, MBEDTLS_SSL_MAX_FRAG_LEN_4096)
 * \return         0 if successful or MBEDTLS_ERR_SSL_BAD_INPUT_DATA
int mbedtls_ssl_conf_max_frag_len( mbedtls_ssl_config *conf, unsigned char mfl_code );
 * \brief          Activate negotiation of truncated HMAC
 *                 (Default: MBEDTLS_SSL_TRUNC_HMAC_DISABLED)
 * \param conf     SSL configuration
 * \param truncate Enable or disable (MBEDTLS_SSL_TRUNC_HMAC_ENABLED or
 *                                    MBEDTLS_SSL_TRUNC_HMAC_DISABLED)
void mbedtls_ssl_conf_truncated_hmac( mbedtls_ssl_config *conf, int truncate );
# 2584 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h"
 * \brief          Enable / Disable session tickets (client only).
 *                 (Default: MBEDTLS_SSL_SESSION_TICKETS_ENABLED.)
 * \note           On server, use \c mbedtls_ssl_conf_session_tickets_cb().
 * \param conf     SSL configuration
 * \param use_tickets   Enable or disable (MBEDTLS_SSL_SESSION_TICKETS_ENABLED or
 *                                         MBEDTLS_SSL_SESSION_TICKETS_DISABLED)
void mbedtls_ssl_conf_session_tickets( mbedtls_ssl_config *conf, int use_tickets );
 * \brief          Enable / Disable renegotiation support for connection when
 *                 initiated by peer
 *                 (Default: MBEDTLS_SSL_RENEGOTIATION_DISABLED)
 * \warning        It is recommended to always disable renegotation unless you
 *                 know you need it and you know what you're doing. In the
 *                 past, there have been several issues associated with
 *                 renegotiation or a poor understanding of its properties.
 * \note           Server-side, enabling renegotiation also makes the server
 *                 susceptible to a resource DoS by a malicious client.
 * \param conf    SSL configuration
 * \param renegotiation     Enable or disable (MBEDTLS_SSL_RENEGOTIATION_ENABLED or
 *                                             MBEDTLS_SSL_RENEGOTIATION_DISABLED)
void mbedtls_ssl_conf_renegotiation( mbedtls_ssl_config *conf, int renegotiation );
 * \brief          Prevent or allow legacy renegotiation.
 *                 (Default: MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION)
 *                 MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION allows connections to
 *                 be established even if the peer does not support
 *                 secure renegotiation, but does not allow renegotiation
 *                 to take place if not secure.
 *                 (Interoperable and secure option)
 *                 MBEDTLS_SSL_LEGACY_ALLOW_RENEGOTIATION allows renegotiations
 *                 with non-upgraded peers. Allowing legacy renegotiation
 *                 makes the connection vulnerable to specific man in the
 *                 middle attacks. (See RFC 5746)
 *                 (Most interoperable and least secure option)
 *                 MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE breaks off connections
 *                 if peer does not support secure renegotiation. Results
 *                 in interoperability issues with non-upgraded peers
 *                 that do not support renegotiation altogether.
 *                 (Most secure option, interoperability issues)
 * \param conf     SSL configuration
 * \param allow_legacy  Prevent or allow (SSL_NO_LEGACY_RENEGOTIATION,
 *                                        SSL_ALLOW_LEGACY_RENEGOTIATION or
 *                                        MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE)
void mbedtls_ssl_conf_legacy_renegotiation( mbedtls_ssl_config *conf, int allow_legacy );
 * \brief          Enforce renegotiation requests.
 *                 (Default: enforced, max_records = 16)
 *                 When we request a renegotiation, the peer can comply or
 *                 ignore the request. This function allows us to decide
 *                 whether to enforce our renegotiation requests by closing
 *                 the connection if the peer doesn't comply.
 *                 However, records could already be in transit from the peer
 *                 when the request is emitted. In order to increase
 *                 reliability, we can accept a number of records before the
 *                 expected handshake records.
 *                 The optimal value is highly dependent on the specific usage
 *                 scenario.
 * \note           With DTLS and server-initiated renegotiation, the
 *                 HelloRequest is retransmited every time mbedtls_ssl_read() times
 *                 out or receives Application Data, until:
 *                 - max_records records have beens seen, if it is >= 0, or
 *                 - the number of retransmits that would happen during an
 *                 actual handshake has been reached.
 *                 Please remember the request might be lost a few times
 *                 if you consider setting max_records to a really low value.
 * \warning        On client, the grace period can only happen during
 *                 mbedtls_ssl_read(), as opposed to mbedtls_ssl_write() and mbedtls_ssl_renegotiate()
 *                 which always behave as if max_record was 0. The reason is,
 *                 if we receive application data from the server, we need a
 *                 place to write it, which only happens during mbedtls_ssl_read().
 * \param conf     SSL configuration
 * \param max_records Use MBEDTLS_SSL_RENEGOTIATION_NOT_ENFORCED if you don't want to
 *                 enforce renegotiation, or a non-negative value to enforce
 *                 it but allow for a grace period of max_records records.
void mbedtls_ssl_conf_renegotiation_enforced( mbedtls_ssl_config *conf, int max_records );
 * \brief          Set record counter threshold for periodic renegotiation.
 *                 (Default: 2^48 - 1)
 *                 Renegotiation is automatically triggered when a record
 *                 counter (outgoing or ingoing) crosses the defined
 *                 threshold. The default value is meant to prevent the
 *                 connection from being closed when the counter is about to
 *                 reached its maximal value (it is not allowed to wrap).
 *                 Lower values can be used to enforce policies such as "keys
 *                 must be refreshed every N packets with cipher X".
 *                 The renegotiation period can be disabled by setting
 *                 conf->disable_renegotiation to
 *                 MBEDTLS_SSL_RENEGOTIATION_DISABLED.
 * \note           When the configured transport is
 *                 MBEDTLS_SSL_TRANSPORT_DATAGRAM the maximum renegotiation
 *                 period is 2^48 - 1, and for MBEDTLS_SSL_TRANSPORT_STREAM,
 *                 the maximum renegotiation period is 2^64 - 1.
 * \param conf     SSL configuration
 * \param period   The threshold value: a big-endian 64-bit number.
void mbedtls_ssl_conf_renegotiation_period( mbedtls_ssl_config *conf,
                                   const unsigned char period[8] );
 * \brief          Check if there is data already read from the
 *                 underlying transport but not yet processed.
 * \param ssl      SSL context
 * \return         0 if nothing's pending, 1 otherwise.
 * \note           This is different in purpose and behaviour from
 *                 \c mbedtls_ssl_get_bytes_avail in that it considers
 *                 any kind of unprocessed data, not only unread
 *                 application data. If \c mbedtls_ssl_get_bytes
 *                 returns a non-zero value, this function will
 *                 also signal pending data, but the converse does
 *                 not hold. For example, in DTLS there might be
 *                 further records waiting to be processed from
 *                 the current underlying transport's datagram.
 * \note           If this function returns 1 (data pending), this
 *                 does not imply that a subsequent call to
 *                 \c mbedtls_ssl_read will provide any data;
 *                 e.g., the unprocessed data might turn out
 *                 to be an alert or a handshake message.
 * \note           This function is useful in the following situation:
 *                 If the SSL/TLS module successfully returns from an
 *                 operation - e.g. a handshake or an application record
 *                 read - and you're awaiting incoming data next, you
 *                 must not immediately idle on the underlying transport
 *                 to have data ready, but you need to check the value
 *                 of this function first. The reason is that the desired
 *                 data might already be read but not yet processed.
 *                 If, in contrast, a previous call to the SSL/TLS module
 *                 returned MBEDTLS_ERR_SSL_WANT_READ, it is not necessary
 *                 to call this function, as the latter error code entails
 *                 that all internal data has been processed.
int mbedtls_ssl_check_pending( const mbedtls_ssl_context *ssl );
 * \brief          Return the number of application data bytes
 *                 remaining to be read from the current record.
 * \param ssl      SSL context
 * \return         How many bytes are available in the application
 *                 data record read buffer.
 * \note           When working over a datagram transport, this is
 *                 useful to detect the current datagram's boundary
 *                 in case \c mbedtls_ssl_read has written the maximal
 *                 amount of data fitting into the input buffer.
size_t mbedtls_ssl_get_bytes_avail( const mbedtls_ssl_context *ssl );
 * \brief          Return the result of the certificate verification
 * \param ssl      SSL context
 * \return         0 if successful,
 *                 -1 if result is not available (eg because the handshake was
 *                 aborted too early), or
 *                 a combination of BADCERT_xxx and BADCRL_xxx flags, see
 *                 x509.h
uint32_t mbedtls_ssl_get_verify_result( const mbedtls_ssl_context *ssl );
 * \brief          Return the name of the current ciphersuite
 * \param ssl      SSL context
 * \return         a string containing the ciphersuite name
const char *mbedtls_ssl_get_ciphersuite( const mbedtls_ssl_context *ssl );
 * \brief          Return the current SSL version (SSLv3/TLSv1/etc)
 * \param ssl      SSL context
 * \return         a string containing the SSL version
const char *mbedtls_ssl_get_version( const mbedtls_ssl_context *ssl );
 * \brief          Return the (maximum) number of bytes added by the record
 *                 layer: header + encryption/MAC overhead (inc. padding)
 * \note           This function is not available (always returns an error)
 *                 when record compression is enabled.
 * \param ssl      SSL context
 * \return         Current maximum record expansion in bytes, or
 *                 MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE if compression is
 *                 enabled, which makes expansion much less predictable
int mbedtls_ssl_get_record_expansion( const mbedtls_ssl_context *ssl );
 * \brief          Return the maximum fragment length (payload, in bytes).
 *                 This is the value negotiated with peer if any,
 *                 or the locally configured value.
 * \sa             mbedtls_ssl_conf_max_frag_len()
 * \sa             mbedtls_ssl_get_max_record_payload()
 * \param ssl      SSL context
 * \return         Current maximum fragment length.
size_t mbedtls_ssl_get_max_frag_len( const mbedtls_ssl_context *ssl );
 * \brief          Return the current maximum outgoing record payload in bytes.
 *                 This takes into account the config.h setting \c
 *                 MBEDTLS_SSL_OUT_CONTENT_LEN, the configured and negotiated
 *                 max fragment length extension if used, and for DTLS the
 *                 path MTU as configured and current record expansion.
 * \note           With DTLS, \c mbedtls_ssl_write() will return an error if
 *                 called with a larger length value.
 *                 With TLS, \c mbedtls_ssl_write() will fragment the input if
 *                 necessary and return the number of bytes written; it is up
 *                 to the caller to call \c mbedtls_ssl_write() again in
 *                 order to send the remaining bytes if any.
 * \note           This function is not available (always returns an error)
 *                 when record compression is enabled.
 * \sa             mbedtls_ssl_set_mtu()
 * \sa             mbedtls_ssl_get_max_frag_len()
 * \sa             mbedtls_ssl_get_record_expansion()
 * \param ssl      SSL context
 * \return         Current maximum payload for an outgoing record,
 *                 or a negative error code.
int mbedtls_ssl_get_max_out_record_payload( const mbedtls_ssl_context *ssl );
 * \brief          Return the peer certificate from the current connection
 *                 Note: Can be NULL in case no certificate was sent during
 *                 the handshake. Different calls for the same connection can
 *                 return the same or different pointers for the same
 *                 certificate and even a different certificate altogether.
 *                 The peer cert CAN change in a single connection if
 *                 renegotiation is performed.
 * \param ssl      SSL context
 * \return         the current peer certificate
const mbedtls_x509_crt *mbedtls_ssl_get_peer_cert( const mbedtls_ssl_context *ssl );
 * \brief          Save session in order to resume it later (client-side only)
 *                 Session data is copied to presented session structure.
 * \param ssl      SSL context
 * \param session  session context
 * \return         0 if successful,
 *                 MBEDTLS_ERR_SSL_ALLOC_FAILED if memory allocation failed,
 *                 MBEDTLS_ERR_SSL_BAD_INPUT_DATA if used server-side or
 *                 arguments are otherwise invalid.
 * \note           Only the server certificate is copied, and not the full chain,
 *                 so you should not attempt to validate the certificate again
 *                 by calling \c mbedtls_x509_crt_verify() on it.
 *                 Instead, you should use the results from the verification
 *                 in the original handshake by calling \c mbedtls_ssl_get_verify_result()
 *                 after loading the session again into a new SSL context
 *                 using \c mbedtls_ssl_set_session().
 * \note           Once the session object is not needed anymore, you should
 *                 free it by calling \c mbedtls_ssl_session_free().
 * \sa             mbedtls_ssl_set_session()
int mbedtls_ssl_get_session( const mbedtls_ssl_context *ssl, mbedtls_ssl_session *session );
 * \brief          Perform the SSL handshake
 * \param ssl      SSL context
 * \return         0 if successful, or
 *                 MBEDTLS_ERR_SSL_WANT_READ or MBEDTLS_ERR_SSL_WANT_WRITE, or
 *                 MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED (see below), or
 *                 a specific SSL error code.
 *                 If this function returns MBEDTLS_ERR_SSL_WANT_READ, the
 *                 handshake is unfinished and no further data is available
 *                 from the underlying transport. In this case, you must call
 *                 the function again at some later stage.
 * \note           Remarks regarding event-driven DTLS:
 *                 If the function returns MBEDTLS_ERR_SSL_WANT_READ, no datagram
 *                 from the underlying transport layer is currently being processed,
 *                 and it is safe to idle until the timer or the underlying transport
 *                 signal a new event. This is not true for a successful handshake,
 *                 in which case the datagram of the underlying transport that is
 *                 currently being processed might or might not contain further
 *                 DTLS records.
 * \note           If this function returns something other than 0 or
 *                 MBEDTLS_ERR_SSL_WANT_READ/WRITE, you must stop using
 *                 the SSL context for reading or writing, and either free it or
 *                 call \c mbedtls_ssl_session_reset() on it before re-using it
 *                 for a new connection; the current connection must be closed.
 * \note           If DTLS is in use, then you may choose to handle
 *                 MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED specially for logging
 *                 purposes, as it is an expected return value rather than an
 *                 actual error, but you still need to reset/free the context.
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl );
 * \brief          Perform a single step of the SSL handshake
 * \note           The state of the context (ssl->state) will be at
 *                 the next state after execution of this function. Do not
 *                 call this function if state is MBEDTLS_SSL_HANDSHAKE_OVER.
 * \note           If this function returns something other than 0 or
 *                 MBEDTLS_ERR_SSL_WANT_READ/WRITE, you must stop using
 *                 the SSL context for reading or writing, and either free it or
 *                 call \c mbedtls_ssl_session_reset() on it before re-using it
 *                 for a new connection; the current connection must be closed.
 * \param ssl      SSL context
 * \return         0 if successful, or
 *                 MBEDTLS_ERR_SSL_WANT_READ or MBEDTLS_ERR_SSL_WANT_WRITE, or
 *                 a specific SSL error code.
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl );
 * \brief          Initiate an SSL renegotiation on the running connection.
 *                 Client: perform the renegotiation right now.
 *                 Server: request renegotiation, which will be performed
 *                 during the next call to mbedtls_ssl_read() if honored by
 *                 client.
 * \param ssl      SSL context
 * \return         0 if successful, or any mbedtls_ssl_handshake() return
 *                 value.
 * \note           If this function returns something other than 0 or
 *                 MBEDTLS_ERR_SSL_WANT_READ/WRITE, you must stop using
 *                 the SSL context for reading or writing, and either free it or
 *                 call \c mbedtls_ssl_session_reset() on it before re-using it
 *                 for a new connection; the current connection must be closed.
int mbedtls_ssl_renegotiate( mbedtls_ssl_context *ssl );
 * \brief          Read at most 'len' application data bytes
 * \param ssl      SSL context
 * \param buf      buffer that will hold the data
 * \param len      maximum number of bytes to read
 * \return         One of the following:
 *                 - 0 if the read end of the underlying transport was closed,
 *                 - the (positive) number of bytes read, or
 *                 - a negative error code on failure.
 *                 If MBEDTLS_ERR_SSL_WANT_READ is returned, no application data
 *                 is available from the underlying transport. In this case,
 *                 the function needs to be called again at some later stage.
 *                 If MBEDTLS_ERR_SSL_WANT_WRITE is returned, a write is pending
 *                 but the underlying transport isn't available for writing. In this
 *                 case, the function needs to be called again at some later stage.
 *                 When this function return MBEDTLS_ERR_SSL_CLIENT_RECONNECT
 *                 (which can only happen server-side), it means that a client
 *                 is initiating a new connection using the same source port.
 *                 You can either treat that as a connection close and wait
 *                 for the client to resend a ClientHello, or directly
 *                 continue with \c mbedtls_ssl_handshake() with the same
 *                 context (as it has beeen reset internally). Either way, you
 *                 should make sure this is seen by the application as a new
 *                 connection: application state, if any, should be reset, and
 *                 most importantly the identity of the client must be checked
 *                 again. WARNING: not validating the identity of the client
 *                 again, or not transmitting the new identity to the
 *                 application layer, would allow authentication bypass!
 * \note           If this function returns something other than a positive value
 *                 or MBEDTLS_ERR_SSL_WANT_READ/WRITE or MBEDTLS_ERR_SSL_CLIENT_RECONNECT,
 *                 you must stop using the SSL context for reading or writing,
 *                 and either free it or call \c mbedtls_ssl_session_reset() on it
 *                 before re-using it for a new connection; the current connection
 *                 must be closed.
 * \note           Remarks regarding event-driven DTLS:
 *                 - If the function returns MBEDTLS_ERR_SSL_WANT_READ, no datagram
 *                   from the underlying transport layer is currently being processed,
 *                   and it is safe to idle until the timer or the underlying transport
 *                   signal a new event.
 *                 - This function may return MBEDTLS_ERR_SSL_WANT_READ even if data was
 *                   initially available on the underlying transport, as this data may have
 *                   been only e.g. duplicated messages or a renegotiation request.
 *                   Therefore, you must be prepared to receive MBEDTLS_ERR_SSL_WANT_READ even
 *                   when reacting to an incoming-data event from the underlying transport.
 *                 - On success, the datagram of the underlying transport that is currently
 *                   being processed may contain further DTLS records. You should call
 *                   \c mbedtls_ssl_check_pending to check for remaining records.
int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len );
 * \brief          Try to write exactly 'len' application data bytes
 * \warning        This function will do partial writes in some cases. If the
 *                 return value is non-negative but less than length, the
 *                 function must be called again with updated arguments:
 *                 buf + ret, len - ret (if ret is the return value) until
 *                 it returns a value equal to the last 'len' argument.
 * \param ssl      SSL context
 * \param buf      buffer holding the data
 * \param len      how many bytes must be written
 * \return         the number of bytes actually written (may be less than len),
 *                 or MBEDTLS_ERR_SSL_WANT_WRITE or MBEDTLS_ERR_SSL_WANT_READ,
 *                 or another negative error code.
 * \note           If this function returns something other than 0, a positive
 *                 value or MBEDTLS_ERR_SSL_WANT_READ/WRITE, you must stop
 *                 using the SSL context for reading or writing, and either
 *                 free it or call \c mbedtls_ssl_session_reset() on it before
 *                 re-using it for a new connection; the current connection
 *                 must be closed.
 * \note           When this function returns MBEDTLS_ERR_SSL_WANT_WRITE/READ,
 *                 it must be called later with the *same* arguments,
 *                 until it returns a value greater that or equal to 0. When
 *                 the function returns MBEDTLS_ERR_SSL_WANT_WRITE there may be
 *                 some partial data in the output buffer, however this is not
 *                 yet sent.
 * \note           If the requested length is greater than the maximum
 *                 fragment length (either the built-in limit or the one set
 *                 or negotiated with the peer), then:
 *                 - with TLS, less bytes than requested are written.
 *                 - with DTLS, MBEDTLS_ERR_SSL_BAD_INPUT_DATA is returned.
 *                 \c mbedtls_ssl_get_max_frag_len() may be used to query the
 *                 active maximum fragment length.
 * \note           Attempting to write 0 bytes will result in an empty TLS
 *                 application record being sent.
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len );
 * \brief           Send an alert message
 * \param ssl       SSL context
 * \param level     The alert level of the message
 *                  (MBEDTLS_SSL_ALERT_LEVEL_WARNING or MBEDTLS_SSL_ALERT_LEVEL_FATAL)
 * \param message   The alert message (SSL_ALERT_MSG_*)
 * \return          0 if successful, or a specific SSL error code.
 * \note           If this function returns something other than 0 or
 *                 MBEDTLS_ERR_SSL_WANT_READ/WRITE, you must stop using
 *                 the SSL context for reading or writing, and either free it or
 *                 call \c mbedtls_ssl_session_reset() on it before re-using it
 *                 for a new connection; the current connection must be closed.
int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message );
 * \brief          Notify the peer that the connection is being closed
 * \param ssl      SSL context
 * \return          0 if successful, or a specific SSL error code.
 * \note           If this function returns something other than 0 or
 *                 MBEDTLS_ERR_SSL_WANT_READ/WRITE, you must stop using
 *                 the SSL context for reading or writing, and either free it or
 *                 call \c mbedtls_ssl_session_reset() on it before re-using it
 *                 for a new connection; the current connection must be closed.
int mbedtls_ssl_close_notify( mbedtls_ssl_context *ssl );
 * \brief          Free referenced items in an SSL context and clear memory
 * \param ssl      SSL context
void mbedtls_ssl_free( mbedtls_ssl_context *ssl );
 * \brief          Initialize an SSL configuration context
 *                 Just makes the context ready for
 *                 mbedtls_ssl_config_defaults() or mbedtls_ssl_config_free().
 * \note           You need to call mbedtls_ssl_config_defaults() unless you
 *                 manually set all of the relevent fields yourself.
 * \param conf     SSL configuration context
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf );
 * \brief          Load reasonnable default SSL configuration values.
 *                 (You need to call mbedtls_ssl_config_init() first.)
 * \param conf     SSL configuration context
 * \param endpoint MBEDTLS_SSL_IS_CLIENT or MBEDTLS_SSL_IS_SERVER
 * \param transport MBEDTLS_SSL_TRANSPORT_STREAM for TLS, or
 *                  MBEDTLS_SSL_TRANSPORT_DATAGRAM for DTLS
 * \param preset   a MBEDTLS_SSL_PRESET_XXX value
 * \note           See \c mbedtls_ssl_conf_transport() for notes on DTLS.
 * \return         0 if successful, or
 *                 MBEDTLS_ERR_XXX_ALLOC_FAILED on memory allocation error.
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset );
 * \brief          Free an SSL configuration context
 * \param conf     SSL configuration context
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf );
 * \brief          Initialize SSL session structure
 * \param session  SSL session
void mbedtls_ssl_session_init( mbedtls_ssl_session *session );
 * \brief          Free referenced items in an SSL session including the
 *                 peer certificate and clear memory
 * \note           A session object can be freed even if the SSL context
 *                 that was used to retrieve the session is still in use.
 * \param session  SSL session
void mbedtls_ssl_session_free( mbedtls_ssl_session *session );
# 50 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net_sockets.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 1 3 4
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 3 4
/* Copyright (C) 1989-2015 Free Software Foundation, Inc.
This file is part of GCC.
GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.
GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.
You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
# 52 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net_sockets.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdint.h" 1
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdint.h"
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
# 53 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net_sockets.h" 2
#define MBEDTLS_ERR_NET_SOCKET_FAILED -0x0042 /**< Failed to open a socket. */
#define MBEDTLS_ERR_NET_CONNECT_FAILED -0x0044 /**< The connection to the given server / port failed. */
#define MBEDTLS_ERR_NET_BIND_FAILED -0x0046 /**< Binding of the socket failed. */
#define MBEDTLS_ERR_NET_LISTEN_FAILED -0x0048 /**< Could not listen on the socket. */
#define MBEDTLS_ERR_NET_ACCEPT_FAILED -0x004A /**< Could not accept the incoming connection. */
#define MBEDTLS_ERR_NET_RECV_FAILED -0x004C /**< Reading information from the socket failed. */
#define MBEDTLS_ERR_NET_SEND_FAILED -0x004E /**< Sending information through the socket failed. */
#define MBEDTLS_ERR_NET_CONN_RESET -0x0050 /**< Connection was reset by peer. */
#define MBEDTLS_ERR_NET_UNKNOWN_HOST -0x0052 /**< Failed to get an IP address for the given hostname. */
#define MBEDTLS_ERR_NET_BUFFER_TOO_SMALL -0x0043 /**< Buffer is too small to hold the data. */
#define MBEDTLS_ERR_NET_INVALID_CONTEXT -0x0045 /**< The context is invalid, eg because it was free()ed. */
#define MBEDTLS_ERR_NET_POLL_FAILED -0x0047 /**< Polling the net context failed. */
#define MBEDTLS_ERR_NET_BAD_INPUT_DATA -0x0049 /**< Input invalid. */
#define MBEDTLS_NET_LISTEN_BACKLOG 10 /**< The backlog that listen() should use. */
#define MBEDTLS_NET_PROTO_TCP 0 /**< The TCP transport protocol */
#define MBEDTLS_NET_PROTO_UDP 1 /**< The UDP transport protocol */
#define MBEDTLS_NET_POLL_READ 1 /**< Used in \c mbedtls_net_poll to check for pending data  */
#define MBEDTLS_NET_POLL_WRITE 2 /**< Used in \c mbedtls_net_poll to check if write possible */
extern "C" {
 * Wrapper type for sockets.
 * Currently backed by just a file descriptor, but might be more in the future
 * (eg two file descriptors for combined IPv4 + IPv6 support, or additional
 * structures for hand-made UDP demultiplexing).
typedef struct mbedtls_net_context
    int fd; /**< The underlying file descriptor                 */
mbedtls_net_context;
 * \brief          Initialize a context
 *                 Just makes the context ready to be used or freed safely.
 * \param ctx      Context to initialize
void mbedtls_net_init( mbedtls_net_context *ctx );
 * \brief          Initiate a connection with host:port in the given protocol
 * \param ctx      Socket to use
 * \param host     Host to connect to
 * \param port     Port to connect to
 * \param proto    Protocol: MBEDTLS_NET_PROTO_TCP or MBEDTLS_NET_PROTO_UDP
 * \return         0 if successful, or one of:
 *                      MBEDTLS_ERR_NET_SOCKET_FAILED,
 *                      MBEDTLS_ERR_NET_UNKNOWN_HOST,
 *                      MBEDTLS_ERR_NET_CONNECT_FAILED
 * \note           Sets the socket in connected mode even with UDP.
int mbedtls_net_connect( mbedtls_net_context *ctx, const char *host, const char *port, int proto );
 * \brief          Create a receiving socket on bind_ip:port in the chosen
 *                 protocol. If bind_ip == NULL, all interfaces are bound.
 * \param ctx      Socket to use
 * \param bind_ip  IP to bind to, can be NULL
 * \param port     Port number to use
 * \param proto    Protocol: MBEDTLS_NET_PROTO_TCP or MBEDTLS_NET_PROTO_UDP
 * \return         0 if successful, or one of:
 *                      MBEDTLS_ERR_NET_SOCKET_FAILED,
 *                      MBEDTLS_ERR_NET_BIND_FAILED,
 *                      MBEDTLS_ERR_NET_LISTEN_FAILED
 * \note           Regardless of the protocol, opens the sockets and binds it.
 *                 In addition, make the socket listening if protocol is TCP.
int mbedtls_net_bind( mbedtls_net_context *ctx, const char *bind_ip, const char *port, int proto );
 * \brief           Accept a connection from a remote client
 * \param bind_ctx  Relevant socket
 * \param client_ctx Will contain the connected client socket
 * \param client_ip Will contain the client IP address, can be NULL
 * \param buf_size  Size of the client_ip buffer
 * \param ip_len    Will receive the size of the client IP written,
 *                  can be NULL if client_ip is null
 * \return          0 if successful, or
 *                  MBEDTLS_ERR_NET_ACCEPT_FAILED, or
 *                  MBEDTLS_ERR_NET_BUFFER_TOO_SMALL if buf_size is too small,
 *                  MBEDTLS_ERR_SSL_WANT_READ if bind_fd was set to
 *                  non-blocking and accept() would block.
int mbedtls_net_accept( mbedtls_net_context *bind_ctx,
                        mbedtls_net_context *client_ctx,
                        void *client_ip, size_t buf_size, size_t *ip_len );
 * \brief          Check and wait for the context to be ready for read/write
 * \param ctx      Socket to check
 * \param rw       Bitflag composed of MBEDTLS_NET_POLL_READ and
 *                 MBEDTLS_NET_POLL_WRITE specifying the events
 *                 to wait for:
 *                 - If MBEDTLS_NET_POLL_READ is set, the function
 *                   will return as soon as the net context is available
 *                   for reading.
 *                 - If MBEDTLS_NET_POLL_WRITE is set, the function
 *                   will return as soon as the net context is available
 *                   for writing.
 * \param timeout  Maximal amount of time to wait before returning,
 *                 in milliseconds. If \c timeout is zero, the
 *                 function returns immediately. If \c timeout is
 *                 -1u, the function blocks potentially indefinitely.
 * \return         Bitmask composed of MBEDTLS_NET_POLL_READ/WRITE
 *                 on success or timeout, or a negative return code otherwise.
int mbedtls_net_poll( mbedtls_net_context *ctx, uint32_t rw, uint32_t timeout );
 * \brief          Set the socket blocking
 * \param ctx      Socket to set
 * \return         0 if successful, or a non-zero error code
int mbedtls_net_set_block( mbedtls_net_context *ctx );
 * \brief          Set the socket non-blocking
 * \param ctx      Socket to set
 * \return         0 if successful, or a non-zero error code
int mbedtls_net_set_nonblock( mbedtls_net_context *ctx );
 * \brief          Portable usleep helper
 * \param usec     Amount of microseconds to sleep
 * \note           Real amount of time slept will not be less than
 *                 select()'s timeout granularity (typically, 10ms).
void mbedtls_net_usleep( unsigned long usec );
 * \brief          Read at most 'len' characters. If no error occurs,
 *                 the actual amount read is returned.
 * \param ctx      Socket
 * \param buf      The buffer to write to
 * \param len      Maximum length of the buffer
 * \return         the number of bytes received,
 *                 or a non-zero error code; with a non-blocking socket,
 *                 MBEDTLS_ERR_SSL_WANT_READ indicates read() would block.
int mbedtls_net_recv( void *ctx, unsigned char *buf, size_t len );
 * \brief          Write at most 'len' characters. If no error occurs,
 *                 the actual amount read is returned.
 * \param ctx      Socket
 * \param buf      The buffer to read from
 * \param len      The length of the buffer
 * \return         the number of bytes sent,
 *                 or a non-zero error code; with a non-blocking socket,
 *                 MBEDTLS_ERR_SSL_WANT_WRITE indicates write() would block.
int mbedtls_net_send( void *ctx, const unsigned char *buf, size_t len );
 * \brief          Read at most 'len' characters, blocking for at most
 *                 'timeout' seconds. If no error occurs, the actual amount
 *                 read is returned.
 * \param ctx      Socket
 * \param buf      The buffer to write to
 * \param len      Maximum length of the buffer
 * \param timeout  Maximum number of milliseconds to wait for data
 *                 0 means no timeout (wait forever)
 * \return         the number of bytes received,
 *                 or a non-zero error code:
 *                 MBEDTLS_ERR_SSL_TIMEOUT if the operation timed out,
 *                 MBEDTLS_ERR_SSL_WANT_READ if interrupted by a signal.
 * \note           This function will block (until data becomes available or
 *                 timeout is reached) even if the socket is set to
 *                 non-blocking. Handling timeouts with non-blocking reads
 *                 requires a different strategy.
int mbedtls_net_recv_timeout( void *ctx, unsigned char *buf, size_t len,
                      uint32_t timeout );
 * \brief          Gracefully shutdown the connection and free associated data
 * \param ctx      The context to free
void mbedtls_net_free( mbedtls_net_context *ctx );
# 29 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/net.h" 2
# 9 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/ssl_client.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/debug.h" 1
 * \file debug.h
 * \brief Functions for controlling and providing debug output from the library.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
#define MBEDTLS_DEBUG_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 31 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/debug.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h" 1
 * \file ssl.h
 * \brief SSL/TLS functions.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 34 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/debug.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ecp.h" 1
 * \file ecp.h
 * \brief This file provides an API for Elliptic Curves over GF(P) (ECP).
 * The use of ECP in cryptography and TLS is defined in
 * <em>Standards for Efficient Cryptography Group (SECG): SEC1
 * Elliptic Curve Cryptography</em> and
 * <em>RFC-4492: Elliptic Curve Cryptography (ECC) Cipher Suites
 * for Transport Layer Security (TLS)</em>.
 * <em>RFC-2409: The Internet Key Exchange (IKE)</em> defines ECP
 * group types.
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
# 37 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/debug.h" 2
# 70 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/debug.h"
#define MBEDTLS_SSL_DEBUG_MSG(level,args) do { } while( 0 )
#define MBEDTLS_SSL_DEBUG_RET(level,text,ret) do { } while( 0 )
#define MBEDTLS_SSL_DEBUG_BUF(level,text,buf,len) do { } while( 0 )
#define MBEDTLS_SSL_DEBUG_MPI(level,text,X) do { } while( 0 )
#define MBEDTLS_SSL_DEBUG_ECP(level,text,X) do { } while( 0 )
#define MBEDTLS_SSL_DEBUG_CRT(level,text,crt) do { } while( 0 )
extern "C" {
 * \brief   Set the threshold error level to handle globally all debug output.
 *          Debug messages that have a level over the threshold value are
 *          discarded.
 *          (Default value: 0 = No debug )
 * \param threshold     theshold level of messages to filter on. Messages at a
 *                      higher level will be discarded.
 *                          - Debug levels
 *                              - 0 No debug
 *                              - 1 Error
 *                              - 2 State change
 *                              - 3 Informational
 *                              - 4 Verbose
void mbedtls_debug_set_threshold( int threshold );
 * \brief    Print a message to the debug output. This function is always used
 *          through the MBEDTLS_SSL_DEBUG_MSG() macro, which supplies the ssl
 *          context, file and line number parameters.
 * \param ssl       SSL context
 * \param level     error level of the debug message
 * \param file      file the message has occurred in
 * \param line      line number the message has occurred at
 * \param format    format specifier, in printf format
 * \param ...       variables used by the format specifier
 * \attention       This function is intended for INTERNAL usage within the
 *                  library only.
void mbedtls_debug_print_msg( const mbedtls_ssl_context *ssl, int level,
                              const char *file, int line,
                              const char *format, ... );
 * \brief   Print the return value of a function to the debug output. This
 *          function is always used through the MBEDTLS_SSL_DEBUG_RET() macro,
 *          which supplies the ssl context, file and line number parameters.
 * \param ssl       SSL context
 * \param level     error level of the debug message
 * \param file      file the error has occurred in
 * \param line      line number the error has occurred in
 * \param text      the name of the function that returned the error
 * \param ret       the return code value
 * \attention       This function is intended for INTERNAL usage within the
 *                  library only.
void mbedtls_debug_print_ret( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, int ret );
 * \brief   Output a buffer of size len bytes to the debug output. This function
 *          is always used through the MBEDTLS_SSL_DEBUG_BUF() macro,
 *          which supplies the ssl context, file and line number parameters.
 * \param ssl       SSL context
 * \param level     error level of the debug message
 * \param file      file the error has occurred in
 * \param line      line number the error has occurred in
 * \param text      a name or label for the buffer being dumped. Normally the
 *                  variable or buffer name
 * \param buf       the buffer to be outputted
 * \param len       length of the buffer
 * \attention       This function is intended for INTERNAL usage within the
 *                  library only.
void mbedtls_debug_print_buf( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line, const char *text,
                      const unsigned char *buf, size_t len );
 * \brief   Print a MPI variable to the debug output. This function is always
 *          used through the MBEDTLS_SSL_DEBUG_MPI() macro, which supplies the
 *          ssl context, file and line number parameters.
 * \param ssl       SSL context
 * \param level     error level of the debug message
 * \param file      file the error has occurred in
 * \param line      line number the error has occurred in
 * \param text      a name or label for the MPI being output. Normally the
 *                  variable name
 * \param X         the MPI variable
 * \attention       This function is intended for INTERNAL usage within the
 *                  library only.
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_mpi *X );
 * \brief   Print an ECP point to the debug output. This function is always
 *          used through the MBEDTLS_SSL_DEBUG_ECP() macro, which supplies the
 *          ssl context, file and line number parameters.
 * \param ssl       SSL context
 * \param level     error level of the debug message
 * \param file      file the error has occurred in
 * \param line      line number the error has occurred in
 * \param text      a name or label for the ECP point being output. Normally the
 *                  variable name
 * \param X         the ECP point
 * \attention       This function is intended for INTERNAL usage within the
 *                  library only.
void mbedtls_debug_print_ecp( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_ecp_point *X );
 * \brief   Print a X.509 certificate structure to the debug output. This
 *          function is always used through the MBEDTLS_SSL_DEBUG_CRT() macro,
 *          which supplies the ssl context, file and line number parameters.
 * \param ssl       SSL context
 * \param level     error level of the debug message
 * \param file      file the error has occurred in
 * \param line      line number the error has occurred in
 * \param text      a name or label for the certificate being output
 * \param crt       X.509 certificate structure
 * \attention       This function is intended for INTERNAL usage within the
 *                  library only.
void mbedtls_debug_print_crt( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_x509_crt *crt );
# 10 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/ssl_client.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ssl.h" 1
 * \file ssl.h
 * \brief SSL/TLS functions.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 11 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/ssl_client.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/entropy.h" 1
 * \file entropy.h
 * \brief Entropy accumulator implementation
 *  Copyright (C) 2006-2016, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
#define MBEDTLS_ENTROPY_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 31 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/entropy.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 1 3 4
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 3 4
/* Copyright (C) 1989-2015 Free Software Foundation, Inc.
This file is part of GCC.
GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.
GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.
You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
# 34 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/entropy.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/sha512.h" 1
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/sha512.h"
 * \file sha512.h
 * \brief This file contains SHA-384 and SHA-512 definitions and functions.
 * The Secure Hash Algorithms 384 and 512 (SHA-384 and SHA-512) cryptographic
 * hash functions are defined in <em>FIPS 180-4: Secure Hash Standard (SHS)</em>.
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
#define MBEDTLS_SHA512_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 33 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/sha512.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 1 3 4
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 3 4
/* Copyright (C) 1989-2015 Free Software Foundation, Inc.
This file is part of GCC.
GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.
GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.
You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
# 36 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/sha512.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdint.h" 1
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdint.h"
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
# 37 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/sha512.h" 2
#define MBEDTLS_ERR_SHA512_HW_ACCEL_FAILED -0x0039 /**< SHA-512 hardware accelerator failed */
extern "C" {
// Regular implementation
 * \brief          The SHA-512 context structure.
 *                 The structure is used both for SHA-384 and for SHA-512
 *                 checksum calculations. The choice between these two is
 *                 made in the call to mbedtls_sha512_starts_ret().
typedef struct mbedtls_sha512_context
    uint64_t total[2]; /*!< The number of Bytes processed. */
    uint64_t state[8]; /*!< The intermediate digest state. */
    unsigned char buffer[128]; /*!< The data block being processed. */
    int is384; /*!< Determines which function to use:
                                     0: Use SHA-512, or 1: Use SHA-384. */
mbedtls_sha512_context;
 * \brief          This function initializes a SHA-512 context.
 * \param ctx      The SHA-512 context to initialize.
void mbedtls_sha512_init( mbedtls_sha512_context *ctx );
 * \brief          This function clears a SHA-512 context.
 * \param ctx      The SHA-512 context to clear.
void mbedtls_sha512_free( mbedtls_sha512_context *ctx );
 * \brief          This function clones the state of a SHA-512 context.
 * \param dst      The destination context.
 * \param src      The context to clone.
void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src );
 * \brief          This function starts a SHA-384 or SHA-512 checksum
 *                 calculation.
 * \param ctx      The SHA-512 context to initialize.
 * \param is384    Determines which function to use:
 *                 0: Use SHA-512, or 1: Use SHA-384.
 * \return         \c 0 on success.
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 );
 * \brief          This function feeds an input buffer into an ongoing
 *                 SHA-512 checksum calculation.
 * \param ctx      The SHA-512 context.
 * \param input    The buffer holding the input data.
 * \param ilen     The length of the input data.
 * \return         \c 0 on success.
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                    const unsigned char *input,
                    size_t ilen );
 * \brief          This function finishes the SHA-512 operation, and writes
 *                 the result to the output buffer. This function is for
 *                 internal use only.
 * \param ctx      The SHA-512 context.
 * \param output   The SHA-384 or SHA-512 checksum result.
 * \return         \c 0 on success.
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] );
 * \brief          This function processes a single data block within
 *                 the ongoing SHA-512 computation.
 * \param ctx      The SHA-512 context.
 * \param data     The buffer holding one block of data.
 * \return         \c 0 on success.
int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] );
#define MBEDTLS_DEPRECATED 
 * \brief          This function starts a SHA-384 or SHA-512 checksum
 *                 calculation.
 * \deprecated     Superseded by mbedtls_sha512_starts_ret() in 2.7.0
 * \param ctx      The SHA-512 context to initialize.
 * \param is384    Determines which function to use:
 *                 0: Use SHA-512, or 1: Use SHA-384.
 void mbedtls_sha512_starts( mbedtls_sha512_context *ctx,
                                               int is384 );
 * \brief          This function feeds an input buffer into an ongoing
 *                 SHA-512 checksum calculation.
 * \deprecated     Superseded by mbedtls_sha512_update_ret() in 2.7.0.
 * \param ctx      The SHA-512 context.
 * \param input    The buffer holding the data.
 * \param ilen     The length of the input data.
 void mbedtls_sha512_update( mbedtls_sha512_context *ctx,
                                               const unsigned char *input,
                                               size_t ilen );
 * \brief          This function finishes the SHA-512 operation, and writes
 *                 the result to the output buffer.
 * \deprecated     Superseded by mbedtls_sha512_finish_ret() in 2.7.0.
 * \param ctx      The SHA-512 context.
 * \param output   The SHA-384 or SHA-512 checksum result.
 void mbedtls_sha512_finish( mbedtls_sha512_context *ctx,
                                               unsigned char output[64] );
 * \brief          This function processes a single data block within
 *                 the ongoing SHA-512 computation. This function is for
 *                 internal use only.
 * \deprecated     Superseded by mbedtls_internal_sha512_process() in 2.7.0.
 * \param ctx      The SHA-512 context.
 * \param data     The buffer holding one block of data.
 void mbedtls_sha512_process(
                                            mbedtls_sha512_context *ctx,
                                            const unsigned char data[128] );
#undef MBEDTLS_DEPRECATED
 * \brief          This function calculates the SHA-512 or SHA-384
 *                 checksum of a buffer.
 *                 The function allocates the context, performs the
 *                 calculation, and frees the context.
 *                 The SHA-512 result is calculated as
 *                 output = SHA-512(input buffer).
 * \param input    The buffer holding the input data.
 * \param ilen     The length of the input data.
 * \param output   The SHA-384 or SHA-512 checksum result.
 * \param is384    Determines which function to use:
 *                 0: Use SHA-512, or 1: Use SHA-384.
 * \return         \c 0 on success.
int mbedtls_sha512_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[64],
                        int is384 );
#define MBEDTLS_DEPRECATED 
 * \brief          This function calculates the SHA-512 or SHA-384
 *                 checksum of a buffer.
 *                 The function allocates the context, performs the
 *                 calculation, and frees the context.
 *                 The SHA-512 result is calculated as
 *                 output = SHA-512(input buffer).
 * \deprecated     Superseded by mbedtls_sha512_ret() in 2.7.0
 * \param input    The buffer holding the data.
 * \param ilen     The length of the input data.
 * \param output   The SHA-384 or SHA-512 checksum result.
 * \param is384    Determines which function to use:
 *                 0: Use SHA-512, or 1: Use SHA-384.
 void mbedtls_sha512( const unsigned char *input,
                                        size_t ilen,
                                        unsigned char output[64],
                                        int is384 );
#undef MBEDTLS_DEPRECATED
 /**
 * \brief          The SHA-384 or SHA-512 checkup routine.
 * \return         \c 0 on success.
 * \return         \c 1 on failure.
int mbedtls_sha512_self_test( int verbose );
# 37 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/entropy.h" 2
#define MBEDTLS_ENTROPY_SHA512_ACCUMULATOR 
# 53 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/entropy.h"
#define MBEDTLS_ERR_ENTROPY_SOURCE_FAILED -0x003C /**< Critical entropy source failure. */
#define MBEDTLS_ERR_ENTROPY_MAX_SOURCES -0x003E /**< No more sources can be added. */
#define MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED -0x0040 /**< No sources have been added to poll. */
#define MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE -0x003D /**< No strong sources have been added to poll. */
#define MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR -0x003F /**< Read/write error in file. */
 * \name SECTION: Module settings
 * The configuration options you can set for this module are in this section.
 * Either change them in config.h or define them on the compiler command line.
 * \{
#define MBEDTLS_ENTROPY_MAX_SOURCES 20 /**< Maximum number of sources supported */
#define MBEDTLS_ENTROPY_MAX_GATHER 128 /**< Maximum amount requested from entropy sources */
/* \} name SECTION: Module settings */
#define MBEDTLS_ENTROPY_BLOCK_SIZE 64 /**< Block size of entropy accumulator (SHA-512) */
#define MBEDTLS_ENTROPY_MAX_SEED_SIZE 1024 /**< Maximum size of seed we read from seed file */
#define MBEDTLS_ENTROPY_SOURCE_MANUAL MBEDTLS_ENTROPY_MAX_SOURCES
#define MBEDTLS_ENTROPY_SOURCE_STRONG 1 /**< Entropy source is strong   */
#define MBEDTLS_ENTROPY_SOURCE_WEAK 0 /**< Entropy source is weak     */
extern "C" {
 * \brief           Entropy poll callback pointer
 * \param data      Callback-specific data pointer
 * \param output    Data to fill
 * \param len       Maximum size to provide
 * \param olen      The actual amount of bytes put into the buffer (Can be 0)
 * \return          0 if no critical failures occurred,
 *                  MBEDTLS_ERR_ENTROPY_SOURCE_FAILED otherwise
typedef int (*mbedtls_entropy_f_source_ptr)(void *data, unsigned char *output, size_t len,
                            size_t *olen);
 * \brief           Entropy source state
typedef struct mbedtls_entropy_source_state
    mbedtls_entropy_f_source_ptr f_source; /**< The entropy source callback */
    void * p_source; /**< The callback data pointer */
    size_t size; /**< Amount received in bytes */
    size_t threshold; /**< Minimum bytes required before release */
    int strong; /**< Is the source strong? */
mbedtls_entropy_source_state;
 * \brief           Entropy context structure
typedef struct mbedtls_entropy_context
    int accumulator_started;
    mbedtls_sha512_context accumulator;
    int source_count;
    mbedtls_entropy_source_state source[20 /**< Maximum number of sources supported */];
# 142 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/entropy.h"
mbedtls_entropy_context;
 * \brief           Initialize the context
 * \param ctx       Entropy context to initialize
void mbedtls_entropy_init( mbedtls_entropy_context *ctx );
 * \brief           Free the data in the context
 * \param ctx       Entropy context to free
void mbedtls_entropy_free( mbedtls_entropy_context *ctx );
 * \brief           Adds an entropy source to poll
 *                  (Thread-safe if MBEDTLS_THREADING_C is enabled)
 * \param ctx       Entropy context
 * \param f_source  Entropy function
 * \param p_source  Function data
 * \param threshold Minimum required from source before entropy is released
 *                  ( with mbedtls_entropy_func() ) (in bytes)
 * \param strong    MBEDTLS_ENTROPY_SOURCE_STRONG or
 *                  MBEDTLS_ENTROPY_SOURCE_WEAK.
 *                  At least one strong source needs to be added.
 *                  Weaker sources (such as the cycle counter) can be used as
 *                  a complement.
 * \return          0 if successful or MBEDTLS_ERR_ENTROPY_MAX_SOURCES
int mbedtls_entropy_add_source( mbedtls_entropy_context *ctx,
                        mbedtls_entropy_f_source_ptr f_source, void *p_source,
                        size_t threshold, int strong );
 * \brief           Trigger an extra gather poll for the accumulator
 *                  (Thread-safe if MBEDTLS_THREADING_C is enabled)
 * \param ctx       Entropy context
 * \return          0 if successful, or MBEDTLS_ERR_ENTROPY_SOURCE_FAILED
int mbedtls_entropy_gather( mbedtls_entropy_context *ctx );
 * \brief           Retrieve entropy from the accumulator
 *                  (Maximum length: MBEDTLS_ENTROPY_BLOCK_SIZE)
 *                  (Thread-safe if MBEDTLS_THREADING_C is enabled)
 * \param data      Entropy context
 * \param output    Buffer to fill
 * \param len       Number of bytes desired, must be at most MBEDTLS_ENTROPY_BLOCK_SIZE
 * \return          0 if successful, or MBEDTLS_ERR_ENTROPY_SOURCE_FAILED
int mbedtls_entropy_func( void *data, unsigned char *output, size_t len );
 * \brief           Add data to the accumulator manually
 *                  (Thread-safe if MBEDTLS_THREADING_C is enabled)
 * \param ctx       Entropy context
 * \param data      Data to add
 * \param len       Length of data
 * \return          0 if successful
int mbedtls_entropy_update_manual( mbedtls_entropy_context *ctx,
                           const unsigned char *data, size_t len );
# 229 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/entropy.h"
 * \brief               Write a seed file
 * \param ctx           Entropy context
 * \param path          Name of the file
 * \return              0 if successful,
 *                      MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR on file error, or
 *                      MBEDTLS_ERR_ENTROPY_SOURCE_FAILED
int mbedtls_entropy_write_seed_file( mbedtls_entropy_context *ctx, const char *path );
 * \brief               Read and update a seed file. Seed is added to this
 *                      instance. No more than MBEDTLS_ENTROPY_MAX_SEED_SIZE bytes are
 *                      read from the seed file. The rest is ignored.
 * \param ctx           Entropy context
 * \param path          Name of the file
 * \return              0 if successful,
 *                      MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR on file error,
 *                      MBEDTLS_ERR_ENTROPY_SOURCE_FAILED
int mbedtls_entropy_update_seed_file( mbedtls_entropy_context *ctx, const char *path );
 * \brief          Checkup routine
 *                 This module self-test also calls the entropy self-test,
 *                 mbedtls_entropy_source_self_test();
 * \return         0 if successful, or 1 if a test failed
int mbedtls_entropy_self_test( int verbose );
 * \brief          Checkup routine
 *                 Verifies the integrity of the hardware entropy source
 *                 provided by the function 'mbedtls_hardware_poll()'.
 *                 Note this is the only hardware entropy source that is known
 *                 at link time, and other entropy sources configured
 *                 dynamically at runtime by the function
 *                 mbedtls_entropy_add_source() will not be tested.
 * \return         0 if successful, or 1 if a test failed
int mbedtls_entropy_source_self_test( int verbose );
# 12 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/ssl_client.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ctr_drbg.h" 1
 * \file ctr_drbg.h
 * \brief    This file contains CTR_DRBG definitions and functions.
 * CTR_DRBG is a standardized way of building a PRNG from a block-cipher
 * in counter mode operation, as defined in <em>NIST SP 800-90A:
 * Recommendation for Random Number Generation Using Deterministic Random
 * Bit Generators</em>.
 * The Mbed TLS implementation of CTR_DRBG uses AES-256 as the underlying
 * block cipher.
 *  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
#define MBEDTLS_CTR_DRBG_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/aes.h" 1
 * \file aes.h
 * \brief   This file contains AES definitions and functions.
 *          The Advanced Encryption Standard (AES) specifies a FIPS-approved
 *          cryptographic algorithm that can be used to protect electronic
 *          data.
 *          The AES algorithm is a symmetric block cipher that can
 *          encrypt and decrypt information. For more information, see
 *          <em>FIPS Publication 197: Advanced Encryption Standard</em> and
 *          <em>ISO/IEC 18033-2:2006: Information technology -- Security
 *          techniques -- Encryption algorithms -- Part 2: Asymmetric
 *          ciphers</em>.
 *          The AES-XTS block mode is standardized by NIST SP 800-38E
 *          <https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-38e.pdf>
 *          and described in detail by IEEE P1619
 *          <https://ieeexplore.ieee.org/servlet/opac?punumber=4375278>.
/*  Copyright (C) 2006-2018, Arm Limited (or its affiliates), All Rights Reserved.
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of Mbed TLS (https://tls.mbed.org)
#define MBEDTLS_AES_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/esp_config.h" 1
 * \brief Default mbedTLS configuration options for esp-idf
 *  This set of compile-time options may be used to enable
 *  or disable features selectively, and reduce the global
 *  memory footprint.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
# 48 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/aes.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 1 3 4
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 3 4
/* Copyright (C) 1989-2015 Free Software Foundation, Inc.
This file is part of GCC.
GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.
GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.
You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
# 51 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/aes.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdint.h" 1
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdint.h"
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
# 52 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/aes.h" 2
/* padlock.c and aesni.c rely on these values! */
#define MBEDTLS_AES_ENCRYPT 1 /**< AES encryption. */
#define MBEDTLS_AES_DECRYPT 0 /**< AES decryption. */
/* Error codes in range 0x0020-0x0022 */
#define MBEDTLS_ERR_AES_INVALID_KEY_LENGTH -0x0020 /**< Invalid key length. */
#define MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH -0x0022 /**< Invalid data input length. */
/* Error codes in range 0x0021-0x0025 */
#define MBEDTLS_ERR_AES_BAD_INPUT_DATA -0x0021 /**< Invalid input data. */
#define MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE -0x0023 /**< Feature not available. For example, an unsupported AES key size. */
#define MBEDTLS_ERR_AES_HW_ACCEL_FAILED -0x0025 /**< AES hardware accelerator failed. */
extern "C" {
# 111 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/aes.h"
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/aes_alt.h" 1
 * \file aes_alt.h
 * \brief AES block cipher
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
#define AES_ALT_H 
extern "C" {
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/hwcrypto/aes.h" 1
 * \brief AES block cipher, ESP32 hardware accelerated version
 * Based on mbedTLS FIPS-197 compliant version.
 *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
 *  Additions Copyright (C) 2016, Espressif Systems (Shanghai) PTE Ltd
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
#define ESP_AES_H 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/esp_types.h" 1
// Copyright 2010-2016 Espressif Systems (Shanghai) PTE LTD
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
# 28 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/hwcrypto/aes.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/aes.h" 1
  ROM functions for hardware AES support.
  It is not recommended to use these functions directly,
  use the wrapper functions in hwcrypto/aes.h instead.
// Copyright 2015-2016 Espressif Systems (Shanghai) PTE LTD
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
#define _ROM_AES_H_ 
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/newlib/stdint.h" 1
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
# 26 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/aes.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stdbool.h" 1 3 4
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stdbool.h" 3 4
/* Copyright (C) 1998-2015 Free Software Foundation, Inc.
This file is part of GCC.
GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.
GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.
You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */
 * ISO C Standard:  7.16  Boolean type and values  <stdbool.h>
# 27 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/aes.h" 2
# 29 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/rom/aes.h"
extern "C" {
//TODO, add comment for aes apis
enum AES_BITS {
    AES128,
    AES192,
    AES256
void ets_aes_enable(void);
void ets_aes_disable(void);
void ets_aes_set_endian(bool key_word_swap, bool key_byte_swap,
                        bool in_word_swap, bool in_byte_swap,
                        bool out_word_swap, bool out_byte_swap);
bool ets_aes_setkey_enc(const uint8_t *key, enum AES_BITS bits);
bool ets_aes_setkey_dec(const uint8_t *key, enum AES_BITS bits);
void ets_aes_crypt(const uint8_t input[16], uint8_t output[16]);
# 29 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/esp32/hwcrypto/aes.h" 2
extern "C" {
/* padlock.c and aesni.c rely on these values! */
#define ESP_AES_ENCRYPT 1
#define ESP_AES_DECRYPT 0
#define ERR_ESP_AES_INVALID_KEY_LENGTH -0x0020 /**< Invalid key length. */
#define ERR_ESP_AES_INVALID_INPUT_LENGTH -0x0022 /**< Invalid data input length. */
 * \brief          AES context structure
typedef struct {
    uint8_t key_bytes;
    volatile uint8_t key_in_hardware; /* This variable is used for fault injection checks, so marked volatile to avoid optimisation */
    uint8_t key[32];
} esp_aes_context;
 * \brief The AES XTS context-type definition.
typedef struct
    esp_aes_context crypt; /*!< The AES context to use for AES block
                                        encryption or decryption. */
    esp_aes_context tweak; /*!< The AES context used for tweak
                                        computation. */
} esp_aes_xts_context;
 * \brief Lock access to AES hardware unit
 * AES hardware unit can only be used by one
 * consumer at a time.
 * esp_aes_xxx API calls automatically manage locking & unlocking of
 * hardware, this function is only needed if you want to call
 * ets_aes_xxx functions directly.
void esp_aes_acquire_hardware( void );
 * \brief Unlock access to AES hardware unit
 * esp_aes_xxx API calls automatically manage locking & unlocking of
 * hardware, this function is only needed if you want to call
 * ets_aes_xxx functions directly.
void esp_aes_release_hardware( void );
 * \brief          Initialize AES context
 * \param ctx      AES context to be initialized
void esp_aes_init( esp_aes_context *ctx );
 * \brief          Clear AES context
 * \param ctx      AES context to be cleared
void esp_aes_free( esp_aes_context *ctx );
 * \brief          This function initializes the specified AES XTS context.
 *                 It must be the first API called before using
 *                 the context.
 * \param ctx      The AES XTS context to initialize.
void esp_aes_xts_init( esp_aes_xts_context *ctx );
 * \brief          This function releases and clears the specified AES XTS context.
 * \param ctx      The AES XTS context to clear.
void esp_aes_xts_free( esp_aes_xts_context *ctx );
 * \brief          AES set key schedule (encryption or decryption)
 * \param ctx      AES context to be initialized
 * \param key      encryption key
 * \param keybits  must be 128, 192 or 256
 * \return         0 if successful, or ERR_AES_INVALID_KEY_LENGTH
int esp_aes_setkey( esp_aes_context *ctx, const unsigned char *key, unsigned int keybits );
 * \brief          AES-ECB block encryption/decryption
 * \param ctx      AES context
 * \param mode     AES_ENCRYPT or AES_DECRYPT
 * \param input    16-byte input block
 * \param output   16-byte output block
 * \return         0 if successful
int esp_aes_crypt_ecb( esp_aes_context *ctx, int mode, const unsigned char input[16], unsigned char output[16] );
 * \brief          AES-CBC buffer encryption/decryption
 *                 Length should be a multiple of the block
 *                 size (16 bytes)
 * \note           Upon exit, the content of the IV is updated so that you can
 *                 call the function same function again on the following
 *                 block(s) of data and get the same result as if it was
 *                 encrypted in one call. This allows a "streaming" usage.
 *                 If on the other hand you need to retain the contents of the
 *                 IV, you should either save it manually or use the cipher
 *                 module instead.
 * \param ctx      AES context
 * \param mode     AES_ENCRYPT or AES_DECRYPT
 * \param length   length of the input data
 * \param iv       initialization vector (updated after use)
 * \param input    buffer holding the input data
 * \param output   buffer holding the output data
 * \return         0 if successful, or ERR_AES_INVALID_INPUT_LENGTH
int esp_aes_crypt_cbc( esp_aes_context *ctx,
                       int mode,
                       size_t length,
                       unsigned char iv[16],
                       const unsigned char *input,
                       unsigned char *output );
 * \brief          AES-CFB128 buffer encryption/decryption.
 * Note: Due to the nature of CFB you should use the same key schedule for
 * both encryption and decryption. So a context initialized with
 * esp_aes_setkey_enc() for both AES_ENCRYPT and AES_DECRYPT.
 * \note           Upon exit, the content of the IV is updated so that you can
 *                 call the function same function again on the following
 *                 block(s) of data and get the same result as if it was
 *                 encrypted in one call. This allows a "streaming" usage.
 *                 If on the other hand you need to retain the contents of the
 *                 IV, you should either save it manually or use the cipher
 *                 module instead.
 * \param ctx      AES context
 * \param mode     AES_ENCRYPT or AES_DECRYPT
 * \param length   length of the input data
 * \param iv_off   offset in IV (updated after use)
 * \param iv       initialization vector (updated after use)
 * \param input    buffer holding the input data
 * \param output   buffer holding the output data
 * \return         0 if successful
int esp_aes_crypt_cfb128( esp_aes_context *ctx,
                          int mode,
                          size_t length,
                          size_t *iv_off,
                          unsigned char iv[16],
                          const unsigned char *input,
                          unsigned char *output );
 * \brief          AES-CFB8 buffer encryption/decryption.
 * Note: Due to the nature of CFB you should use the same key schedule for
 * both encryption and decryption. So a context initialized with
 * esp_aes_setkey_enc() for both AES_ENCRYPT and AES_DECRYPT.
 * \note           Upon exit, the content of the IV is updated so that you can
 *                 call the function same function again on the following
 *                 block(s) of data and get the same result as if it was
 *                 encrypted in one call. This allows a "streaming" usage.
 *                 If on the other hand you need to retain the contents of the
 *                 IV, you should either save it manually or use the cipher
 *                 module instead.
 * \param ctx      AES context
 * \param mode     AES_ENCRYPT or AES_DECRYPT
 * \param length   length of the input data
 * \param iv       initialization vector (updated after use)
 * \param input    buffer holding the input data
 * \param output   buffer holding the output data
 * \return         0 if successful
int esp_aes_crypt_cfb8( esp_aes_context *ctx,
                        int mode,
                        size_t length,
                        unsigned char iv[16],
                        const unsigned char *input,
                        unsigned char *output );
 * \brief               AES-CTR buffer encryption/decryption
 * Warning: You have to keep the maximum use of your counter in mind!
 * Note: Due to the nature of CTR you should use the same key schedule for
 * both encryption and decryption. So a context initialized with
 * esp_aes_setkey_enc() for both AES_ENCRYPT and AES_DECRYPT.
 * \param ctx           AES context
 * \param length        The length of the data
 * \param nc_off        The offset in the current stream_block (for resuming
 *                      within current cipher stream). The offset pointer to
 *                      should be 0 at the start of a stream.
 * \param nonce_counter The 128-bit nonce and counter.
 * \param stream_block  The saved stream-block for resuming. Is overwritten
 *                      by the function.
 * \param input         The input data stream
 * \param output        The output data stream
 * \return         0 if successful
int esp_aes_crypt_ctr( esp_aes_context *ctx,
                       size_t length,
                       size_t *nc_off,
                       unsigned char nonce_counter[16],
                       unsigned char stream_block[16],
                       const unsigned char *input,
                       unsigned char *output );
 * \brief          This function prepares an XTS context for encryption and
 *                 sets the encryption key.
 * \param ctx      The AES XTS context to which the key should be bound.
 * \param key      The encryption key. This is comprised of the XTS key1
 *                 concatenated with the XTS key2.
 * \param keybits  The size of \p key passed in bits. Valid options are:
 *                 <ul><li>256 bits (each of key1 and key2 is a 128-bit key)</li>
 *                 <li>512 bits (each of key1 and key2 is a 256-bit key)</li></ul>
 * \return         \c 0 on success.
 * \return         #MBEDTLS_ERR_AES_INVALID_KEY_LENGTH on failure.
int esp_aes_xts_setkey_enc( esp_aes_xts_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits );
 * \brief          This function prepares an XTS context for decryption and
 *                 sets the decryption key.
 * \param ctx      The AES XTS context to which the key should be bound.
 * \param key      The decryption key. This is comprised of the XTS key1
 *                 concatenated with the XTS key2.
 * \param keybits  The size of \p key passed in bits. Valid options are:
 *                 <ul><li>256 bits (each of key1 and key2 is a 128-bit key)</li>
 *                 <li>512 bits (each of key1 and key2 is a 256-bit key)</li></ul>
 * \return         \c 0 on success.
 * \return         #MBEDTLS_ERR_AES_INVALID_KEY_LENGTH on failure.
int esp_aes_xts_setkey_dec( esp_aes_xts_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits );
 * \brief           Internal AES block encryption function
 *                  (Only exposed to allow overriding it,
 *                  see AES_ENCRYPT_ALT)
 * \param ctx       AES context
 * \param input     Plaintext block
 * \param output    Output (ciphertext) block
int esp_internal_aes_encrypt( esp_aes_context *ctx, const unsigned char input[16], unsigned char output[16] );
/** Deprecated, see esp_aes_internal_encrypt */
void esp_aes_encrypt( esp_aes_context *ctx, const unsigned char input[16], unsigned char output[16] ) __attribute__((deprecated));
 * \brief           Internal AES block decryption function
 *                  (Only exposed to allow overriding it,
 *                  see AES_DECRYPT_ALT)
 * \param ctx       AES context
 * \param input     Ciphertext block
 * \param output    Output (plaintext) block
int esp_internal_aes_decrypt( esp_aes_context *ctx, const unsigned char input[16], unsigned char output[16] );
/** Deprecated, see esp_aes_internal_decrypt */
void esp_aes_decrypt( esp_aes_context *ctx, const unsigned char input[16], unsigned char output[16] ) __attribute__((deprecated));
# 32 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/aes_alt.h" 2
typedef esp_aes_context mbedtls_aes_context;
#define mbedtls_aes_init esp_aes_init
#define mbedtls_aes_free esp_aes_free
#define mbedtls_aes_setkey_enc esp_aes_setkey
#define mbedtls_aes_setkey_dec esp_aes_setkey
#define mbedtls_aes_crypt_ecb esp_aes_crypt_ecb
#define mbedtls_aes_crypt_cbc esp_aes_crypt_cbc
#define mbedtls_aes_crypt_cfb128 esp_aes_crypt_cfb128
#define mbedtls_aes_crypt_cfb8 esp_aes_crypt_cfb8
#define mbedtls_aes_crypt_ctr esp_aes_crypt_ctr
typedef esp_aes_xts_context mbedtls_aes_xts_context;
#define mbedtls_aes_xts_init esp_aes_xts_init
#define mbedtls_aes_xts_free esp_aes_xts_free
#define mbedtls_aes_xts_setkey_enc esp_aes_xts_setkey_enc
#define mbedtls_aes_xts_setkey_dec esp_aes_xts_setkey_dec
#define mbedtls_aes_crypt_xts esp_aes_crypt_xts
#define mbedtls_internal_aes_encrypt esp_internal_aes_encrypt
#define mbedtls_internal_aes_decrypt esp_internal_aes_decrypt
# 112 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/aes.h" 2
 * \brief          This function initializes the specified AES context.
 *                 It must be the first API called before using
 *                 the context.
 * \param ctx      The AES context to initialize.
void esp_aes_init( mbedtls_aes_context *ctx );
 * \brief          This function releases and clears the specified AES context.
 * \param ctx      The AES context to clear.
void esp_aes_free( mbedtls_aes_context *ctx );
 * \brief          This function initializes the specified AES XTS context.
 *                 It must be the first API called before using
 *                 the context.
 * \param ctx      The AES XTS context to initialize.
void esp_aes_xts_init( mbedtls_aes_xts_context *ctx );
 * \brief          This function releases and clears the specified AES XTS context.
 * \param ctx      The AES XTS context to clear.
void esp_aes_xts_free( mbedtls_aes_xts_context *ctx );
 * \brief          This function sets the encryption key.
 * \param ctx      The AES context to which the key should be bound.
 * \param key      The encryption key.
 * \param keybits  The size of data passed in bits. Valid options are:
 *                 <ul><li>128 bits</li>
 *                 <li>192 bits</li>
 *                 <li>256 bits</li></ul>
 * \return         \c 0 on success.
 * \return         #MBEDTLS_ERR_AES_INVALID_KEY_LENGTH on failure.
int esp_aes_setkey( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits );
 * \brief          This function sets the decryption key.
 * \param ctx      The AES context to which the key should be bound.
 * \param key      The decryption key.
 * \param keybits  The size of data passed. Valid options are:
 *                 <ul><li>128 bits</li>
 *                 <li>192 bits</li>
 *                 <li>256 bits</li></ul>
 * \return         \c 0 on success.
 * \return         #MBEDTLS_ERR_AES_INVALID_KEY_LENGTH on failure.
int esp_aes_setkey( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits );
 * \brief          This function prepares an XTS context for encryption and
 *                 sets the encryption key.
 * \param ctx      The AES XTS context to which the key should be bound.
 * \param key      The encryption key. This is comprised of the XTS key1
 *                 concatenated with the XTS key2.
 * \param keybits  The size of \p key passed in bits. Valid options are:
 *                 <ul><li>256 bits (each of key1 and key2 is a 128-bit key)</li>
 *                 <li>512 bits (each of key1 and key2 is a 256-bit key)</li></ul>
 * \return         \c 0 on success.
 * \return         #MBEDTLS_ERR_AES_INVALID_KEY_LENGTH on failure.
int esp_aes_xts_setkey_enc( mbedtls_aes_xts_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits );
 * \brief          This function prepares an XTS context for decryption and
 *                 sets the decryption key.
 * \param ctx      The AES XTS context to which the key should be bound.
 * \param key      The decryption key. This is comprised of the XTS key1
 *                 concatenated with the XTS key2.
 * \param keybits  The size of \p key passed in bits. Valid options are:
 *                 <ul><li>256 bits (each of key1 and key2 is a 128-bit key)</li>
 *                 <li>512 bits (each of key1 and key2 is a 256-bit key)</li></ul>
 * \return         \c 0 on success.
 * \return         #MBEDTLS_ERR_AES_INVALID_KEY_LENGTH on failure.
int esp_aes_xts_setkey_dec( mbedtls_aes_xts_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits );
 * \brief          This function performs an AES single-block encryption or
 *                 decryption operation.
 *                 It performs the operation defined in the \p mode parameter
 *                 (encrypt or decrypt), on the input data buffer defined in
 *                 the \p input parameter.
 *                 mbedtls_aes_init(), and either mbedtls_aes_setkey_enc() or
 *                 mbedtls_aes_setkey_dec() must be called before the first
 *                 call to this API with the same context.
 * \param ctx      The AES context to use for encryption or decryption.
 * \param mode     The AES operation: #MBEDTLS_AES_ENCRYPT or
 *                 #MBEDTLS_AES_DECRYPT.
 * \param input    The 16-Byte buffer holding the input data.
 * \param output   The 16-Byte buffer holding the output data.
 * \return         \c 0 on success.
int esp_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] );
 * \brief  This function performs an AES-CBC encryption or decryption operation
 *         on full blocks.
 *         It performs the operation defined in the \p mode
 *         parameter (encrypt/decrypt), on the input data buffer defined in
 *         the \p input parameter.
 *         It can be called as many times as needed, until all the input
 *         data is processed. mbedtls_aes_init(), and either
 *         mbedtls_aes_setkey_enc() or mbedtls_aes_setkey_dec() must be called
 *         before the first call to this API with the same context.
 * \note   This function operates on aligned blocks, that is, the input size
 *         must be a multiple of the AES block size of 16 Bytes.
 * \note   Upon exit, the content of the IV is updated so that you can
 *         call the same function again on the next
 *         block(s) of data and get the same result as if it was
 *         encrypted in one call. This allows a "streaming" usage.
 *         If you need to retain the contents of the IV, you should
 *         either save it manually or use the cipher module instead.
 * \param ctx      The AES context to use for encryption or decryption.
 * \param mode     The AES operation: #MBEDTLS_AES_ENCRYPT or
 *                 #MBEDTLS_AES_DECRYPT.
 * \param length   The length of the input data in Bytes. This must be a
 *                 multiple of the block size (16 Bytes).
 * \param iv       Initialization vector (updated after use).
 * \param input    The buffer holding the input data.
 * \param output   The buffer holding the output data.
 * \return         \c 0 on success.
 * \return         #MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH
 *                 on failure.
int esp_aes_crypt_cbc( mbedtls_aes_context *ctx,
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output );
 * \brief      This function performs an AES-XTS encryption or decryption
 *             operation for an entire XTS data unit.
 *             AES-XTS encrypts or decrypts blocks based on their location as
 *             defined by a data unit number. The data unit number must be
 *             provided by \p data_unit.
 *             NIST SP 800-38E limits the maximum size of a data unit to 2^20
 *             AES blocks. If the data unit is larger than this, this function
 *             returns #MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH.
 * \param ctx          The AES XTS context to use for AES XTS operations.
 * \param mode         The AES operation: #MBEDTLS_AES_ENCRYPT or
 *                     #MBEDTLS_AES_DECRYPT.
 * \param length       The length of a data unit in bytes. This can be any
 *                     length between 16 bytes and 2^24 bytes inclusive
 *                     (between 1 and 2^20 block cipher blocks).
 * \param data_unit    The address of the data unit encoded as an array of 16
 *                     bytes in little-endian format. For disk encryption, this
 *                     is typically the index of the block device sector that
 *                     contains the data.
 * \param input        The buffer holding the input data (which is an entire
 *                     data unit). This function reads \p length bytes from \p
 *                     input.
 * \param output       The buffer holding the output data (which is an entire
 *                     data unit). This function writes \p length bytes to \p
 *                     output.
 * \return             \c 0 on success.
 * \return             #MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH if \p length is
 *                     smaller than an AES block in size (16 bytes) or if \p
 *                     length is larger than 2^20 blocks (16 MiB).
int esp_aes_crypt_xts( mbedtls_aes_xts_context *ctx,
                           int mode,
                           size_t length,
                           const unsigned char data_unit[16],
                           const unsigned char *input,
                           unsigned char *output );
 * \brief This function performs an AES-CFB128 encryption or decryption
 *        operation.
 *        It performs the operation defined in the \p mode
 *        parameter (encrypt or decrypt), on the input data buffer
 *        defined in the \p input parameter.
 *        For CFB, you must set up the context with mbedtls_aes_setkey_enc(),
 *        regardless of whether you are performing an encryption or decryption
 *        operation, that is, regardless of the \p mode parameter. This is
 *        because CFB mode uses the same key schedule for encryption and
 *        decryption.
 * \note  Upon exit, the content of the IV is updated so that you can
 *        call the same function again on the next
 *        block(s) of data and get the same result as if it was
 *        encrypted in one call. This allows a "streaming" usage.
 *        If you need to retain the contents of the
 *        IV, you must either save it manually or use the cipher
 *        module instead.
 * \param ctx      The AES context to use for encryption or decryption.
 * \param mode     The AES operation: #MBEDTLS_AES_ENCRYPT or
 *                 #MBEDTLS_AES_DECRYPT.
 * \param length   The length of the input data.
 * \param iv_off   The offset in IV (updated after use).
 * \param iv       The initialization vector (updated after use).
 * \param input    The buffer holding the input data.
 * \param output   The buffer holding the output data.
 * \return         \c 0 on success.
int esp_aes_crypt_cfb128( mbedtls_aes_context *ctx,
                       int mode,
                       size_t length,
                       size_t *iv_off,
                       unsigned char iv[16],
                       const unsigned char *input,
                       unsigned char *output );
 * \brief This function performs an AES-CFB8 encryption or decryption
 *        operation.
 *        It performs the operation defined in the \p mode
 *        parameter (encrypt/decrypt), on the input data buffer defined
 *        in the \p input parameter.
 *        Due to the nature of CFB, you must use the same key schedule for
 *        both encryption and decryption operations. Therefore, you must
 *        use the context initialized with mbedtls_aes_setkey_enc() for
 *        both #MBEDTLS_AES_ENCRYPT and #MBEDTLS_AES_DECRYPT.
 * \note  Upon exit, the content of the IV is updated so that you can
 *        call the same function again on the next
 *        block(s) of data and get the same result as if it was
 *        encrypted in one call. This allows a "streaming" usage.
 *        If you need to retain the contents of the
 *        IV, you should either save it manually or use the cipher
 *        module instead.
 * \param ctx      The AES context to use for encryption or decryption.
 * \param mode     The AES operation: #MBEDTLS_AES_ENCRYPT or
 *                 #MBEDTLS_AES_DECRYPT
 * \param length   The length of the input data.
 * \param iv       The initialization vector (updated after use).
 * \param input    The buffer holding the input data.
 * \param output   The buffer holding the output data.
 * \return         \c 0 on success.
int esp_aes_crypt_cfb8( mbedtls_aes_context *ctx,
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output );
# 468 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/aes.h"
 * \brief      This function performs an AES-CTR encryption or decryption
 *             operation.
 *             This function performs the operation defined in the \p mode
 *             parameter (encrypt/decrypt), on the input data buffer
 *             defined in the \p input parameter.
 *             Due to the nature of CTR, you must use the same key schedule
 *             for both encryption and decryption operations. Therefore, you
 *             must use the context initialized with mbedtls_aes_setkey_enc()
 *             for both #MBEDTLS_AES_ENCRYPT and #MBEDTLS_AES_DECRYPT.
 * \warning    You must never reuse a nonce value with the same key. Doing so
 *             would void the encryption for the two messages encrypted with
 *             the same nonce and key.
 *             There are two common strategies for managing nonces with CTR:
 *             1. You can handle everything as a single message processed over
 *             successive calls to this function. In that case, you want to
 *             set \p nonce_counter and \p nc_off to 0 for the first call, and
 *             then preserve the values of \p nonce_counter, \p nc_off and \p
 *             stream_block across calls to this function as they will be
 *             updated by this function.
 *             With this strategy, you must not encrypt more than 2**128
 *             blocks of data with the same key.
 *             2. You can encrypt separate messages by dividing the \p
 *             nonce_counter buffer in two areas: the first one used for a
 *             per-message nonce, handled by yourself, and the second one
 *             updated by this function internally.
 *             For example, you might reserve the first 12 bytes for the
 *             per-message nonce, and the last 4 bytes for internal use. In that
 *             case, before calling this function on a new message you need to
 *             set the first 12 bytes of \p nonce_counter to your chosen nonce
 *             value, the last 4 to 0, and \p nc_off to 0 (which will cause \p
 *             stream_block to be ignored). That way, you can encrypt at most
 *             2**96 messages of up to 2**32 blocks each with the same key.
 *             The per-message nonce (or information sufficient to reconstruct
 *             it) needs to be communicated with the ciphertext and must be unique.
 *             The recommended way to ensure uniqueness is to use a message
 *             counter. An alternative is to generate random nonces, but this
 *             limits the number of messages that can be securely encrypted:
 *             for example, with 96-bit random nonces, you should not encrypt
 *             more than 2**32 messages with the same key.
 *             Note that for both stategies, sizes are measured in blocks and
 *             that an AES block is 16 bytes.
 * \warning    Upon return, \p stream_block contains sensitive data. Its
 *             content must not be written to insecure storage and should be
 *             securely discarded as soon as it's no longer needed.
 * \param ctx              The AES context to use for encryption or decryption.
 * \param length           The length of the input data.
 * \param nc_off           The offset in the current \p stream_block, for
 *                         resuming within the current cipher stream. The
 *                         offset pointer should be 0 at the start of a stream.
 * \param nonce_counter    The 128-bit nonce and counter.
 * \param stream_block     The saved stream block for resuming. This is
 *                         overwritten by the function.
 * \param input            The buffer holding the input data.
 * \param output           The buffer holding the output data.
 * \return                 \c 0 on success.
int esp_aes_crypt_ctr( mbedtls_aes_context *ctx,
                       size_t length,
                       size_t *nc_off,
                       unsigned char nonce_counter[16],
                       unsigned char stream_block[16],
                       const unsigned char *input,
                       unsigned char *output );
 * \brief           Internal AES block encryption function. This is only
 *                  exposed to allow overriding it using
 *                  \c MBEDTLS_AES_ENCRYPT_ALT.
 * \param ctx       The AES context to use for encryption.
 * \param input     The plaintext block.
 * \param output    The output (ciphertext) block.
 * \return          \c 0 on success.
int esp_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] );
 * \brief           Internal AES block decryption function. This is only
 *                  exposed to allow overriding it using see
 *                  \c MBEDTLS_AES_DECRYPT_ALT.
 * \param ctx       The AES context to use for decryption.
 * \param input     The ciphertext block.
 * \param output    The output (plaintext) block.
 * \return          \c 0 on success.
int esp_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] );
#define MBEDTLS_DEPRECATED 
 * \brief           Deprecated internal AES block encryption function
 *                  without return value.
 * \deprecated      Superseded by mbedtls_aes_encrypt_ext() in 2.5.0.
 * \param ctx       The AES context to use for encryption.
 * \param input     Plaintext block.
 * \param output    Output (ciphertext) block.
 void mbedtls_aes_encrypt( mbedtls_aes_context *ctx,
                                             const unsigned char input[16],
                                             unsigned char output[16] );
 * \brief           Deprecated internal AES block decryption function
 *                  without return value.
 * \deprecated      Superseded by mbedtls_aes_decrypt_ext() in 2.5.0.
 * \param ctx       The AES context to use for decryption.
 * \param input     Ciphertext block.
 * \param output    Output (plaintext) block.
 void mbedtls_aes_decrypt( mbedtls_aes_context *ctx,
                                             const unsigned char input[16],
                                             unsigned char output[16] );
#undef MBEDTLS_DEPRECATED
 * \brief          Checkup routine.
 * \return         \c 0 on success.
 * \return         \c 1 on failure.
int mbedtls_aes_self_test( int verbose );
# 37 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ctr_drbg.h" 2
#define MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED -0x0034 /**< The entropy source failed. */
#define MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG -0x0036 /**< The requested random buffer length is too big. */
#define MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG -0x0038 /**< The input (entropy + additional data) is too large. */
#define MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR -0x003A /**< Read or write error in file. */
#define MBEDTLS_CTR_DRBG_BLOCKSIZE 16 /**< The block size used by the cipher. */
#define MBEDTLS_CTR_DRBG_KEYSIZE 32 /**< The key size used by the cipher. */
#define MBEDTLS_CTR_DRBG_KEYBITS ( MBEDTLS_CTR_DRBG_KEYSIZE * 8 ) /**< The key size for the DRBG operation, in bits. */
#define MBEDTLS_CTR_DRBG_SEEDLEN ( MBEDTLS_CTR_DRBG_KEYSIZE + MBEDTLS_CTR_DRBG_BLOCKSIZE ) /**< The seed length, calculated as (counter + AES key). */
 * \name SECTION: Module settings
 * The configuration options you can set for this module are in this section.
 * Either change them in config.h or define them using the compiler command
 * line.
 * \{
#define MBEDTLS_CTR_DRBG_ENTROPY_LEN 48
/**< The amount of entropy used per seed by default:
 * <ul><li>48 with SHA-512.</li>
 * <li>32 with SHA-256.</li></ul>
# 78 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/ctr_drbg.h"
#define MBEDTLS_CTR_DRBG_RESEED_INTERVAL 10000
/**< The interval before reseed is performed by default. */
#define MBEDTLS_CTR_DRBG_MAX_INPUT 256
/**< The maximum number of additional input Bytes. */
#define MBEDTLS_CTR_DRBG_MAX_REQUEST 1024
/**< The maximum number of requested Bytes per call. */
#define MBEDTLS_CTR_DRBG_MAX_SEED_INPUT 384
/**< The maximum size of seed or reseed buffer. */
/* \} name SECTION: Module settings */
#define MBEDTLS_CTR_DRBG_PR_OFF 0
/**< Prediction resistance is disabled. */
#define MBEDTLS_CTR_DRBG_PR_ON 1
/**< Prediction resistance is enabled. */
extern "C" {
 * \brief          The CTR_DRBG context structure.
typedef struct mbedtls_ctr_drbg_context
    unsigned char counter[16]; /*!< The counter (V). */
    int reseed_counter; /*!< The reseed counter. */
    int prediction_resistance; /*!< This determines whether prediction
                                     resistance is enabled, that is
                                     whether to systematically reseed before
                                     each random generation. */
    size_t entropy_len; /*!< The amount of entropy grabbed on each
                                     seed or reseed operation. */
    int reseed_interval; /*!< The reseed interval. */
    mbedtls_aes_context aes_ctx; /*!< The AES context. */
    /*
     * Callbacks (Entropy)
     */
    int (*f_entropy)(void *, unsigned char *, size_t);
                                /*!< The entropy callback function. */
    void *p_entropy; /*!< The context for the entropy function. */
mbedtls_ctr_drbg_context;
 * \brief               This function initializes the CTR_DRBG context,
 *                      and prepares it for mbedtls_ctr_drbg_seed()
 *                      or mbedtls_ctr_drbg_free().
 * \param ctx           The CTR_DRBG context to initialize.
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx );
 * \brief               This function seeds and sets up the CTR_DRBG
 *                      entropy source for future reseeds.
 * \note Personalization data can be provided in addition to the more generic
 *       entropy source, to make this instantiation as unique as possible.
 * \param ctx           The CTR_DRBG context to seed.
 * \param f_entropy     The entropy callback, taking as arguments the
 *                      \p p_entropy context, the buffer to fill, and the
                        length of the buffer.
 * \param p_entropy     The entropy context.
 * \param custom        Personalization data, that is device-specific
                        identifiers. Can be NULL.
 * \param len           The length of the personalization data.
 * \return              \c 0 on success.
 * \return              #MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED on failure.
int mbedtls_ctr_drbg_seed( mbedtls_ctr_drbg_context *ctx,
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len );
 * \brief               This function clears CTR_CRBG context data.
 * \param ctx           The CTR_DRBG context to clear.
void mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx );
 * \brief               This function turns prediction resistance on or off.
 *                      The default value is off.
 * \note                If enabled, entropy is gathered at the beginning of
 *                      every call to mbedtls_ctr_drbg_random_with_add().
 *                      Only use this if your entropy source has sufficient
 *                      throughput.
 * \param ctx           The CTR_DRBG context.
 * \param resistance    #MBEDTLS_CTR_DRBG_PR_ON or #MBEDTLS_CTR_DRBG_PR_OFF.
void mbedtls_ctr_drbg_set_prediction_resistance( mbedtls_ctr_drbg_context *ctx,
                                         int resistance );
 * \brief               This function sets the amount of entropy grabbed on each
 *                      seed or reseed. The default value is
 *                      #MBEDTLS_CTR_DRBG_ENTROPY_LEN.
 * \param ctx           The CTR_DRBG context.
 * \param len           The amount of entropy to grab.
void mbedtls_ctr_drbg_set_entropy_len( mbedtls_ctr_drbg_context *ctx,
                               size_t len );
 * \brief               This function sets the reseed interval.
 *                      The default value is #MBEDTLS_CTR_DRBG_RESEED_INTERVAL.
 * \param ctx           The CTR_DRBG context.
 * \param interval      The reseed interval.
void mbedtls_ctr_drbg_set_reseed_interval( mbedtls_ctr_drbg_context *ctx,
                                   int interval );
 * \brief               This function reseeds the CTR_DRBG context, that is
 *                      extracts data from the entropy source.
 * \param ctx           The CTR_DRBG context.
 * \param additional    Additional data to add to the state. Can be NULL.
 * \param len           The length of the additional data.
 * \return              \c 0 on success.
 * \return              #MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED on failure.
int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len );
 * \brief              This function updates the state of the CTR_DRBG context.
 * \note               If \p add_len is greater than
 *                     #MBEDTLS_CTR_DRBG_MAX_SEED_INPUT, only the first
 *                     #MBEDTLS_CTR_DRBG_MAX_SEED_INPUT Bytes are used.
 *                     The remaining Bytes are silently discarded.
 * \param ctx          The CTR_DRBG context.
 * \param additional   The data to update the state with.
 * \param add_len      Length of \p additional data.
void mbedtls_ctr_drbg_update( mbedtls_ctr_drbg_context *ctx,
                      const unsigned char *additional, size_t add_len );
 * \brief   This function updates a CTR_DRBG instance with additional
 *          data and uses it to generate random data.
 * \note    The function automatically reseeds if the reseed counter is exceeded.
 * \param p_rng         The CTR_DRBG context. This must be a pointer to a
 *                      #mbedtls_ctr_drbg_context structure.
 * \param output        The buffer to fill.
 * \param output_len    The length of the buffer.
 * \param additional    Additional data to update. Can be NULL.
 * \param add_len       The length of the additional data.
 * \return    \c 0 on success.
 * \return    #MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED or
 *            #MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG on failure.
int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len );
 * \brief   This function uses CTR_DRBG to generate random data.
 * \note    The function automatically reseeds if the reseed counter is exceeded.
 * \param p_rng         The CTR_DRBG context. This must be a pointer to a
 *                      #mbedtls_ctr_drbg_context structure.
 * \param output        The buffer to fill.
 * \param output_len    The length of the buffer.
 * \return              \c 0 on success.
 * \return              #MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED or
 *                      #MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG on failure.
int mbedtls_ctr_drbg_random( void *p_rng,
                     unsigned char *output, size_t output_len );
 * \brief               This function writes a seed file.
 * \param ctx           The CTR_DRBG context.
 * \param path          The name of the file.
 * \return              \c 0 on success.
 * \return              #MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR on file error.
 * \return              #MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED on
 *                      failure.
int mbedtls_ctr_drbg_write_seed_file( mbedtls_ctr_drbg_context *ctx, const char *path );
 * \brief               This function reads and updates a seed file. The seed
 *                      is added to this instance.
 * \param ctx           The CTR_DRBG context.
 * \param path          The name of the file.
 * \return              \c 0 on success.
 * \return              #MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR on file error.
 * \return              #MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED or
 *                      #MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG on failure.
int mbedtls_ctr_drbg_update_seed_file( mbedtls_ctr_drbg_context *ctx, const char *path );
 * \brief               The CTR_DRBG checkup routine.
 * \return              \c 0 on success.
 * \return              \c 1 on failure.
int mbedtls_ctr_drbg_self_test( int verbose );
/* Internal functions (do not call directly) */
int mbedtls_ctr_drbg_seed_entropy_len( mbedtls_ctr_drbg_context *,
                               int (*)(void *, unsigned char *, size_t), void *,
                               const unsigned char *, size_t, size_t );
# 13 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/ssl_client.h" 2
# 1 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/error.h" 1
 * \file error.h
 * \brief Error to string translation
 *  Copyright (C) 2006-2018, ARM Limited, All Rights Reserved
 *  SPDX-License-Identifier: Apache-2.0
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  This file is part of mbed TLS (https://tls.mbed.org)
#define MBEDTLS_ERROR_H 
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 1 3 4
# 1 "/home/inverse/.arduino15/packages/esp32/tools/xtensa-esp32-elf-gcc/1.22.0-80-g6c4433a-5.2.0/lib/gcc/xtensa-esp32-elf/5.2.0/include/stddef.h" 3 4
/* Copyright (C) 1989-2015 Free Software Foundation, Inc.
This file is part of GCC.
GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.
GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.
You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
# 28 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/error.h" 2
# 29 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/tools/sdk/include/mbedtls/mbedtls/error.h"
 * Error code layout.
 * Currently we try to keep all error codes within the negative space of 16
 * bits signed integers to support all platforms (-0x0001 - -0x7FFF). In
 * addition we'd like to give two layers of information on the error if
 * possible.
 * For that purpose the error codes are segmented in the following manner:
 * 16 bit error code bit-segmentation
 * 1 bit  - Unused (sign bit)
 * 3 bits - High level module ID
 * 5 bits - Module-dependent error code
 * 7 bits - Low level module errors
 * For historical reasons, low-level error codes are divided in even and odd,
 * even codes were assigned first, and -1 is reserved for other errors.
 * Low-level module errors (0x0002-0x007E, 0x0003-0x007F)
 * Module   Nr  Codes assigned
 * MPI       7  0x0002-0x0010
 * GCM       3  0x0012-0x0014   0x0013-0x0013
 * BLOWFISH  3  0x0016-0x0018   0x0017-0x0017
 * THREADING 3  0x001A-0x001E
 * AES       5  0x0020-0x0022   0x0021-0x0025
 * CAMELLIA  3  0x0024-0x0026   0x0027-0x0027
 * XTEA      2  0x0028-0x0028   0x0029-0x0029
 * BASE64    2  0x002A-0x002C
 * OID       1  0x002E-0x002E   0x000B-0x000B
 * PADLOCK   1  0x0030-0x0030
 * DES       2  0x0032-0x0032   0x0033-0x0033
 * CTR_DBRG  4  0x0034-0x003A
 * ENTROPY   3  0x003C-0x0040   0x003D-0x003F
 * NET      13  0x0042-0x0052   0x0043-0x0049
 * ARIA      4  0x0058-0x005E
 * ASN1      7  0x0060-0x006C
 * CMAC      1  0x007A-0x007A
 * PBKDF2    1  0x007C-0x007C
 * HMAC_DRBG 4                  0x0003-0x0009
 * CCM       3                  0x000D-0x0011
 * ARC4      1                  0x0019-0x0019
 * MD2       1                  0x002B-0x002B
 * MD4       1                  0x002D-0x002D
 * MD5       1                  0x002F-0x002F
 * RIPEMD160 1                  0x0031-0x0031
 * SHA1      1                  0x0035-0x0035
 * SHA256    1                  0x0037-0x0037
 * SHA512    1                  0x0039-0x0039
 * CHACHA20  3                  0x0051-0x0055
 * POLY1305  3                  0x0057-0x005B
 * CHACHAPOLY 2 0x0054-0x0056
 * High-level module nr (3 bits - 0x0...-0x7...)
 * Name      ID  Nr of Errors
 * PEM       1   9
 * PKCS#12   1   4 (Started from top)
 * X509      2   20
 * PKCS5     2   4 (Started from top)
 * DHM       3   11
 * PK        3   15 (Started from top)
 * RSA       4   11
 * ECP       4   9 (Started from top)
 * MD        5   5
 * HKDF      5   1 (Started from top)
 * CIPHER    6   8
 * SSL       6   22 (Started from top)
 * SSL       7   31
 * Module dependent error code (5 bits 0x.00.-0x.F8.)
extern "C" {
 * \brief Translate a mbed TLS error code into a string representation,
 *        Result is truncated if necessary and always includes a terminating
 *        null byte.
 * \param errnum    error code
 * \param buffer    buffer to place representation in
 * \param buflen    length of the buffer
void mbedtls_strerror( int errnum, char *buffer, size_t buflen );
# 14 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/ssl_client.h" 2
typedef struct sslclient_context {
    int socket;
    mbedtls_ssl_context ssl_ctx;
    mbedtls_ssl_config ssl_conf;
    mbedtls_ctr_drbg_context drbg_ctx;
    mbedtls_entropy_context entropy_ctx;
    mbedtls_x509_crt ca_cert;
    mbedtls_x509_crt client_cert;
    mbedtls_pk_context client_key;
    unsigned long handshake_timeout;
} sslclient_context;
void ssl_init(sslclient_context *ssl_client);
int start_ssl_client(sslclient_context *ssl_client, const char *host, uint32_t port, int timeout, const char *rootCABuff, const char *cli_cert, const char *cli_key, const char *pskIdent, const char *psKey);
void stop_ssl_socket(sslclient_context *ssl_client, const char *rootCABuff, const char *cli_cert, const char *cli_key);
int data_to_read(sslclient_context *ssl_client);
int send_ssl_data(sslclient_context *ssl_client, const uint8_t *data, uint16_t len);
int get_ssl_receive(sslclient_context *ssl_client, uint8_t *data, int length);
bool verify_ssl_fingerprint(sslclient_context *ssl_client, const char* fp, const char* domain_name);
bool verify_ssl_dn(sslclient_context *ssl_client, const char* domain_name);
# 27 "/home/inverse/.arduino15/packages/esp32/hardware/esp32/1.0.4/libraries/WiFiClientSecure/src/WiFiClientSecure.h" 2
class WiFiClientSecure : public WiFiClient
protected:
    sslclient_context *sslclient;
    int _lastError = 0;
 int _peek = -1;
    int _timeout = 0;
    const char *_CA_cert;
    const char *_cert;
    const char *_private_key;
    const char *_pskIdent; // identity for PSK cipher suites
    const char *_psKey; // key in hex for PSK cipher suites
public:
    WiFiClientSecure *next;
    WiFiClientSecure();
    WiFiClientSecure(int socket);
    ~WiFiClientSecure();
    int connect(IPAddress ip, uint16_t port);
    int connect(IPAddress ip, uint16_t port, int32_t timeout);
    int connect(const char *host, uint16_t port);
    int connect(const char *host, uint16_t port, int32_t timeout);
    int connect(IPAddress ip, uint16_t port, const char *rootCABuff, const char *cli_cert, const char *cli_key);
    int connect(const char *host, uint16_t port, const char *rootCABuff, const char *cli_cert, const char *cli_key);
    int connect(IPAddress ip, uint16_t port, const char *pskIdent, const char *psKey);
    int connect(const char *host, uint16_t port, const char *pskIdent, const char *psKey);
 int peek();
    size_t write(uint8_t data);
    size_t write(const uint8_t *buf, size_t size);
    int available();
    int read();
    int read(uint8_t *buf, size_t size);
    void flush() {}
    void stop();
    uint8_t connected();
    int lastError(char *buf, const size_t size);
    void setPreSharedKey(const char *pskIdent, const char *psKey); // psKey in Hex
    void setCACert(const char *rootCA);
    void setCertificate(const char *client_ca);
    void setPrivateKey (const char *private_key);
    bool loadCACert(Stream& stream, size_t size);
    bool loadCertificate(Stream& stream, size_t size);
    bool loadPrivateKey(Stream& stream, size_t size);
    bool verify(const char* fingerprint, const char* domain_name);
    void setHandshakeTimeout(unsigned long handshake_timeout);
    int setTimeout(uint32_t seconds){ return 0; }
    operator bool()
    {
        return connected();
    }
    WiFiClientSecure &operator=(const WiFiClientSecure &other);
    bool operator==(const bool value)
    {
        return bool() == value;
    }
    bool operator!=(const bool value)
    {
        return bool() != value;
    }
    bool operator==(const WiFiClientSecure &);
    bool operator!=(const WiFiClientSecure &rhs)
    {
        return !this->operator==(rhs);
    };
    int socket()
    {
        return sslclient->socket = -1;
    }
private:
    char *_streamLoad(Stream& stream, size_t size);
    //friend class WiFiServer;
    using Print::write;
# 415 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 2
char* TBotToken = "810218086:AAFPJNDbolU0tzj_Xx6lXOsatDlYnWYaa80";
char* TChatId = "537093554";
WiFiClientSecure client;
UniversalTelegramBot TBotCambot(TBotToken, client);
int Bot_mtbs = 3000; //mean time between scan messages
long Bot_lasttime; //last time messages' scan has been done
// specific camera variables for the telegram bot
//camera_fb_t * TBotCamfb; // moved intra-function
uint8_t* TBotCamfb_buffer;
size_t TBotCamfb_length;
int TBotCamcurrentByte;
// camera functions specific for the telegram bot
bool isMoreDataAvailable() {
  return (TBotCamfb_length - TBotCamcurrentByte);
uint8_t photoNextByte() {
  TBotCamcurrentByte++;
  return (TBotCamfb_buffer[TBotCamcurrentByte - 1]);
void take_send_photo(String TChatId)
  camera_fb_t * TBotCamfb = 
# 444 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                           __null
# 444 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                               ;
  TBotCamfb = esp_camera_fb_get();
  TBotCamcurrentByte = 0;
  TBotCamfb_length = TBotCamfb->len;
  TBotCamfb_buffer = TBotCamfb->buf;
  TBotCambot.sendPhotoByBinary(TChatId, "image/jpeg", TBotCamfb->len, isMoreDataAvailable, photoNextByte, nullptr, nullptr);
  esp_camera_fb_return(TBotCamfb);
  TBotCamfb_length = 
# 451 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                    __null
# 451 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                        ;
  TBotCamfb_buffer = 
# 452 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                    __null
# 452 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                        ;
// UDP Async client, sends keep heartbeat messages to the server and retrieves commands
AsyncUDP udp; // for server A  // udp layer 5 control protocol
AsyncUDP udpB; // for server B
// command and control IP addresses for server A and server B (redundant server), the exchange is done via udp ( the port is defined by int udpServerPort) and the layer 5 transfers commands and status info as comma separated variables
int IPudpServerAa = 192;
int IPudpServerAb = 168;
int IPudpServerAc = 88;
int IPudpServerAd = 32;
int IPudpServerBa = 192;
int IPudpServerBb = 168;
int IPudpServerBc = 88;
int IPudpServerBd = 33;
int udpServerPort = 8443; // UDP/443 because, well, we can
// udp - layer 5 control protocol processing, the layer 5 control protocol consists of 8 CSV fields. The protocol structure is simple: client_name,requested_operation,field1,field2,field3,field4,field5,field6  all unused fields are set to ascii character 0
#define FIELDUA 8
#define FIELDUB 64
char UdataSplit[8][64];
int UfieldsLen[8];
int UdataLen = 0;
int UserverOK = 0; // contact with the server attempted for 3 times in a row, failing. Say, the idea is: ACK from server received: set to 3, send HEARTBEAT: decrease by 1 until zero is reached, then stop decreasing.
static uint8_t wifiDebugOn = 0;
static uint8_t wifiConnFlag = 0;
static uint8_t wifiWebserverFlag = 0;
static uint8_t wifiBeginFlag = 0;
static uint8_t wifiConnectionAttempts = 0;
// Set the local access point IP address, the netmask is assumed to be /24
IPAddress SetAPIP = {192,168,5,1}; // REMEMBER TO CHANGE THIS FOR EVERY AP YOU PLAN TO INTRODUCE TO THE NETWORK
// Set these to your desired credentials.
const char *ssid = "e32cam001s01"; // for the local AP  // REMEMBER TO CHANGE THE SSID AS WELL, THE NET PART CONTAINS THE THIRD BYTE OF THE AP IP ADDRESS (the network LSByte)
const char *password = "giampippetto";
WiFiServer serverSTA(8080); // adding a second server on the STA interface? Let's try
// loop() control section
uint32_t loopCounter = 0;
// NETWORK section
// processing variables subsection
uint8_t payloadCurrContent[128] = {0};
uint8_t hashCurrContent[64] = {0};
uint8_t payHeaderCurrContent[32] = {0};
// NAt processing subsection
uint32_t payloadTypeF = 0;
uint32_t srcIPext = 0; // STA side
uint32_t dstIPext = 0;
uint32_t srcIPint = 0; // AP side
uint32_t dstIPint = 0;
uint32_t srcIPpay = 0; // payload side
uint32_t dstIPpay = 0;
// in the NAT table, the folloving are converted to uint32_t 
uint16_t srcPortext = 0; // STA side
uint16_t dstPortext = 0;
uint16_t srcPortint = 0; // AP side
uint16_t dstPortint = 0;
uint16_t srcPortpay = 0; // payload side
uint16_t dstPortpay = 0;
uint16_t expiryCounter = 0;
// NAT table subsection
uint32_t NATline[16] = {0}; // there are 14 fields actually, as per the above list, plus 2 reserved fields
uint32_t NATtable[256][16] = {0};
uint16_t NATlinePointer = 0; // do we allow up to 256 flows only?
// routing table subsection
uint16_t RoutelinePointer = 0; // do we allow up to 16 routes only?
uint32_t routetable[16][8] = {0}; // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
//packet buffer sub-section
uint8_t payloadToProcessFlag = 0; // if the LSB bit0 == 1, there is a payload that needs processing, other values / bits set may mean other operations.
uint8_t * payloadBuffer = 
# 557 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino" 3 4
                         __null
# 557 "/home/inverse/Arduino/esp32_cam_node/esp32_cam_node.ino"
                             ;
//structure of the packet buffer:
Size = 224Bytes = 32B header + 128B payload + 64B hash
4B = Type Field( 4 bytes ) = reqtype(1B), protocolNum(1B), Reserved(1B), Reserved(1B)
4B = DST IP
4B = SRC IP 
2B = DST PORT
2B = SRC PORT
2B = PayloadLen
2B = Reserved
4B = Reserved
4B = Reserved
4B = Reserved
128B = actual payload
64B = sha256Hash_reserved(32B raw or 64B hex)
// LED section
#define LED_BUILTIN 2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/
// string section 
// converts character array 
// to string and returns it 
String convertToString(char* a, int size)
    int i;
    String s = "";
    for (i = 0; i < size; i++) {
        s = s + a[i];
    }
    return s;
// deep sleep section
#define uS_TO_S_FACTOR 1000000ULL /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP 60 /* Time ESP32 will go to sleep (in seconds) */
__attribute__((section(".rtc.data"))) int bootCount = 0;
Method to print the reason by which ESP32
has been awaken from sleep
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();
  switch(wakeup_reason)
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
// update the routing table
void routeTableUpdate() {
// RoutelinePointer // do we allow up to 16 routes only?
//uint32_t *routetable[16][8] // 16 routing entries with: destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
uint32_t ImyLocalIP = 0;
uint32_t ImyLocalSubnet = 0;
uint32_t ImyAPIP = 0;
uint32_t ImyAPSubnet = 0;
uint32_t ImyLocalSubnetMask = 0;
uint32_t ImyAPSubnetMask = (255 >> 24) + (255 >> 16) + (255 >> 8);
uint32_t ImyLocalGateway = 0;
IPAddress myLocalIP = {0,0,0,0};
IPAddress myLocalSubnet = {0,0,0,0};
IPAddress myLocalSubnetMask = {0,0,0,0};
IPAddress myLocalGateway = {0,0,0,0};
IPAddress myAPIP = WiFi.softAPIP();
ImyAPIP = (uint32_t)((myAPIP[0] << 24) + (myAPIP[1] << 24) + (myAPIP[2] << 24) + myAPIP[3]);
ImyAPSubnet = ImyAPIP & ImyAPSubnetMask;
// the first lines
// line 0 local AP  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
routetable[0][0] = ImyAPSubnet;
routetable[0][1] = ImyAPSubnetMask;
routetable[0][2] = ImyAPIP;
routetable[0][3] = 0; // gateway of course set to 0 for the AP side
routetable[0][4] = 0; // interface ID set to zero, for the moment.
routetable[0][5] = 0;
routetable[0][6] = 0;
routetable[0][7] = 0;
if (wifiConnFlag == 1) {
  myLocalIP = WiFi.localIP();
  myLocalSubnet = WiFi.subnetMask();
  myLocalGateway = WiFi.gatewayIP();
  ImyLocalIP = (myLocalIP[0] << 24) + (myLocalIP[1] << 24) + (myLocalIP[2] << 24) + myLocalIP[3];
  ImyLocalSubnetMask = (myLocalSubnetMask[0] << 24) + (myLocalSubnetMask[1] << 24) + (myLocalSubnetMask[2] << 24) + myLocalSubnetMask[3];
  ImyLocalGateway = (myLocalGateway[0] << 24) + (myLocalGateway[1] << 24) + (myLocalGateway[2] << 24) + myLocalGateway[3];
  ImyLocalSubnet = ImyLocalIP & ImyLocalSubnetMask;
  // line 1 STA  // destination net, netmask, source IP of the interface, gateway IP, interface ID, reserved, reserved, reserved
  routetable[1][0] = ImyLocalSubnet;
  routetable[1][1] = ImyLocalSubnetMask;
  routetable[1][2] = ImyLocalIP;
  routetable[1][3] = ImyLocalGateway;
  routetable[1][4] = 1; // interface ID set to 1, for the moment.
  routetable[1][5] = 0;
  routetable[1][6] = 0;
  routetable[1][7] = 0;
} else {
  routetable[1][0] = 0; // nullifying the STA route
  routetable[1][1] = 0; // nullifying the STA route
  routetable[1][2] = 0; // nullifying the STA route
  routetable[1][3] = 0; // nullifying the STA route
  routetable[1][4] = 0; // nullifying the STA route
  routetable[1][5] = 0; // nullifying the STA route
  routetable[1][6] = 0; // nullifying the STA route
  routetable[1][7] = 0; // nullifying the STA route
} // end void routetableupdate()
// handle client requests
void clientServe() {
  WiFiClient client = serverSTA.available(); // listen for incoming clients
  if (client) { // if you get a client,
    Serial.println("New Client."); // print a message out the serial port
    String currentLine = ""; // make a String to hold incoming data from the client
    while (client.connected()) { // loop while the client's connected
      if (client.available()) { // if there's bytes to read from the client,
        char c = client.read(); // read a byte, then
        Serial.write(c); // print it out the serial monitor
        if (c == '\n') { // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            // the content of the HTTP response follows the header:
            client.print("Click <a href=\"/H\">here</a> to take a picture and send it via telegram (configure via udp layer 5 control protocol).<br>");
            client.print("Click <a href=\"/L\">here</a> to restart the device.<br>");
            client.print("Click <a href=\"/W\">here</a> to initialize the camera hardware for the integrated camera webserver.<br>");
            client.print("Click <a href=\"/S\">here</a> to deinitialize the camera hardware and save power.<br>");
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else { // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') { // if you got anything else but a carriage return character,
          currentLine += c; // add it to the end of the currentLine
        }
        // Check to see if the client request was "GET /H" or "GET /L":
        if (currentLine.endsWith("GET /H")) {
          //digitalWrite(LED_BUILTIN, HIGH);               // GET /H takes a picture and sends it via telegram
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          }
          take_send_photo(TChatId);
          digitalWrite(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x0);
        }
        if (currentLine.endsWith("GET /W")) { // init camera for the main camera webserver
          if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
          }
        }
        if (currentLine.endsWith("GET /S")) { // deinitialize the camera
          cameraInitType = 0;
          esp_camera_deinit(); // the camera needs a deinit from its current configuration.
        }
        if (currentLine.endsWith("GET /L")) {
          digitalWrite(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x0); // GET /L restarts the device
          esp_restart();
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
void startCameraServer();
void wifiIntManagement() {
    // STA connection and disconnection management
// WIFI DEBUG AND SERVICING SECTION START
  if (wifiDebugOn == 1) {
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("WiFi not connected yet");
    }
    if (WiFi.status() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer(); // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
    }
  if (wifiConnectionAttempts >= 32) { // turning off wifi, there is no point in trying anymore, if past 32 attempts.
    WiFi.mode(WIFI_MODE_NULL); // turning off wifi, then we go to deep sleep for a certain number of seconds.
    esp_err_t err = esp_camera_deinit();
    esp_deep_sleep_start(); // going to deep sleep
  if ((wifiConnFlag == 0) && (wifiConnectionAttempts < 32)) { // wifiConnectionAttempts must be < 32 
    wifiConnectionAttempts++; // increasing the connection attempts counter
    if (wifiMulti.run() == WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() == WL_CONNECTED
      Serial.println("Starting Camera Server");
      startCameraServer(); // aaaand, we should really do something about this in case of disconnection.
      Serial.println("Starting Service Server");
      serverSTA.begin();
      Serial.println("Server started");
      udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
      Serial.println("REMOTE Server A connect");
      udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
      Serial.println("REMOTE Server b connect");
      Serial.print("WiFi up and running: ");
      Serial.print(WiFi.localIP());
      Serial.println("' to connect");
      Serial2.print("WiFi up and running: ");
      Serial2.print(WiFi.localIP());
      Serial2.println("' to connect");
      wifiConnFlag = 1;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
    if ((WiFi.status() != WL_CONNECTED) && (wifiBeginFlag == 0)) {
      Serial.println("WiFi restarting");
      WiFi.begin(ssid, password);
      wifiBeginFlag = 1;
    }
  if (wifiConnFlag == 1) { // test if the wifi stays alive...
    if (WiFi.status() != WL_CONNECTED) { // wifiMulti.run() == WL_CONNECTED // WiFi.status() != WL_CONNECTED
      Serial.println("WiFi disconnected");
      wifiConnFlag = 0;
      wifiBeginFlag = 0;
      wifiConnectionAttempts = 0; // reset the connection attempts
    }
  if (((wifiConnFlag == 1) && (wifiWebserverFlag == 0)) || (ESP.getFreeHeap() < 44000)) { // servicing the webserver on connection up for the first time
      // >>>>>>>> START SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      // >>>>>>>> END SERVER SERVICING HERE (close and open the server in case of disconnects / reconnects)
      wifiWebserverFlag = 1;
  // WIFI DEBUG AND SERVICING SECTION END 
// UDP - layer 5 control protocol
void UresetudpData() {
for(int i = 0; i < 8; i++){
  for(int j = 0; j < 64; j++) {
    UdataSplit[i][j] = 0;
for(int i = 0; i < 8; i++) {
  UfieldsLen[i] = 0;
UdataLen = 0;
} // end resetudpData()
int UfillinudpData(uint8_t *pktDataField, int pktLen) {
int i = 0;
int j = 0;
int k = 0;
UdataLen = pktLen;
for(i = 0; i < UdataLen; i++){
  if(pktDataField[i] == ',') {
    UfieldsLen[j] = k;
    Serial.print("received_udp_control_protocol_data:");
    Serial.print(UdataSplit[j]);
    Serial.print("; data_len:");
    Serial.print(k);
    Serial.print("; field_position:");
    Serial.println(j);
    j++;
    k = 0;
  if(j >= 8) {
    Serial.print("ERROR: too many commas in the udp layer 5 control protocol");
    return 100;
  UdataSplit[j][k] = pktDataField[i];
  k++;
UfieldsLen[j] = k;
return 0;
} // end fillinudpData()
void UprocessudpCommand(AsyncUDPPacket packet) {
  Serial.print("processing udp layer 5 control protocol command directed to: ");
  Serial.print(UdataSplit[0]);
  Serial.print("; command is: ");
  Serial.println(UdataSplit[1]);
  // commands available at the moment, or planned, are: 
  // ACK (confirmed heartbeat reception, do nothing), TLGS (send picture to telegram), TLGC (configure telegram, field 2 = bot token, field 3 = chat id)
  // RST (reboot the device), DSLP (deep sleep)
  if(UdataSplit[0] == "e32cam001s01") { // matched the field 0, the command is directed to me. 
      // processing the actual commands
      if(UdataSplit[1] == "ACK") {
        // do not reply with an ACK to an ACK, that would be ...disturbing
        UserverOK = 3;
      }
      if(UdataSplit[1] == "TLGS") { // send picture via telegram
        //TBotToken
        //TChatId
        // technically speaking we should deinit and reinit with acceptable parameters. 
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
          if (cameraInitType != 0) {
            esp_camera_deinit(); // the camera needs a deinit from its current configuration.
          }
          delay(1000); // this might not really be necessary
          cameraInitConfig(); // and is setup for the correct motion capture configuration
          delay(3000);
        }
         // this might not really be necessary
        take_send_photo(TChatId);
      }
      if(UdataSplit[1] == "TLGC") { // configure telegram bot token and chat id
        bool ok;
        String sToken = convertToString(UdataSplit[2], UfieldsLen[2]);
        String sChatId = convertToString(UdataSplit[3], UfieldsLen[3]);
        ok = NVS.setString ("TLGToken", sToken); // Store the data value into the key named "TLGToken" on the NVS
        if(ok) {
          ok = NVS.setString ("TLGChatId", sChatId); // Store the data value into the key named "TLGChatId" on the NVS
        }
        if(ok) {
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf("e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        } else {
          Serial.println("ERROR saving data to nvs");
          packet.printf("e32cam001s01,ERR,ERROR saving data to NVS,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        }
      }
      if(UdataSplit[1] == "RST") { // restart system
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf("e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        esp_restart();
      }
      if(UdataSplit[1] == "DSLP") { // start deep sleep
        // I'M A CLIENT, SO I REPLY ACK BY DEFAULT WHENEVER I RECEIVE A COMMAND
        //reply to the client
        packet.printf("e32cam001s01,ACK,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/, packet.length());
        Serial.println("RECEIVED REQUEST TO DEEP SLEEP, STARTING TO SLEEP DEEP");
        esp_err_t err = esp_camera_deinit();
        esp_deep_sleep_start(); // going to deep sleep
      }
      if(UdataSplit[1] == "WCAM") { // init camera for the webserver
        if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
        }
      }
      if(UdataSplit[1] == "SCAM") { // deinitialize the camera
        cameraInitType = 0;
        esp_camera_deinit(); // the camera needs a deinit from its current configuration.
      }
void udpCommandClient() {
  if( ! udp.connected()) {
    Serial.println("UDP connecting to server A");
    udp.connect(IPAddress(IPudpServerAa,IPudpServerAb,IPudpServerAc,IPudpServerAd), udpServerPort);
    Serial.println("UDP connected to server A");
  if(udp.connected()) {
        Serial.println("UDP sending to server A");
        //Send unicast
        udp.print("e32cam001s01,HEARTBEAT,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/); // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
          }
        }
        udp.onPacket([](AsyncUDPPacket packet) {
            Serial.print("UDP Packet Type: ");
            Serial.print(packet.isBroadcast()?"Broadcast":packet.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packet.remoteIP());
            Serial.print(":");
            Serial.print(packet.remotePort());
            Serial.print(", To: ");
            Serial.print(packet.localIP());
            Serial.print(":");
            Serial.print(packet.localPort());
            Serial.print(", Length: ");
            Serial.print(packet.length());
            Serial.print(", Data: ");
            Serial.write(packet.data(), packet.length());
            Serial.println();
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packet.data() ,packet.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packet); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            // packet response processing END
        });
    }
// sending the heartbeat to the backup udp command server
void udpBCommandClient() {
  if( ! udpB.connected()) {
    Serial.println("UDP connecting to server B");
    udpB.connect(IPAddress(IPudpServerBa,IPudpServerBb,IPudpServerBc,IPudpServerBd), udpServerPort);
    Serial.println("UDP connected to server B");
  if(udpB.connected()) {
        Serial.println("UDP sending to server B");
        //Send unicast
        udpB.print("e32cam001s01,HEARTBEAT,0,0,0,0,0,0" /* udp - layer 5 control protocol predefined messages*/); // simple protocol with 8 fields
        if ( UserverOK > 0 ) { // decrease UserverOK until zero is reached, on receiving ACK the counter is reset to a number > 0. This behaviour is that of a watchdog counter.
          UserverOK = UserverOK - 1;
          if ( UserverOK == 0 ) { // if this gets triggered we may have a problem: we are currently cut off from the udp command server.
            if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
          }
        }
        udpB.onPacket([](AsyncUDPPacket packetB) {
            Serial.print("UDP B Packet Type: ");
            Serial.print(packetB.isBroadcast()?"Broadcast":packetB.isMulticast()?"Multicast":"Unicast");
            Serial.print(", From: ");
            Serial.print(packetB.remoteIP());
            Serial.print(":");
            Serial.print(packetB.remotePort());
            Serial.print(", To: ");
            Serial.print(packetB.localIP());
            Serial.print(":");
            Serial.print(packetB.localPort());
            Serial.print(", Length: ");
            Serial.print(packetB.length());
            Serial.print(", Data: ");
            Serial.write(packetB.data(), packetB.length());
            Serial.println();
            // packet response processing START
            UresetudpData();
            // uint8_t* pktData[] = {packet.data()};
            int mysplitresult = UfillinudpData(packetB.data() ,packetB.length()); // splits the received data and fills in the UdataSplit[][] with the data
            if (mysplitresult == 0) { // correctly split the data
              UprocessudpCommand(packetB); // processes the udp layer 5 control protocol commands // we also let the function access packet in order to enventually send a reply
            }
            // packet response processing END
        });
    }
void clientsManagement() {
  if ((wifiConnFlag == 1) && (wifiWebserverFlag == 1)) { // HANDLE CLIENT REQUESTS HERE
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
    clientServe();
    // >>>>>>>> START HANDLE CLIENT REQUESTS HERE
  } // end handle client requests if
void setup() {
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println();
// wakeup and init part 
  // packet / payload buffer allocation
  payloadBuffer = (uint8_t *)malloc(256 * sizeof(uint8_t)); // the actual size is 224 (see in the declarations), the maximum payload size for ESP-NOW is 250.
  pinMode(2 /* Set the GPIO pin where you connected your test LED or comment this line out if your dev board has a built-in LED*/, 0x02);
  // deep sleep boots
  ++bootCount;
  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  /*
  First we configure the wake up source
  We set our ESP32 to wake up every 5 seconds
  */
  esp_sleep_enable_timer_wakeup(60 /* Time ESP32 will go to sleep (in seconds) */ * 1000000ULL /* Conversion factor for micro seconds to seconds */);
// camera init and config
  Serial.println("WARNING, NOT INITIALIZING THE CAMERA IN ORDER TO SAVE POWER. PLEASE DO IT MANUALLY VIA UDP COMMANDS OR VIA THE MANAGEMENT HTTP SERVER ON PORT 8080");
  //cameraInitConfig(); // we want the camera not initialized by default. This saver power.
  /*
 if ((cameraInitType != 1) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit();  // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              
              cameraInitConfig(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
  */
// WIFI SECTION
  Serial.println();
  Serial.println("Configuring access point...");
  WiFi.mode(WIFI_MODE_APSTA); // added by me // selecting the AP+STA mode
  wifiMulti.addAP("e32ap001s01border", "giampippetto"); // the connection part is verified as follows: wifiMulti.run() == WL_CONNECTED
  wifiMulti.addAP("G5SE_7499", "pippopluto");
  wifiMulti.addAP("internet-gw.iw1gpe.it.ampr.o", "heisakuukanwohiraite");
  wifiMulti.addAP("inverse", "heisakuukanwohiraite");
  wifiMulti.addAP("e32ap002s01border", "giampippetto");
  wifiMulti.addAP("e32ap003s01border", "giampippetto");
  wifiMulti.addAP("e32ap004s01border", "giampippetto");
  wifiMulti.addAP("e32ap001s02border", "giampippetto");
  wifiMulti.addAP("e32ap002s02border", "giampippetto");
  wifiMulti.addAP("e32ap003s02border", "giampippetto");
  wifiMulti.addAP("e32ap004s02border", "giampippetto");
  // You can remove the password parameter if you want the AP to be open.
  WiFi.softAP(ssid, password);
  delay(200); // wait at least 100ms until the AP has started
  if(!WiFi.softAPConfig(SetAPIP, SetAPIP, IPAddress(255, 255, 255, 0))){
      Serial.println("AP Config Failed");
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  // the STA part is configured here and managed in loop()
// old wifi section
  //WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  Serial.println("");
  Serial.println("WiFi connected");
  startCameraServer();
  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");
  */
  // NVS storage init
  NVS.begin();
  // trying to load the bot configuration from NVS 
  //TBotToken
  //TChatId
  // load the telegram bot token if available from NVS
  String loadedstr = NVS.getString ("TLGToken"); // Read the value of the "TLGToken" key from the NVS 
  if(loadedstr.length() > 3) { // at least we make sure the result is not empty...
    TBotToken = {};
    loadedstr.toCharArray(TBotToken, loadedstr.length()); // loading TBotToken
    loadedstr = NVS.getString ("TLGChatId"); // Read the value of the "TLGChatId" key from the NVS 
    if(loadedstr.length() > 3) {
      loadedstr.toCharArray(TChatId, loadedstr.length()); // loading TChatId
      Serial.print("Loaded Telegram BotToken and ChatId from NVS storage with values: ");
      Serial.print(TBotToken);
      Serial.print(" and ");
      Serial.println(TChatId);
    }
} // END setup()
void loop() {
  // put your main code here, to run repeatedly:
 // loopCounter check
  if (loopCounter > 16) {
    loopCounter = 0;
  clientsManagement(); // web client requests are handled always 
  if(loopCounter == 1) {
    wifiIntManagement();
  if(loopCounter == 2) {
    routeTableUpdate();
  if(loopCounter == 3) {
    udpCommandClient();
    udp.broadcastTo("e32cam001s01", udpServerPort);
  if(loopCounter == 5) {
  // position number 15, let the device stabilize its connections first...
  if(loopCounter == 15) { // MOTION DETECTOR SECTION
    if ((motionDetectON == 1) || ((UserverOK == 0) && (alarmEnabled == 1)) ){
       if ((cameraInitType != 2) || (cameraInitType == 0)) {
              if (cameraInitType != 0) {
                esp_camera_deinit(); // the camera needs a deinit from its current configuration.
                delay(1000); // this might not really be necessary
              }
              cameraInitConfigMotionDetect(); // and is setup for the correct motion capture configuration
              delay(3000);
            }
      if (!capture_still()) {
        Serial.println("Motion Detector: Failed capture");
        delay(3000);
        return;
      }
      if (motion_detect()) {
        Serial.println("Motion detected");
    }
    update_frame();
    }
  // loopCounter increase
  loopCounter++;
  delay(1000);
@EV`
0%+Wx<
`a6WO
Mte.
+1]`
5[7k=
{L/p
r%xW
!a/}/
m5Qd
*$.H
&\=T
\2E:
YIZIC
;T|)/
u4y	@+i
q.8v
tcJm
&OTz
z(P>G
'wh'
{{#GF
moh8t
?_VKmR0
Cj~y
huZ$
w*[#
o}A_|
~o|p
=A9~
?Jt}
ZU"/
}cWQ
Cso5?(
|7oU.z0P9
m+Vre
]L|yo
H-J[v(
@+/_.
}P[3
0YE;j
3T^I
^7_3C
xAc(
Aqf{k
!B@<
,cbH
C`@/
}D	N
cl_u
VLh`
I=wg
uYu+
.nu6;;.
m4s<g_8
>`qU
M'7U
xIYN
&3}/
""j )@
e&j+
5NDP
=xag
NuC2
qP,pk
/_~:
C%1i
SMb9q7
pt[b
{.x5
k7E+#
ZhLp
@nX}
:i	4
?ZW[;
]F*u
N"{!
)Uba[|N2
LY[mfl
$nU>a
CVSi?
Cdn	
O,k4oV
mQ;w
Tdy1
xr&n
X`I!
a/hr,
H_'J
F-#{
Q6nf
Ux)n
kY:'b&=
JO&h
\!i9~
 xR~l$
!'!Gn
m"rf
c:PbY	
&\bt1vW
fw}4
-0Wzj
Tbw&
l9,D
d;(v
Dc_A
LK}=
cn]e
V$2y
}=H'9
C$Da
sagQ
PVNd
	SG0S
~r^W
o.Hf
^o=[
+u_,
&2U:A
3*nfg
q1cV
^L{_%=
HIeW
Jvw3F
Q-nD`
>zu{
&k7QV_nhC
5t2N
viQf;
R1=$
n#)f
9\z%\
3>|x_c
7'K)c
&6!V?n
kp{;>
BB{o?
mdG~
7z%$
|BZ;
NBt+}
Ua'Bm
?1`e
7-a}
_>!	
 ;gO
'X{p
iwc)$d
nQ"s,2m
zwV%
X;$T
8&T7h
n~EK!,
IjiR
nocJ
kJD"
lvG%I
?}" 
?(Wd
|"\<
rU_r i
k7UY
o*]xX
x1];{
SU\b
'RP[J
9CJ,'
}7K8l5
m9r%6
Y<H[nY
oK"O
<D#t
"NwZ
~}zu
&57N+_
q USF
&|Kt2=
+d0M,r_>
$-">
957/
DN8z
	,yE
s]7cJ8
?|&Q
B%-3
=Duhn
3n)u3v
5(=e
\K}9~
F_Gi9
?M.1
i[6f
MU[	M
.|"+
^H ~
OmPt
SwO\
^}#~-
C:S:
A5}%
7}_w
:52g
cSLV
,=v=
>+i2
@%no
+xs|
$@qP
%/y(
q? /
"'Sm
0ykP
	U$l
C\,J
l$ry
 CX`
=pW6
^K$x
1<ty
-@<7
}1Q!>w"
<6BMD
('U3
#1@t,
|.B'H
FV'8
RH|m
0}NA
(xS\e
%`[h
}=B>c
g1 r
k`D_
<}^q
YnLR
Lg9vP
'TDj
i}1)
_ U1
[JCz
8Yeo
<E{#'
PqQ++D
P{SE
icUN
HUcx
2(|*
bIb`
/F&!
T6	p
S#e>
CqO"
uk+o
L\4}_
bOGm
+7Fz
<kJ>Hf
}zh/t
\_FH
	P><
)(8~
})S>
&1j;
*2}G
+Dr|
Ly&	
s1Q^
j	,I
;3@x
!3\-
~`;`=
Ak.G
{0("
r$Zv
_s`x
6cwO
srY%
p<;p
y+^T
KEs\d
atMr
4_=.
&@|fI
,	hD
QGZiX
ESnL|
t5uoGZv
<3XR
4AWG
z+ai
@|.8#
}.0z
,:,	
u"dj
*tf^
o%0=
?'!O	
,/wf
9P/%
s Z5=
}	T~
gPQ{R
EwSM
-:<d<
psU:
O[pz
hef*P:X
{1Z7d
7P_"
sOB@
<s-/
WTM^t
<UxF
d_@nC
J`qQ
eqd)
svt8
M`,$
B\ZK
QG	>
gf_t
|U5~h2
9\w8r
-+;	
;aX>W
T{zl
JgdT
Rjz(
,?*j
!cWdo
h^$?]
M8}bt
f(y@
8uxE
`O\/
|+1NUb
#>uISY
s`6NX
&yFHV
&%!39
wta:
d+7X
q@DVl
u@_JU
%YnqjO&,
,$M+
T)In*
P~L|`
: |F_
dX0/&K
9$Tg
+*^5
9?u"\
o;wy8
FvM\
;%5I
iSkH/
4.%Rk
d9Yex^Tq
'@>5
2O$n
'@>FG
	l85|
#R<d
}~lt=
}j%Jn
zF=*
r|fb
dvcQtu/
v	aP
9""avQ;
sh/+
)f|*=
~E?Uh
9pR\D
IC.i
y1?I
;9rD
&AII
gA\	
Y$r(F
w7_r
9_wQ
sN!C
W$g~z
(MuN
{*=n
VH=H
t:yO
_?{>
Vf @
5-by
R,*M
:r@b
+Hpw
xE(n6q
q?>27j
O2pI
,y|N
zm?)
%.-~
W5NT
)e"l
_imn
i58Q~`i
S!eR
6Y8[
7*2?fB^
Z&]Aj
e'!k
>1	.
4wn>Q
FoN|
	 l+
YyNv
U0{x
.+>]
^=eV
6-]*
Ji,*
8\'ueQ
&s2yH
vpu{
\i';
|UhW
nz%A.o
EUq3
>fa\y
AJkCi	
]'y7M
{OjE
~#8<B
37bJ>
!v*&,&
VBtJ
v-o[
K`-?$
\V>#
2{4I
Dtb3
!-Gnc
Cr^uVnK
^s&jnf
kq-;
dxYn
QLuZ
Kg(u
3^2p
gER-.
|R@g
"r=3k
y m;
:u6/
	Y^j
82BS
0Ou<V
/|ht
}dDR
2.B<
Q.3-{
Fr,m
]-}nU}
g^~v,
Ua%o
O,bp
-7a"?
V-p#
37^24
_?<!	^
:;gV
}h7@4
ZifF
n"6y
>Q~K
P\qj
^JRcE '
Q^K[
bnB%
;SNf
hW.p
sT7Qx
tXm$J 
>!0]
1EQz
qg ~z
ES')|
j`=\
,tmF
V@C;vd
^Nlg
Ss$z
RXS4
X:0{@
wAr-
}L@.sX
;Ya~
TcI\
oFyi
o>)B")~
h9q#
F83>
:Hr,,
{HW4
I$W(
44)Qz
m"du0
~:?|"
z<XUs
8dr	
tb0v
{^k{
oF<H
#nw4
sZ#Wl
kk&8
*M>^.
:?_W2x
U<HHh
9]3}
*7$b
_o[_D
vz7n
4g"0
g,<2
u>!2
(j_8
nsYD
W2sb^}
.5<j
@nX}
8Fm:
SII}k
<l,n
]PvgK
vP>H
:t|!
k7RW/
='X[
 mU]
.2)(
9hkT
xkb#
,"Nz
ipgm
XI'eK
>F.M
~X5]
>unkS
FS:U
{C&,j:
fQ	W&
*b|W2
Nd__
Jk_7
n[YC$
M9-(G
F(zl
[6P5
Gm;M
1<MP
d_mit+"( 
>#$;I
j,@m
;w\:
`Bo&
p=b#
kI{n
Q^:Eg>.
ev`&^F
[SRr
jj"T
6_,1
{[h$
 t)M
'RP_h
h7!or"
}z{H
=-=C^yi
;\uA
o;$@
c7sH
kDj2
48pc
DBY?
{T)p
;WP5/
fv|}
WB Z
cLWj:E
65(3
]@x<
sawW
oexEE!ZT9
VsAr
)EYc
rG"^
{8d(
a@U>
)%K;
vK`m
&I9G
cZ:jO
-:4Z
}L.^R
pO_VS
ip7q
ayKwt
A3M'
na6j
J*s|N
l8E0
DavN
Q;mN
JS>"
)i?]
\c\V
bH:y
14'}
#E}9
|YA(J
NYL{
0;3s
d&3O
w$^:,WnU
Fz?6
ux+Y
fb76
&jrC=
Sy8B
.8;U
T:th
o)mC
Aq~%J
mTeE
2"xw
3xx[
;nXm
R?Oq
Agv>
STx]
K9cj
5W(kH
+(#y
1!Q;
%mN+W
{U0@E
fmpw
T_v!TV
$/Z`Fk
w]9i
L)7>
Ief+j
-Uv"
)M]%
! ez
ADNA
-)~S
B}cB
Hn}"
7Q-Vg
9[r^
I7{C
Foxpr
-b77K
-Q]>X
!\o)
@p;g
;Bjb 
s:me
OHeS
h%Xe
>a6a
8<,7
$]J-Y
yS"`
uohW
F(CQ
+},]+K
	0E!AT
#6_m
Gvd_
1~n_
:rF6
I@|/
E]S~
]SnF0v
L(/!t4&W(
gM'\
`).n
Q5bd
kU/q
v(J7 
0>fjo*
/o/V
TD`mE4
;P4.2/
.A&v
ho%S
7nYM
{3__}
s4zu
/adB
]Brn
5W:x
'g47
%-.F
s,;e{
9fyh7w 
zh_+
+md1^
W<!a[g
tg\Sp
*9"H
)tQO
 &;|
I	,W
usXd
gJ|YG
J*!w
_CrE<
\7o+e
C:D,
ZIrM
Fdcp
	>3W
DJ	k
aMm'I;
5gB)=
Ac%x_
_> Zn!t
GX?2y
{w(q
}~	+y[;|
	]\]>!
PX=hLl
9e,n
K|s'
2Hi*
ov/Y;
ye s
bdM5
Ky(wi]"
*Dt[L
g#'g
ByG^8
+KON
X>Db
=;UE
.8('7
QO5 n
)ytS
u5.o
?Wn2\0
%8Yt
wo>T
1pU-l
;Ut+bA
xH?i? 
9g`fYWY
Am+4
%{A9LD
uKPR
vq[$#
,PtQc
u0K0
)JaJb
|0?so?x
A"~}
ZtH.
yEPX
4[ys
 ,t{~\
='#v
<uSd
us7`k&
*9osV
K5nK"
wc7X
a?}5
S4G0
:o?HD
dySl
!!q4
G.O!
dCe^
\9t"
G|_?
^jd;
'kH	
JKkMo#y
r%w:G$O
"<b?
nJA:=
4yqB
LL_a
+M9c%
G2?{~
&npRn
j V$I
K|DpS
pa@j
vOe	
]H|=[
5X86a
}1kx
^rY 
~"_WF
lYBY&
KEzv
+-EX
T	 :ba>
6Ym+8_
	yUn
5bUO
+fby
@3 {6wl
hK4#
'%\c
d~St
u{S[
(vNx
<j?<B
XWf(Djn
H2+b
x0=B
8\<M
ZC+a
]v-9
F].c
kk9Fm
9hZ$
*L.H
@YYg
[#([2
IZsv
d)p^5
s,+k
S |'q
}\)O
0@4E
8YE2
E7t$g^
4U^rIc
H!5mT
[E\}
.Prd
NqTR
z:iG^o
@k"4
uIyP
1[Ae
+\C@
M`\*
MDSO
	.i(
X\4s
UwN\HT
y~]~6
.s4E
qxLR_m
C|Iw
\}ZSJ
;ML5
qf\Q
]Elf7
1p81
)"or
	!68!
;:XF
l}In
+<Cc
bRU	i
QG3[
@V[Se
,WX.
(@bt
dEM{%g
Lfd	8
 8.z=
`myd[
'xJD-xvV
p\Fh
rZXl
W6I7
crJOUus
1#G b
k[4Gw
2nI^3
qF>(D
KBn%
~S&{
L\`S"wo
,o-%^
;o7XX
7?^[!
/?~PZEu
>N8XL
JX|"
1BV~3
?}`]
9bgv#
HBr6
l	cKU3
|tA=
'5;{?
C`[s\
	O?x
P9IR
|v^y
v=Jov
p8V*
sEwcza	"
X{<wkd6
Az(2
[3]p
`a!9h'
c`*/
vE8#
0D}f{{c
pE_b
Z\Ny
2@'a
_<|d
Cd;Gd
NcyE
L^G-sw
7n +p
nfzR
ShL\+
Aeo}
B2kS
YbU%;
ZDFdfT
:B. 
oVs=$p
>ImX
Lz7(
3GD.
(4w	
PA^d
b1{N
@I?H
{Yhm
P@4p
}jG?
62|(
Q1y4
=^oh
6|8C^;
ObZb
bmpn
8&5dk8c
k[\l	
P<X[tW
3 C7
VLY'
)u#g
Scn'
bvex
4>|f
SiGd`
w+H$
0s.K)
{6yZ&]
	'RvC;
wN8T
Hqa&
>RZx
xigJ
nn4M
X[_x0
(E;>tR
"8yj
$2_n
xo2_3
=MxN%
-H^M
|f_z
O_sQC3&
n)v;
Tg 5g+
uHis
if}.\
,H97
~wa8+
1+hx
#,3Jndi
{KNIaT
P#Xn
qCx.#
dE'7
Mj'R
$S ~$r
WO\b
9|\b
NwJWn0$
3b!s
$'ejRq
U)c)
{-x!
&;3}E
D.;ryl3
es8*Y0
AVyh_
#bfl
8p+hz
zLMKuG
xmoW
]v"n_
->S}z
xg&a
(ENw
rg7G
eA1U
PZsx
m5:z}
Ew_c
[kj6
ZO=J
K1V,
S@OE
v!S	@C
c\IQZ
4O$ 
Zt!+
>q,u
VWfy
t]mo
3'&3
8Bp{K
UyXy
r*qE
}P2@_m
?/"#
Z=eGr
Iz	s
L+zy
FE3;
sNCW
9Eh{
{9./
2@nB
cPQS
Y|td
j[(Uk
??||
[^$Io
Df.i)
IxLo
=l(7*
kKRG;f
UzZy
N;('
VRx5
maJNW
CWGP
r,n1)?~
`Z :
6`xtr
EpBs/
U??9
urdY!1%@f
M,U.
<q`9t
9s"Xne}
m7T6
<Q\q
N?!\
Wo\P
"V50
M7>g
0I[n6|i
|5q[
+nD~I]
Z8\l~
ITVPup2
'\x(
,:'9
@CYOx
JnSI
a]s3
C;t;
n6lK^}
^-`b
qVad/L)
k N#
X~b	
JM{V
lTxc
qsben
R'l]:t2|
,4=-
xns|[\}
nTtx
Y#72
+Aoddz
xO8L
Md-H
aov^
"LIV8
ukO.
S]z"?
<Cd.
Es<h
)q\t!QY
X|[$l~
`nDr
"Go7
.pNpaJ
")Kq
{p%8\sH2
\x6w
^%~nC
daf@-n
@x+*+
kVAPI
hAgqv
5TyB
ns!|
[/xMNl?
zR@S
K2<:<|
[V-pb
s;3}](
4*rY
`TnQ
rH,xFn
pAbJ
UOvy
nEQ:
A0_e
$L/d
Na4p,
nQ_P
PC\TL
~x~,Ox
LrMi
CbE|"
"MY({|
u+S>f 
U"IF
{nLg
s#Vi3Y
}BBc
c^(~x
Xv32
.A+rk?]
XV2N
A_tGo
xeGv
YPAm
	)/%
E}f|lo:N
_\#N
fdY#
F7~{{
]v,I
#"3<
=lCG
G5o=X
4.Ib
D^mvho
 :es:w
\a3!}
jCBm
fm6k
.e^h
n_63>q
d![V
=7.m
F>^m
pR6QY3
	tGIewq
E!-w
T[0\-
kG_t
h$9F
\f'dgJ
o6~GZ
We%	
D*M]
_Pm)
QuY:dkOY
GoO>
 rwM
>t3G,`
JrB=
ObH.
F;L5
i~Kv
a2sT2n
PBQr&
^Mrp,
#HIg
9Yyz
9.I#
TH}qx
2"um
r>}~r
n]5v
'qm>
WTGk
d3p3
|KV?b
NI_1
b!,/
%6a2
whrMYe]
?xOZ
@@Xd)
|!_s&
Av%&/=
d~Oay
().k
UIp]Y->
UC,e
<qY]
3Fp[
(O	m
B]jS
roM3#
(:!4
lKxz
`f<i
R7cG
Jo+}m
r~k$
An4V>mYz/
.e"'
@<6x
A~G6
&G3p
 4mp7x
&K7Q
IW(`($
S ?#
1R|=
!khv
/oL|qv
?".N/-
h		+
lcCF1p<
6pXb
`b~j"
}+$,4e
\Qnu
?0{@6
ob8I
a}P$
b%^t
fmzEaG
~0<A^
a!0lb
d1ym
'eZV
@;=O
~tR{n
W[\C
ok?sqDyw
=(j/
qlNf
l(Ja
M3Cm{
 ne;
:y5Ra
N9\%
IK4cQ
J %2Gg
C.Uy
ZJgb
J`to9v
`*tU
k'vV@ 
Be(&g
[y:/K
ieSq
"\E;
8{JG
'Xv\4
k#=D
0~sb
w 0l
X$Vm)
#~i'a
i~y#2\,z
QY9`
"%P\-9j
{_uv
'l8(
6^xw
d>$l
AJ yA"
&q4{
x-K+
rpp,
-CY-
EqUq
d-rJT
H+4x
r~%/
6YU@d
<gGS
OX``
4<a_5
t -q
7D_I	
%uIw
tl:~R
-#tQ
iTqO4
r|ug
z.#C
Jm;s
%ra_
8?tBC
7	\5
4=|	
7O%Em
eATveD@=
y*ks
Qgs_
s]Y<"
<9(z
ptC\
ELJy
B<Wd
/Chg
ZzJk
OF|WF
Df^M|N
fb?"!
QtR`
WYn{!
o!_~=y
\Opu~
Jr;j
na3wN
v/Dc
wc$v
u* N;
Y"?vl#X
U}nq
=9DNq
EAhk
5~wu
9zdN
.Vh9
pG?Z
9 n>
:at+
w& H
'%^G
e6CL
m;ww
a`l4YMp
Y5p]
inQ='
cy-+a
T\54H
-\ziW
,y-Y
<C,F
r! 3
|EdwZ[O
HF|X|:O
DR@:I7
`k$ Vp
imH{dg
R-vUK
j37i
o<.j
Zrj(
eszt
>VW.wb
yX?f
AZym
\VVp.
U_E0>
oU?]
*H2<
e(@e
Na c
*4~o(
:YJmq
Sq#(*
.x!d
;CXG
C*j6$
Ozd|
TmR[
)m[m
1##r
Y`gE*vq
sSlb
BV\gJ
>~8w
`1^2
&].-
L8ce
kN;r	
P}5/
iz=C
j-Fr[C
/X@Tek
Zf;Vk
gY";
h[7rq
0x[E(/
:x`Ek
>7z20>
s2W{
w(r1
!)oS}
oVF4
;YZs
loS-
?#'_
\*!{
'KxQN
XY&g
e54!
&K7,
pZoW
ng~c
_JgL-
,:T$
E4}L
#2rI
q+uh#
x){0
l:7*sh<
la''
M1Rs
JQRI*
THY&
^a?D-
o#E~
tZ7i
.xJH=I8
dYs8,@
r.pM*
oFHM
	F;`
N">'
$xL2
+\fQ+W
~yUc
.eOh
Z{Ka
?=!\
2f'/
L;S8
Jl`[
#aG5o
i><!^l
C3t[
OT7*j
t(bA
xNi,]
JjX{o{&O
k#,`
NLaU
%&2t
_c@f
E#"~
ek\z
j><!
5!|L
4`F0
!o^+}l
&hKJ'
lZke
?2ZPS
>yG8
'0.	
"lQR{
:BF7$
:db4
MGe[
eK%1d
P^k	
rLDs
f`|8}
z6i[
~Q0@
HDB!
Mt	3
q66;
_AJ%YR
y-[i
 ;("f
sr'&
^;6'
At%(
g-re
Cv\;
]rf1
'%Fr
g%\L
vUvB
Anpb
Act[
IskST
A.**=
Oxas
;v+'.hY
eyAQ
6i\u
[*3I
9ulKs
`7'QM
I[MB
a e_J+
;SS50
0}cD
Rweq
6m}0
A{/8
CL2q
9f2*
{]gR
nl}LC
{HZI
2#Xq
T_4.
y0@_|
L"uE
o9#Vd
'^,q
2 |fK
:=rp
.=Nj`
'Y,y
tc{=l
Wg?*
/uET
-=xsJ
f.%!
|iQ^yu2.#
}X/k82<
3X>xe
 U<h
-,b 
r_)h
DC[o
5JF#
!gKVn
d:H$y]
 b60
g;>?
wI#,
E.x8S
dBM{
3@DW
="|U
	/cU
Z t{
S-9L
:=Fi
he7N*&3
O|6@ 
.BL~a
q'o@
t,nw|
:{.}
w;nZt
m(K'+n
#];|H
:,]w;
0YEX
?(yu
KrIXrv
D0EL;
aW:j
w(mq
'Y- w
?_+_
8:~B
|vbWx
	`ZG
yMZm
_X]W
dG@a
q4o4
}"\2p
&qrq
3`6p
QuZEr6
YW$m
a3ow
%#U.
M$`bC
ha{?
BtNU_K
|ICN_
%+dz
Sr5^p
VBOco
[maN
n6G.
\4P{
nn?r
pl&u;l
" yi7
AYuP=7
v:!=PW
"quM
JqND
=*$o
5L~;<
|T0Vk
mn9v
sYKTnM
R7n}
_EE5!t
+0f_DWD
S%GP
AeDx
\qz.
Kbis
o&??
'D7[X^
-Awl
nv+.
A	3}
_v9%br
8W<7|
>%'}
G=I>
l9Yb9
:U)i
7{fY
Qc0I0K8
q\`7
N-V>
)<^v
8rT7
]r!N
K\$3d
s)]l
s	27N
3as4
eys&4
S#w\m
AJIy
pc k
B:}f_D)&Q
P/ZVz.
	W`c
T,;H
heM6
om9^b;
']L	
Nm&8
YxMl
?dgs
%ES8A4'
@05Fg
~`t+
"sDA
2S~X
=rI;
.dqu
I9^t
;.@W;
!j-;
o%W.r
K&G#
3q5Xh
o$*E
6V|6-
.um:z
/@MvG
oUI.
.Y:e
v6wd"A
w'b.
i.8)
"2@p
y(s|
nrc?
A3xkB
B-?W
o~d_
S)zf4db`
q7+'
;.S6
A2~3
4F%K
}fh"H
uFG_y
kpm)
}rw]=*
<9Vz
-c*}
6b'b
HZet2a
`'08
+7oQ
9%=H
rOG<
CJp4
TSJ3
t+h1
\(Wk
Bh}Gb
v(H<
'q.a
B/+M
vr+=
!)k'
+zao
@FyC
gxH]
NLr{
|LO 
Ih=9
q]<)[
YZ#*
n1a@
LT[N
Cn!P
|b]c
877A\
c|acY
B<o0_&
|BXmV
\t[.n<
b%zc[
6#*n?
78;w
nq9s
WELf
f5QzA
e\QN
70P<Jo
c&aw
S~'"
	_w*
,Tus
	nS*
%x7n
c`5S
Y}:v
8[Dx
m?stG
{BTf
{%oVy
!B!GLx,
=zz_Tm6ks
> <\|
~>^VT
aiIdy
qmcN
uX]q
s*X"
jqNp
ik`o
I9a;k}
a3Ht[
z04Z
e|~}
:/84h
@@,S
[BA]
}O[w`>
F5`N
;hvX
D=sh
8S9fy
L7|)@Vd
*hBp
i]Fe
A	0ze
"|" 
)7\)
}<6xZ
0s:Q
{=o;*
CazSmN
v"e$1&5Fv
 |PI
K{Sp
-rt:A
S`^]
t"En
#Dt)
Zto5
9*7k
AQzc
mSWh
I%Ab
ijz4
Spk\m
dE{A
lns:
v1QQ
~*A9
OQS>
ZUu9
 A|{
uC>7K
{FKkgU
t\"x48
1f8c
mUw?
cZl.
3\c^
 }cm9
PrMO
_C{R
E3V1
9/* 
SB:Wv
JHglhX
n)t9
$S|P 
\x1M
!G`r
]p{ 
Z1#=
+T]^
L}i`
Sz5Y%
'=Oa
uHJNS:x
}x+9 x
) _YE
OWha
%"PV
kXR<
jVE=
AeB}
)7F]>
~Zb7B~
AuM,
%>y'
=|P=Q
647dv>
']:G
/*oy
-.Z{
0~Ze
|}>}
D7?*
"|2K
7"\D
k	6i
95W2R
&"E}(~
%`U!Q
\:fs
wdWo
'6mkV
L}?D
8UV\K
r7)m
A1~O
=c[W
kJ1D
/_BV
}^%!
TMTx
0Z( aH_<p
U-p1
6(wG4
SH$2
8bPb
vez0
6pnmS.2%
rmS{
3dmCp
Ap:S
A^CSyU
p6 @
LNzW
h!x)1
.WpUmk
-gO>
u/ns
%c&w
m Z0im< p#
}@8A
Oc3[ wlG
D_v6^s>F2
p3#3C6
J"s:
YQ2&
8|.B
?r.B^
l,hG
HCb;l
_s28v
+RV,
h3O%
c*	/p
?4zuZ
oPZ_
GkG9J
k,7bn
w^GY
4Byq4
}c~E
VPhI
-Hw$
Wb{]j>
UW22v
U9@`
}w0QO
tX03[
Gik	
aH^(*
^En+
^Ye0
j-hl
v'Eh5
#/)FJtV
fHqw
{3PB
{M~.@
6tH8
+0,SN
\SCr
=L$|
p]b5
BEy_W
jWyR
Kpibv
/#	Z
g_C"8q
fWAo
uwo$
p#f+
Kw>f
.KGj
kL'}W+n>
g*79
o1*"
lC[JX
wx7Y=S
gWm{
1gb7
$;x,d
	`jW
?0/<W3
};/ny5
CIV9
{i:U
`>Ir
{_ct
1B&;
5Q;/
BP:zw
%?lH
[]`v@8
} r\
.jw;
Ap6{
:Df6[s
^(0;
 ~Y:
sB",
h+ae
/4n$J
<t,	
R~kv
D]3?
s=tHP
s|kN
MSn+x
2;/gg
OP}F
52 +U
KpuO
jqSN
c yL
?i-~
>@9cL
W20.
z^	S
;t[q
.4^Fw
}i.K
q[ v
J7mi
5Bh<
ci)C
pX O_
-/l<
0500
Qt|);
9~<g
a+.`
$kgA
B5ry
}+7JX
(fJy
2@Kn
I&{m
"TG1$?
1t,g
0PNL
]'@Yx
pm@t
@/?#
:# [[,h_E
GQ0^^,
%Xmc
rc\0
Y'(q
#E^m
#FrGC
,^/ W
H^^l
Vq!4
-=!X
r;{]
fIa%
9-?~
4XUn
?4Ak
"5Fs/
UT71
8HxeA
t_;t
dy,;
f:mo5.
4ypn
|<NA
:UNX
=.5jA
f<H	_
{po?/Yl	
*L8UP
~lJ}
gLm%
h]>+
Szgd
=I]_
!7y1P
%UHk_
_6e~
Fg[bzeT2cn
28,z
D"dy
< 69`
V	Q'o
oKnHxP
kXV~
g{8V
9U@[
l~kO*?
b7!Jh
a=u"
j,5Wy
KMJq{
[@;9
1(o+^
1e kAg
]sZJ$
yR/Uo
C)i`
p2k+B
nqv5
	w9Wt
/h1y
t]2]0
_I]~QS
1CI2
JS%k*
 ?@S}
hA?|
I|U/
aTd_f
^;)!
cdIK
;!i*x
V*p:
\0_T&c
5@$]t
^z0,
LL8I
FLMajK
;}/3
"yWE]l
SXGS6b(
d9UkW!
Vm0E
2<5]3
a-T4
{n-W&l
;b~-w
=xNd
keAv
C!Ev8
1d0?
r/(d
aU#>
*!5u8$B
zY}'z
ELkBw
BVbl
u~SX
u[Fn\
I%SG
Z7lf
wg3K
_!>.
}xke
;:pUO\
Kwel
_?i&
uKDJ
%S.>
/$;K
`oC3)
RH|o
u!}n
]?hQ
8Wk"
>b&&
]rm;`^
3\H	
.9\x
9BjPBp
L#s{
,~V(
3	yM
u]{o
66kG
e"FQ
|s_d
aTy'
.<f$B
<DIh/&
xgl`
,"yUp
R4G.
$o)a
fP> 
v#)4-%
?`#)kv
Bo)Q
pml`R""
_ry	Vm,
q'6g
o;i_
XE8.D,F
FBYS
ru{<
Jj:y
CZ/$
]\wX
||7;U|
+stK
El<FF
Fd)!
6:lL
E</HL
;}qo!
8^*AsM
REY7^$
=cDE
\y"w{o
sJ5*
2QUl
vf_v
K\L+.HwQF+i
C~^-_1 ]
|! G^
Cysp
%\9w
Km&s
6m0`
cd4J
 5uHJCof9
qK%VRL
y['fv
0#_uB|
Gn` 
J[{*
KB~'j'
l"Uq
5]%)
.rc]
=	5P=
iDo2
dAaA
|a9b
iK1$l
tYE2v)
5Z|P
^x{0B%X
yt69
F?8R
.:O'
wVZO%
!|8I-
V u30*
eeHp&
*)YR~E+
.N>dj
g{$m
P>X29
qekkW
*8.\e
0X4H
qA{c
k:%Ik
HCvd
]7EH
z^-m2
>i/]&
ay,X
[Vx<
DK8^
S.#i;Iz
QT+H
P~['
&<do
VoN2`<[
"W^acP2
4bg;
4W pT#l
t?s)
OQjN
b+Q+
A;)uSFU^
)`I1y~i
!=kP
oy3I
{V\T
	4l}
g}ng+O
 OI"
]t-*
|Fwgl^
@hXp
LX<0
y92C>	
D =]|E
D\c4
91Qi
5n]%Yo
wNT,$+
}Z)Lm
OB>H
A,<v
_aw(
>`vZ
{BNj
N[}9\
^BSN
M0\N
WYP:
5f$n7
t3EY
8X_PE
)Ezw9D
we3W
u2/;
F=|u
,z0S
	jV^4 
S[z~
O\k;
fvDk
{Ln1
#8_8/
&qOQ
Ti`;r
^=/j
/B<|
P:?+qe	=
+8JzD
/1"~-
dz6:
=~wX
m4PE
Y7s	V
8|+3
8JGBF-
*_ddU
C	7c
,[".
d7mW@
$~d	
X'F2
guM.9
F_Td
bN_tg
:Z~}
jlRO=
~v!x
QCyn
/B<+
L>a||
 v]3
dY!-
*i|]
'(<|
HQzr
-$k&w
FHT 
6\1	
T9a(
/Y~kU
r6W8
t04^
=d\y
N\0^
YmH[
{=v"
>[Sq
e%rY
@uHl
lZqP
_GyEz8o
lS`F
K"l?
<j1Bx8	
(0sA
7:VK
`u)_
exE	
)x1m
-r9{=
;`bi
qHj8O
$e m
0l8k
Gm:0
K-"{
.gl,y
ry7\;
!g/0i
Q,.i
K,j9
|d_#EZ@b
W;s;-T
k+Y%
?|E 8
A{J:
/`)3
<faw
232D
k-Ubq}
x?w{Y
oj7c;
<%WMH,
Y2*tY
\[$al
Fm-7)
~OE7
$Jg8
}Kj1
z|P8
FHB{
ta\.
?i)_jF
.V	J
cz]@
<|yh.
fc@_
@.>k\
Wy=~
dk8Y
"OXABx]G
}n[?;
+h=0?
\J*[
VSOX_8
bYJO_@e
|-^1
Fj=VB
{U*kF
>u;I~
EZtr}8
g>2Vx
m}kI\K~MA
A[1H
GCW8*
n_))]
"V{y
1kS{GJ
oIM.^,X
[sFz
g{w8
/Vo\
,	1e
kAN8	b
7B(O<
6kee:
yOx~-
m`xf
oy=j
wE<~Z
rPVSU
o+`P
l+}][3
_+H0
LA%W|2
`;zW^
jRzJ
oTY!xV
BGbC
Bb!~
x-9g
=}y?
w/z`
WH`e
IgM*
=,utd
X^k/
#icU
{/Z(
5hwE
QC~I
I~2q
yF/C/	
d=tqv%5
Uvu5
mdVO&
??61
&UNG
8{	_
Ixk3C
U=aiSHvq
zzgRo)
;uM:
COgX
(N~[Z
!3\km
beaDbf
9%-oR
?~8.
}:.xe
wy?hh
	6A0L~k
|)>DJ
CewU
*a@;
~?y0`
nd 2_
3Kx`k
sy3k
d$i	
=lg=
,c~iO
di#d'$
SmpU
)G^I
|nML
7~N@
aP>W
*7CM
X~U@
TOiU
~Eg09
3}wq
',Bo4
|cp=
Jw v
UxhA
\x8O
TEz:.
^{;,
Fp>\
.<hg
ku+W
)J^rN
g#W-
.i]L
"B^9
M'Q$
QrV:
EM~|
%v X
uL.@
(ty6
Zv<y
S5+1ORT
1gm 
^L\;
i)6F
Z V2
]&hx
xuCP
7qr>r
:u3)
tFpS
L@W0
C	r-
x( /gm`WM
l9v rN77
$os{"
5pFO
9+F$
Q*J&
.C[*
ul-#NmK
dSj$
3=rvI
$oVWz<
/X[Rqn
+oDex
&k~$
IQtuy
.i^g
x;`>
5 9yl
.$Ad
\ajg
=d[y
*8GNT6
tX5m
O5-?
Yktp6
0ZAvKz
U{{$
|9BS
f-/P
1qk:9}
kEBE
T+mc!
x[Xo
^BkN
!a8yS
oBeqz
T(o\
?^*H
._-t
][Ts
P#Cl
(V5w$ 
xD6[
B qm
}!a/
ODn|
2`JV
50sV
R)"',pE
p3`E
r#+}
/d72
kH]@*
%xo^
Ep:,
6Dyl
M	\6+
U%p4"a
~~Ac
yDbo
ZsT0V
gNpm
(2w%g
5^KX}
Kj94R"
:;O'
XM7A
}iB>
n-~!
ud[*
"n$C
R\My
BIy%7
1atti
 "o/
6et5
_!P\
mXsp
X.O_
Z>9n0
eY0ch5
wo>N
Zj|n
uC[,
3Sa;6
"eB"
HT2o4!bxt/
FI;G
`nag{F
_o^X
vmv?'}KHW
T2;m
gk,=
"E\KE-
NQ8h
u8:F
;r&:
4sr,
1^xj
CUki
z^(g)-
`<^B.W@h
CLz#)
YMgT`
\#$l
\r\E
vLVqV
Vi^+V
<|kr
 H'6
WmY6i
<'uF|
TEf2U
wDOq
i	qk
%.Eq{
[%gE
R#v'
!Xxe
-9`@
-f8X
 nag~
~>>!]
kqeK5
LQ;pNh
b_Fm<&
fWJ:So
K&cj
UwBO
&^w`
{7Y:F#
:}/D
d7a<
EnSIz
?/,(
"= ?R
Q,d\
vP-t%+
- '`R
ukM0;z
5/K4
+S'	b
_{"e
d;A$
]GMN
00NHh
)41_cz3\
3V$f
+3^{
9"XS*P
>g,C%
]gE"J
(=*h\
oM;^
H<4"r
WI+y
Z,}o[d
9`*H5`V@k
Nxl:
qmUO
V0y'
fn	:
sfKW
T(Ze
uRlH
`$2Z
HpXa0u#
c6%_
&G7|t
9.Md#L
3A_9%
bT_Y
{0FK
bOeRQ-
\Eg=
+-nd%
	-1C
BT7F
_Gd7
K2h+
e 6R
lS+d9L
h6Df3
d2yl
\xPK
=)lj
3b[`g[gn>
'f{;
|Sl;
j#*`
1w\,'
&G^|
DIEZ-N
hY|V`
X#2^N|
#zb38e
4*vY
5f)z
-[Ug
gS)r7
hw6JHc
	_eN
sc"E
G}?"
1^U1
Ysx|
*vVD
F*"OR
WoA;
oONy
F1i%F
&B)*@B72
odRw
<	e~
bA[d
]Z\Gc
nAyM
5c?=
{pK,
InN#|
Axm1
nM/,
Z8E3
px4_
 q9N
=K*Z
GBpw
e$p1G
U=h^
 tKy
`U/l
f #yT&
1eXb
R&<Z
:+P{K$
]:Um
`mc^GZ
y90-
yJ,p
1wH 
Iftd
t"Z%w
X7 8/R
w'!Wl
j9k,`l
E6P:x
NYDK
~lktZ
LhW/A
AVQ\
ScR&\|
~HoY<$
[	cvR
^&SIKA
T?${6p
36F:
c*7HT
"r}=
`Qkp
Po2_=
SHmP
8{^cB
J(xs
dfsm+<
B++L
l|)7N
&9o^E
sQ4tc>
nr:&S(
]|xB
Rbqrz]
6M_9
qxD0
N\r>
6^+u(
XPXv0+
G%^9\
W(;S_I
S\_ w}
K+(W
&>DY
}`C%
P3qz
S;5-|
sPP:
0x_L
:>$z
nX%'
Q 3!
}B[H
(EY]
r7Zz
o83_
y2 <
@V`y
lD 11
?[+"
k;7_
.#Ms
0DEd
$#FG
%hYS
da})
!u);
]wOK
a]S3
 4_39
Ux;@
q~kU
FPO>
)c=#
*/HE
/7W r
4[sk
+H@8
}@^]
i2Q*
0T#n
	S6Jk
 HXr
0xbyi_
<iuo&
&<aH
#q;\P
kSob
?|@Z
@t3IWl
T8Tm
c!<$
9}S- 
r(I\
|f~s
d_WK
f3#!
dBoDo
;&N'o
syr|
)Rg	pMo
`C67d
@|1q
U33#!1
t*6=
y`H2
YVla
 SnE
rIRy
a?nH
?P7'
]c9p
<	6x_y
uolb
?LJre
&mK;{
SapS5
S,)0
=|\O
JxqP
Hg(q
Wpn%
[q7@(
WH4F^
qN;KX
volo
:Lx_
:jYa
]uaw
|~Fe
]q.>
(x~SR
W^~?
*LGV
j$qC
[w2t
a]D<
*gpp8AH
Hm3m>
OV\;
p8^^HN
r"4	
}9nG
6rM^m
-0Xsu
*9,/
-#Hu
11|Q
Ms;:>
6}[4
*4 @7
vmS($
@ez	
J}Iq
'!S/l
[D]T
/?|  
O?}`
V8Y[
l>l;
y(M^
\)DM1
4?~<
Cr-*
BJ9W
;-(:N
roOy
\A_4'
~>ub
I-!R
{T\mx
(-<p
AAc/
gS"_
77[h
RJ57
*l5P
\eb'
.G-@
)=dt
Zy$A
IqoJ
ou<Z
	cIa
N=e{
n4I`1?<f'I%pcr
nC!M%%8d
RciV
j$dC
Rub_
]7Tj
=X|v
pEx6	
{7%p
UI]VAs
=4T6
<Y{[
0M]1
ULst
~Yut
6aVM
=P=8P
BDk{
oi'Ai
]c3/
.4yP
EY[#0
K*^$\
-&?C5
8;S7
<(	X
vLb	
\bg~X
s\%H
z=	]
juLL2J
5[u+o=a5.
[)F6
&%yf
$f V
.9b2I
Zo7B
$DR<
r6PQ
R$yi
s6Ht
)SbT!
E,@:*'0
-[v*2
Qe5R>H
p(1!
0!0H
=_?D
ej x
0OyTF
Qchy
5*.M'8
8UndUz3
Mq.#ru
TcUxe
ZL6&
A*/%
'$m"egd
Cgo4
0!9v	w
"r}i
%wnot
e<{?
Ko!t
WCq%
fvS7
kf.0
X>|0vQ
KL71
xC]vI1
*~CB
'=P^=
(G}@
+CDI/R(W!
f#\`
DL7I(p
A4cm+
p$H@rJ#
=!^{b
b|-B
Ll]m
3lC[
u_4I
0[oN
-?t5,
|q)B;
A:	zgET~3
Lgjo
>Em|
F+x(A
yctX
(2l.
kv8jQe
=\(N
5~g[
$$U~UCZ
S$->
+QoE
Q[-W
#,}]
u<L(
a;eq
&,`xLA
[;6+\
DZ9k
d4 I
1+*R
cNligK5S
X['0
7[~"
O4in
GH>j
~FU(
D;'`h
J;EX
-Np3
JQkX
C(gSG
C"S 
KHPgB
<.\1
N/\7Z
q^{3
W7#q
%(L>
g5e\
wx6w3(x
w'?j
w]qKS
k&sN1
8E^*
Si;K
]*9C
,0P=J
vd>C
X-D\
%d7j
RL):}
48 w6o
e3[W.
?s<>;L
&TvI>
I~$zCv&
k`_?w'l
/{ON
[T!y*
i+X=Xo
Am$h
h]C*
cQbBE
YBn57
m-|C		s
AN5}
h~X=/
iggc7
.pOhS
*fnV
I@XNG
8ZxK
$1|93
e5A)
Be,2s
!	oK
#~ox7
!E^L
}=d_
DSsX
dF:Z
sfL^
AMEb
&y{Q8
W&AU
kg"l
')	3
<d _
_TG3
P8EvX*
 ~Jw
/P?b
L_U/
0e#og
sNl<m8C
;i4[
up\79}
_N}J
_'/H
'C,j
:I2a
EW6n
>piU
f'#y
aLsb
sT=*
B^Jg
'6Q@
1p9^?
>;N[]
Nb5(JQ
2Mp9
odjH
u:>Gox
AVYkK[
Hd}5
q&"B
 6P#
eEbfM+
97 b
&`fWxV
J]*.
\5&V1
lbLWt7
k--?
>:(a
;S6_1ec
dsqQK
Dk_1
GNJ0
s?NA
f+dWo
Wb!	
8{55
P?;0
&4JF
I7;O
l_P5
Y,:y
&G4^i
yo]a
>n3q
~"p[@
57T_
[^i~<
)qq8{"
tgC\
{wx^
pZAw
D'9O
?'`n
,B>u
d3_.
JZ=B!
M)c 7
IX>cjs
o'`Y
|"].
x_V&!
3epHH[
RjutK
: y=
GMi]E
9,at$
{3KwI
BxNmC5
*|X-^n
9Q:[-#
:B	u{6@
1_N Wq'l8t
yO_8]O
 `3\
oe8&
c!lM
$xy(
\>Bwn
;ML>$D/
@\u/
B/Wk
 XErh
9'Uvx
mkz{"
;e*F`
df3r7s
2QS_
g"nD
A ^H
qpW{
fOCT
?so	
nyJN
%_?B
[ugg
}RE_mI	
<NXEu
}[vj
(QWQ
0VaW
F6|&MU6
 8Fl
j<]@:|
tk"N
ls5;
aw|X
s{ TG`
F|LGCa
/L;\
{HZJ
5$$SWQtEE
905z
e'X.
amc}
>qvj
XYvX8
krkT
-Z<$M
3<`;
W_-^J\
A^99
I;}vj2
]xekb
Xp9`
]v?h
oxh_
^R;>w
#fZ'K8
s/a114
\YPA
#&7g
_W+h
r<1`K
[*xt
i?li&/
buc7
1}E+
CR!q
~SE}'
$j50
#:q.>
as0y
 "/c
uB++.
I=pN
-vu.qe
P\vSQ
t$)[4|
N}Gmo
ar6+
lp>"
@<h"/
~O_xL
:=m0n
S[:7
iPFR
">f`/
H] {
WjMe
w/!b%f
Cb|	
#W*A
Jn4{
z'#Y
A1wx
X)Q-
w!riz
k<eYyr
W$;A
}4GI
e1'`"
$GG<
aM7/
n!}9
}0	^US
QH}}
g89H
z}zu\
{HX{
5lmW
i]:9#
>_Q~z
!T<H
x_9g
bo |
+u[ +
4Ne!
E_A}IE
F^s#
X*nz
2]7n
_-E\
@NULV
*8Pj
`KUG
|+Xd
C*-;Ww
Iw{m
/N!Y
Agx?
/"\.v
_wX[
0w\@Q
3.w_m
r!hV
isn6
Qt$x
I~OK
je7Yf
l	cR;
yPB^
BB\p0B
b_?v@
1~P"
 AAh=
.ct%:
[]HK
5g#m
1s{P\
;J%.
E1pC
,:~f
;L3,
<fo3
jw4D
">X0
fX,x
UY[r
vL)S
4t}u
-Wht
Q uZ
g_!<G
QGx}Q
qW|q	DK
%35a
J&%G
H_:H
_s@RV
_upmU
y>^/
A%Gvb
X'w~fZ~
9r35.
 pEs
:X23
a2dW
Tl="g+
\hom
&H'	6
;|.'
r;f|
'<Gn'}
{qa#
Tz{s
SzcB
Mp&u
#_N+
zx@&x
.#g-
p(iD3
y%H*.
$@72
pm:1{
K(=7r
R-"^	A0
`6Jr
kEFr
$.e9{;
iV_V)
8`}`
"Tx6
u#Q<
~S	|
jM]oo@
nu2y
WY8]
\>hSgn
:["+{w
eng#
goes
M'>[
S?!2
\H6<K
N+)v-
 %|x
gz@2z
}kD<n
@tQu
bR6"
9!\0
wOqA
785_
jP,i
}tn1
b.I6
_u8>
}#x 
VuNl
.QEj<
]%	o
8({m
sTklX
+8k^
_AX<
K=	]
8*Pk
?x#a
r+l 
qxO'Ai4
:[yf
*}byHo
\M8"
9Co|
*uA.6A
2urZ
NNQw
mkkJ
iY8{
/?{o
t@'G
[:_qf
ns~(
>z@^\
*0N-m
	/XDk
}I*M
_=c{
FLlxh
@py8
qE?S>
xp{!
T'tt
!^g2iu
Y\QB[e
s0:p
(	7j
72@S7
TB(eN
{YpE
g8gm
n2}+Y
@czf@
nav4Y)
J\G6
?K=?nt
.)8e
kR78
{g7(f
x$cf
:Otuww
c2lS
K_8w?
mAbhRU
uPmD
jo^o
4fpj
ODW.
|u0'
@,*\
\p,t
o"O|!
|\<aq
07A2<
fsR	u
[m|U
%!l +
R3\rrg
sf(q	:
&S<5j:
FL|)
z[nO
s"|M
cw3@o
j*B:
yB\ki
z]O#
; >(
l9?.I
D k(
v:Z7
d_;!
~u6e
}NG'
%cqp
dQeE
tFI/
cj45
7eUp
sYs[
H@{	
pOo#
5_mB
N&u.
e09v
odC? 
5,IS
U3jL
FBd?*
E92p
pz9uu
![o@
?Dkl
3v=h
n=d*
x+]%
3:2}k
=SCG
&tv(
[Ig{
$.Mf
;{k+rW{<
AFCP'`C
"wzW
<y:v
XLs&
io:O
=r({
 p*K
)vlt
'}nEv+
Z@, 
$[*[
=>c#
;#yK
oy,3
xKgX~E8O^
U~yQ
<tqMx
zn/y
k;RY
Q6\Ne
X)V1:
t]/t
z@P`	
LAsH4#
jR}$
0X1A
t	:yO
6_W:
R3z=--
[>l^
p0Gb
>ynx\
%C)G
1pI!
,?hYs
Hb=$
{hjf6
EA~G
v*s(
Yme=M
c*{j
Hngt
PMx.<a_j
zBOo
QxL#
V\0l
[FwG
OzySa
	>p&C
?!V]Q
<F0g
z4	]_{
&[\jvv
t6K'
ff&{&
GET"
4&xC
RSAfB
Au+n
4Gw>
AWni
R	xTS
lMd\
{MK*U
Sqt+
A.{[
wO&$
Q,BH
2F'>,
'E1S
u;[Y
(Lk&Q9v
!L}}G
mWvS|
}_($9
&(?v
^b&]HlF
[d2|yZ;
Cppw
Q#:0
"VYj
QL\3AG
2,0/n
nEB)^
P*L0
wO\I5
pUo8
5m':(v
)PSY8L
:XvG
|+;94
5?G1V
\:iC
tbf'
Jo/V
xM\5E
O&'u
&b6,
u;	?
g4J!
Kjh_
C-w!
?} ux
:dAD
&*J#I
=7^u
%x<}
!D(~
<#L#
-gg(d
&hP4x
^e'x
~Jzv
<'?P7S
xD,X
1=~n
2^gD
^N>u0
D>wC>}b
ET#uY
2cMT
|y&#x
vc4br=/
s7S<gZ
Q>Cp
5.,E0
M)W:
j3&G
)f;D
*!~20M
3\vb
q%hp~96
7B>]
p_Ff
*)tJ
{{MU
XE6y
%r^5
CjTJ
{dZy
#?jF
.L9R/
q'e3
]C~3
}$8m
WiP}P8
EV!=
<\W#
Qt$=L#
Aw=d
`+\ 
FQ}1C
:G+W
EF9M-"^
/K*~
suwl
Mp63
G}d*a2
K6Q;
|@>]
/9gI
s1,n,D
js$t	
m"X*n
IR|mvD
EZ[d
|UhC
/Icox1
OMR]
$Un%
TC-0
7//H
YE_Y
rok+;
*c~n"
sX:c
-guW%h
aHz->
.!rF
Vr_ev
2<ag
pE9+
Thr>
35.P2m
Pj|6"N
#+_6
'@<|
Kjd_
@DtX*
M,yQ@?
So2q
-fM5
#|v(O
0t3'^2
=}60
}	C?
X=5d
Fxa(
bO&<
p^$T0
S A8u~H
N@(@>
7	,=}q.s
Kuu%
Jk*p<
Mv]O
A^7p
lFaW
VY`([
;@Jz
*kN~M
*d<$
8mdw
dxIM
yIM)>
ZkrFW
-LQ|Q
s<;EPG
JWj	
v'Nux
W$z&2
un5&9
c Mx
T_^RDd
Nf2?
P[%-/^
M.4b
ZIZO
_px%F8v
6w~|
VRxd
,(*]K
&im13
Yr#=f
*:\6
{&`c
n4f~
09_\
zcU8m
odAy
+!Z(xa
oA.e
e>=,
_GT]
Y}?M
@%^}
'&_<
O.;G
G?1\
F@x.
p5Nm
BDcl
Yo~x"
&4S+
]mCz}
b^39
[%	^<
||2E
6+c'm
D6xp
>&k[
`^rV
Q%q$
3 #Oi
vuE4
B*nU
h;mk
0e	s0
)b{]
|p`V
,;Z=
f2|n@
5X=oW
m{,\a
7n	A
sNo&
HX}#
S#rbu
u6A,b
n>V;iq1
Al:K
Ik{O
ja1P*M	
lqqW
IO)S
g2kE
)WML
9Ki1
tfON
!Xx{(
.cjg
wOWI
;qJC
{-<L
r	VX[
7?=1\Y(nkb
/3\>CK
.Erp
 o^E
:5uV
RZ !
w2:<
!;<6
VmR:
Pw% 	Dj
%_Rj
?{7_)
On4ci	8
W`&8
4u:G
x8#en
KGp:v
MU>{r
:<-*%
t[${
oQ%]
5JKe
	[q#
r^td
2gh4
]M'cK
.q#'
J|	S 
W_8qx5
nI$f
&0s8
p&P#0
	=>v
<!_%D
jJ)6o
KFo2
soWS
ZXg|
t:Es
YX_z2
P&=;y
`w*b8 
,GO~
F= -
d#Ao#jNuj
nYkgg
sZa-
MT>"
7Rj|
r|go
!)<nBC
n6yn1
=10D
_<=p(
`?9\gg
[&<x
baD;
|mgt
;?J_
'46_n-;
zh3"j
{>`&
f4QU`k&=7
Mhns
 %r:|Iw
eYJG
	VT3
W+6+
AfJr
Kd2r
P5dWR
s|#%
hp|Ti
?T8)
_>	.
&x]J
Xp1\\
}D	O
*YI$
[D8L
Skem
KnoH
giP`
}/N&
/+y[
$n9Z:
3D"]
VOv>
n5:L
"B@j\!]
@08e-
83b11
u|r P
My3/
 R!7
aJj;
>:B}
9|bK
a@}K
}hvy
|qB;g
K*yS
|w:n
b:]s
i'y7
Tx6Y
EEd(
q^8O
-sekQ
Q5oL
<~6s
)rq+
$#7G=
:=Qn
EWOln%
+e<F
_]c~]
'g]CI
+QK&AK
;Y9vTv
5w|F
tt;Z
'J^)r
)kFP
"P4n
Fax]
]^G[x
JxyQ
\CaB
v9d7
4.{7
cymTe
Py_T(
w7a,K
3gw[
7KeZ
`ZdS
$ob3;
Q2W5&
]xJ{
&oUV
	Ulj
?}b[@
IJcU
Fy7A
z#_J|L
6*O ,
c$!o
hiHS
c81;
F8d=
'egs
;}w"3
9x; uh
E;X+
9,-5
l>x7
ucwfm
O.PmB<
klUH
!Q]}c\
Jlu/
wI\	
I;sW
Nai<
E g.
DH\M
5]p|
dHe<
GdRBk`
f[P}qN
SN{[X
F(N>
ye|@
jj'l
 Q(kr
%]~d
u_?7
iBi=
0,9r
<PEk
$m?(H
hUf+Z
~;Ti
m^r9
 _(}
@8q\
{w29=j
/F]@6
*@WrL'
hN0F7
i1p1
k-P%-vfFP#
@"t=
[ e~
t67N
l3;t
js.8R
c.,o9
VAUB=,
FpXT
CAkj
M{XSX
$}3n
kJkn+M
(&T*
Gi3W
pz#C
m>w.
hH""
~t+|
[!d8
@7y6
O1"X
MUE>
3f{S)e'
HYWu
12F`<
fsW?
Y`|YP
'W9xMg#@
;4'4
gSi_r
N&Ac
l?x/b
nB"@7
sXS/
;rd8
|{L 
#}vCz
#BHe
E#,,
Y1^\J-]
-;@pc
:AHx'
<BQP
k:42
:s{_
`P	/
nZ2l
"+EJ
[|\UF7!
*!^"&t&
}kKO
S*dW
s6MeL
w[U7#"g
G%2BM
l% Zs"
&!]PC!
}K]-
#Y5>,
d1~X
F5W/3q
so+l{L
{X,|{
_~3-b
Ldx/
J2*}
@cAM7Es
W#g[
+X\s
"p){
{xzL
,ff4y
[VJfpRK
&}4"]
qFW%
Uz/1
qO\;J
R7On
'Gq[
hInl
z	iOL
.#	fn
4,hH
Hiqwfi 
<3m`k
&vB;
%yB7
C& G
m^<I[
	gDl
;0@7
;W[l
/CUC
uvn-
Cn]u
m`@fy
G2JeN"
Hen(
D6C}K
!HG}
fg\s7
*3$k
a7~!h
sE`J
3ySc
yzTs
Dv4`
{.@,`
{-\c
?mpdi
PXn=
8k_L
px3c)
c*'A
ZVN^
wQaN
>00|&
<OqUQ
R?wh
ReP;
5J[#e_
pK$!
B^.+
XiAY
NI'd
:%NN
n'gn
o#2#%
Z+`_
MB}1
#WEV
#p27
>M9v
yxZs
{ hS`n
u\+R6
!  ~U
,sr'
\E^%$
oy;f
;Q"$uoQY
I<M\
A4&{W
>#)9;m
3%f_
y[@|j
En%},A
qjCi
=fX?
8|S{
	/U*
6"H5@:
<~^y
w ~^
HA5t
T+>z
3\raN
adUzy
`~%i
f!JO
RWDVK
uo[j
S[+hrd
U<\w
uk9 !
,o.qYAr
e{n7
\-22`3e
Xt_rm
p=\b@
XC,x
;C\2
fIuQ
z<yY
I8tuNoO
c>lGv9
0$SJe
;[	<O
-f2>$
}Y7M
B_"[
4;cs
QEbk_
X(n{
P	q+
-<P2uP
o%w85
1>O 
xt2<
>GmQ
so]}
L.UE
I$UX
QzOogxD
*<f~
;[u;;@
vbJw
U:BVX
K!tW
{vh\
_~?q
a:Hy/
:>ZF
9n!h
KF7j
YlOY
Nox.
pCcn
&Bx3
:oKOZ
OSWG
^Z XG
98eR&{
~RCL^Z
Cjf/
R`uhN
2',.
{Aba
|\0o7[{
Yc\j
e|B4]
cSs'
p=~k
l/g@W
E;n{
Tqif@
g:k?
o^;,
UQ}}
AV9	'
MAB^
-pktS^
t<z$N
NtUfJ
V?yZO
alWh(
!d~u
1.~P
A1wzy
O}yB
L0.8
Pj7]
u1Wz5v
J>}N
7M&1f,
UL~=
)&Lmz
=L)wG
ZGo]
11y9
b3DGI
L4	%
^'uRV
rN_#
,XCI
:rFn
wU|	
KT}	
MVnu
qC|u 
D!/d
o;}N
 XIp
!|9]d
|tvr~
ZDj[
 E^B
$r6],
b#|P,]^~
W)_>'
;`?.
tHxW
D'}8
8o(6z
2U_C
[ZGtc
D;ZF
S'wv
5w{c
[1bM
j	ig\
z:%a]T
!DQ{5
JiK]U 
Ce@2m
>Rw?
ns+61
BZw5]
:}0&
qsDb
aJS{
T94up
168f!
c"\G
,$n<
>KP}V
/y;|^@
k)$m[;
:w66
(N!F
rrFuk
}WgE
~sK1
Z%(x
g\9x
eM=v
WMdon
Pxav
GlGj
K=HH
uoFm
m@D'
7^=j
 x_W
$;{g
stO1T'
3 g3
0}'/
hIoE
K.&p
;<x@
(oyaN
	6uYs
dbpa
AtHy
Xt7W
H{D'Y}B
Cwn$
&.8b)
/rOV
J!3]
.~JF
Jt6?
$>Xg.
V "PE
\R&U
c"mx7z
iCt	p
wH kqU
RT}/?
t> 1
QyH"
ij'X
[0gho
r#pr
/s7K
g>8/;
![7Eg
|"q;73
@5bn
[8gGdu
1NLdy,X
+b$z
?!. 
\M~Y
cJFR
%VSq
_`!oLx
8[nCl
2"6Z
2n$6c
ep|k
wg?B_{
8FFn
7jAh
H@7g
%!iq
x`Y^
G5?.
Mlc<
XxuU;
?>t_
@,1p
`\!r
Sf#y
F:S:
-POs
F}X?
*<%d
Pj~|v
Y2Ip
'dXa$
g 9P
phD"3
VJ4x
9d'<
s1P9
BNi>
:Ob8
"lm..
pwH0_
{RtNsX
Fo>F`
5#f-
%b>r
Bx7$<
UbMo<
g_,K
392y
QU<Ax
kuP^
l6rr
l|$S
3bi4Z
}do:n}
%_`m
L8^yOZE
{sti
X-j(?
M@}L
I~;>
\':%
L0cw
'=zG
kJI'[
fQEf?
IEfQ
*'y:
;`vL
HCxS
p&*i
v<oO
9[K2$
n(<A
:#=:#;
tojH
k@wA
vG!_
J'4]
<Hbb
H|K!
fbL0z
9Zg_
B?NI
g3pH
$	l<
}~_}#"
FGIR
c~OP
x}A8Vn
^ClLxM
p67Ix
aH}1
5hyH
,Ns]e
u{3X
-3\x
U4j`
94aZfn
$1=D
:.|r
0KCy
9^?;
eG8w<
T~<"
:q R
3l~2
 (}Oi
o@o*
xHEQ
2vO$
TbBCg6;_kIyPY
l]!jo
~I/?
	1>v
iz$_
'$f;
pd|O
G~8rCy
!zN%
D|5yBi
LCd}
K \}
=w6"
Wpd.
(*Ja7s/(
E+%i
IF=}
<*_o
<rz+
/{	[5
sK6L
Tggo
 q~8~Ic
#RQ>
'V^"
%p_B
ar}}
|tTjI
b$=G
-wKP
KZQ-
>-hX
)~i"
GI>p
ADDq>
T$"v
`;{D
7m:m
v/Pg
\?Ul'
35"|
7ZTL
64ih"
$y?im
Pj`dY)]15
Ib;{
aGC=
7u<Y}
0^w;R
v]fhf
KUL^
Ay%q
97XN
zY8|
\6`vv
TJgYwN
gv\N
Oo,kKU6
uskl
'PL}
[KnM\
)k{@V
:[e*#
,'	i
(eC)
MZ	T
LA}m
1 kW
liZM
7\}m
k{Nl
'	_>\WE
C=4M
JIJo
mu?N
.Gst
U}}I
1!ks
!b6@'M
sg|G2S
2~X-^
a:d-
2^;,
A'Nn
"Ef?
n	5`i
UE%Mp|
%Dl*
('qWJ+
YByU
xU6K
n&nt&?
cka<r
*c=M
1`+D
\V~6
Ibnw|
cqE&h
bqfH
M!e58
TtuH
:C!a$
4 OlD
6THE:
/nuD
$[pH
/y_YWA
*{#8
/N''
W-N\
eY[!9i
V&VQ
s; Z
6rM>
%"6S\6
eYDQzF
.1Lk
*F|V
~y#Z4
EOYuQY
7zrZ
*loTE
CuOm
p_3q
l6vr
5o=l
o	H~
r[&Bh
!18u
	9AM
N{psmc'0
%SZO
z2P?
=zz/
{Yb*d7
Wu<<
^{p8xr.
[048t
@ce`
I:QKd
kIg2
J&mA=
he:=j
$KEg)7
T5a2
S&<j
[JG\U~
X=D|
|"[zt
OZ(_
tK91
=/*|
CdW+]
"% @
L*eS
z0a6fs(u*
cb#G
:^P'
MJ+\
1q^;
>=/3
7rt`
Ok^A
'U@~
Ez5~
*6	5
c,Dr
@`|@
[7't
TqX*
W#^e
C\c(
C(8|aL
6*YK
O9z,
$\NA!
yxv$-1K
? `O
xfth
J9 u
P3w1
TPd'
]r/mK
88k`
o($<
3	y D8
@7 _
SUN|Nv#
1%sZ
z]8\
}:<L
w;HW
s!gx
z	SK
-iC6
P2uy
lv8^x
qhn#
Jf&*
X8}&a
[CPR
0B~V0
tQ@Cl
>J|0"-e
k-*F
vx_rJ0
Yg$Z
Zv )
	i,^\$
5kh<+E~^u
YU3[
Sdjd
%"Lu
z.83y
OKYwF
<u^B
h`imkV
vm@G
r8}n
]?w3
yH2~
bEBZ
}-3>
S/SX|S0
y4^M
nK%V}
LRq"
[0I-
}r~-
:IYi
ah<	
,FD&
1l7lm
3h'H
apN+
U89R
x:6(V,:
15zY
Y;Rw
R>L| 6
+p_d
'}iO
pjb@
+}v1.
aH@\1a}=
h_RB	
Y#<@
c<Bsd`
x.8\1
|iu0
a$lt
F./&(|
47*yqXe
{bhG
G<<	
Sgo-
e-if
F^[g
s.x	r
>'	Ya
b95p
p)	p
JW.V
j@9^
j0Gl
x#`>
obt!
${n?9
~;^^
\)7f8
xL a
V3[J+
D Ow
^7b>
T!Rw
OOJry
+vD&
WS Z
5@PUerE
tOjdH:
r:i+
m8,Dx
Ygcd
h>5"{
"	/T7
??y:_I
Rj<{
45_6
.j0d
y!&T
0@/aLF
6t1m`
iqa2
yg<7
mm '
Jj`h]&
jtrn"
_vHuMe
Ngz'
@]{	
K[}g
.XlG
ZH:il
\wVA51
+feJ
0+s*
47	+
6K:+
v`i$
phA3#g
bu:B
7o.^
Cvcu
ox?>
o/@^L
IM^)
][jh
-S+;I
/U;%
Dl>7!
]bU7*+P
6Y.^]
xV"S
FqVy
Slrv
Sr<K
g 0W
^+mU
oO4L
Dt	8
 OC5
cdJy9
jU),
M3S+n
9D5^g
Y5Pm
G"p%
nBt{
U89X
>! ^
@QrR
>$Sy\&g
aIUR
rfBh1
W;Zg
q:VB
N3[Am
r7@9
?~}"
z/*8
.jXQ
BG*O
Q ^e
"hLK
{>=1\
FVcM	
5tj!
![j[
}>;vY)
 Dz<
mMO$
dPjP[j2
Y$kYjA
@5]6
lJa^
zE2S
FUbW4
	.mZG%
&Ay	{
:q|K
V\3hZ
a]Z|
N'Yt
$Wb{
IA7!BP h6A.U
z.b@D
\L]R	
fdBp
vKos
7<JB
m:"s0F0}OL2"V
porT
rzzT
3.\*
FPYyc
I5;I
TR^x=^E{[
["!f
jX;.
c]]u5ioi?z}g
_FT~HM
] vb7
\G&H
*5:.
J%o)
QUMNC
l[7(
&qd7
{wKq
42VO
[M~t
U/5p5Q4
(=mD
2CA<
|G @\
OLuelw
RG'R
,	gJ
r})K
kk%V
"K-r
9Z70
#XFB
We[?
>y> 
\sUpM
`A5m
#{7su
>p&d
MvbKn+
~ \1RLX0
 0p0[6
\<Wzv<HB
I+n%]
EuvJY
n:gKgW
I?Rz
6S/k
[u1Z
8Q>9
G}^]{
Qd~b
7tn:NW>
dqU;
SvaA
MzH"
uv 3w]
urr3
-I,#
#mG'
`mnr
psxc0*
u!'F
Z`.$2
~9?}
r&2W
\g+H
QF- 
8{_}
-2T-
aks?
=E&R~	
FD(D0
2vsS
?| ^^
}WU2
>L$x>
tUauUo
5\B<Fn
%+|E
'f;?
Aey=W
trPl
NPi.
\]=&
bc1s r
7}:n
b\a9U
/c$Yn
j;y[z
}J/E'
$dW-
@[h?id
 	l%
/bZC
TtmJ
.4~T
Pf'3bST
]',aMO
|\`T}
CEdaA
LuL/cn[
M`cf
.fl&
kEZai
yZ{gG
c~o9
R*G +
iB?^
z	^aW
#L[Q
 &"n
!PT~
wei$
&x(LA^
!L9 
jchk
ADT|
|(2o
CiJH
?}Yv
6^8w
643l
U@25d
9fZz
qj,8
CT@#
 @5S%
E^bn
LLymZfk
3vF#
Mwl`
!kpL
.t9P]@
@:`yt
gTorN
+OX~
	^.@k
0mFr
*h|"
1Bg{b
$WFF
E7l*
-A<4B
4p0/
/E~{
t/LJD
l/sv#
x#	=
$H}EI
ZyEI
3st#
[U}L
\t-6
`HYY
W'Y&
bBNw"
&)>^
ZjqoC
71@=
z|[F
$_&b
>.TG
:Z|V
<<Y}ko%.Fv
"{0|
zKiH
qRNG
Dm Y
b.rR
6Ii*
\d*#
2g|gDF
":&~
=G]\
\qCoX
}39M
qD:r
s9;w~
~s(L
O}*Sx
P:Z.V
UM	<
I7;E[.
\vh{)"
mSuB
#'qx
`M7{
V5[w
?#nr
nW03]
ld+p
\hqP
%^Si
xgma
GeO@4
B/zR
yDY8
>gocz
CT+**
JRm6
L(g6
f+(uk	7
8dS\=j
TT<:R
O1-bq
8-Wzvb
=)rM&
;\&#
H#7B8
H_Hh
u:iYMd
<ntU
+aN?
TP.fO
s+w~4
+ww}D
zyM]
<Nu=
(:+A
z70\
>5*bQ
{[g_K
$v5S5Xi
n^lxQL!
h]buD
RE[B
l@<:#
:(e'
@ ?8
Dl%1
JAr@
s6"u
gi7ab
(\qp
<! ^%
Pj/i
]mtv
2rp>
C8|HT
nH2J.
3ZX>
iZH>
tnpp;
9 u^6
|)	~A
+S4{j
du%b
nN;+
WT|C<R
`DL_
%U_S
%\ei9F~
-]0c
VN'c
x.LN
^_G;
66_*i
40J`
:'[D_$
AKFSi4
#M-)r
\fM?'D
}	))?!
)\s.
NW{t
\%9A"/
^$;rZ
 AVU
U9u,
k0sg
-g`r
fa?DK
H\+/
](~7
jz~F
Pn(>
Q 0B
7;UCB
s~;-
=sL^u
-VVj
r>$}A5By
Nxr0
z^dG
jJI~y
=y'm+#R:^
L"D#
]KXP>
KD$K
NW{"g
;j1~(N
CD~/
 g n
#4}F
xdk2
2;|_
nqPFx
:*;/
U}^Tw
cb7[F
Gd1:
e~[#
&L}/
KQ}A
gcU_
r;98
xryex
LMZ^
=nqn7
!UYa
4("?rQ!
6w:77
TqD}|jh
~R$8
A42_$
UQ)(
jfhW
oo${
YLeKR
2{Q-
Bve/
%9;n
'/@F
{ury
/:*}g
*1||F
>_UF
[_Zp
Q$[nb
#=C>
*z<;
3H'f&lV
9U/I|
8s0P
^uoA
0_=>
odTyY
G"-D
;a<s
W%3~(bO
>1<vT
zSB?
D~1|81?
^9Y~
*'cglH
D0L'
Q(Gq
rS#oM
vwy8
K'^TS
9O2x
M2zp@r
kf)Lt@
<g}-
K=zf
Pz1B~
F5\p
8np#_
-w%a
{8N0
!L:eV
L,^v
Gr;%>|O
08x%
!%|	
{:RN
;'v'
p]b1*
C%F~:
$rt&|
lZd6
ov&~ve*1
fLs;
U[t*
<;=q
Z"F]
fje(
W4~c
yI%5
]AFu
lFh:x
5DlC1 ]
SZ'O
!'<u.:
#'>B
FzZv
hP_U
{E;D
lhw0
Wu"o
HHGZ
\P 7
Q~A+
qd9z'
kcF	W9
ay;}
2PtKL
#lw@
=e/2
Toxo
:Qa~
O]P/D4
8E](;-/
wa{xy+
e:D9
'ApK
l:"4
I$o_
1ewb
2@\!jM
IX:3qJ
8'xP
hm%R
-^8Q
Vj[we
M=gN
./`&Y
.Q^Za
Ng{)
7q^8
uO"	
}[Vn
MiEw
~,k<X
^('C
$<9sA
:]Rz
82@o
,~Q 
bxPb
/I|p
k+|s
cmtUH!j
wb\)
={"S
exJ-
A>4J
)#xI
ZB9|
]w)'
~r'j
	^4A
Q>8}(T
zye5
V?p[
I;P'
LC]$})
E;R&
}PUWX
(U2.
xW;)
)t_et
;nN/
dAj:
a:i[#
i9/#
4Vz	
f1{jw
62#~
/f|T
SNv@
h?	$qC
::J9
u$@UB"#z-
dCD-
>*.]
9/;'
^zsTw
zo`)
P~ft
!1/!|}
//-nf
@~7Y
\	j3
:x_&
W(]>
{!q	uh
`S+.
DQ[.
@tq-
IX,I
	~ZX
):Z$57/
E 7S
{a{4
e6P/
)'@O
w@|\ 
S.>p
6s	|
LqE	
o%{vJ"Pz
_'|T0
iT'{
!3k}
Z!5Y9
yWx 
>")~xv
9@%}]
\Ja=q
vS{4+
4D(3^
.tw 6
M(pq'\lB
avVwI
T-1q
aN]xoR
8hCK
a)IO3
IO~$G
hksk
</jJ
)G7)
3	_b
nYp+n
-7JK
O%2?as
|JSwD
L:\I
JdYBj,;
w-tH>=@NpP
C?~D
fdi@f
]VL2
2c$"
1;&;x%3/
Tt4y
?"r ]
L%vV
[Q(:59wf
(csrY92
qT ^
.&7]
:;q+^
ISX;
[q.\=
qJW,
b 9B|
35n@
H|nb
=x@*(
s/\0]<
q9hN
Z_A"
!?^g&}
;7c9
8;hY
-peb
X^*B
c^J2<)
LExu
n,y	
+cJ>>w
u_b8
mQb<
qv^2
DJWc
_c"e
khz<\0
yM%?R
t,&f
zhJ+
34[^
IF&>I
:/:'
a4hr
+agL
pP4T
TqBx1
{wP<tP/
vuH/
S-.BZpt
keqr
H./h
=gio
&e#p
=l/3
}\{v
1[~I
Mq=@
 q%39
@I[]
:={T
VG&KL
aE=Vn
IKP)
B~n)
q=K\LxE
D\w-g
</"]|
"p>P
6EJri
[{n&Hx
{fO 
`44F
8>+/#S
t:JCA(
*2Lp
}=~sc
7[4~fg
x9my
3:h1J|
\Zr4
p{y,Z
-[{x
fj;#
<`10
6(YS6
1D&v
1Y*D(G
\gkb
<<u#
&{/,
>(-5R5~
~L#.
4v Ki
r8fRg
h)!_\s
uF@@
N.u<h
elxN
]3bb
3sls
Wco<
mExvV
bzNPM
^)'X
vQyAC
p|lw
CJbWn
/ElH0G
68{5
.nJh
	!(ZN
W@In
oT}!
9&AG
C8j|
}*<g
PjN3
wbza
8`}&
7xdl
[Yst
^x<m
UJPt
-iv+
	t6LF
`R(r
Y{k1
.IMZ{/
|u6@lm
pPcJ
v-"\
!+ ]*:BiA.
u6&)7
?U?X
<8{c
c!l"x<V
]-gp/M&"
:@!*
s;e<|
U+M:
7*n*
GoJK{
&Qum
+"NP
:I6Q
Z;O/
Z|@%r
l{T.
cX-v
3_'I&"j
Y^Hie
XMe,at
k`*T|
ZF<L[
=cFl
z?!\
M_(j`
p1cF
LIn1
j#fJ
7K2<
#V~h
Y#8;G
t6r*
nss}a
VjE5
bl+p)
^lrQ
r7W.
A?%_K
XXae7
& D1h
+2+8
/HFG
5uNd$
{KyPf
wODaW#P
<Ojq
UGdKm*_
\+:N(
pB|/
)/([
pnB%
wcEc
0"$KY
9+g?v
M	]6+c
<a^k
VcR$q
cq!p
JoJr
FINzg
:mrr|
Y~z1w
oSI| 
4wg)
v-de
6&j!!
t-	?2
JB_9/?j
h*Of
15icf
4Qvo
#5i[
Pegm?
n;J{'
B[skg
aS837uC
kH;bk
H5+D
P3/=
tB:kK
NBW-
 >Mt
$d|U
kx))/
gH*[
m`Nx3
EEa4y
i)<f
	[|#x
MZ[Q6
^:GZ
/"m 
qIVj
*7BD
8tS`
]z/S
sCBV,
,K`%
>P+}a
m0L>2
. !@
s<||
-MWy
S n7]>
\$E)N
npp?
e~{a
 GHS
b"C{
xQR#
7R_U<
`F6(j
&(Ahu
)V_k
4:Mm
i'["
B}]`
9).T
*p'W
-b7l
LfR?i
?N1$V
u~{Q
(!4G
Itc*Y
T~(b
l9]-QB
fL[M`4
I#->	
N:]Np+d
a.Vv
h+n2Cn
=@KW
RT&FL(
GVjH
U  X
3pp\
t|C&
D`U[IvL
\x:1
&zs*
}Dnl
{_qU
My_.q
)~Ph
1SVq
nSM(/
v4*	!1
#[4aB
+PEn
a}^tM_
B@Xz
sH/7
s;" 
<>aq
0pLC
\{<D7
6GSz02
}PxW
DPzzg
4T2v
}G	6
_aNC
N0^$y(2
[D_{
4m3V
$~2 
sheqk%
0HOP
]JP?
lLt}
c]S)mE
1W#Q_
c*O6S
')Zo
}b'>
;=7x
C$+6
5`zH"
PP6)
Jra@
O|Wz2
JMrk>/
VjOr
:\UB9
'\lb
5G4PC
%9Of|
qe^oC
n#At
;~:=
oJ?Hp
?DiJ
MOJNS8
9D@o_*=
aTEk
cy9}
4zUL
DbKNw
F1_E
oCWB$fb
j[tm
\VmP
#swz
6&xP
Fd9[.
VVB;
KlyX
b.P*
N*o3
=.	[t<
><_7*
y!"Zei,
iDpacz2
l~P\
aX7Lu
gG@|o2
hSOgS
b;\xRF
c5,G
 {lb	
0a:|
7]viz#
nm0@
]vpKv4
MC/1*{|
OC!;w-*B
~N$"
\mG?y
eBy]
d~FC<E
L-6o
CRc'^tR
kxxg
M".*
|<]B`
c3e)
aEeU
yt|0
[%`Os
r#;tY
tZ'|J}e
sA` 
`D")
@3FIs
^P<{
Oxu"
Es}U"
"Dz)
gWr'
~KXl
"J0a%
J~9M
j>v^
$9:0NB
fxg6
h{h	
|UAi
2hOD
K&q}((
BUYqR:
%|Q(
%69l
kW/ 
-.''!ym
8BzZ	
l+} 
W*;"
=wh%n
Qn\y
VsqIf
LKIW2
^.g_
wh *
xLq:
f['ZG
02#8
%`w{
*h|\
/O[_
]G7^V'
O+`xV2
r~k}
=q@q
<Q)x
A!!N
*)\G4J
/B2~j
:j{O
4rU|
k|m/G+
u7?G
!um/
+|;^B
pC|lC;:
C|~as
xAja
Zr@(Y:
A}y%
c6.`
6k55I
"Y~)
g a&
yc^eK
|n]?
D@\1b
Ff7C
rR)q0z
,?W2
fn%,j
o9EWS$&
$olO
fy ;
=u=`
|;-V
pn'JF
/k~I
p8t4
6<R=
JV^Jc
27Sx
V!zy
}.\7
(IE'
g8Mv
,oq8
|BHxx
1=H\
yLVN
[$Sjx
7NzZ
pf\"J
'ClA
#5'I^QR
,:a!
KI=m.
j_Xs
xNhPX
RJ|D
GM ~
?fd*
61:I
7"r5
"_G!
$4B.)
h36z&
I&O?h
s]*T
mewo
(be}
7;OG6
vnD/
_GO]y
QuW]
NtQo
5&8)
XIC?
@#BH
w[t"[y
72x	ex
S	XI*
j*4~
<]`o9
L_'V=d
42j[
z05_
[o<(N
0gH+
WYB7
asB~3
MT%O*
~84_
26lqE
qvhg
H>H'
H8HVg]
"S;4
tvkOm
`YbM
5kvi
9UR#
,|PC%
rz0A
iLnN
(H]/
&BRj
f<[:
}zcy
n37q
/#pa1
),$@
#hik9
<7e?F$ob
X(v,y
^-[P
(h>E
s{H=
$<As7
);'?
 \N"
9J}9
_2Jg
>WG$v
3WLz
f.H$<
q]Sp
SA	~
egCI
upY+
~m,I
Z&U0
4zZX
oHrt
650R
=O+3
D*|	
9`Nr
L<I<`
:Ixr
{MR1
.d%Lp#
=*sx
<9	,
Y d=f
kIwD
TFvp
gk$|
b$Z[E
sule"
.i?H
Kp';M
kWh3
w<,f
2he!
sS"[
19h(	Gb_
}`?n
E*"0
?Dl!
& XU
/c.5
+ Q(|j
6]Bk:
:m [
w_M{P
Obf7
Ab@D
:,L(
$+*O
TiQd
.b!]
{Rk.w
GS1r
TfPF
]0ZR
1zZmh
-uo?
io87
&Vr}
Q9oGN
^:Xm
edW]
)>ld
FSMl
ijF#
49|'/]v
}"C_
yu]1
g>).c
uOV9
,2sv
-eoS
L>~d:
~"5Y
Z{$n
Pj%|
9y|(
wC<D
vsK3
+\\T
/ 	>
S$u;
":|lG
J1HaF
B2\x
9hS4m
5>Ya
OD$k
HMMf
sC3 
$`B+t
.WB="
"]~D
u@N9
ZT!u"	
PPP]
Gagl9H
H6_F
DIGCjKJ
J*}T
Id~tYZ,
%)abW
W>VW&
|RY~
*FqX
mG+M
{B0.
{gu1
.r"P
>@o|
z	w&
G([Px
w?Ai
L8^@
g|N	
"rzQ
+N(+
)sZ+
`(#:l
Z6|x'
aXhv
Kr@v
Ny%?
MWbg
Q<&ig
,-jS
+}X^
fvj?<]e6
}k'X
"B7:
!"05
	<C|
z(k6
!Hz/
H^+,
{*.ZE
q|vO
oh?p
>]~[
@T+5
(p-<Q
"h=I
m4	|
^m [YJ
u$%#z
!b2*
6s\BS
5mgvGz
4#an
dr?f
-},|6
){PA
-&@7I
t7=I
lj~H!
D@AkW
vL/|4
xLju
'CW%
;hHu
C8.e
@2i)\
{^%/*I
- TW_A
k%Ix
rs~u
BXn<Ly
5_vj
1VGc
f9mY
Qc6w*n$
btpOA
bzNI_
W{}@
@`wG
$Bw<
TA)nb-
=_;r
5qo*
G&xQ^5
Ut,:
}2;Au
~-KsZ
:	6|
k;?B
p*ho{
5s6i:lz
W:dc
:\Sy
>NJo\
P!d\
#E%AZ
23bIh
}XqyO
Edb[y
=wpn
(&N0
G,s>
E>mGC
Cdj>
=|4G
<%*Hg
K:7.
d`7.]u
y.i'
1kl]>
ZL@$
&svPb
'#rn
I#2)
LE8H
\Hv9/
RWVxT(
" {9
)RVcc&
sx7	
byM_
QA2Z
hWjc
	*^H
H_T6
>uy@
4/n\
txB`
M}n}w$
u D{
szB-e
C|yf.Zv4
NZ%	n
X]t;
K/%;
^{QC
p.li
s!}A.V
?=]p
/RrDy
Mp>|E
O,gfW
Hi^I
~Fu.
BY#	
	mr~
t!}:{
NzM%>xy$>
u9Mn,[BCJ
Mt6_D
k*t*
8_2s
}Tm+D
BV%=
<Lzx
zw1x
p<9`
g:u<T
3RaY
]{Nr
P~AN@
^G4Luv
o5Q|
4gzxO
IGEVe^S
,Lw7
|!wM
Ycns
9G<u
i**F
?bFS
uo{\
a!kH
,HhW
ypX|6
c:HY"
#PTa
OIP>
d<whg
-R'F
'BW^Ft
jM;p
}R^Q
u<8q^
$@<<
O0|$
T2yd
jA2c
Hr1<
gd^K
I,&a
L;_2
'J[r
d69tc
qkL;
&}k+
j7[:/(~
sbM`
3c:A
dZYJt
G@O$
s	kOm
8X_"
-fXm
`~T1_
< +<
i(:Y
g_J"
tZXle
bb}D
9{zJ0
,Re_
:~a?K
:c}B
^l{Ejr,
&EiB
R8#!jp	
?Uvy?
g/![D/
5zTanQC
^Qd~
JJUJ
{"n*
u.XY
~t6#
/Q@|
RB:0
n8W&
MZ)o
W1?:
,<zI
L:=z
XH<ApN
gv;.
T\ Y
EkHj
dhTo
qw})
|Ik;
0!><
+bG1
*z^Z
-C> 
EC3|
G\2S
@Z)5v
c!)b
"=|o
{E,>66
J/p$
9.yK
H(6nx9]>}
(.I2
xM$<
*B}Q
MO[v
wN!P-^
}	S>
1d}1(
^4::
GbO8
klP(|Y#>
=%>V
kYF{
}	1>
;R#*
+C4z^bV
gW9o
	9eI
N{1D
9JZ~
#25~
)4\w=3
mi+I
;~^F'
)C~o
y:X+
p$T[6
	DE.
]l/J
wt_4C
<`76
&Yi^e
O('uF
k^Tq
	k-2
wXL	
*z3-?
NJpZ<"
h? /
=^$6#
A z1R
{N^,2
L<q/
zgUz|
#|) 5J
28Uy
=G;.aS
2x	Y?L
e _d
3R*/"2
diF`0
>W-h
:?1m
!w{l
wH]l
%}lK>GNVk
8%<;*
:]LE^
Rp9N]
w1Y[
uD)bc
m# 1
	S;/
h |	%>
#,kB
{^W!
\u0&?cBhu
3\T~
](=1
w&kw
jz/Z[
%{N!
~7'6
gg`3
O'fU
fzj!
]& 3
(1o$
WT?%p
JX^sw
7)-?
c<n 
Z%tg
k$&_
]:&x/.
btia
OO y
/%[*
lN	f 
#u,.
/7`y
+N~W
cj" 
98s(GDn
_%)?
3D]%z
ne#'5
	wNAF
[*~gA
_AM2~
40Ua^:
>x6.(*
k(!!
?BGA
G>`U~
Z".O
=a;^
<tm/
I9[.G
cl]8
&X%\
wge =
<	Gu
	>sJ
\I/t
LOyd+
8!QK
>NjR@
(p#+
goY5
-:-Z
|mj^
}DF"
ZBZ_
;%Zj
p3Z5
(+N29
HelL
/<pW
qp$=v
)OBh`
(]~_
N!WO
GMd<
%="&
P@` 8X]
f5y7
.9'O
CWu)|
bpze
XTA%W
>@a]
g;hR<	
9}/Q
;uv9'cx
'@<d
sV'W
od1s
q8'P
{7I>@u
]bZ)
2NbP
>)F)n/
N:<i~
bvqE
xT+b2
Bfvj.
d_3E
nL?V
:dNx
-l}ZG
4~X4
7SM~
if<y
Vn9`
>uMP`e
=*6J
ey,$
"~,K<
9p-_
2>uQ
RQE_DT
oOg}
@)#T
<xEdY}
KUm7
dYv]
ck7lg
#ca7^B
Ii{i
?[@|B
9?>wA
:Ql6-
<*kJIEkS8
"s@uZ
Z&n9!
#N	y
u$l'
lYD8
=znd!	F
6'ME
)1ohsF
)(/#_
s1#Fq
O^*8K
PX/3|_E
aM{J
"<s)o
R/XG
xMQ^q
$[^>
uD[\
]dD&	5
o>@eeF
l1aE
t'ljb
zyTu
]p:l
CiZg-s
V%tpL
82\@N
pHi>^
:U;(
eQs8
S47"
3/|i
<vNP
4CG`
R2Zc
\PL!
@H7<
;PtO
mxv[
T#E[
^XC/
(/(A
/"^Nh
,kMI
YBR[\
O,;g
/]K^:l
Ug-(
;R.F
mXb>L
v@>7K
>Bc&
+rt'
7K(=
D;|vr
lp5h
G{-/
;x-S
J#8q
"!\L
07CY
clKDWV
S}z',
.gbKa
zU:"
~xBt
*&[7
:prM
2}N,<k
IT/c
zHVN
]QjC
wos?
A%M!<'
k$7jFGC:
sHh%
WKYs
DDvyFx&
F3n9
]~N-
c{8w
=/:,
*cV)lv
tPdcP
[[u3%#x
Pc@j
.tsJ
!#mU
.X$y
>%u8C1
qLf{
9Cb9#
pvS{
cE!{n
ZJ%y
?!;_
X[1md
i:>>
+]86SL
e{h/
d4=Mj<
Dnp@9T
k;`-
wODx5
<>=_
Z!~`p
&$HO7,
	P/]A
!Agt5{"}
f`Xk
cFxf
E'<{
Es2kK
n_%A~_
T?92]
{[o>
;;EEp
XyRn'
(. _h
5Rs6
ddlm
[ou}
 BAkh
S[z!"
E>z4(
7A:>J
*]M*
F|um
 'X/
 lq1
EoTfzFS
a	X2F
wKA?{
Cs l?pl
gSHWm
	M.V
@zq:
(cFUK
r;g#
\| }lbqY
BBQ<m
th8v
lVH'
\+PvT
fb9E+
SVGC
o'yn
>-1@
Wo~|
Z7R(~
.	AiG
9nnf
`uDU
5W	m
`$J=
<G>+
?KCy
T\>Aq
jR90a
o=z^
	rpN
*<,.
T=,K
){H[
A13}
&T{w
_??]p
zb|1
`x"|;g|
R!aw
5zPY
o=>_
k#."
]:,l
qvu8J
5Hh28
A;^.
f,{P
}.QR%
FCCu
.Qhm
uvwDB
Sf|S
Jt*q
7Oi,`
:!q*
{#7N
MY$q
%ozB
qR[S
v%BWk
$:sn
[%q}
n#jv
'b(]
8bYB
8vi?
kleG
H']{,
J}MD
.r=u
X'E9i
T[^Bz
7cF~"Q
=%'w0
vddX
sPU.
7fn&
NLW	I
>WSh7
hGWkm
RZUJ
Ly]4t
T,lb
p@Ml
'&3R`v
AKEzE
*X7^
	=)k
 ^%21f4
Tor*
lC>x
^'N(
C7nG
	x39
+$w_
v,{P
^rv4=B
]l80C
7KNZ
nJ9n
O'6)
LY41f?
J7H+
 f]jj
(4`+
 /{i
U>L5
g*Pz
yK-Q
r.nt
5~}l
!#O:
`,;i02
_? -
]5Y\
w}eE
OvAG5
5k92
G$32
s Ln[
H<Cp
c#>*;
FxE1
~%x]Q
xO U
@EyP
uI4=j_;@c0
C8w&
K^8)
WFgz
2&![
0XebU
R]S_
77'52
7]{v
dXGO
P_48
G6Hvf
}0UC
Uq*E
nNG7)
bbbN
Zo:.8^
%-(;<
c#PG
 G{CN
MP0L
SJD=
f	dK
-.Zf
MCS8
6p(x
gk"J
n$Axk
m.?J
&mdV
5yFa
%~0KxJ^
^[6VP
{}z@
i9qF'
!g+U
v+}S
ZtIk
i~*-
	*o4
:LHH\
s#xx|w
(ne$yS
N,EV
TLUV{
bH%q
JC.%)[
;^tC
imBy
2AwX
%5Kq
_(ik5
xt)x
Z7Jx
S3;J
=or}_
7cb~Ug
e}z;
4CCB
@yKs)
WvO0
mewr
4.W_e
\9z8
1Yr!
/.49
gafa
kDcL#j
F(z QGo
;vuK
|z	!y`m
qq5n
G%Qn.G
Y$>H
:4Eg
ND7rSa!
U6,O
r9GN
mLArg
397z
y>}X
E\/P
Z1cW
]{A"
o!R}
"/ ^
>^'dP
5.4	A
	\Z{
9a1a
f311s
SKDgD
_~} 
CX]{P
3Lrg
?;g1!
X'7R
sm+ng"
[qo7
q<v&
'o!Fz
;R3a
N~-I
FP(Q	
\kHg
0inB
}a,j
VVw?
l[,n
n!By
;C-y
8	5RH
\,,>
@qe8
Oc$tVm 
n7}9P
?Tfz
r9Z	
U+TK
@[tn!
KPxf
kd[.Z!:
J_8}
lfoV
ZddeJ)
2UL't
C=~|
^`V?
Z(n_
oxr3]
^yNXn+
cg'Gl=,
iod%?g
%4Rp.F<
oSx9
ngL[
>kb$
DQ_E
8\{x
DI}B
.OH9K
H<t'
S|gX/
/GS:q
=6,,c
.M#b7I
eD2+65s
e=p^
2hSM
|-!9
U9%)e)
s%Y.z
 Oos
DIlc
W?=_
o]]87/
gpv	
dtdN
cq3%w
#~!]
#,?$
LS'k
~$RB
,_qn
c_"w	~
-$\um
+}rE[U!
S0Un
>)od
mF;q7
=g+`
mk8e
s5TS7Z
Mv4.i
'dX}
Lxwld]
E71r
1DWcf
ah>z7
| ^gp
}0Tg
p||D
}I97
[|u(aM_
=DSW
}DF$,
>d)g+
Je.xH
h>(H
	8N#
(pye
O(V5h
QT~	
uZx"
T4<j.7M\
V#YE
g%6[
G`iE
q)gc
]0so2
{'9l
;P/:
;%EI
FbG%
^CwP
Ea{_
^T,!YE
\?eY
dF'>
9XXU
tb6H]
;ebK
	Fnu
stKwD
aT`^
{o7j
C@,/
Z'C]
r(fu
a?,i_#
hymH
G71t]P
L J8H
=zMu
f#7	`
9m{9
<w`g7
/$$#
-]w*
:yUK
"9G)Z
 bUqi
}il{q
P*~-
'O~m
r)l]B
9cCtN
3=Hb
9|i"
zR4'
mcg<
MO"qd
	-HMr
2s(u
F<wy
TD_{
5FWP
 7>"
|(R>
n%rA
yN6I`_
cOEr
WO1Pb
nScQ
 6D<d
;oVh
W#R+
6{LE
\N"/
oTVX
2d@w
:S[^
|D)5_
Aey-
j(	Sm
cnW|
:d|q
o>$h
l`VP
!D}S%K_~
#>GI
N:pw
7J_!
i*NE
% \)
0/#b
e@pD
s`!x
n{C@
u^Ew
z|FCo 
,X#8
h0da
'KX}l
PJU{_Vc
xu\0
	[tW
W32> 
q=^G
?c"x
8.F0
Oy1}
#D0{
~)^v
OJ)s
KMg:
pqTGP_A
3#U's^&"V
+;	}H
.cmn
8gb)
U/Yh
q!X[
{|NF
'"YB
TDnD
* >Nw<
/QLY
,w{U
{^'S
<FyA/@D
MgZ.
m O_,p
1GcG
12&(
H'BR
kP4+T
M$KJ
_^r^
8 T*
=;dm6
FPK 
Y|lt
5^r%
tkGW
[|\e
4O"*
Pa*z
i^l>
GCpt
S3E4
eP9F
T'wM
{fczxFp
l?C~7.
Q`5Q
sKkf
q>-2eh
Gl.	
Veto
$TpT
*w^*
Gio+
ssS_IK
F2S|j
(b~u
j~lW
w2V	
	4`)
 M	x
kds}n
@BKy
<H/)
8blC
>yP^L
ncO8
<=@=
>>@e
{i7*
f`G|
nY,5
\)N79uh-
NU4v
Xl_e7
'&x/
yXN$
`v8r
	]R6&
Pvs-
F^Dt
JoBVip7h%
Qt6j
{ yN
G_gG
+vtzR
k@%>18
=KaC
18q!
E"_-&
R(tn
v7_q
LX@>
L!"{
UZTF
	@0<
,o0Q.w
jmg^|I
O)na
r2BO
5~el
1x%B
kgf^
[(?:er
"A~3
+K%6
HuH9
MmYW
zQL~
 WED
>t4cX2YA
[%a8d
*S=I/
ZM~+
v_NC
 Z#@
|l0\s{
MLs%/
=jl+
yIpn
>g);
d]:'
Y%hem
Pe&1d
ppgl
(J0!
Ocro
}{rC
vR_bc
J]hd[
oZ2}m
;bj!
fk^I
<AE.
dPzH
[4q`
9H%-
y#Co
Bru]
-A<}G
fpfk
.JNk
JyE8
Xxk 
}f|	
}Y=>/r
$+_g
O{N}J
gJp$"
|"g_
O2^D
Dyhb
)D?N
uM@F
d O7
#Kv1
"FPC
r&H\
Pyqp
3xor
h?N>mR
I|oI
;Xt$
+e6/
Rh,]F
H>[w
v;9oS
#!<q
]u&#
AK**
;y^D6
ehr0S\f
N,<F}U
w/JG9
MJ'0,
7XD~8
X]L:]
x`FXpg
"h]:
GfCu
aoT}
=gk(
u@80
6S"]
R|V@:
#AWz
j")?
.3o:[
YXy5
'q i<
mYFO
dVrhRv
yy00
f5^&~
e~1*T"
my<8
7c/R
QR;{
h;MP
Nt:L
.9Ee
!:$r
9%}^T
pRaz
P3<r\
ah2F
cT{sT
Dg|T4
"1y-%
0.	*
G$gz
59.=R
!Hs8
MS+@
cbH8E5-]
{p&Z
} V~
K>4po
\oz1(
.(5$\
n\!9
(L8>
p65<
wfs~|
.Z}!O
&t"C
f*7	
MD@?
O`M$
sDb0
HztHk
<0urTo#h
yY=~
.n3{;O
-~L}
|~,#
^2z	2
0>q+
{V_L
!wI[
/[q7
)Fax
 ENIr
XE>9
!	R;g
xVNRz
bWXq
nl>^
4'sI
ULRh
sF_bT
dxws
sw7o%
Q*YN
uck5
}0V%O
cg_%
y8C8
u3>ZI
qlI;^
RZ~1
TKWr
C~u(
lUx("
W`U|
rKTe|)
wPQ}Xc
u0@1
@$_J4x<+2
pplm/;8{R
(vd"h
=yrR
ac8}3
zmRa	
X;`D-Y
b^h>
OoJz
)Rm|
gt*/
1q/*
y\bWb
dfaW_
Rz,A
~x6X
G'	El
*tfk
	<68s
f-a]C
Sz[_$
l8_B
lN{x
;;)?
\3|Z
%R>;
A+w^
Dln+
MrJk
+Xkh
],%y)
xe&JEw5nB-
s '/
/y(}
0CnT#
W`T}Z
a(Xp%
_s.n
\I+I
Id2<
P6^^
) ?7
&~M=2
5Rr.
FU&<
{}Pu
!?3t
W0"v
}@kG
nA]_
O[Bm
gOuO;
:{{<G
u^sP
r8_QV
\:44/
/! }s
_1:^?
8nPm
9KIP
-v'Q
gJPM
{A8?[
4jO4
gU.\
	]v6
w&do
=H|hy
OWJ|\
/jb|
~6%D
Mf<-
0Mo#
IF^6B
KAB>5
(_Q!
lu\x
~Q,X
Fr|Be(
|];IN
@.[5
}jIi
vyj"S^
gmr_
d'_	
W)>R'
)OM 
eaDlev
K@Zr
<^.q
Eih}t eh
3:,g].
4/'qx
r5Ga
pLHn
Mz>L
wx	x
XAFU
 OF6
#cF>
mA[V
> Uhw
R[34
4r_ru
@>Yb
2[S(
E~J5
?F6a'
~Vo'j,
5x]Q
M>zq
`xnkd
mB+T
aVcr
3A2=
(_3d	X
== g7
t[mM
ckVr
9)>,
C'P}
Qk%>]}^
J]CCY
{z^G
I9xM_!
HaT,r
M^v}
n&	H
/2F~
PVH2{
#`$<l
kV2Eh
qnL}
b?X=
o?I{r#
r,`.9
WL}%
!MFo
%-~($
q_bH
:<q,
95Q/*
UR+;
oy0=1
DMy4
p, a_a
+=k<
}z5m2%##
s,r 
 y*,
H(&P3p&
"5yn
b,#xPC
RkGoD
4Y/7?
:=$Qw
uL1S>R
q?W8}
]!?F	
/AW[
qdwD
IT (
N";x[
#fzb9
Xd6X
./#h
z*ho
u7#U
^@ur
*`_D0<
S+`gPO
!S&'
fJqL
A~y!
mTguz
raMZ=
4%{D
D!OW{
]A52
S*%Qv
SM?M 
|X^f
\|%>
'[,4
<AsI 
cNn0Z
Sgi}U
*LD8
%.{C(
$~!fzJ
=$'.
W6`}.
xxiG
|]!>(
>*>i
s"Zy
cR9X
(*ZB
O.m%L
O96Y
[nAG
Ye3L
\r8y
F]t	
UyNFQ
"[o_
+z+yY
],-@~
cJkq
YQCW
'B"	
9m0p
#II&
#g`=
dkiu
uB<hg
"T6j
h=y8
dVf[
x[2Gq3
7:Gb
 *_T
W@2r
bq"$#VU
}QT~$_
d/5J
A"+-
pp Ef
tZ9y
#|/$
b/RJ
WB~x
JZY;
;Hj(
x	~4
#`C6
`iI2%
}Bj/5
d("w
=Ig.
k]}X
(a"Z
2PSj
Qt5/J
lf1/
4g}7z
\.VS
~C}V
3;6M{
|	`xj
m];e
x@8-
:~VS
>U3F5
/:}":
DJTu
FR5r
//r}
OdVs
'ew,
.h2b
PQj/
~1MY
}_4q
A`t'[)
O]i>zWkx
_z1!
_:yG
xe;$P^
b '~k
e">j
Y|WJ:
}Y3~
L1]v
\H$}9
/g|N
}g~J4
}"B&p
5Luv
C@Zb(
/lH.
L-C^j{
jg<<hh
U-IB
`g@/
;b ;$
bK.'G
$,EuL
P|}'
(kRZ>I
iG2q
S@<$
-xhF4
gwb3I
!qOi
zn#9
@-C`
DF`7F
Ms6H
yWH>
bR+!
cP&'
7jzF|
SX<6
B	-_N
DGW@
v$[M
2lL]^%
nEVt
Qfor~
m]>G
2aN{+=N
cGN;
3:N/9
hoP.
sm(,
XrtE
c/F2g|c
,|B<
{A.lk
wAlz
nvO_
^dNu
OS`#
>NsV
b:I~
(EB;
Q*<5q
Hj?T
k0jA
j/_B
Gr65
gn<g/]
4yNH
g8vD
OP^s
<Nbt
\B!C
>Yf2
bGI	h
!$<L
vq)O
=\-T
/:|"
wu0,&{
Du9@
!yj1
U3 =R
H;G!8~O
M"(S
Xy#/
j?(<
,uGc
}S[E
P$5Uh
\_DK
eS6'aK2
1AYVz
u73|
9(?da
DrT-PE
K;s_!G
9y(a
p.FOk
jp&^
KMYgH_$
bSEr9
#%}esn
k~SO
}4c^DO
-OaY
hN#+
sf#(m
0Y!?7c
hOtPc
)dGL
y4O3]q
}UOn
\=fg+
T%]"
kIn 
GA"@
_daO
suuP
aNk{
]Z<s
E`Og>Sg
jbHAF
9z_tN
LjmK
Cwz8_
9(&<
2'dn
1IJR
9 3&
gFGA
Aw^b
Ofq,
]hczF<$	
#S\h}
C=pR
	`6}
.W"`
Drn2
	<7E
/3i$
x{_Ht
2fEz
Q0Fe.
xs#n
/)>@J
3G[.
 fR~N'
5.Zn
58F/
h!N7-
02yD
Xz6o
P\YgT
;NNs
*/xDc
&j]i
Mc[l
`Jx`
$>\zW
9|Qn
"	jV
_"49w
GSUB
s_VM
9+fxx
8vSO
gV3_N
.g`*
k*_2
^Qd:{.e
"	@~
KdF_H
Kl_^
d4M;/
mkIh
n+P{
97qf
$>2AO9
[/:}
#8]k^
	>WX9
Y>+4
4;tk
p(moH
u@N~
#1GHO" 
v:)Jc
#+p 
dJBw
{d{]_2
oSdB
3m!S
Sa}@[
sbCOr
+JHj_
	]ca
2fQy
@_BP
K;4{
k$99
uMLLY
g%^dr
c*%f
nxb##
P0Dh
w=qr_RS
y\;y3w
}>(9
\#IQuk{
o^&jIl
!%81
F8SC
\Q9^
HX?]
YNc6
.Kv-9
9=%C
nF_ZY
%\%G
a\8<cV2;
^>td
tH[V/
$U'wo
a%YOb
>vbn
[a`#
+4P}
h(1BO
JWq[
xn%"
0rTY
6yLvz
]e*gP
[;Vm
W.=4
?> {\L
N'{e
#("S
 /Of
(M-&
wk)+
72./2
Nh+g
L>Sg
vQ"u,
l+7[
"?u6
 )k^q
M"Dk
9(t,
ml_<*
=Cx|
JWGm
a9Q'N
^k1PZz
L=sJh
~w>1
8t8U
m[kw
c:;o$
/9(Z
uFV)
'*8M
!^yp3
bg\ 
iav)
O9Tg
t^|W
t8Hn
>R9R
Q)|9T
VDnZ
df7O4
J>6f
mr/R'
`Lx6
]7J(
iJmc
-r[&
X	Ge
r1:ml{
m ?u
vS,6
:{m.
!|Jn$
\'qi
*1?%
v#(w
r^^[
4)^0&9{
y-Y;O
:9u`
%|rA-
W{o(N
UM;#<Bq
8wx>
M@LO
0Nd[Q
2!1n
sV2R
^b^jE,
&^z,
V	r^
Tx^P
W"R9$
#@s;?
e^B.*/c
9n$I
ct#(
/=`S8
,MHt9
P$_&
|neh={B_4
V!rM
bOut
'?[]
3xDwdW
zh1D
ttYxp
7"/c
FUA~R
{LPyq
cQ7jh>
qZm]
RsEq
|aM#
_7"$=
5t$j'
wa*u
6`LJi,+
4`mZ
Zo*_
W<YX
*/,f\[6
LQ`HI7A
EBvn
H!kM
5Z9	
W2O^
.>V}
EQ7B
/aI*
<M$y
I9M!
S3kh
2Zyb
rb%g
$@3ss
l e~}
a?(D
$LB`
}MT]
DR9s
t{o3
y2vm
 |4E
nS-l
G#WNXqw$
@nf5
%	uR
g';_
Djv]
1U,IH
&o\s$
Ikojc>{
`4zo
ndl~
1QMb
CeoG
'@)^VR
5Pg.
6U8pY
j.1;
gj;=
8tNwrx =
)7k]
SeD{
D07yU
N({:
uMHq
*CVG
f=yn
f8r7S8u^
[qH*
d7=$
n7Q9w
i.&`
~H_s
bz{	4
BDr~
wFEd
{?.i
=rFY$
r5aq
}/r}
MZ))
zP1?s
)J|K
$:zv
akZv
}g D
P`$|
>26X
0V!{
{D.S
 1A;
&wTx"
h01H(
8;	v
^zd`
M[7(
PXg[
]!W&
r[p*
.CcB>
mIf`
#!"o;
_zN$
AvbV
AEI{
4zoe
H)+!J 
{v]d
%(Vs
&UC*
?MKt
g_gl:
T*]U
cl@9
Onu]{
3?}@
I[!]
u_,(
+mvO
*k+E
+,lC~C
/D!=
w9qi
tTzqB
!V>u
ZMg5
0>6^
HE]5:z7<FN
=#ER4QWF#i
?'$)
fav{8(
4[MjX
YgGt5
(w'#
E3ib
}sXS
^9_a8G
rm1d\
du/B
fCHN
{,#(
DFBw
%mv]$y(
]Ubi
n|82
Bn<([
gGtS
j'~9hs
id_R1
`-a1
kGjF
kWLN
9*L$Zg
d%{{
z_NI
/|mP
{|om
%p[|
r>g!
Mlul
BEXd
bh'<
^87n
$0PR
QHL9g
9m:T
Rex6^>
_JS]|
ec@&
#3">
T^=;\ !m
6$9)
%m>wa
I<~t
qW>]Z
-,!u
3;rC1u
7CvpL6
@==pGT
OcE_8cz
hvyvV
_]x\
=C0o
AFy[
'\SJLq
{^BV
jmlV=V
uoty
]gHQ
:Vnfk
4zk!
| eM
H`FDW
A7ke
O })V
5vWr
/L B
{w]u
a)yf
Z4\{
Bchy
>{T$
CV.C
.)qU
0wEp
t'W#
ST]lV*
sx%?
>|z!!\
bbfx*)4
W_:y
,da@
l#hV|
6pBoto
nkSz
p@	m:
qS+]
z\zh
OO\ex(<
pwA8
5IuA17
A&xUs
2i]VIj
8R9e
i3D#9
lLo!
GX_a
=c@g
;tNh
I)u)
4l9:
6@l709
m5P0
d?Z3
6_=f
}DvV
pF)L
MsBC
GN^l
*Zkl
G=S~
,QAE~'
r;AE]
h~_^
zT5<
*C!W
`T/2
bj_R
FrCr
6.e%
S{1H(
#gjp
J|Ka
:,Wz
+'0D
}WPw
OzdN
,&!I
w^:1h
dg/w
sbn)z
E384
P ew
SWEy
AR.h
&tHA
}1!~l
W	^4
53N3o
 zRH$
.ex0
z@$]
L5,G-
)>Pv
2]V=
.uR=
vk37Ri'9/5
S`rw
YZ0}
4E"U
;7]{
;<K+`
'i:k\
@<^c
$spn
0i#$
kFG<g}
.TQ0
E`wN
1>db/
~Lz/
uS^y
OB>r`Al
PT%X
s)^!
0<p`
So`r
]F!RU
*0=y
{/P^
fP{3N
ufss
)f90
<AhJ
=4(G
=/+9
CJzh
@3|T
;72z4
6rsD
@->$
s*3r
bIH?
T>(Ee
3b	C.t
ns]&oU
YXN+
4=L@
j?Tq
3Q35
	PyY^B
6tWr
Ij#<
aS{*R
N&lB8
?#3u
8+cT
	T_uA
vK67
v[Ql
UZ2nb
0E[Lx
C(8/
>sS9
!t\{
g&9/
Ds<|
Zn|d
Ra3n<
-B!5
cM'O%p
T}-X
y-w6wD;
:5uD
#y@>
J[""g
E'rNL
%hO4
p-)[
-xhP&@
*yQI
Y^Se
W@iN
8'l}p
	|JJ
H`Lvq
scSbJL
~TEC
24iRu
U/&*
cu3|
1xI]
GD7zl.
	B>T/
J8@8u
w75<
Nw~Q
{jdV
u=|A
WYa_5
0tf#o
uJ}]
-j42!\*
}S!N 
: u8
 O\?
D"< 
|1!~
6bR<A
ZP @{
/1Cc
V8tn)U
PKrE
snJ>
tj<q
._6T
G?!5
X|G_G
9+#s
B6_OO
]?~4
e>`f
Cf>H
?b,e
b?s'
	N_AlQ)2
S_3/
sOuR
(,B5
sw9vU
~1/@
K.W\u
vIBO
PGG/
!z`:
pr=}
;/RX
*<`ro57J'
UYyU
h$ P
?AW9
*zJl
1i5X
.M=5i
G[gn
p:P{
/c:}
J>^H
C'ic
dIroA
B<p5&
+H'K
>g}g
d2?qnh
0CK&
R~ L
%\@f
=q$(
v.|o
y}jK[
;1P~
EA?B
,A4j
	87$
9,%<*
$4>,
 'NQj
~I(>N
y0 k8
:&vK7
3]"p
Dq\^
owDs]
k,Y`^B
rv	%$I
q<.hG
q'D3
$-c@
1OD>F
	'GTa
<F'lV
xQS%~
*<@8
q9[/
IF4(8
<|A:Fn
MUd%
4~H"
RJ~d
!mA9a
$w[s$
Nv'.
#4y.
S6FKv_
;#+g
DuNV
F+A0
m$74J@
K/2+
uwXv.
oy`a
	Cz1R
n,c>W
GeRF
3\IB
A3fx
}9f~VD.
9A1A
IA9%i@
s^Lt
o	_Y0
7E?*LY
xFgK
yN6|
!o(<
[M5v
a*W&l
6b<[xH%
mz-8
C1FV
(gSt
KEq/
R8	W}
nLH75f
=YsHOK
f-Gj
*d_PJ
|V!x
SsJOB
W`are
GXL(
"0Fc
_qWa|<
{sjJ.
qZc/
@T(q
_O>q
lUpU"
M]ZV
`xoc
z^e6
9tPvSU
Y%\G3
,ytz
N.^T
8>Vd'
Lz9L>\G
;%/f
3)	"gp
	`Ix@l
GI}&
X##d
zfMY
Bzp@vG5
P|X4
{k <)
(|t9U
B>f"
,uotn
ni%D
SWJmY*
`.&{
7i -
i}C`m
$YlER3
q5uQ$
q&U{
5D>>
V{JM
4u_B
,e94
o&\6
9Bi=
977;
7dz0
	6Mx
@?VHwb+;
x_$6
hIyV
mX]vy5
u~QU
B>%(
a0<E
IE@@<
QKC`B
3(6~
sf$U
{}/p
D5%n
i@ui}`
l c~
e=hEK/
0q4b
B~43
&%0_
gaW|}
'-*;
:$K"
dVQ4
?,Eiw15:
dJ,T3j
.5|Y
L`q{Q
:	:[S
K~.j
kgB_S
|o\_8
e3p>
D"?|
*<%La
}M0/'
7g)y
,&|=
.vFo<
i8w_
uIQ(
6{b_DF*
/~aO}
ce'<y#
7"h1
NoI&
gYSu
8)ZZlx
z\p]
3;Iv2=
~}0k
M?$`
7n~H
b4bxX
p55O6'
hI$o
-Ai!pE
88W%v
t1|H
>O\%<
\wwR
s[of
~T5t
Au\v
;uJ6
O|MP
8.z<h
zB6>
sd?(Ho
m)jC
j}}{
WLP*
5w(@
aUFF
&.<q
<H	o<
9zPn_
{BuM
EF>jXL
Y5`I
Lz% 
aI}E5
s!k48jV
XdEGR3
p#pe
i!:O
iy4M
9v1Q
LF_?
KcJ^
HYGy
m5ZA
dqIX
njLfx
\f!w
iG=(
Jq| 6
\v;r
)b9U
!7!x
_?F'
'A ^g\
|mf#
d]B2Wy
er,+
.W7f
Rd%&
NStiq
FF,%
wkjX
5v"5
wDq<
xxOE
mScD
;.!O
sxRF]"
2\:F
x6&^
hE9f
@GmJA
vk{=
`|s`'-
L^G\s"
SM#*}
9uHG
'vZ3_
CVLA
rLoR
!^{d
vyPq
zax3
&l%B{
<:[u
}%^Bn^
0"2e
}7qm
]vI4
/E0,
Z,Ry
GUDt
pKA<
8yH<
U.~cl
	ud|RT
Mt<F
N%BH
??}X
QGX/
o=q,B
D'E#)
AMbt
DDTg
A7sW
*i@.
R7NQ
IWvM
iG^#
iGV	
qApvM0S
Fk|M
@4B$
|7_:
l& yPX
;z?(
%*{0]
>&@p
b-~k
vY,Q
=0DW
z{ g
2$*k
@KXcw
4S<J
.sPE
_~~C
9e#d
mp^c
l*8{
\+q9
9|Dm
MEW{
t1G&sP
l_%r(
-Vj>
naPTp
}GAe
,Wfq
7gqff	
KL5X#
Zy 5
A	{]v
%MZX
?Q![ 
8>2g
2h0{
pgWM
T\ >3v,
M18J
kd8\
rh<}
2H?(.
QH;]
9W':
pRt'X
kL##(
7azr{
4hD3wNn
^Pk]
=CXg
EtrF
0fU*
n{4~C3
ml!b~R
{sRl
m2i|
&u|#}
&R#%
<$J_
;-sm
`h0n
P(Z-N
j}URT
qJ,`bO
~C]l
N)GA
]X=T
s1enn>
p$oAh
[/?B
q;=q"
NEuIa8d
'ymO
AhQY
|U+U
gP@z
0oZB
`J*m
N\yL
o`Pj
pO5l
Vj"%1
9Zb>Cv5
Cj)*
|$<>
/?>a
Bq1'X
DuCW
2uDA#
u(mkB
WkC#z1o
e4t=
43M=U:
|E,6
! GA
a%2 
j(nF
x-C,
}h46
)Cf`
tIQz
olE.cf+
0VJ:1
q43a
;hQB
K.]2G
ALm~J
\J`U
qN:Z
"	8Y
HOzw
c!_AJ
=v1S
oo9.
$P7^0~
XxP5
v$lb
oDGq
hMp+NJ
_>q{
|/1xo
r>vX
6U%!
F;@X
B@zo
6RQDo<)
&p"$
_ycYs,Mk+
>>Ia
aqE|g
`6n-
`B^>
w#:_J
zs2I
aEro
DGU6
{6mL
$3-?0
M%=_
V2Wp
iO+>
|~y!Z
5]J7
.#k4qc":
UA9}R
-X5J
5t{3S
o4s^<uijG
6\v0
jhXs
iPe7Xj
9-5f
%MDw
']?Z
>(6@7n
Zo"M
O/B+
vQX"
oell=P
(rKo
G=#?V
-ysJ
K|nq}_|1\
MCzF.B
U*^U
ujFa
e*KT
N3NGA_
h88h
`* d
I3	V
r)A'
CPlH
rZ@w
y\nnm5
7mfv>
*NoQ
mu(Ez&
IIF9
k"OF%
r>VGs
cIT3
(q*>JDo%
P'#Xj
nw\S:
17.E
1#w%
K}_\
Bf|#
?{T[
qflGN
%Sxu
.DI'
=DB.
zrOE
>y6hL
#[({
DV][
pO/<
"q6H
R1sL
V:>}
JeZ6
j<Yy0
@[RJ
N|W5
7DXt1
0Coe
@G	-}X
]{PY<
\=G6e
Q%Zf
!Vg~
OG?`
	""^u%
e#p_
O8|S
,kP*)6#
MWw4
Ktpr
~(I(
BDg7
{lu]5
#o~<
8TXp
nb0y
iU*[
96xt
"n1/;&
UPsS
q-/.
&W{y"
KbdO
#37/>
G"KB
m&i5o
JH%/
R+6u
qW-0
nB$pl
[8J%
8]hk
%V[F
C\'}
\.&D
/U)i+
;u_#
j^[M
*vk`'
}8qt8/
e.,+
uQdve
(e'TC
81,v
h8Be
&N.x
@tILq
:l17
651g
aNFJg
+O<f
;Xe%
"}3e
diHQ
GH~G
vrW\dju
3jx&^o]
G6Ws
P\!15
^rb$W39
=sc^
}u|"
	smR=c5n[
ej=3
g30+G
_ZB>
}`[FS
Fd9x
M 5C9
ld[;
cUviu
6=Gn
~,H~
|JiI
%U`XUq|_/5
7];*
U|;}
2dZ,I
o[,8
^b,w
,koSc
	Lk,
=_iD
bv7WW
!)<y
yO0n
s>Y,}
s*7^
Up5UJ
79vk
fa-`PO`#Q
L'6c
0_8n
N(Rr
L	;s
-n:Pw
>UO0
NwO6
8M&J
ZLGb&G
Lt	T
;i;A<
B|)w
RXcwD5=j
ZY6y\
:_`1
 ^10
y ^E
VY[s
sDTs
yRr4
N:)7
K1I|
g_K6>'
1sqh
vR?i
=lBI
4@M6
Sdsv
K27U,
j<F 
$a#c(
Gc]'
9Z#@r8
6Km7
^b-V
l>~X
1rsz
!ZE\w
96<J
xNnC
H0/:
(9Bm.
'0JH
\Sr!
U5xE
*!+bw
/,O6
|bB1
gq$>
u6Sk
xI]X
=uFV
5D<k.
$1pKa
B5iN[b
<Y[0"
 MK?
sO;^
"|Xi
Lfwim
^4LK
.&v5
Goll
x\Af
tLx`D
]|	C
/IR~
W@=?{5
\r~#
7o[`
7Q!C6
]9ym
pxNXh
T~D[
x	$1YQ
B"x r4
HD8'
n_Ad
=c@3
r/&=
yg$?
i?3,w
pX^$D
B>W4pa
sc8fU
#5F~rG|
Jz b
-`i3
,7r\
X}W [
Y-(T
ozU|
;D,]
d"6D
W!g,
Lc_B
>/!*~
If_R
YS'(
O[)ImV
QvzN
s-`S
7"9>?&`
iJUZ
L%=}
}	;^
CWlJ
SLng
93P&
KoH&
jw^$
N~8a
!j28'
]onGQr'i"6i
{]9+
W'6u
:VTK
^g,_4
4qWr
0U5b
d771
T(3G
=wbG
I,!}
a=br
J@p3r
.t9F]n
\8i/
x9ip
=vMk
k?/|??
GQL^T
/$DQ{
u	|y
;vZn
3;@L
q|(6
Aszzo
[GCL
t9/A~1\.
=qcb_u#
0U[H1B
ih6_t
<p	|@
s!yR
e*JC
WP/m3
h"(6
)r{S
&sD|B@x
mh)1
~I\>?0S
8]`>
PHT/g
?Qv\
Cu#N
x+@BN
jxY-
@-B8^	
=f|9/
$_n:R
tx=(
53eQu
@hm7]
Cq2Lw
O\}Q
q, b
{<\]
Js\^E
&AOI
H>~8
{K_L
r)FQ
$U>D
ES2qT
{5Lj%wh^A
PCl[
\yHn@
X<{P5C
9zHe
{vx9\
`sN1)^.
NFhQ
TB{p
)}v^
Bu&Y
Zj?bs
3	b3
)8]t
Ldh}Z
UB4g
6]<E
`Av6h.
Q>R.
EfJx
t-kV4R7
S|hA
mE^+9<},.
]?>~
)~*a
+gf^
PBw3
^>F=@
V#@[|I9
KB<[
sJ5%
p+sM
 >x(oF
	caT	o	
>XC\
nck*
%Ivfq=n
!/) 
$b &
&9z2
TO:B
C7"'
KT8G(g
$M"#ey
g<5h
#y};
^*!C2?
1O>X
Qf>6
^8(T
VLMy
i9/&
ok(>
t(=`J
u],^"
&IW^
leeg
Gi;_
~#`0
,X8=
>~^5
hatY
!9vre#
TZ!o
$V|S
\>|X
(Qr*
!G"<
?{42
P(yh\
)."HU
wA:	
R/u	
 /MI
L_/,
%y</2
Sj D
=*tG%*
x8u\A.
QPP8
s8z)
T{X*dn
M5|h
LTGv
NNAF
l?:iP
}* FW
9DVM
,/!e
RKqa
SdSt
 _<+
'@<K
@]T_
Ka)_"0>w
xNo`
(GT^
AwW+
<'SqE
$s_u
{@,'.
)AvL
m`J{
y,aV;o
 r'x
gNfra
9,96pG
f73A
a_J@~
bv(Qd
.zn_8F
`m]I
]69[nW
M Md~4A
=+9f
spmp
(uxN
]sK^f
)Xfh\
>tl\_
	_iL
&<M;
|Zu1
/d0M
9l*dD
Bt<nmt8
1NOq
XH|j!
$X0w
3o"{0
1=g/c
31o@p
k(sf
=E*w
q>  
 C9Y+/
v{NTZx
5r!|7
*Jxf
lz)!n
7Y({m
qLT>5
6x;p
_J@y
d#?t
QD;Hj
QG~	<!
{UKlZvL%Zq_
{NlL
R(\J
mSVx
t]oC
8.sF
3@xVcU1;H
d8x!Im
r)	^
5?Ix
@W:)
a^$	:
tZZy
26$#o8
=tG75
2gyi
Jar/
=0y9
S(6x
6/BC>UR
"q~3"
KG,o
Lp-N
?sk+
sQ4T
vv/x
9=d'%
vnC-
fIidO
\i1k
f!c>
7c$!T
WOI{
\^re<>Z
f4X9::r
q?/	
!C<]
]9Fg
i&f2B
C3K$k
W X-
aOIB0
)!:UlnRw
Pz|#
i>b8P3\
K@@?
Al_t
`	/fp
Q%~@
U&>y
/z*[D
zvM>1
/z~?
K|n 
[	zN
b$c]}
L~.#
.Vfo
'6MI
;xe>
9 tO!
XC||k
coK8
mu+a
G_bg
uN*3
kIHp
zCb;
w*x}
p	?!
dEz.;
8}'0
{^a'
`Szv
Z$K3
,sk+
"ARK
+tO0/]
r2!p
d?2h
z'nKC
;Zhi
o}&=
<kkX
#gK}
g63#
c q:
J?v6
e86	}i,
aP\k/
8hb[
$z14
j/b8
gsNh!
qgy.`K
{B^L
})L~
	~YM~H
|n9Z
hj6nq
C|U(
.^D;p
#"9i
.m.b(
i^$@
q1=7
xT5|
Hoa@r
XG>b
[81e/
Knd?
,)?d
'(Z5
zM|P
osH~z
{@q.X
=d>A
bS3HuF
R~<x
n"bLU:!
0ov)
B;C'}
g|?@
g$$yT
9aP<
IHo_8
0lq[
	{."
fUH<7
@uz/
R*g 
;t(?
c#DU
z1B~
A<"^
 U_4
9E^AP
U q_
Dx_M
#'u{
SDA]O
[S*/
gp5KD
=G<9
h+VlY
AwoB
taSM8
Rz"\
T^8	=sYbp
Y1*C
1ZqJFA<
h]Z 
x"%yH
g^R4
Qp$Q
sa+tR
R4BJ
=Ks@H
z|R=
5@:wC
]x)5?NY
	q_~
G6i+.
jesVBb
sHB_
EfAK
M";@W
71A&
~-)w0x:;4
0z.B{V
*(8X<[$
gu	<
apV}
QG>7
_4$?e
grW 
Fe<fz
8p&\
SYAmI
[Qs^$
pG/'
Uhs$|
P;]$
f\(m
OI }
2z"N$
\R9~&
'2=c
c{f*7C
~e&.
)~p 
\T~DRj
fC k
hla:y
;T&^
E;(n
Nudi
/2&|Z
mu	9
oaL~
}9!?
galu
fSnLGV
93sN[
^B{j
9R(xi
"gqR
EWh-
U-}o
^RtX
0%MN@
7D>k
AlRHL
CZ[C
zUz@
u#)3
t	Cy
*,Jz	
+D<G5
^otC
`uV[k
8y>0q<
4NAO
on%-
ZN^{=
9CD0w
Q22}=
9E>}6
.z3&
dNBd
:Qi^T
KX7~
nU94
tAxL.
+	~Q<>
M;#<
)4 c
A:t	7
t;,M
ZkY-
k:*{
 	DG
s=)Q
4t-y
/Fz~G
_G,(
$n0,
E>|Fok
S0tD
Jve[F
2`Wu
#p4{
D5FP
Nt9q
bQfF
3/:%
X%F[
7j%;B.o
F{d|E
=znz&/
XE>x
^X<oz~l
|QAt
F445
G<iXnA{M
`H>0
==.2T
P5Ky
Y4Lv
i_47
5g3aT<
eVtX
3L/:
2]^S
EBe6
bCZ'-
tbO`%
:Sxo6
H[o^
-{1~
#5=9
!)ss
CyhJ{
%}E$
'Uf(iCw
5=(k=
S7%h1(
sRN9{5
e'l,
xE,~T
\wt#O
Kz||
2VeJ/
\68{
fvE}
<B\t:Vf
=TNx
sLu1
b>y7C
#ff(
$d@|"g=0
2<vP
"}Y-
|(<E
N,!!
	=4:
2jxT
dyo]=
y-el
iJ9ff&
>K}#
*=$pxaq
p)ds
<>Sg
j#yI
E~u7
HC/)
sx>S
LJsF
))I=6ix
t ][
C{Hm
=cx0
rphh3
<E*/
aKgo
X./*A
<F!	Rt
;.'&
J]F!C
"z|2
VqtF	o
GtHcm
S[vD
>lA<}
e<(|
z,I/
,PcN
s<=V
rh,O
S<70b
(|	#
	5V`q`H~
>k{+Su)A
8~%nO
c|N@
P}M/s
)4~F1
K\Gx
_WMn
+/Ah|I
^lDTv
]L{0"{
ZedH
[BNt
R#rR
W"?_
#}N 
C6]b
a<gj
=*jT
-<A2A
	@R:
gJH_
W2~L
%!wwm-
.n wj
xsZ]
BIy-P
JF68,	2x
fCozH
kr/8
wL_U!
M8/J
LO`^a
XPb>
XAMEA60
]Z<	q
d|_M
=g$(3I
Lb<5
;g<6
>.f0
3)P2{
%VOA
s_qT
uqU$$nq!cB{k
hD#7
z[j#D
FaN|
+l:<
Yf^^
n}1!~$w
sj!'
i+_M
KWm6
+cA=/F
=MzT
.:fo
oMM}
fUa!
|n"S
dkC2
5"r}
sPfD
glJP
O Ef%
K)r_
(#9y_
6:Ww]
F~0.
P)SM%
]L.b;
e?{*
4h~f
EW=[zG
8pv`z
621Q}0
nH|1
e'Te8K
d%Qx
-bO#
w?dA
aoTc
`0!Q$ta
pq)'
<U@R#
]Qv>
6g'{DK
.=dH
RnpIJH
\n:=
MYS 
@\Em!-
*Jpc
o=hh
ue9 
3&byh
E;&u ;oU
6|(X
=$_zA
`]&V
SdXZ
Z(:A
vT_	
Apx=
;Phm
3g;=
|-04
ie?&
%$s~+Z
>#T^
Fs\E
:-8ih
96~g
2t];!
#pq>
=}N:
HI\b
(8T;
1sS(
t\|R
'9ONS
C!fA
NigL
8!;Fc
1;gT7
/U;o.7
6j9a
f*D}N
Laew
9w[E>
E^+6
It](
6#pH
..	0
_:PG4hb
Jz,(3^B
+WDm
hKmWU
ku	 
t:fU
|6mO
5zPP
6&s=
nSf&
)8:q)U
~>} 
tN$i
 ~Hd
)Dg|
N	v"}
+QZ20RL
2w|(
	d8AG
~)|l
'O1n
@$KT"
KX[)
vhE@;R
x ql
QlwK
~@YG
9hso
[`9Mw
XCmZ n}
D}!{}
~)mp
8_|*
UUILT
TbU_;
OL0[
]%~r
>5|z_
H#s;
|f;'?
X$a] 
Rfn0
0pn;n
pvFOm
Vim1
u4ol!	
<FZ;
J$l{
jt6'
Swnv
p=,n
^6b~
xoeW
ha#F
tOX<j
y0E_
aNye
,1^>E
G>f~Q,
:wk'
%x!:
{N?h)
2)dN
	&18H
W_o,
KH B
(FMtG
Z~[x
,`,@
t(dg
[|a_|w
-8gL
y2">X9]
]JY-c0m
'M>@
xwxn3
% 8j
<xO!
$5|U
=GrN
QO:|
AN~I
!}}X
 Td<
VQf2
i;	O
i~wT
=bYv
:7LT
0f	=
_S`[
>Jh8
:T\'\
@Q9}
X4m;0
y#\=
]j%3
H7Ox
$TR;VC
hP|k
~|(}
='G5
BO$x0
47v_O
ndy<
<YR;
1t5XxBp
%WVw
;n_?
LJnz
P1P|
+ ,'
m<R\P
e	0]
v=$_
$x[M=
x(2P_
[gL'
Wg~I
F`oE
cEf!
K#$X
h4T|E
ux8O
ejWo
>`A;
t}om
M56w
HJT$<
_kQ\V
+|5m
d98g
=;-.
 W91'
